<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core.Windows</name>
  </assembly>
  <members>
    <member name="T:PalmSens.AuxInput.AuxiliaryInputCollection">
      <summary>
            Collection of possible auxiliary input types
            Also contains the selected aux. input
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputCollection.#ctor(System.Collections.Specialized.StringCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputCollection" /> class.
            </summary>
      <param name="stringCollection">The string collection.</param>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputCollection.AuxInputSelected">
      <summary>
            Gets or sets the aux input selected.
            </summary>
      <value>
            The aux input selected.
            </value>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputCollection.SaveToSettings">
      <summary>
            Saves the list to PalmSens.Core.settings.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.ADUCUploader">
      <summary>
            Summary description for ADUCUploader.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.#ctor(System.IO.Stream)">
      <summary>
            Create a new ADUCUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.ADUCUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ADUCUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ADUCUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.WriteData(System.Int64,System.Byte[])">
      <summary>
            Write to the data memory
            </summary>
      <param name="address">address in memory to write to</param>
      <param name="data">data to write to memory</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.SendReset">
      <summary>
            Reset the currently connected device. 
            </summary>
      <remarks>
            This will restart the firmware.
            </remarks>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.Reset">
      <summary>
            Reset the device. 
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.WaitVersion">
      <summary>
            Wait for receiving a 25-byte processor version.
            </summary>
      <returns>string with processor details</returns>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.ClearCodeMemory">
      <summary>
            Clear code memory of remote device
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.ClearCodeDataMemory">
      <summary>
            Clear code and data memory of remote device
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.RunFirmware">
      <summary>
            Run firmware from default location
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.#ctor(System.IO.Stream)">
      <summary>
            Create a new ARMUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.ARMUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ARMUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ARMUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.SAM_BA_APPLETS_VERSION">
            Refers to the Version of SAM-BA 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_INIT">
            Applet initialization command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_FULL_ERASE">
            Applet full erase command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_WRITE">
            Applet write command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_READ">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_LOCK">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_UNLOCK">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_GPNVM">
            Applet set/clear GPNVM command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_SECURITY">
            Applet set security bit command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BUFFER_ERASE">
            Applet buffer erase command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BINARY_PAGE">
            Applet binary page command code for Dataflash.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_LIST_BAD_BLOCKS">
            List Bad Blocks of a Nandflash
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_TAG_BLOCK">
            Tag a Nandflash Block
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_READ_UNIQUE_ID">
            Read the Unique ID bits (on SAM3)
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_ERASE_BLOCKS">
            Applet blocks erase command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BATCH_ERASE">
            Applet batch full erase command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_RESET">
            Applet reset command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_SUCCESS">
            Operation was successful.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_DEV_UNKNOWN">
            Device unknown.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_WRITE_FAIL">
            Write operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_READ_FAIL">
            Read operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_PROTECT_FAIL">
            Protect operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_UNPROTECT_FAIL">
            Unprotect operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_ERASE_FAIL">
            Erase operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_NO_DEV">
            No device defined in board.h
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_ALIGN_ERROR">
            Read / write address is not aligned
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_BAD_BLOCK">
            Read / write found bad block
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_FAIL">
            Applet failure.
        </member>
    <member name="T:PalmSens.Windows.Comm.SAMBAUploader.AppletCommType">
            Communication link identification
        </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Create a new ADUCUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.SAMBAUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.SAMBAUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.UploadApplet(PalmSens.Comm.Firmware)">
      <summary>
            Uploads the applet to RAM that is used to program the firmware from RAM into flash, since this cannot be done directly.
            </summary>
      <param name="appf">The firmware</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="T:PalmSens.Windows.Comm.FTDIStream">
      <summary>
            Communication with the PalmSens using a FTDI USB cable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Flush">
      <summary>
            Flush the stream
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.SetLength(System.Int64)">
      <summary>
            Change the length of the stream (not implemented, will always throw a NotSupportedException)
            </summary>
      <param name="value">new length</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Seek to the specified position (not supported)
            </summary>
      <param name="offset">
      </param>
      <param name="origin">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanWrite">
      <summary>
            Whether writing to this stream is possible (always returns true)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanRead">
      <summary>
            Whether reading from this stream is possible (always returns true)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanSeek">
      <summary>
            Whether seeking in this stream is possible (always returns false)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.Length">
      <summary>
            Length of this stream (always throws a NotSupportedException)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.Position">
      <summary>
            Current position in the stream (always throws a NotSupportedException)
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Close">
      <summary>
            Closes the port
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read data from the stream
            </summary>
      <param name="data">buffer to store the data</param>
      <param name="offset">offset in the buffer</param>
      <param name="count">number of bytes to try to read</param>
      <returns>number of bytes read</returns>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Write to the stream
            </summary>
      <param name="data">data to write</param>
      <param name="offset">offset to start writing at</param>
      <param name="count">number of bytes to write</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIPort.ToString">
      <summary>
            Returns string description of instance.
            </summary>
      <returns>string description</returns>
    </member>
    <member name="T:PalmSens.Windows.Comm.FTDIPort.FTDIException">
      <summary>
            Exception thrown during communication trouble using FTDI cable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIPort.GetAvailableDevices(System.UInt32[])">
      <summary>
            Returns a list of connected FTDI cables. Only works when no connections have been made yet.
            </summary>
      <returns>Array list with serial numbers</returns>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.DTR">
      <summary>
            Change Data Terminal Ready line.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.CBUS0">
      <summary>
            Change CBUS0 IO pin.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.RTS">
      <summary>
            Change Ready to Send line.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.TCPServer">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.TCPServer.Start(System.Net.IPEndPoint)">
      <summary>
            Start the TCP server
            </summary>
      <param name="endpoint">port to listen on</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.TCPServer.Stop">
      <summary>
            Stop a running TCP server
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.WebFirmware">
      <summary>
            Obtain firmare from the web.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.WebFirmware.#ctor(System.Double,PalmSens.Comm.enumDeviceType)">
      <summary>
            Instantiate new firmware.
            </summary>
      <param name="version">current version</param>
      <param name="type">device type</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.BluetoothDevice.Open(System.Int32)">
      <summary>
            Baudrate does not apply for establishing the Bluetooth connection
            </summary>
      <param name="baudrate">Ignored.</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.FTDIDevice.Open">
      <summary>
            Opens this instance and auto detects the baudrate if nescessary.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Devices.FTDIDevice.Open(System.Int32)">
      <summary>
            Opens the connection at the specified baudrate.
            </summary>
      <param name="baudrate">The baudrate.</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.TCPDevice.Open(System.Int32)">
      <summary>
            Baudrate does not apply for establishing the Bluetooth connection
            </summary>
      <param name="baudrate">Ignored.</param>
    </member>
    <member name="M:PalmSens.Windows.AutosaveDuringMeasurement.#ctor(PalmSens.Comm.CommManager,System.Single,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.AutosaveDuringMeasurement" /> class.
            </summary>
      <param name="comm">The CommManager.</param>
      <param name="session">The session manager to save.</param>
      <param name="interval">The interval in minutes.</param>
      <param name="filepath">The filepath.</param>
    </member>
    <member name="M:PalmSens.Windows.AutosaveDuringMeasurement.Start">
      <summary>
            Starts this instance.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Data.MeasurementSet">
      <summary>
            This library is only useful for putting Curve data in a DataTable.
            It is not essential in any way.
            </summary>
    </member>
    <member name="F:PalmSens.Windows.Data.MeasurementSet.Measurement">
      <summary>
            Returns the Measurement
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.MeasurementSet.#ctor(PalmSens.Measurement)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.MeasurementSet" /> class.
            </summary>
      <param name="m">The m.</param>
    </member>
    <member name="T:PalmSens.Windows.Data.DataSetTable">
      <summary>
            Returns Curve information as a System.Data.DataTable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.DataSetTable.#ctor(PalmSens.Data.DataSet)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.DataSetTable" /> class.
            </summary>
      <param name="dataSet">The data set.</param>
    </member>
    <member name="M:PalmSens.Windows.Data.DataSetTable.GetColumnNames">
      <summary>
            Gets the column names.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Windows.Data.CurveTable">
      <summary>
            Returns Curve information as a System.Data.DataTable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.CurveTable.#ctor(PalmSens.Plottables.Curve,PalmSens.Units.Prefix)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.DataSetTable" /> class.
            </summary>
      <param name="c">The curve.</param>
      <param name="prefix">
      </param>
    </member>
    <member name="T:PalmSens.Windows.Data.EISTable">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.EISTable.#ctor(PalmSens.Plottables.EISData,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.EISTable" /> class.
            </summary>
      <param name="eis">The eis.</param>
    </member>
    <member name="T:PalmSens.Windows.LoadSaveHelperFunctions">
      <summary>
            Functions for saving and loading files.
            - Working with relative paths
            - Save rich text to single line
            -...
            </summary>
    </member>
    <member name="P:PalmSens.Windows.LoadSaveHelperFunctions.AssemblyDirectory">
      <summary>
            Gets the assembly directory.
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.LoadMethodDialogFilter">
      <summary>
            Use as filter for load method file dialog
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevLoadDialogPath">
      <summary>
            The default dialog path for loading files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevSaveDialogPath">
      <summary>
            The default dialog path for saving files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevMethodLoadDialogPath">
      <summary>
            The default dialog path for saving method files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevMethodSaveDialogPath">
      <summary>
            The default dialog path for saving method files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.CurrentPath">
      <summary>
            The path of the current file to use for relative paths
            </summary>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.MakeRelative(System.String)">
      <summary>
            Makes an absolute path relative to the location of the file
            </summary>
      <param name="absolutepath">The absolute path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.ShortenPathForDisplay(System.String,System.Int32)">
      <summary>
            Shortens the path for display.
            </summary>
      <param name="fullPath">The full path.</param>
      <param name="maxLength">Max length of the string. Default is 60 characters, minimum is 20 characters</param>
      <returns>A path with a \...\ parts in it if longer than maxLength</returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.SaveStringToFile(System.String,System.String)">
      <summary>
            Saves the string to the given filepath using the default encoding from DataFile.DefaultEncoding
            </summary>
      <param name="contents">The contents.</param>
      <param name="filepath">The filepath.</param>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.SaveStringToFile(System.String,System.String,System.Text.Encoding)">
      <summary>
            Saves the string to the given filepath
            </summary>
      <param name="contents">The contents.</param>
      <param name="filepath">The filepath.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.MakeAbsolute(System.String)">
      <summary>
            Makes an absolute path relative to the location of the file
            </summary>
      <param name="inputpath">The inputpath.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.GetNextAvailableDataFilename(System.String,System.String)">
      <summary>
            Gets the next available data filename.
            Returns a filepath as filepath-#.extension, where # is an incremental number.
            </summary>
      <param name="filepath">The filepath.</param>
      <param name="extension">The extension.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.GetValidFilename(System.String)">
      <summary>
            Filters out invalid characters and returns cleaned filename.
            </summary>
      <param name="filename">The filename.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadMethod(System.String,System.Boolean)">
      <summary>
            Loads the method. Allowed extensions: .psmethod, .pst and .pss
            </summary>
      <param name="filepath">The filepath.</param>
      <param name="isCorrosion">if set to <c>true</c> [is corrosion]. This is only required for old style method files with extension .pmt and .pms.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadCurve(System.String,System.Boolean)">
      <summary>
            Loads the curve and tries to load the corresponding method file if exists.
            </summary>
      <param name="filepath">The filepath.</param>
      <returns>Curve with corresponding method</returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadMuxMeasurementFile(System.String,System.Boolean)">
      <summary>
            Loads the mux measurement file and tries to load the corresponding method file if exists.
            </summary>
      <param name="filepath">The filepath.</param>
      <returns>Measurement with curve data and corresponding method parameters</returns>
    </member>
    <member name="T:FTD2XX_NET.FTDI">
      <summary>
            Class wrapper for FTD2XX.DLL
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.#ctor">
      <summary>
            Constructor for the FTDI class.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.#ctor(System.String)">
      <summary>
            Non default constructor allowing passing of string for dll handle.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Finalize">
      <summary>
            Destructor for the FTDI class.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_STATUS">
      <summary>
            Status values for FTDI devices.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_OK">
      <summary>
            Status OK
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_HANDLE">
      <summary>
            The device handle is invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_FOUND">
      <summary>
            Device not found
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED">
      <summary>
            Device is not open
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_IO_ERROR">
      <summary>
            IO error
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INSUFFICIENT_RESOURCES">
      <summary>
            Insufficient resources
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_PARAMETER">
      <summary>
            A parameter was invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_BAUD_RATE">
      <summary>
            The requested baud rate is invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_ERASE">
      <summary>
            Device not opened for erase
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_WRITE">
      <summary>
            Device not poened for write
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_FAILED_TO_WRITE_DEVICE">
      <summary>
            Failed to write to device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_READ_FAILED">
      <summary>
            Failed to read the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_WRITE_FAILED">
      <summary>
            Failed to write the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_ERASE_FAILED">
      <summary>
            Failed to erase the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_NOT_PRESENT">
      <summary>
            An EEPROM is not fitted to the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_NOT_PROGRAMMED">
      <summary>
            Device EEPROM is blank
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_ARGS">
      <summary>
            Invalid arguments
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_OTHER_ERROR">
      <summary>
            An other error has occurred
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DATA_BITS">
      <summary>
            Permitted data bits for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DATA_BITS.FT_BITS_8">
      <summary>
            8 data bits
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DATA_BITS.FT_BITS_7">
      <summary>
            7 data bits
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_STOP_BITS">
      <summary>
            Permitted stop bits for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STOP_BITS.FT_STOP_BITS_1">
      <summary>
            1 stop bit
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STOP_BITS.FT_STOP_BITS_2">
      <summary>
            2 stop bits
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_PARITY">
      <summary>
            Permitted parity values for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_NONE">
      <summary>
            No parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_ODD">
      <summary>
            Odd parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_EVEN">
      <summary>
            Even parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_MARK">
      <summary>
            Mark parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_SPACE">
      <summary>
            Space parity
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_FLOW_CONTROL">
      <summary>
            Permitted flow control values for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_NONE">
      <summary>
            No flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_RTS_CTS">
      <summary>
            RTS/CTS flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_DTR_DSR">
      <summary>
            DTR/DSR flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_XON_XOFF">
      <summary>
            Xon/Xoff flow control
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_PURGE">
      <summary>
            Purge buffer constant definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PURGE.FT_PURGE_RX">
      <summary>
            Purge Rx buffer
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PURGE.FT_PURGE_TX">
      <summary>
            Purge Tx buffer
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_MODEM_STATUS">
      <summary>
            Modem status bit definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_CTS">
      <summary>
            Clear To Send (CTS) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_DSR">
      <summary>
            Data Set Ready (DSR) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_RI">
      <summary>
            Ring Indicator (RI) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_DCD">
      <summary>
            Data Carrier Detect (DCD) modem status
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_LINE_STATUS">
      <summary>
            Line status bit definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_OE">
      <summary>
            Overrun Error (OE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_PE">
      <summary>
            Parity Error (PE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_FE">
      <summary>
            Framing Error (FE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_BI">
      <summary>
            Break Interrupt (BI) line status
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EVENTS">
      <summary>
            FTDI device event types that can be monitored
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_RXCHAR">
      <summary>
            Event on receive character
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_MODEM_STATUS">
      <summary>
            Event on modem status change
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_LINE_STATUS">
      <summary>
            Event on line status change
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_BIT_MODES">
      <summary>
            Permitted bit mode values for FTDI devices.  For use with SetBitMode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_RESET">
      <summary>
            Reset bit mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_ASYNC_BITBANG">
      <summary>
            Asynchronous bit-bang mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_MPSSE">
      <summary>
            MPSSE bit mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_BITBANG">
      <summary>
            Synchronous bit-bang mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_MCU_HOST">
      <summary>
            MCU host bus emulation mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_FAST_SERIAL">
      <summary>
            Fast opto-isolated serial mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_CBUS_BITBANG">
      <summary>
            CBUS bit-bang mode - only available on FT232R and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_FIFO">
      <summary>
            Single channel synchronous 245 FIFO mode - only available on FT2232H channel A and FT232H
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS">
      <summary>
            Available functions for the FT232R CBUS pins.  Controlled by FT232R EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT232R CBUS EEPROM options - Tx Data Enable
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_PWRON">
      <summary>
            FT232R CBUS EEPROM options - Power On
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT232R CBUS EEPROM options - Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT232R CBUS EEPROM options - Tx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT232R CBUS EEPROM options - Tx and Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT232R CBUS EEPROM options - Sleep
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK48">
      <summary>
            FT232R CBUS EEPROM options - 48MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK24">
      <summary>
            FT232R CBUS EEPROM options - 24MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK12">
      <summary>
            FT232R CBUS EEPROM options - 12MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK6">
      <summary>
            FT232R CBUS EEPROM options - 6MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_IOMODE">
      <summary>
            FT232R CBUS EEPROM options - IO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_WR">
      <summary>
            FT232R CBUS EEPROM options - Bit-bang write strobe
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_RD">
      <summary>
            FT232R CBUS EEPROM options - Bit-bang read strobe
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS">
      <summary>
            Available functions for the FT232H CBUS pins.  Controlled by FT232H EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TRISTATE">
      <summary>
            FT232H CBUS EEPROM options - Tristate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT232H CBUS EEPROM options - Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT232H CBUS EEPROM options - Tx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT232H CBUS EEPROM options - Tx and Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_PWREN">
      <summary>
            FT232H CBUS EEPROM options - Power Enable#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT232H CBUS EEPROM options - Sleep
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_0">
      <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 0
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_1">
      <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 1
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_IOMODE">
      <summary>
            FT232H CBUS EEPROM options - IO Mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT232H CBUS EEPROM options - Tx Data Enable
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK30">
      <summary>
            FT232H CBUS EEPROM options - 30MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK15">
      <summary>
            FT232H CBUS EEPROM options - 15MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK7_5">
      <summary>
            FT232H CBUS EEPROM options - 7.5MHz clock
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS">
      <summary>
            Available functions for the X-Series CBUS pins.  Controlled by X-Series EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TRISTATE">
      <summary>
            FT X-Series CBUS EEPROM options - Tristate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT X-Series CBUS EEPROM options - RxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT X-Series CBUS EEPROM options - TxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT X-Series CBUS EEPROM options - TxRxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_PWREN">
      <summary>
            FT X-Series CBUS EEPROM options - PwrEn#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT X-Series CBUS EEPROM options - Sleep#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_0">
      <summary>
            FT X-Series CBUS EEPROM options - Drive_0
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_1">
      <summary>
            FT X-Series CBUS EEPROM options - Drive_1
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_GPIO">
      <summary>
            FT X-Series CBUS EEPROM options - GPIO
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT X-Series CBUS EEPROM options - TxdEn
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK24MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk24MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK12MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk12MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK6MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk6MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger">
      <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger_N">
      <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_TXE">
      <summary>
            FT X-Series CBUS EEPROM options - I2C_TXE#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_RXF">
      <summary>
            FT X-Series CBUS EEPROM options - I2C_RXF#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_VBUS_Sense">
      <summary>
            FT X-Series CBUS EEPROM options - VBUS_Sense
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_WR">
      <summary>
            FT X-Series CBUS EEPROM options - BitBang_WR#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_RD">
      <summary>
            FT X-Series CBUS EEPROM options - BitBang_RD#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Time_Stamp">
      <summary>
            FT X-Series CBUS EEPROM options - Time_Stampe
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Keep_Awake">
      <summary>
            FT X-Series CBUS EEPROM options - Keep_Awake#
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_FLAGS">
      <summary>
            Flags that provide information on the FTDI device state
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLAGS.FT_FLAGS_OPENED">
      <summary>
            Indicates that the device is open
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLAGS.FT_FLAGS_HISPEED">
      <summary>
            Indicates that the device is enumerated as a hi-speed USB device
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT">
      <summary>
            Valid values for drive current options on FT2232H, FT4232H and FT232H devices.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_4MA">
      <summary>
            4mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_8MA">
      <summary>
            8mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_12MA">
      <summary>
            12mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_16MA">
      <summary>
            16mA drive current
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DEVICE">
      <summary>
            List of FTDI device types
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_BM">
      <summary>
            FT232B or FT245B device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_AM">
      <summary>
            FT8U232AM or FT8U245AM device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_100AX">
      <summary>
            FT8U100AX device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_UNKNOWN">
      <summary>
            Unknown device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_2232">
      <summary>
            FT2232 device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_232R">
      <summary>
            FT232R or FT245R device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_2232H">
      <summary>
            FT2232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4232H">
      <summary>
            FT4232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_232H">
      <summary>
            FT232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_X_SERIES">
      <summary>
            FT X-Series device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_0">
      <summary>
            FT4222 hi-speed device Mode 0 - 2 interfaces
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_1_2">
      <summary>
            FT4222 hi-speed device Mode 1 or 2 - 4 interfaces
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_3">
      <summary>
            FT4222 hi-speed device Mode 3 - 1 interface
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222_PROG">
      <summary>
            OTP programmer board for the FT4222.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE">
      <summary>
            Type that holds device information for GetDeviceInformation method.
            Used with FT_GetDeviceInfo and FT_GetDeviceInfoDetail in FTD2XX.DLL
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Flags">
      <summary>
            Indicates device state.  Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Type">
      <summary>
            Indicates the device type.  Can be one of the following: FT_DEVICE_232R, FT_DEVICE_2232C, FT_DEVICE_BM, FT_DEVICE_AM, FT_DEVICE_100AX or FT_DEVICE_UNKNOWN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.ID">
      <summary>
            The Vendor ID and Product ID of the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.LocId">
      <summary>
            The physical location identifier of the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.SerialNumber">
      <summary>
            The device serial number
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Description">
      <summary>
            The device description
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.ftHandle">
      <summary>
            The device handle.  This value is not used externally and is provided for information only.
            If the device is not open, this value is 0.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EEPROM_DATA">
      <summary>
            Common EEPROM elements for all devices.  Inherited to specific device type EEPROMs.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.VendorID">
      <summary>
            Vendor ID as supplied by the USB Implementers Forum
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.ProductID">
      <summary>
            Product ID
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.Manufacturer">
      <summary>
            Manufacturer name string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.ManufacturerID">
      <summary>
            Manufacturer name abbreviation to be used as a prefix for automatically generated serial numbers
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.Description">
      <summary>
            Device description string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.SerialNumber">
      <summary>
            Device serial number string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.MaxPower">
      <summary>
            Maximum power the device needs
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.SelfPowered">
      <summary>
            Indicates if the device has its own power supply (self-powered) or gets power from the USB port (bus-powered)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.RemoteWakeup">
      <summary>
            Determines if the device can wake the host PC from suspend by toggling the RI line
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232B and FT245B devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number.  Should be either 0x0110 (USB 1.1) or 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT2232 devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number.  Should be either 0x0110 (USB 1.1) or 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.AIsHighCurrent">
      <summary>
            Enables high current IOs on channel A
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.BIsHighCurrent">
      <summary>
            Enables high current IOs on channel B
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFifo">
      <summary>
            Determines if channel A is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFifoTar">
      <summary>
            Determines if channel A is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFastSer">
      <summary>
            Determines if channel A is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFifo">
      <summary>
            Determines if channel B is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFifoTar">
      <summary>
            Determines if channel B is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFastSer">
      <summary>
            Determines if channel B is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232R and FT245R devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.UseExtOsc">
      <summary>
            Disables the FT232R internal clock source.  
            If the device has external oscillator enabled it must have an external oscillator fitted to function
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.HighDriveIOs">
      <summary>
            Enables high current IOs
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.EndpointSize">
      <summary>
            Sets the endpoint size.  This should always be set to 64
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertTXD">
      <summary>
            Inverts the sense of the TXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRXD">
      <summary>
            Inverts the sense of the RXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRTS">
      <summary>
            Inverts the sense of the RTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertCTS">
      <summary>
            Inverts the sense of the CTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDTR">
      <summary>
            Inverts the sense of the DTR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDSR">
      <summary>
            Inverts the sense of the DSR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDCD">
      <summary>
            Inverts the sense of the DCD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRI">
      <summary>
            Inverts the sense of the RI line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.RIsD2XX">
      <summary>
            Determines if the VCP driver is loaded
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT2232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALSlowSlew">
      <summary>
            Determines if AL pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALSchmittInput">
      <summary>
            Determines if the AL pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALDriveCurrent">
      <summary>
            Determines the AL pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHSlowSlew">
      <summary>
            Determines if AH pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHSchmittInput">
      <summary>
            Determines if the AH pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHDriveCurrent">
      <summary>
            Determines the AH pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLSlowSlew">
      <summary>
            Determines if BL pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLSchmittInput">
      <summary>
            Determines if the BL pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLDriveCurrent">
      <summary>
            Determines the BL pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHSlowSlew">
      <summary>
            Determines if BH pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHSchmittInput">
      <summary>
            Determines if the BH pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHDriveCurrent">
      <summary>
            Determines the BH pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFifo">
      <summary>
            Determines if channel A is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFifoTar">
      <summary>
            Determines if channel A is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFastSer">
      <summary>
            Determines if channel A is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFifo">
      <summary>
            Determines if channel B is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFifoTar">
      <summary>
            Determines if channel B is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFastSer">
      <summary>
            Determines if channel B is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            For self-powered designs, keeps the FT2232H in low power state until BCBUS7 is high
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT4232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ASlowSlew">
      <summary>
            Determines if A pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ASchmittInput">
      <summary>
            Determines if the A pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ADriveCurrent">
      <summary>
            Determines the A pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BSlowSlew">
      <summary>
            Determines if B pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BSchmittInput">
      <summary>
            Determines if the B pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BDriveCurrent">
      <summary>
            Determines the B pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CSlowSlew">
      <summary>
            Determines if C pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CSchmittInput">
      <summary>
            Determines if the C pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CDriveCurrent">
      <summary>
            Determines the C pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DSlowSlew">
      <summary>
            Determines if D pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DSchmittInput">
      <summary>
            Determines if the D pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DDriveCurrent">
      <summary>
            Determines the D pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ARIIsTXDEN">
      <summary>
            RI of port A acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BRIIsTXDEN">
      <summary>
            RI of port B acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CRIIsTXDEN">
      <summary>
            RI of port C acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DRIIsTXDEN">
      <summary>
            RI of port D acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CIsVCP">
      <summary>
            Determines if channel C loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DIsVCP">
      <summary>
            Determines if channel D loads the VCP driver
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACSlowSlew">
      <summary>
            Determines if AC pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACSchmittInput">
      <summary>
            Determines if the AC pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACDriveCurrent">
      <summary>
            Determines the AC pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADSlowSlew">
      <summary>
            Determines if AD pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADSchmittInput">
      <summary>
            Determines if the AD pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADDriveCurrent">
      <summary>
            Determines the AD pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus5">
      <summary>
            Sets the function of the CBUS5 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus6">
      <summary>
            Sets the function of the CBUS6 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus7">
      <summary>
            Sets the function of the CBUS7 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus8">
      <summary>
            Sets the function of the CBUS8 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus9">
      <summary>
            Sets the function of the CBUS9 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFifo">
      <summary>
            Determines if the device is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFifoTar">
      <summary>
            Determines if the device is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFastSer">
      <summary>
            Determines if the device is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFT1248">
      <summary>
            Determines if the device is in FT1248 mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248Cpol">
      <summary>
            Determines FT1248 mode clock polarity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248Lsb">
      <summary>
            Determines if data is ent MSB (0) or LSB (1) in FT1248 mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248FlowControl">
      <summary>
            Determines if FT1248 mode uses flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsVCP">
      <summary>
            Determines if the VCP driver is loaded
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            For self-powered designs, keeps the FT232H in low power state until ACBUS7 is high
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to X-Series devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number: 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACSlowSlew">
      <summary>
            Determines if AC pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACSchmittInput">
      <summary>
            Determines if the AC pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACDriveCurrent">
      <summary>
            Determines the AC pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADSlowSlew">
      <summary>
            Determines if AD pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADSchmittInput">
      <summary>
            Determines if AD pins have a schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADDriveCurrent">
      <summary>
            Determines the AD pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus5">
      <summary>
            Sets the function of the CBUS5 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus6">
      <summary>
            Sets the function of the CBUS6 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertTXD">
      <summary>
            Inverts the sense of the TXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRXD">
      <summary>
            Inverts the sense of the RXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRTS">
      <summary>
            Inverts the sense of the RTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertCTS">
      <summary>
            Inverts the sense of the CTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDTR">
      <summary>
            Inverts the sense of the DTR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDSR">
      <summary>
            Inverts the sense of the DSR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDCD">
      <summary>
            Inverts the sense of the DCD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRI">
      <summary>
            Inverts the sense of the RI line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDEnable">
      <summary>
            Determines whether the Battery Charge Detection option is enabled.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDForceCbusPWREN">
      <summary>
            Asserts the power enable signal on CBUS when charging port detected.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDDisableSleep">
      <summary>
            Forces the device never to go into sleep mode.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CSlaveAddress">
      <summary>
            I2C slave device address.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CDeviceId">
      <summary>
            I2C device ID
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CDisableSchmitt">
      <summary>
            Disable I2C Schmitt trigger.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248Cpol">
      <summary>
            FT1248 clock polarity - clock idle high (1) or clock idle low (0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248Lsb">
      <summary>
            FT1248 data is LSB (1) or MSB (0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248FlowControl">
      <summary>
            FT1248 flow control enable.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.RS485EchoSuppress">
      <summary>
            Enable RS485 Echo Suppression
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            Enable Power Save mode.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.IsVCP">
      <summary>
            Determines whether the VCP driver is loaded.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EXCEPTION">
      <summary>
            Exceptions thrown by errors within the FTDI class.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="inner">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
      </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetNumberOfDevices(System.UInt32@)">
      <summary>
            Gets the number of FTDI devices available.  
            </summary>
      <returns>FT_STATUS value from FT_CreateDeviceInfoList in FTD2XX.DLL</returns>
      <param name="devcount">The number of FTDI devices available.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceList(FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE[])">
      <summary>
            Gets information on all of the FTDI devices available.  
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfoDetail in FTD2XX.DLL</returns>
      <param name="devicelist">An array of type FT_DEVICE_INFO_NODE to contain the device information for all available devices.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the supplied buffer is not large enough to contain the device info list.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByIndex(System.UInt32)">
      <summary>
            Opens the FTDI device with the specified index.  
            </summary>
      <returns>FT_STATUS value from FT_Open in FTD2XX.DLL</returns>
      <param name="index">Index of the device to open.
            Note that this cannot be guaranteed to open a specific device.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenBySerialNumber(System.String)">
      <summary>
            Opens the FTDI device with the specified serial number.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="serialnumber">Serial number of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByDescription(System.String)">
      <summary>
            Opens the FTDI device with the specified description.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="description">Description of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByLocation(System.UInt32)">
      <summary>
            Opens the FTDI device at the specified physical location.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="location">Location of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Close">
      <summary>
            Closes the handle to an open FTDI device.  
            </summary>
      <returns>FT_STATUS value from FT_Close in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Read(System.Byte[],System.UInt32,System.UInt32@)">
      <summary>
            Read data from an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which will be populated with the data read from the device.</param>
      <param name="numBytesToRead">The number of bytes requested from the device.</param>
      <param name="numBytesRead">The number of bytes actually read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Read(System.String@,System.UInt32,System.UInt32@)">
      <summary>
            Read data from an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
      <param name="dataBuffer">A string containing the data read</param>
      <param name="numBytesToRead">The number of bytes requested from the device.</param>
      <param name="numBytesRead">The number of bytes actually read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.Byte[],System.Int32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.Byte[],System.UInt32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.String,System.Int32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.String,System.UInt32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ResetDevice">
      <summary>
            Reset an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_ResetDevice in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Purge(System.UInt32)">
      <summary>
            Purge data from the devices transmit and/or receive buffers.
            </summary>
      <returns>FT_STATUS value from FT_Purge in FTD2XX.DLL</returns>
      <param name="purgemask">Specifies which buffer(s) to be purged.  Valid values are any combination of the following flags: FT_PURGE_RX, FT_PURGE_TX</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetEventNotification(System.UInt32,System.Threading.EventWaitHandle)">
      <summary>
            Register for event notification.
            </summary>
      <returns>FT_STATUS value from FT_SetEventNotification in FTD2XX.DLL</returns>
      <remarks>After setting event notification, the event can be caught by executing the WaitOne() method of the EventWaitHandle.  If multiple event types are being monitored, the event that fired can be determined from the GetEventType method.</remarks>
      <param name="eventmask">The type of events to signal.  Can be any combination of the following: FT_EVENT_RXCHAR, FT_EVENT_MODEM_STATUS, FT_EVENT_LINE_STATUS</param>
      <param name="eventhandle">Handle to the event that will receive the notification</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.StopInTask">
      <summary>
            Stops the driver issuing USB in requests.
            </summary>
      <returns>FT_STATUS value from FT_StopInTask in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.RestartInTask">
      <summary>
            Resumes the driver issuing USB in requests.
            </summary>
      <returns>FT_STATUS value from FT_RestartInTask in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ResetPort">
      <summary>
            Resets the device port.
            </summary>
      <returns>FT_STATUS value from FT_ResetPort in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.CyclePort">
      <summary>
            Causes the device to be re-enumerated on the USB bus.  This is equivalent to unplugging and replugging the device.
            Also calls FT_Close if FT_CyclePort is successful, so no need to call this separately in the application.
            </summary>
      <returns>FT_STATUS value from FT_CyclePort in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Rescan">
      <summary>
            Causes the system to check for USB hardware changes.  This is equivalent to clicking on the "Scan for hardware changes" button in the Device Manager.
            </summary>
      <returns>FT_STATUS value from FT_Rescan in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Reload(System.UInt16,System.UInt16)">
      <summary>
            Forces a reload of the driver for devices with a specific VID and PID combination.
            </summary>
      <returns>FT_STATUS value from FT_Reload in FTD2XX.DLL</returns>
      <remarks>If the VID and PID parameters are 0, the drivers for USB root hubs will be reloaded, causing all USB devices connected to reload their drivers</remarks>
      <param name="VendorID">Vendor ID of the devices to have the driver reloaded</param>
      <param name="ProductID">Product ID of the devices to have the driver reloaded</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBitMode(System.Byte,System.Byte)">
      <summary>
            Puts the device in a mode other than the default UART or FIFO mode.
            </summary>
      <returns>FT_STATUS value from FT_SetBitMode in FTD2XX.DLL</returns>
      <param name="Mask">Sets up which bits are inputs and which are outputs.  A bit value of 0 sets the corresponding pin to an input, a bit value of 1 sets the corresponding pin to an output.
            In the case of CBUS Bit Bang, the upper nibble of this value controls which pins are inputs and outputs, while the lower nibble controls which of the outputs are high and low.</param>
      <param name="BitMode"> For FT232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT2232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT4232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG.
            For FT232R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG.
            For FT245R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG.
            For FT2232 devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL.
            For FT232B and FT245B devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not support the requested bit mode.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetPinStates(System.Byte@)">
      <summary>
            Gets the instantaneous state of the device IO pins.
            </summary>
      <returns>FT_STATUS value from FT_GetBitMode in FTD2XX.DLL</returns>
      <param name="BitMode">A bitmap value containing the instantaneous state of the device IO pins</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadEEPROMLocation(System.UInt32,System.UInt16@)">
      <summary>
            Reads an individual word value from a specified location in the device's EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_ReadEE in FTD2XX.DLL</returns>
      <param name="Address">The EEPROM location to read data from</param>
      <param name="EEValue">The WORD value read from the EEPROM location specified in the Address paramter</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteEEPROMLocation(System.UInt32,System.UInt16)">
      <summary>
            Writes an individual word value to a specified location in the device's EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_WriteEE in FTD2XX.DLL</returns>
      <param name="Address">The EEPROM location to read data from</param>
      <param name="EEValue">The WORD value to write to the EEPROM location specified by the Address parameter</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EraseEEPROM">
      <summary>
            Erases the device EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_EraseEE in FTD2XX.DLL</returns>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when attempting to erase the EEPROM of a device with an internal EEPROM such as an FT232R or FT245R.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232BEEPROM(FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232B or FT245B device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee232b">An FT232B_EEPROM_STRUCTURE which contains only the relevant information for an FT232B and FT245B device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT2232EEPROM(FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT2232 device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee2232">An FT2232_EEPROM_STRUCTURE which contains only the relevant information for an FT2232 device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232REEPROM(FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232R or FT245R device.
            Calls FT_EE_Read in FTD2XX DLL
            </summary>
      <returns>An FT232R_EEPROM_STRUCTURE which contains only the relevant information for an FT232R and FT245R device.</returns>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT2232HEEPROM(FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT2232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee2232h">An FT2232H_EEPROM_STRUCTURE which contains only the relevant information for an FT2232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT4232HEEPROM(FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT4232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee4232h">An FT4232H_EEPROM_STRUCTURE which contains only the relevant information for an FT4232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232HEEPROM(FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee232h">An FT232H_EEPROM_STRUCTURE which contains only the relevant information for an FT232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadXSeriesEEPROM(FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an X-Series device.
            </summary>
      <returns>FT_STATUS value from FT_EEPROM_Read in FTD2XX DLL</returns>
      <param name="eeX">An FT_XSERIES_EEPROM_STRUCTURE which contains only the relevant information for an X-Series device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232BEEPROM(FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232B or FT245B device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232b">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT2232EEPROM(FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT2232 device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee2232">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232REEPROM(FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232R or FT245R device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232r">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT2232HEEPROM(FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT2232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee2232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT4232HEEPROM(FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT4232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee4232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232HEEPROM(FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteXSeriesEEPROM(FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an X-Series device.
            Calls FT_EEPROM_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EEPROM_Program in FTD2XX DLL</returns>
      <param name="eeX">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEReadUserArea(System.Byte[],System.UInt32@)">
      <summary>
            Reads data from the user area of the device EEPROM.
            </summary>
      <returns>FT_STATUS from FT_UARead in FTD2XX.DLL</returns>
      <param name="UserAreaDataBuffer">An array of bytes which will be populated with the data read from the device EEPROM user area.</param>
      <param name="numBytesRead">The number of bytes actually read from the EEPROM user area.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEWriteUserArea(System.Byte[])">
      <summary>
            Writes data to the user area of the device EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_UAWrite in FTD2XX.DLL</returns>
      <param name="UserAreaDataBuffer">An array of bytes which will be written to the device EEPROM user area.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceType(FTD2XX_NET.FTDI.FT_DEVICE@)">
      <summary>
            Gets the chip type of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="DeviceType">The FTDI chip type of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceID(System.UInt32@)">
      <summary>
            Gets the Vendor ID and Product ID of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="DeviceID">The device ID (Vendor ID and Product ID) of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDescription(System.String@)">
      <summary>
            Gets the description of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="Description">The description of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetSerialNumber(System.String@)">
      <summary>
            Gets the serial number of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="SerialNumber">The serial number of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetRxBytesAvailable(System.UInt32@)">
      <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
      <returns>FT_STATUS value from FT_GetQueueStatus in FTD2XX.DLL</returns>
      <param name="RxQueue">The number of bytes available to be read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetTxBytesWaiting(System.UInt32@)">
      <summary>
            Gets the number of bytes waiting in the transmit buffer.
            </summary>
      <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
      <param name="TxQueue">The number of bytes waiting to be sent.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetEventType(System.UInt32@)">
      <summary>
            Gets the event type after an event has fired.  Can be used to distinguish which event has been triggered when waiting on multiple event types.
            </summary>
      <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
      <param name="EventType">The type of event that has occurred.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetModemStatus(System.Byte@)">
      <summary>
            Gets the current modem status.
            </summary>
      <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
      <param name="ModemStatus">A bit map representaion of the current modem status.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLineStatus(System.Byte@)">
      <summary>
            Gets the current line status.
            </summary>
      <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
      <param name="LineStatus">A bit map representaion of the current line status.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBaudRate(System.UInt32)">
      <summary>
            Sets the current Baud rate.
            </summary>
      <returns>FT_STATUS value from FT_SetBaudRate in FTD2XX.DLL</returns>
      <param name="BaudRate">The desired Baud rate for the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDataCharacteristics(System.Byte,System.Byte,System.Byte)">
      <summary>
            Sets the data bits, stop bits and parity for the device.
            </summary>
      <returns>FT_STATUS value from FT_SetDataCharacteristics in FTD2XX.DLL</returns>
      <param name="DataBits">The number of data bits for UART data.  Valid values are FT_DATA_BITS.FT_DATA_7 or FT_DATA_BITS.FT_BITS_8</param>
      <param name="StopBits">The number of stop bits for UART data.  Valid values are FT_STOP_BITS.FT_STOP_BITS_1 or FT_STOP_BITS.FT_STOP_BITS_2</param>
      <param name="Parity">The parity of the UART data.  Valid values are FT_PARITY.FT_PARITY_NONE, FT_PARITY.FT_PARITY_ODD, FT_PARITY.FT_PARITY_EVEN, FT_PARITY.FT_PARITY_MARK or FT_PARITY.FT_PARITY_SPACE</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetFlowControl(System.UInt16,System.Byte,System.Byte)">
      <summary>
            Sets the flow control type.
            </summary>
      <returns>FT_STATUS value from FT_SetFlowControl in FTD2XX.DLL</returns>
      <param name="FlowControl">The type of flow control for the UART.  Valid values are FT_FLOW_CONTROL.FT_FLOW_NONE, FT_FLOW_CONTROL.FT_FLOW_RTS_CTS, FT_FLOW_CONTROL.FT_FLOW_DTR_DSR or FT_FLOW_CONTROL.FT_FLOW_XON_XOFF</param>
      <param name="Xon">The Xon character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
      <param name="Xoff">The Xoff character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetRTS(System.Boolean)">
      <summary>
            Asserts or de-asserts the Request To Send (RTS) line.
            </summary>
      <returns>FT_STATUS value from FT_SetRts or FT_ClrRts in FTD2XX.DLL</returns>
      <param name="Enable">If true, asserts RTS.  If false, de-asserts RTS</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDTR(System.Boolean)">
      <summary>
            Asserts or de-asserts the Data Terminal Ready (DTR) line.
            </summary>
      <returns>FT_STATUS value from FT_SetDtr or FT_ClrDtr in FTD2XX.DLL</returns>
      <param name="Enable">If true, asserts DTR.  If false, de-asserts DTR.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetTimeouts(System.UInt32,System.UInt32)">
      <summary>
            Sets the read and write timeout values.
            </summary>
      <returns>FT_STATUS value from FT_SetTimeouts in FTD2XX.DLL</returns>
      <param name="ReadTimeout">Read timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
      <param name="WriteTimeout">Write timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBreak(System.Boolean)">
      <summary>
            Sets or clears the break state.
            </summary>
      <returns>FT_STATUS value from FT_SetBreakOn or FT_SetBreakOff in FTD2XX.DLL</returns>
      <param name="Enable">If true, sets break on.  If false, sets break off.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetResetPipeRetryCount(System.UInt32)">
      <summary>
            Gets or sets the reset pipe retry count.  Default value is 50.
            </summary>
      <returns>FT_STATUS vlaue from FT_SetResetPipeRetryCount in FTD2XX.DLL</returns>
      <param name="ResetPipeRetryCount">The reset pipe retry count.  
            Electrically noisy environments may benefit from a larger value.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDriverVersion(System.UInt32@)">
      <summary>
            Gets the current FTDIBUS.SYS driver version number.
            </summary>
      <returns>FT_STATUS value from FT_GetDriverVersion in FTD2XX.DLL</returns>
      <param name="DriverVersion">The current driver version number.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLibraryVersion(System.UInt32@)">
      <summary>
            Gets the current FTD2XX.DLL driver version number.
            </summary>
      <returns>FT_STATUS value from FT_GetLibraryVersion in FTD2XX.DLL</returns>
      <param name="LibraryVersion">The current library version.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDeadmanTimeout(System.UInt32)">
      <summary>
            Sets the USB deadman timeout value.  Default is 5000ms.
            </summary>
      <returns>FT_STATUS value from FT_SetDeadmanTimeout in FTD2XX.DLL</returns>
      <param name="DeadmanTimeout">The deadman timeout value in ms.  Default is 5000ms.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetLatency(System.Byte)">
      <summary>
            Sets the value of the latency timer.  Default value is 16ms.
            </summary>
      <returns>FT_STATUS value from FT_SetLatencyTimer in FTD2XX.DLL</returns>
      <param name="Latency">The latency timer value in ms.
            Valid values are 2ms - 255ms for FT232BM, FT245BM and FT2232 devices.
            Valid values are 0ms - 255ms for other devices.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLatency(System.Byte@)">
      <summary>
            Gets the value of the latency timer.  Default value is 16ms.
            </summary>
      <returns>FT_STATUS value from FT_GetLatencyTimer in FTD2XX.DLL</returns>
      <param name="Latency">The latency timer value in ms.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.InTransferSize(System.UInt32)">
      <summary>
            Sets the USB IN and OUT transfer sizes.
            </summary>
      <returns>FT_STATUS value from FT_SetUSBParameters in FTD2XX.DLL</returns>
      <param name="InTransferSize">The USB IN transfer size in bytes.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetCharacters(System.Byte,System.Boolean,System.Byte,System.Boolean)">
      <summary>
            Sets an event character, an error character and enables or disables them.
            </summary>
      <returns>FT_STATUS value from FT_SetChars in FTD2XX.DLL</returns>
      <param name="EventChar">A character that will be tigger an IN to the host when this character is received.</param>
      <param name="EventCharEnable">Determines if the EventChar is enabled or disabled.</param>
      <param name="ErrorChar">A character that will be inserted into the data stream to indicate that an error has occurred.</param>
      <param name="ErrorCharEnable">Determines if the ErrorChar is enabled or disabled.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEUserAreaSize(System.UInt32@)">
      <summary>
            Gets the size of the EEPROM user area.
            </summary>
      <returns>FT_STATUS value from FT_EE_UASize in FTD2XX.DLL</returns>
      <param name="UASize">The EEPROM user area size in bytes.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetCOMPort(System.String@)">
      <summary>
            Gets the corresponding COM port number for the current device.  If no COM port is exposed, an empty string is returned.
            </summary>
      <returns>FT_STATUS value from FT_GetComPortNumber in FTD2XX.DLL</returns>
      <param name="ComPortName">The COM port name corresponding to the current device.  If no COM port is installed, an empty string is passed back.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.VendorCmdGet(System.UInt16,System.Byte[],System.UInt16)">
      <summary>
            Get data from the FT4222 using the vendor command interface.
            </summary>
      <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.VendorCmdSet(System.UInt16,System.Byte[],System.UInt16)">
      <summary>
            Set data from the FT4222 using the vendor command interface.
            </summary>
      <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
    </member>
    <member name="P:FTD2XX_NET.FTDI.IsOpen">
      <summary>
            Gets the open status of the device.
            </summary>
    </member>
  </members>
</doc><?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Net.Personal</name>
    </assembly>
    <members>
        <member name="M:InTheHand.Net.ExceptionExtension.ToStringNoStackTrace(System.Exception)">
            <summary>
            Get the normal first line of <c>Exception.ToString()</c>,
            that is without the stack trace lines.
            </summary>
            -
            <remarks>
            Get the normal first line of <c>Exception.ToString()</c>,
            that is including details of all inner exceptions,
            but without the stack trace lines.
            e.g. <c>System.IO.IOException: An established connection was aborted by the software in your host machine. ---> System.Net.Sockets.SocketException: An established connection was aborted by the software in your host machine.</c>
            </remarks>
            -
            <param name="this">The exception.
            </param>
            -
            <returns>A string containing the first line of the <c>Exception.ToString()</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.ExceptionFactory.ArgumentOutOfRangeException(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.StringUtilities.IsNullOrEmpty(System.String)">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordParser">
            <summary>
            Parses an array of bytes into the contained SDP 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See the
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            methods for more information.
            </remarks>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ElementTypeDescriptorOffset">
            <summary>
            Bit offset of the ElementTypeDescriptor field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.SizeIndexMask"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.SizeIndexMask">
            <summary>
            Mask for the SizeIndex field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index, upper and lower respectively.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ElementTypeDescriptorOffset"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatUnknownType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatTypeNotTypeDSubtype">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgSizeIndexNotSuitTypeD">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgServiceRecordBytesZeroLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatInvalidHeaderBytes">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatTruncated">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatNotSupportFull32bitSized">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgTypeNotAsExpected">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgTopElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgMultiSeqChildElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgSequenceOverruns">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBuffer_WithLengths">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBuffer">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBufferPrefix">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgAttributePairFirstMustUint16">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[])">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.
            </remarks>
            -
            <param name="buffer">A byte array containing the encoded Service Record.
            </param>
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            <para>If the record contains any element type not supported by the parser
            it will throw <see cref="T:System.NotImplementedException"/>. The
            only element types defined by SDP in v2.0 that are not currently implemented 
            are 64- and 128-bit integers.  Of course any types defined in a later 
            version will also throw this.  This behaviour can be changed with the
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.SkipUnhandledElementTypes"/> 
            property.
            </para>
            </remarks>
            -
            <param name="buffer">A byte array containing a Service Record.
            </param>
            <param name="offset">The position in the data buffer at which to
            begin parsing the Service Record.
            </param>
            <param name="length">The length of the Service Record in the byte array.
            </param>
            <returns>The Service Record parse from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[])"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitSearchAttributeResult(System.Byte[])">
            <summary>
            Split a sequence of records into the component records.
            </summary>
            -
            <remarks>
            <para>The Bluetooth SDP operation ServiceSearchAttribute returns its 
            result as a &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;  This
            method split that sequence into the individual attribute lists.
            </para>
            <para>On CE/Windows Mobile the result of a record lookup is in this form
            so <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            etc use this method to split the result into is constituent records.
            </para>
            </remarks>
            -
            <param name="multiRecord">A byte array holding the 
            &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;
            </param>
            -
            <returns>An array of byte arrays where each holds a SDP record
            (a &#x201C;data element sequence representing an attribute list.&#x201D;).
            If the input was zero length or empty then a zero length array is returned.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multiRecord"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.ParseContent(System.Boolean,System.Boolean,System.Byte[],System.Int32,System.Int32,System.Int32@,InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.SizeIndex,System.Int32,System.Int32)">
            <summary>
            For use when the content of the element is in an array
            i.e. the stack parses the element structure and returns the values in byte arrays.
            </summary>
            -
            <param name="networkOrderInteger">Whether the stack uses network order
            for UnsignedInteger and TwosComplementInteger elements (as used in the SDP format)
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="networkOrderUuid">Whether the stack uses network order
            for Uuid elements (as used in the SDP format) 
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="buffer">The byte array containing the SDP value.
            </param>
            <param name="offset">(?Always zero).
            </param>
            <param name="length">The length of the byte array.
            (Always equals <paramref name="contentLength"/>).
            </param>
            <param name="_readLength">
            </param>
            <param name="etd">The Element Type.
            </param>
            <param name="dbgSizeIndex">(Not used).
            </param>
            <param name="contentLength">The size of the value.
            </param>
            <param name="contentOffset">(?Always zero).
            </param>
            -
            <returns>
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementLength(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)">
            <summary>
            Split a header byte into its <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> parts.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            <param name="etd">The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            value from the header byte.
            </param>
            <param name="sizeIndex">The <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            value from a header byte.
            </param>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> value from a header byte.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> field from a header byte.
            </summary>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.TypeMatchesEtd(InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ElementType)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetEtdForType(InTheHand.Net.Bluetooth.ElementType)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordParser.SkipUnhandledElementTypes">
            <summary>
            Gets or set whether the parser will attempt to skip any unknown element
            type rather than producing an error.
            </summary>
            -
            <remarks>
            <para>
            An element type is added instead with 
            <c>ElementType.</c><see cref="F:InTheHand.Net.Bluetooth.ElementType.Unknown"/> 
            and <c>ElementTypeDescriptor.</c><see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Unknown"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation">
            <summary>
            Gets or sets whether any URL elements will be converted to 
            <see cref="T:System.Uri"/> instances at parse time, or left as raw byte arrays.
            </summary>
            -
            <remarks><para>
            This is useful when the URL element is badly formatted and thus the
            parser will reject the record, setting this property to <c>true</c> will
            allow the parse to complete without attempting to decode the URL value.
            </para>
            <para>When <c>true</c> the value is stored as a array of bytes, when
            <c>false</c> it is stored as a <see cref="T:System.String"/>;
            however in earlier versions it was stored as <see cref="T:System.Uri"/>,
            and since there was often invalid content on devices (e.g. iPhone)
            this often failed.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothSocketOptionLevel">
            <summary>
            Defines additional Bluetooth socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> methods.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.RFComm">
            <summary>
            Bluetooth RFComm protocol (bt-rfcomm)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.L2Cap">
            <summary>
            Logical Link Control and Adaptation Protocol (bt-l2cap)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.Sdp">
            <summary>
            Service Discovery Protocol (bt-sdp)
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSocketException">
            <summary>
            Note that this exception will always be internal, just catch SocketException.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothRadio">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothRadio.IsPlatformSupported">
            <summary>
            Gets a value that indicates whether the 32feet.NET library can be used with the current device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            When overidden, initiates 
            lookup the SDP record with the give Service Class Id
            to find the RFCOMM port number (SCN) that the server is listening on.
            The process returns a list of port numbers.
            </summary>
            <param name="address">The remote device.
            </param>
            <param name="serviceGuid">The Service Class Id.
            </param>
            <param name="asyncCallback">callback</param>
            <param name="state">state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.EndServiceDiscovery(System.IAsyncResult)">
            <summary>
            When overidden, 
            completes the SDP Record to port number lookup process
            </summary>
            -
            <param name="ar">IAsyncResult from <see cref="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <remarks>
            <para>There must be at least one entry in the result list for each
            Service Record found for the specified Service Class Id.  This
            allows us to know if no records were found, or that records were
            found but none of them were for RFCOMM.
            If a particular record does not have a RFCOMM port then -1 (negative
            one should be added to the list for it).
            </para>
            <para>The process may throw an exception if an error occurs, e.g.
            the remote device did not respond.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:System.Collections.Generic.List{System.Int32}"/>
            with at least one entry for each Service Record
            found for the specified Service Class Id, the item being -1 if the
            record has no port. is .
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonBluetoothInquiry`1">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothInquiry`1.InquiryTimeoutParams.InquiryLengthAsMiliseconds">
            <summary>
            Get timeout value in Int32 milliseconds,
            as NETCF <c>WaitHandle.WaitOne</c> can't use TimeSpan.
            </summary>
            -
            <returns>An Int32 containing the timeout value in milliseconds.
            </returns>
        </member>
        <member name="T:InTheHand.ObexUri">
            <summary>
            Contains <see cref="T:System.Uri"/> helper functionality.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObex">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexPush">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) Push protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexFtp">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) FTP protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexSync">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) Sync protocol.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebResponse">
            <summary>
            Provides an OBEX implementation of the <see cref="T:System.Net.WebResponse"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.GetResponseStream">
            <summary>
            Gets the stream used to read the body of the response from the server.
            </summary>
            -
            <returns>A <see cref="T:System.IO.Stream"/> containing the body of the response.</returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.Close">
            <summary>
            Frees the resources held by the response.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.WriteFile(System.String)">
            <summary>
            Writes the contents of the response to the specified file path.
            </summary>
            <param name="fileName">The filename (including the path) from which to read.</param>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.Headers">
            <summary>
            Gets the headers associated with this response from the server.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.StatusCode">
            <summary>
            Returns a status code to indicate the outcome of the request.
            </summary>
            -
            <remarks><para>Note, if a error occurs locally then the status code
            <see cref="F:InTheHand.Net.ObexStatusCode.InternalServerError"/> is returned.
            Therefore that error code could signal local or remote errors.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothListener">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.HciVersion">
            <summary>
            HCI_Version &#x2014; Assigned Numbers &#x2014; Host Controller Interface
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_0_b">
            <summary>
            Bluetooth Core Specification 1.0b
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_1">
            <summary>
            Bluetooth Core Specification 1.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_2">
            <summary>
            Bluetooth Core Specification 1.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v2_0wEdr">
            <summary>
            Bluetooth Core Specification 2.0 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v2_1wEdr">
            <summary>
            Bluetooth Core Specification 2.1 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v3_0wHS">
            <summary>
            Bluetooth Core Specification 3.0 + HS
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v4_0">
            <summary>
            Bluetooth Core Specification 4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.Unknown">
            <summary>
            Unknown version &#x2104; probably the stack API
            does not provide the value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LmpVersion">
            <summary>
            LMP VerNr &#x2014; Assigned Numbers &#x2014; Link Manager Protocol
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_0_b">
            <summary>
            Bluetooth Core Specification 1.0b
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_1">
            <summary>
            Bluetooth Core Specification 1.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_2">
            <summary>
            Bluetooth Core Specification 1.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v2_0wEdr">
            <summary>
            Bluetooth Core Specification 2.0 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v2_1wEdr">
            <summary>
            Bluetooth Core Specification 2.1 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v3_0wHS">
            <summary>
            Bluetooth Core Specification 3.0 + HS
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v4_0">
            <summary>
            Bluetooth Core Specification 4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.Unknown">
            <summary>
            Unknown version &#x2104; probably the stack API
            does not provide the value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthPairRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;BthPairRequest passes the parameters to the <c>BthSetPIN</c>
            function and creates an ACL connection. Once the connection is established,
            it calls the <c>BthAuthenticate</c> function to authenticate the device.&#x201D;
            </para>
            <para>On Windows XP/Vista platforms this calls <c>BluetoothAuthenticateDevice</c>,
            if the pin argument is set to null a Wizard is displayed to accept a PIN from the user,
            otherwise the function executes in transparent mode.
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">The device whose Link Key to retrieve.</param>
            <param name="linkKey">The 16-byte Link Key to set.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">Address of the requesting device.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.L2CapPort.L2CapDisconnectReason.XXPending">
            <summary>
            Presumably this is surfaced as a OnConnectionPending
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.AddressFamily32">
            <summary>
            Specifies additional addressing schemes that an instance of the <see cref="T:System.Net.Sockets.Socket"/> class can use.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.AddressFamily32.Bluetooth">
            <summary>
            Bluetooth address.
            </summary>
            <value>32</value>
        </member>
        <member name="F:InTheHand.Net.Sockets.AddressFamily32.Irda">
            <summary>
            IrDA address used on some Windows CE platforms (Has a different value to <see cref="T:System.Net.Sockets.AddressFamily">AddressFamily.IrDA</see>).
            </summary>
            <value>22</value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordHelper">
            <summary>
            Some useful methods for working with a SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            including creating and accessing the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            for an RFCOMM service.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetRfcommChannelElement(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetL2CapChannelElement(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetRfcommChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The Channel Number as an unsigned byte cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetL2CapChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The PSM number as an uint16 cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.SetRfcommChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord,System.Byte)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the RFCOMM Channel number.
            </param>
            <param name="channelNumber">The Channel number to set in the record.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.SetL2CapPsmNumber(InTheHand.Net.Bluetooth.ServiceRecord,System.Int32)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <remarks>
            <para>Note: We use an <see cref="T:System.Int32"/> for the
            <paramref name="psm"/> parameter as its natural type <see cref="T:System.UInt16"/> 
            in not usable in CLS Compliant interfaces.
            </para>
            </remarks>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the L2CAP PSM value.
            </param>
            <param name="psm">The PSM value to set in the record.
            Note that although the parameter is of type <see cref="T:System.Int32"/> 
            the value must actually be in the range of a <see cref="T:System.UInt16"/>,
            see the remarks for more information.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The PSM must fit in a 16-bit unsigned integer.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateL2CapProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateRfcommProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an RFCOMM service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateGoepProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an GOEP (i.e. OBEX) service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
               ElementSequence
                  Uuid16 = GOEP
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(InTheHand.Net.Bluetooth.ServiceElement[])">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service,
            with upper layer entries.
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure at the first layer:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            One can add layers above that; remember that all layers are formed
            of an ElementSequence.  See the example below.
            </remarks>
            -
            <example>
            <code>
            var netProtoList = new ServiceElement(ElementType.ElementSequence,
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0800),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0806)
                );
            var layer1 = new ServiceElement(ElementType.ElementSequence,
                new ServiceElement(ElementType.Uuid16, Uuid16_BnepProto),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0100), //v1.0
                netProtoList
                );
            ServiceElement element = ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(
                layer1);
            </code>
            </example>
            -
            <param name="upperLayers">The list of upper layer elements, one per layer.
            As an array.
            </param>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordCreator">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.ErrorMsgSupportOnlyLength255">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord,System.Byte[])">
            <overloads>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </overloads>
            -
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object,
            into the specified byte array.
            </summary>
            -
            <remarks>
            See the other overload <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            <param name="buffer">An array of <see cref="T:System.Byte"/> for the record
            to be written to.
            </param>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            The record bytes are longer that the supplied byte array buffer.
            </exception>
            -
            <returns>The length of the record in the array of <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteAttribute(InTheHand.Net.Bluetooth.ServiceAttribute,System.Byte[],System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
            -
            <remarks>
            <para>The only oddity (as with parsing) is with the <c>TextString</c>
            type.  The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> can
            either hold the string already encoded to its array of bytes or an 
            <see cref="T:System.String"/>.  In the latter case we will always simply 
            encode the string to an array of bytes using encoding 
            <see cref="P:System.Text.Encoding.UTF8"/>.
            </para>
            <para>Currently any UUIDs in the record are written out in the form supplied,
            we should probably write a &#x2018;short-form&#x2019; equivalent if its
            a &#x2018;Bluetooth-based&#x2019; UUID e.g. <c>Uuid128</c> as <c>Uuid16</c>.
            </para>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            -
            <returns>An array of <see cref="T:System.Byte"/> containing the resultant
            record bytes.  The length of the array is the length of the record bytes.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateAttrId(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Byte[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateElement(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Int32)">
            <summary>
            Create the element in the buffer starting at offset, and return its totalLength.
            </summary>
            <param name="element">The element to create.
            </param>
            <param name="buf">The byte array to write the encoded element to.
            </param>
            <param name="offset">The place to start writing in <paramref name="buf"/>.
            </param>
            
            <returns>The total length of the encoded element written to the buffer
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteVariableLength(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteFixedLength(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.MakeVariableLengthHeader(System.Byte[],System.Int32,InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CompleteHeaderWrite(InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState,System.Byte[],System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.HeaderOffset">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.Etd">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.SizeIndex">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.HeaderLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.widcommNeedsStoring">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events">
            <summary>
            Provides access to the Bluetooth events from the Microsoft stack on
            desktop Windows.
            </summary>
            -
            <remarks>
            <note>Supported only by the Microsoft stack on desktop Windows.
            </note>
            <para>The Microsoft Bluetooth stack on Window raises events for various
            Bluetooth actions.  We expose that feature via this class.
            </para>
            <para>Currently it raises two types of event: in-range and out-of-range
            using classes: <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            and <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs"/>.
            Both have properties <c>Device</c> which return a <c>BluetoothDeviceInfo</c>.
            Then the in-range event also includes a set of flags, which in
            Windows XP are: Address, Cod, Name, Paired, Personal, and Connected;
            more events are available in Windows 7.  These events are provided on
            the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            class via properties:
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.CurrentState"/>
            and <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.PreviousState"/>,
            and also <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.GainedStates"/> etc.
            </para>
            <para>To see the events get an instance of this class via its method
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>.
            Then one should register for the events on that instance and keep a
            reference to it.
            </para>
            <para>Note that just being in range is not enough for
            devices to know that the other is present.  Without running device
            discovery or a connection attempt the two devices will not see each
            other.  Note however that Windows XP also does not raise events when
            running device discovery (inquiry), this is fixed in Windows 7
            (probably Vista).  See
            <see href="http://32feetnetdev.wordpress.com/2010/11/15/device-discovery-improvements-on-msftwin32/">32feet blog: Device Discovery improvements on MSFT+Win32</see>
            for more information.
            </para>
            
            <para>For example when connecting and disconnecting on Windows XP to
            another device that is not paired we see:
            </para>
            <example>
            <code lang="none">
            12:23:48.9582648: InRange 000A3A6865BB 'joe',
                now 'Address, Cod, Name, Connected'
                was 'Address, Cod, Name'.
            12:24:16.8009456: InRange 000A3A6865BB 'joe',
                now 'Address, Cod, Name'
                was 'Address, Cod, Name, Connected'.}}
            </code>
            </example>
            <para>For example when connecting and then disconnecting on Windows 7
            to another v2.1 device that is paired with we see:
            </para>
            <example>
            <code lang="none">
            20:53:25.5605469: InRange 00190E02C916 'alanlt2ws',
                now 'Address, Cod, Name, Paired, Personal, Connected, SspSupported, SspPaired, Rssi, Eir'
                was 'Address, Cod, Name, Paired, Personal,            SspSupported, SspPaired, Rssi, Eir'.
            20:53:27.7949219: InRange 00190E02C916 'fred',
                now 'Address, Cod, Name, Paired, Personal,            SspSupported, SspPaired, Rssi, Eir'
                was 'Address, Cod, Name, Paired, Personal, Connected, SspSupported, SspPaired, Rssi, Eir'.}}
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.#ctor">
            <summary>
            Initialise an instance of the class.
            </summary>
            -
            <remarks>
            <para>Consider using the method <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>
            instead of calling this constructor.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.#ctor(InTheHand.Net.Bluetooth.BluetoothRadio)">
            <summary>
            Initialise an instance of the class for the specified radio.
            </summary>
            -
            <param name="microsoftWin32BluetoothRadio">
            The radio to listen for events from.
            Must be non-null and a MSFT+Win32 stack radio.
            </param>
            -
            <remarks>Note that since the Microsoft stack supports only one radio
            (controller) there is lilely no benefit in calling this constructor
            as opposed to the other constructor or method
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance">
            <summary>
            Gets a possible shared instance of this class.
            </summary>
            -
            <remarks>
            <para>If more that one piece of code is using this class then there
            is no need for each to have a private instance.  This method allows
            them to access a shared instance.  When first called it creates a
            new instance and keeps a weak-reference to it.  Subsequent callers
            will then get the same instance.  The instance is kept alive only
            as long as at least one caller keeps a reference to it.  If no
            references are kept then the instance will be deleted and a new
            instance will be created when this method is next called.
            </para>
            </remarks>
            -
            <returns>An instance of this class.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.OnInRange(InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.InRange"/> event.
            </summary>
            -
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.OnOutOfRange(InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.OutOfRange"/> event.
            </summary>
            -
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dispose">
            <summary>
            Releases the resources used by the instance.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the instance
            and optionally releases the managed resources.
            </summary>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.InRange">
            <summary>
            &#x201C;This message is sent when any of the following attributes
            of a remote Bluetooth device has changed: the device has been
            discovered, the class of device, name, connected state, or device
            remembered state. This message is also sent when these attributes
            are set or cleared.&#x201D;
            </summary>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.OutOfRange">
            <summary>
            &#x201C;This message is sent when a previously discovered device
            has not been found after the completion of the last inquiry.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.BthPortDeviceInterface">
            <summary>
            &#x201C;&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.RadioInRange">
            <summary>
            &#x201C;This message is sent when any of the following attributes of a remote Bluetooth device has changed:
            the device has been discovered, the class of device, name, connected state, or device remembered state.
            This message is also sent when these attributes are set or cleared.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.RadioOutOfRange">
            <summary>
            &#x201C;This message is sent when a previously discovered device has not been found after the completion of the last inquiry.
            This message will not be sent for remembered devices.
            The BTH_ADDRESS structure is the address of the device that was not found.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.PinRequest">
            <summary>
            &#x201C;This message should be ignored by the application.
            If the application must receive PIN requests, the BluetoothRegisterForAuthentication function should be used.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.L2capEvent">
            <summary>
            &#x201C;This message is sent when an L2CAP channel between the local radio and a remote Bluetooth device has been established or terminated. 
            For L2CAP channels that are multiplexers, such as RFCOMM, this message is only sent when the underlying channel is established, 
            not when each multiplexed channel, such as an RFCOMM channel, is established or terminated.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.HciEvent">
            <summary>
            &#x201C;This message is sent when a remote Bluetooth device connects or disconnects at the ACL level.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO">
            <summary>
            Buffer associated with GUID_BLUETOOTH_L2CAP_EVENT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.bthAddress">
            <summary>
            Remote radio address which the L2CAP event is associated with
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.psm">
            <summary>
            The PSM that is either being connected to or disconnected from
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.connected">
            <summary>
            If != 0, then the channel has just been established.  If == 0, then the
            channel has been destroyed.  Notifications for a destroyed channel will
            only be sent for channels successfully established.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.initiated">
            <summary>
            If != 0, then the local host iniated the l2cap connection.  If == 0, then
            the remote host initated the connection.  This field is only valid if
            connect is != 0.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO">
            <summary>
            Buffer associated with GUID_BLUETOOTH_HCI_EVENT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.bthAddress">
            <summary>
            Remote radio address which the HCI event is associated with
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.connectionType">
            <summary>
            HCI_CONNNECTION_TYPE_XXX value
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.connected">
            <summary>
            If != 0, then the underlying connection to the remote radio has just
            been estrablished.  If == 0, then the underlying conneciton has just been
            destroyed.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.ConfigChangeCanceled">
            <summary>
            A request to change the current configuration (dock or undock) has been canceled. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.ConfigChanged">
            <summary>
            The current configuration has changed, due to a dock or undock. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.CustomEvent">
            <summary>
            A custom event has occurred. 
            </summary>
            <remarks>Windows NT 4.0 and Windows 95:  This value is not supported.</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceArrival">
            <summary>
            A device or piece of media has been inserted and is now available. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceQueryRemove">
            <summary>
            Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceQueryRemoveFailed">
            <summary>
            A request to remove a device or piece of media has been canceled. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceRemoveComplete">
            <summary>
            A device or piece of media has been removed. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceRemovePending">
            <summary>
            A device or piece of media is about to be removed. Cannot be denied. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceTypeSpecific">
            <summary>
            A device-specific event has occurred. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DevNodesChanged">
            <summary>
            A device has been added to or removed from the system. 
            </summary>
            <remarks>Windows NT 4.0 and Windows Me/98/95:  This value is not supported.</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.QueryChangeConfig">
            <summary>
            Permission is requested to change the current configuration (dock or undock). 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.UserDefined">
            <summary>
            The meaning of this message is user-defined. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Oem">
            <summary>
            oem-defined device type
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.DevNode">
            <summary>
            devnode number
            /// </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Port">
            <summary>
            l
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Network">
            <summary>
            network resource
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.DeviceInterface">
            <summary>
            device interface class
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Handle">
            <summary>
            file system handle
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS">
            <summary>
            The BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS structure contains specific configuration information about the Bluetooth device responding to an authentication request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.deviceInfo">
            <summary>
            A BLUETOOTH_DEVICE_INFO structure that contains information about a Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationMethod">
            <summary>
            A BLUETOOTH_AUTHENTICATION_METHOD enumeration that defines the authentication method utilized by the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.ioCapability">
            <summary>
            A BLUETOOTH_IO_CAPABILITY enumeration that defines the input/output capabilities of the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationRequirements">
            <summary>
            A AUTHENTICATION_REQUIREMENTS specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.Numeric_Value_Passkey">
            <summary>
            A ULONG value used for Numeric Comparison authentication.
            or
            A ULONG value used as the passkey used for authentication.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_PIN_INFO">
            <summary>
            The BLUETOOTH_PIN_INFO structure contains information used for authentication via PIN.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_OOB_DATA_INFO">
            <summary>
            The BLUETOOTH_OOB_DATA_INFO structure contains data used to authenticate prior to establishing an Out-of-Band device pairing.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothIoCapability">
            <summary>
            The BLUETOOTH_IO_CAPABILITY enumeration defines the input/output capabilities of a Bluetooth Device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayOnly">
            <summary>
            The Bluetooth device is capable of output via display only.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayYesNo">
            <summary>
            The Bluetooth device is capable of output via a display, 
            and has the additional capability to presenting a yes/no question to the user.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.KeyboardOnly">
            <summary>
            The Bluetooth device is capable of input via keyboard.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.NoInputNoOutput">
            <summary>
            The Bluetooth device is not capable of input/output.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.Undefined">
            <summary>
            The input/output capabilities for the Bluetooth device are undefined.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties">
            <summary>
            Specifies properties of a remote Bluetooth Device.
            </summary>
            -
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Originally from Win32 "bthdef.h" and used by struct
            BTH_DEVICE_INFO.flags. The flags are named BDIF_**.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Address">
            <summary>
            The address member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Cod">
            <summary>
            The classOfDevice member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Name">
            <summary>
            The name member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Paired">
            <summary>
            The device is a remembered and authenticated device.
            The BDIF_PERSONAL flag is always set when this flag is set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Personal">
            <summary>
            The device is a remembered device. If this flag is set and
            the BDIF_PAIRED flag is not set, the device is not authenticated.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Connected">
            <summary>
            The remote Bluetooth device is currently connected to the local radio.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Eir">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.BR">
            <summary>
            Bluetooth Basic Rate &#x2014; i.e. traditional Bluetooth
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.LE">
            <summary>
            Bluetooth Low Energy
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.ISdpDiscoveryRecordsBuffer.RecordCount">
            <summary>
            Get the number of records that the buffer contains.
            </summary>
            -
            <value>An integer containing the number of records that the buffer contains,
            may be zero.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The buffer has 
            not yet been filled with a CSdpDiscoveryRec list.
            </exception>
            -
            <remarks>
            <para>In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.ServiceClassOnly">SdpSearchScope.ServiceClassOnly</see>
            this returns the actual number of records as the filtering is done by
            the stack.  In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.Anywhere">SdpSearchScope.Anywhere</see>
            this returns the pre-filtered number of records.  We do the filtering
            so this will likely be greater that the matching number of records.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.SdpDiscoveryRecordsBuffer.RecordCount">
            <summary>
            Get the number of records that the buffer contains.
            </summary>
            -
            <value>An integer containing the number of records that the buffer contains,
            may be zero.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The buffer has 
            not yet been filled with a CSdpDiscoveryRec list.
            </exception>
            -
            <remarks>
            <para>In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.ServiceClassOnly">SdpSearchScope.ServiceClassOnly</see>
            this returns the actual number of records as the filtering is done by
            the stack.  In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.Anywhere">SdpSearchScope.Anywhere</see>
            this returns the pre-filtered number of records.  We do the filtering
            so this will likely be greater that the matching number of records.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.SetParent(InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface)">
            <summary>
            To get to HandleDeviceResponded, HandleInquiryCompleted etc
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.StartDiscovery(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            &#x201C;This function requests a service discovery for a specific device.&#x201D;
            </summary>
            -
            <remarks>
            <para>&#x201C;When the discovery is complete the derived function OnDiscoveryComplete() is called.&#x201D;
            </para>
            </remarks>
            -
            <param name="address"></param>
            <param name="serviceGuid"></param>
            <returns>&#x201C;TRUE, if discovery has started; FALSE, if discovery has not started.&#x201D;</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.GetLastDiscoveryResult(InTheHand.Net.BluetoothAddress@,System.UInt16@)">
            <summary>
            &#x201C;When multiple discovery operations are in progress, the application 
            must call GetLastDiscoveryResult() from within the OnDiscoveryComplete() 
            to determine which remote devices reported services.&#x201D;
            </summary>
            <param name="address"></param>
            <param name="p_num_recs"></param>
            <returns>&#x201C;DISCOVERY_RESULT_SUCCESS, if the discovery operation was successful.&#x201D;</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.ReadDiscoveryRecords(InTheHand.Net.BluetoothAddress,System.Int32,InTheHand.Net.Bluetooth.Widcomm.ServiceDiscoveryParams)">
            <summary>
            &#x201C;This function is called when discovery is complete to retrieve the records 
            received from the remote device.&#x201D;
            </summary>
            -
            <remarks>
            <para>&#x201C;Discovery results for a device are not removed until the device fails to respond to an inquiry.&#x201D;
            </para>
            </remarks>
            -
            <param name="address"></param>
            <param name="maxRecords"></param>
            <param name="args"></param>
            <returns>The discovery records read, which may have recordCount equals zero.</returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothDeviceInfo">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.#ctor(System.IntPtr)">
            <overloads>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class.
            </overloads>
            -
            <summary>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class with the given native structure.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class 
            for the device with the given address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Refresh">
            <summary>
            Forces the system to refresh the device information.
            </summary>
            -
            <remarks>
            See <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName"/>
            for one reason why this method is necessary.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Update">
            <summary>
            Updates the device name used to display the device, affects the local computer cache.
            </summary>
            <remarks>On Windows CE this only affects devices which are already paired.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
             
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             <para>This overload is silent on error; the other overload raises an exception
             if required
             (<see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)"/>).
             </para>
             </remarks>
             -
             <exception cref="T:System.PlatformNotSupportedException">
             Thrown if this method is called on Windows CE platforms.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <param name="throwOnError">Whether the method should raise an exception
             when 
             </param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             </remarks>
             -
             <exception cref="T:System.ComponentModel.Win32Exception">The call failed.
             </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecords(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database.
            </summary>
            -
            <remarks>
            <para>
            For instance to see whether the device has an an Serial Port services
            search for UUID <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort"/>,
            or too find all the services that use RFCOMM use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol"/>,
            or all the services use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol"/>.
            </para>
            <para>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </para>
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
            -
            <example>
            <code lang="VB.NET">
            Dim bdi As BluetoothDeviceInfo = ...
            Dim records As ServiceRecord() = bdi.GetServiceRecords(BluetoothService.RFCommProtocol)
            ' Dump each to console
            For Each curRecord As ServiceRecord In records
               ServiceRecordUtilities.Dump(Console.Out, curRecord)
            Next
            </code>
            </example>
            
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecordsUnparsed(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database,
            returning the raw byte rather than a parsed record.
            </summary>
            -
            <remarks>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>An array of array of <see cref="T:System.Byte"/>.</returns>
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecordsUnparsedWindowsRaw(System.Guid)">
            <summary>
            Returns the raw results from the native call(s); the format is different 
            on Win32 versus WinCE.
            </summary>
            <remarks>
            On CE this is thus a single item which is a ElementSequence of records.
            On Win32 it is an array with each item being a record.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.ShowDialog">
            <summary>
            Displays information about the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.DeviceAddress">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.DeviceName">
            <summary>
            Gets a name of a device.
            </summary>
            -
            <remarks>
            <para>Note, that due the way in which Bluetooth device discovery works,
            the existence and address of a device is known first, but a separate
            query has to be carried out to find whether the device also has a name.
            This means that if a device is discovered afresh then this property might
            return only a text version of the device&#x2019;s address and not its
            name, one can also see this in the Windows&#x2019; Bluetooth device dialogs
            where the device appears first with its address and the name is later
            updated.  To see the name, wait for some time and access this property again
            having called <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/>
            in the meantime.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.ClassOfDevice">
            <summary>
            Returns the Class of Device of the remote device.
            </summary>
            -
            <remarks>
            <para>
            Some CE 4.2 devices such as original PPC2003 devices don't have the native 
            API on which this property depends &#x2014; it was added as part of a hotfix. 
            The property will always return zero in such a case.  On WM/CE we also 
            attempt to get the CoD value as part of the discovery process; this is 
            of course only works for devices in-range.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Rssi">
            <summary>
            Returns the signal strength for the Bluetooth connection with the peer device.
            <para><b>Requires Windows Mobile 5.0 or Windows Embedded CE 6.0</b></para>
            </summary>
            -
            <value>Valid values for this property are -128 to 128.  It returns
            <see cref="F:System.Int32.MinValue">Int32.MinValue</see> on failure.
            </value>
            -
            <remarks>
            <para>This method requires an open connection to the peer device.
            If there is no active connection, then it will attempt to create one.
            </para>
            <note type="caution">Requires Windows Mobile 5.0 or Windows Embedded CE 6.0</note>
            <para>As well as the &#x2018;no connection&#x2019; issue, the native method
            on which the property depends is only present in later OS versions, so it 
            will fail on earlier devices.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.InstalledServices">
            <summary>
            Returns a list of services which are already installed for use on the calling machine.
            </summary>
            <remarks>
            <para>This property returns the services already configured for use. 
            Those are the ones that are checked in the &#x201C;Services&#x201D; tab
            of the device&#x2019;s property sheet in the Bluetooth Control panel.
            I presume the behaviour is similar on CE.
            </para>
            <para>Will only return available services for paired devices.
            </para>
            <para>It of course will also only returns standard system services which Windows understands.
            (On desktop Windows this method calls the OS function <c>BluetoothEnumerateInstalledServices</c>).
            </para>
            <para>To see all the services that a device advertises use the 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected.
            </summary>
            <remarks>Not supported under Windows CE and will always return false.</remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device. Not all remembered devices are authenticated.
            </summary>
            -
            <remarks>Now supported under Windows CE — will return the same as 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>.
            </remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded. All authenticated devices are remembered.
            </summary>
            <remarks>Is now supported on both CE and XP.</remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothClient">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.DiscoDevsParams">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream">
            <exclude/>
            <summary>
            
            </summary>
            -
            <remarks>
            <para>Sub-class must call various methods at the following events:
            <list type="bullet">
            <item><term>open</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)"/>
            or <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/> on failure</description>
            </item>
            <item><term>close</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/></description>
            </item>
            <item><term>data arrival</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandlePortReceive(System.Byte[])"/></description>
            </item>
            <item><term>flow control off</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.FreePendingWrites"/></description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.EnsureOpenForWrite">
            <summary>
            Fails if state is not Connected.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.EnsureOpenForRead">
            <summary>
            Fails if state is not Connected or PeerDidClose.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.RemovePortRecords">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOtherPreDestroy(System.Boolean)">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)">
            <summary>
            Called from CloseInternal and Dispose;
            RemovePortRecords is called before from both places.
            Dispose then calls DoOtherPreDestroy and DoPortDestroy in that order.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortDestroy(System.Boolean)">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOtherSetup(InTheHand.Net.BluetoothEndPoint,System.Int32)">
            <summary>
            Called before DoOpenClient.
            For instance is empty on BTPS, on Widcomm it calls SetScnForPeerServer and SetSecurityLevelClient.
            </summary>
            <param name="bep">Endpoint</param>
            <param name="scn">Channel number</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOpenClient(System.Int32,InTheHand.Net.BluetoothAddress)">
            <summary>
            Starts the connect process.  The async completion should call
            either <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)"/> or <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="scn">scn</param>
            <param name="addressToConnect">addr</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)">
            <summary>
            Call when connection is successfully made.
            </summary>
            <param name="eventIdToString">Used for logging etc.  Pass a string
            containing the name of the stack's event/status that occurred.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoIsConnected(InTheHand.Net.BluetoothAddress@)">
            <summary>
            Get the remote address.
            </summary>
            -
            <param name="p_remote_bdaddr">On return contains the address to which we are connected.
            </param>
            -
            <returns><see langword="true"/> if connected, but we ignore the result.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})">
            <summary>
            Call when connection is un-successfully made (fails),
            and also when the connection closes.
            </summary>
            <param name="eventIdToString">Used for logging etc.  Pass a string
            containing the name of the stack's event/status that occurred.
            </param>
            <param name="socketErrorCode">The socket error code for this failure
            -- known.
            Pass for instance a value from <see cref="T:System.Net.Sockets.SocketError"/>
            as an <see cref="T:System.Int32"/>;
            or <see langword="null"/> respectively.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.CloseInternal(InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.BeginReadParameters}[]@,InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.BeginReadParameters}[]@)">
            <summary>
            Used: 1. when we get CONNECT_ERR from the stack, and POSSIBLY 2. when we close the 
            stream to do consumer timeout (SO_RCVTIMEO/etc).
            </summary>
            <param name="allRead">Out: to call <see cref="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.AbortIf(System.Collections.Generic.IList{InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}}, System.Collections.Generic.IList{InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}})"/>
            on.</param>
            <param name="allWrite">Out: to call <see cref="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.AbortIf(System.Collections.Generic.IList{InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}}, System.Collections.Generic.IList{InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}})"/>
            on.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.CloseInternalAndAbort_willLock">
            <summary>
            Close the connection from the network/stack side (not from the consumer side).
            </summary>
            -
            <remarks>
            <para>When we call Close the object is disposed and outstanding and
            new operations fail with ObjectDisposedException.  This method
            instead closes the connection from the network/stack side and thus
            operations fail with an IO error etc.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.TryBondingIf_inLock(InTheHand.Net.BluetoothAddress,System.Int32,System.Exception@)">
            <summary>
            DEPRECATED, should return false.
            </summary>
            <returns>Whether Bonding was attempted and thus the connect should be retried.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.Connected">
            <summary>
            Used by Client, note from MSDN Socket.Connected:
            "Gets a value that indicates whether a Socket is connected to a remote host as of the last Send or Receive operation."
            </summary>
            -
            <remarks>
            <para>From MSDN <see cref="P:System.Net.Sockets.Socket.Connected"/>:
            "Gets a value that indicates whether a Socket is connected to a remote host as of the last Send or Receive operation."
            From MSDN <see cref="P:System.Net.Sockets.TcpClient.Connected"/>:
            "true if the Client socket was connected to a remote resource as of the most recent operation; otherwise, false."
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.BluetoothEndPoint">
            <summary>
            Represents a network endpoint as a Bluetooth address and 
            a Service Class Id and/or a port number.
            </summary>
            -
            <remarks>
            <para>The BluetoothEndPoint class contains the host, service class id and port 
            information needed by an application to connect to a service on a host.
            By combining the host's Bluetooth address and class id or port number, 
            the BluetoothEndPoint class forms a connection point to a service.
            </para>
            <para>When used for instance when connecting with <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, 
            if the port is specified then the connection is made to that port, 
            otherwise a SDP lookup is done for a record with the class specified in 
            the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MinPort">
            <summary>
            Specifies the minimum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MaxPort">
            <summary>
            Specifies the maximum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MinScn">
            <summary>
            The minimum valid Server Channel Number, 1.
            </summary>
            <remarks>
            <para>
            Bluetooth's rfcomm.pdf: Part F:1 -- RFCOMM with TS 07.10 -- Serial Port Emulation
            </para>
            <para>
            Section 5.4:
            </para>
            <list type="table">
               &#x201C;The RFCOMM server channel number is a [five-bit field].
               Server applications registering with an RFCOMM service interface are assigned a
               Server Channel number in the range 1…30. [0 and 31 should not be used since
               the corresponding DLCIs are reserved in TS 07.10]&#x201D;
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MaxScn">
            <summary>
            The maximum valid Server Channel Number, 30.
            </summary>
            <remarks><see cref="F:InTheHand.Net.BluetoothEndPoint.MinScn"/>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> class with the specified address and service.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">The Bluetooth service to use.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> class with the specified address, service and port number.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">The Bluetooth service to use.</param>
            <param name="port">Radio channel to use, -1 for any.</param>
            -
            <remarks>
            <para>See the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> documentation for 
            how the combination of Service and Port are used when connecting with 
            BluetoothClient.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns>A <see cref="T:System.Net.SocketAddress"/> instance containing the socket address for the endpoint.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress">The <see cref="T:System.Net.SocketAddress"/> to use for the endpoint.</param>
            <returns>An <see cref="T:System.Net.EndPoint"/> instance using the specified socket address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.BluetoothEndPoint"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.ToString">
            <summary>
            Returns the string representation of the BluetoothEndPoint.
            </summary>
            <remarks>
            <para>
            We try to follow existing examples where possible; JSR-82 and similar
            use a URI of the form:</para>
            <code lang="none">bluetooth://xxxxxxxxxxxx:xx</code>
            or:
            <code lang="none">bluetooth://xxxxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code>
            or in some serialport only situations:
            <code lang="none">btspp://</code>
            <para>So we follow that pattern here, but of course without the URI prefix.
            If the form with the URI is required then the prefix can simply be appended.</para>
            <para>
            If the port is non default then we use that, otherwise just the full guid.
            </para>
            <para>Some examples are:</para>
            To the ObexObjectPush service:
            <code lang="none">"04E2030405F6:0000110500001000800000805f9b34fb"</code>
            To the SerialPort service:
            <code lang="none">"04E2030405F6:0000110100001000800000805f9b34fb"</code>
            With an Empty service GUID:
            <code lang="none">"04E2030405F6:00000000000000000000000000000000"</code>
            With port 9:
            <code lang="none">"04E2030405F6:9"</code>
            </remarks>
            <returns>The string representation of the BluetoothEndPoint.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Clone">
            <summary>
            Creates a copy of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/>.
            </summary>
            <remarks>Creates a copy including of the internal <see cref="T:InTheHand.Net.BluetoothAddress"/>
            </remarks>
            <returns>A copy of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.AddressFamily">
            <summary>
            Gets the address family of the Bluetooth address. 
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Address">
            <summary>
            Gets or sets the Bluetooth address of the endpoint.
            </summary>
            <seealso cref="T:InTheHand.Net.BluetoothAddress"/>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Service">
            <summary>
            Gets or sets the Bluetooth service to use for the connection.
            </summary>
            <seealso cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Port">
            <summary>
            Gets or sets the service channel number of the endpoint.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.HasPort">
            <summary>
            Gets whether a <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> is set.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor">
            <summary>
            Represents the type of the element in the SDP record binary format, 
            and is stored as the higher 5 bits of the header byte.
            </summary>
            <remarks>
            There is an identifier for each major type: String vs UUID vs unsigned integer.
            There are various sizes of UUID and integer type for instance, the resultant
            types are listed in enum <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.SizeIndex">
            <summary>
            Represents the size of the SDP element in the record binary format,
            and is stored as the lower 3 bits of the header byte.
            </summary>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ElementType">
            <summary>
            Represents the types that an SDP element can hold.
            </summary>
            <remarks>
            <para>
            (Is a logical combination of the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            field which defines the major type and the size field in the binary format; and
            the size field being made up of the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            field and any additional length bytes.
            </para>
            <para>Note, the values here are not the numerical bitwise combination of the 
            <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> fields as they appear 
            in the encoded protocol.  It was simpler to assign arbitrary values here as 
            firstly we wanted zero to be the 'Unknown' value, which conflicts with Nil's
            bitwise value; but also because the TextString, sequence and Url types can 
            have various SizeIndex values and thus they wouldn&#x2019;t be easily 
            representable by one value here).
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient">
            <summary>
            Provides client connections for Bluetooth network services with Widcomm stack.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonDiscoveryBluetoothClient">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonDiscoveryBluetoothClient.ConvertBthInquiryParams(System.Int32,System.TimeSpan,System.Byte@,System.Byte@)">
            <summary>
            Convert the user Inquiry parameters to the formats used by HCI.
            </summary>
            <param name="maxDevices">The <c>maxDevices</c> parameter from e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Bool,System.Bool,System.Bool,System.Bool)"/>.
            </param>
            <param name="inquiryLength">The <see cref="P:InTheHand.Net.Sockets.BluetoothClient.InquiryLength"/> property
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </param>
            <param name="hciMaxResponses">On return contains the Num_Responses value to be passed to the HCI Inquiry command.
            If greater that 255 or less than zero, the value 0 will be returned.
            HCI uses zero as "Unlimited".
            </param>
            <param name="hciInquiryLength">On return contains the Inquiry_Length value to be passed to the HCI Inquiry command.
            Is scaled by the divisor 1.28secs
            and if not in range 1 to 0x30 inclusive is set to 10.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            When overidden, initiates 
            lookup the SDP record with the give Service Class Id
            to find the RFCOMM port number (SCN) that the server is listening on.
            The process returns a list of port numbers.
            </summary>
            <param name="address">The remote device.
            </param>
            <param name="serviceGuid">The Service Class Id.
            </param>
            <param name="asyncCallback">callback</param>
            <param name="state">state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.EndServiceDiscovery(System.IAsyncResult)">
            <summary>
            When overidden, 
            completes the SDP Record to port number lookup process
            </summary>
            -
            <param name="ar">IAsyncResult from <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <remarks>
            <para>There must be at least one entry in the result list for each
            Service Record found for the specified Service Class Id.  This
            allows us to know if no records were found, or that records were
            found but none of them were for RFCOMM.
            If a particular record does not have a RFCOMM port then -1 (negative
            one should be added to the list for it).
            </para>
            <para>The process may throw an exception if an error occurs, e.g.
            the remote device did not respond.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:System.Collections.Generic.List{System.Int32}"/>
            with at least one entry for each Service Record
            found for the specified Service Class Id, the item being -1 if the
            record has no port. is .
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient.#ctor(InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStreamBase,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used by WidcommBluetoothListener to return the newly accepted connection.
            </summary>
            -
            <param name="strm">The WidcommRfcommStream containing the newly connected 
            RfCommPort.
            </param>
            <param name="factory">Factory to use in GetRemoteMachineName etc.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient.ReadKnownDeviceFromTheRegistry">
            <summary>
            ... Allow the tests to disable the Registry lookup.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.BluetoothFactory">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.BluetoothFactory.GetTheFactoryOfTypeOrDefault``1">
            <summary>
            PRE-RELEASE
            Get the instance of the given factory type -- if it exists.
            </summary>
            -
            <typeparam name="TFactory">The factory type e.g.
            <see cref="T:InTheHand.Net.Bluetooth.SocketsBluetoothFactory"/>
            or <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase"/>
            etc.
            </typeparam>
            -
            <returns>The instance of the given type or <c>null</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.BluetoothFactory.GetTheFactoryOfTypeOrDefault(System.Type)">
            <summary>
            PRE-RELEASE
            Get the instance of the given factory type -- if it exists.
            </summary>
            -
            <param name="factoryType">The factory type e.g.
            <see cref="T:InTheHand.Net.Bluetooth.SocketsBluetoothFactory"/>
            or <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase"/>
            etc.
            </param>
            -
            <returns>The instance of the given type or <c>null</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog">
            <summary>
            Provides a form to select an available Bluetooth device.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Reset">
            <summary>
            Resets the properties of the <see cref="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog"/> to their default values.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowCustomDialog">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>true if the dialog box was successfully run; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.AddNewDeviceWizard">
            <summary>
            If TRUE, invokes the Add New Device Wizard.
            </summary>
            <remarks>Supported only on Windows XP/Vista with Microsoft stack.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.SkipServicesPage">
            <summary>
            If TRUE, skips the Services page in the Add New Device Wizard.
            </summary>
            <remarks>Supported only on Windows XP/Vista with Microsoft stack.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Info">
            <summary>
            Gets or sets the information text.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ClassOfDevices">
            <summary>
            Array of class of devices to find.
            </summary>
            <remarks>Clear the collection to return all devices.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.SelectedDevice">
            <summary>
            Gets the selected Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowAuthenticated">
            <summary>
            If TRUE, authenticated devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowRemembered">
            <summary>
            If TRUE, remembered devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowUnknown">
            <summary>
            If TRUE, unknown devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ForceAuthentication">
            <summary>
            If TRUE, forces authentication before returning.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly">
            <summary>
            If TRUE, only devices which are currently discoverable are shown in the picker.
            </summary>
            <remarks>
            <note>Does <strong>not</strong> work on the Microsoft stack on desktop Windows.
            There, when true the dialog will not open and will return an error to the caller.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.DiscoverableOnly">
            <summary>
            Obsolete, use <see cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
            instead.
            If TRUE, only devices which are currently discoverable are shown in the picker.
            </summary>
            <remarks>
            <para>Obsolete, use <see cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
            instead.
            </para>
            </remarks>
            <seealso cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.DeviceFilter">
             <summary>
             Set a function that will be called for each device
             that returns whether to include the device in the list or not.
             </summary>
             -
             <value>The function to call for each device.
             The function should returns <c>true</c> if the device is to be included or <c>false</c> if not.
             Pass <c>null</c> to the property to clear the filter function.
             </value>
             -
             <remarks>
             <para>The callback method is called for each device as it is 
             being added to the dialog box.  If the function returns <c>false</c> it 
             won't be added, otherwise it will be added and displayed. The 
             information about each device is provided as a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
             instance which will contain all the information about the device 
             that the discovery process knows and will also include any 
             information from the remembered/authenticated/paired devices. 
             Note that prior to Bluetooth v2.1 a separate query has to be 
             carried out to find whether the device also has a name, so unless 
             both devices are v2.1 or later then it&apos;s likely that the 
             name won't be included in the first discovery. 
             <see href="http://32feet.codeplex.com/wikipage?title=DeviceName%20and%20Discovery"/>
             </para>
             </remarks>
             -
             <example>
                 '......
                 Dim dlg As New InTheHand.Windows.Forms.SelectBluetoothDeviceDialog()
                 dlg.DeviceFilter = AddressOf FilterDevice
                 Dim rslt As DialogResult = dlg.ShowDialog()
                 '...... 
            
             Shared Function FilterDevice(ByVal dev As BluetoothDeviceInfo) As Boolean
                 Dim rslt As DialogResult = MessageBox.Show("Include this device " &amp; dev.DeviceAddress.ToString &amp; " " &amp; dev.DeviceName, "FilterDevice", MessageBoxButtons.YesNo)
                 Dim ret As Boolean = (DialogResult.Yes = rslt)
                 Return ret
             End Function
             </example>
        </member>
        <member name="T:InTheHand.Net.BluetoothAddress">
            <summary>
            Represents a Bluetooth device address.
            </summary>
            <remarks>The BluetoothAddress class contains the address of a bluetooth device.</remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.IacFirst">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.IacLast">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.Liac">
            <summary>
            Limited Inquiry Access Code.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.Giac">
            <summary>
            General Inquire Access Code.
            The default inquiry code which is used to discover all devices in range.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            <param name="address"><see cref="T:System.Int64"/> representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            -
            <remarks>
            <para>Note: The address should be supplied in little-endian order on the
            current Windows platform (which is little-endian).
            For forward compatibility it would be safer to use the 
            <see cref="M:InTheHand.Net.BluetoothAddress.Parse(System.String)"/> method, 
            which will be correct for all platforms.
            Or consider
            <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/>
            or 
            <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/>.
            
            </para>
            </remarks>
            -
            <param name="address">Address as 6 byte array.</param>
            <exception cref="T:System.ArgumentNullException">address passed was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">address passed was not a 6 byte array.</exception>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.BluetoothAddress"/> from an Array of <see cref="T:System.Byte"/>
            where the array is in standard order.
            </summary>
            -
            <remarks>
            <para>Different protocol stacks have different ways of storing a
            Bluetooth Address.   Some use an array of bytes e.g. "byte[6]",
            which means that the first byte of the address comes first in
            memory (which we&#x2019;ll call big-endian format).  Others
            e.g. the Microsoft stack use a long integer (e.g. uint64) which
            means that the *last* byte of the address come comes first in
            memory (which we&#x2019;ll call little-endian format)
            </para>
            <para>This method creates an address for the first form.
            See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/> for the second form.
            </para>
            </remarks>
            -
            <param name="address">An Array of <see cref="T:System.Byte"/>
            with the Bluetooth Address ordered as described above.
            </param>
            -
            <returns>The resultant <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.BluetoothAddress"/> from an Array of <see cref="T:System.Byte"/>
            where the array is in reverse order.
            </summary>
            -
            <remarks>
            <para>Different protocol stacks have different ways of storing a
            Bluetooth Address.   Some use an array of bytes e.g. "byte[6]",
            which means that the first byte of the address comes first in
            memory (which we&#x2019;ll call big-endian format).  Others
            e.g. the Microsoft stack use a long integer (e.g. uint64) which
            means that the *last* byte of the address come comes first in
            memory (which we&#x2019;ll call little-endian format)
            </para>
            <para>This method creates an address for the second form.
            See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/> for the first form.
            </para>
            </remarks>
            -
            <param name="address">An Array of <see cref="T:System.Byte"/>
            with the Bluetooth Address ordered as described above.
            </param>
            -
            <returns>The resultant <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.TryParse(System.String,InTheHand.Net.BluetoothAddress@)">
            <summary>
            Converts the string representation of an address to it's <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent to the address contained in s, if the conversion succeeded, or null (Nothing in Visual Basic) if the conversion failed.
            The conversion fails if the s parameter is null or is not of the correct format.</param>
            <returns>true if s is a valid Bluetooth address; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Parse(System.String)">
            <summary>
            Converts the string representation of a Bluetooth address to a new <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <returns>New <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.</returns>
            <remarks>Address must be specified in hex format optionally separated by the colon or period character e.g. 000000000000, 00:00:00:00:00:00 or 00.00.00.00.00.00.</remarks>
            <exception cref="T:System.ArgumentNullException">bluetoothString is null.</exception>
            <exception cref="T:System.FormatException">bluetoothString is not a valid Bluetooth address.</exception>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArray">
            <summary>
            Returns the value as a byte array.
            </summary>
            -
            <remarks>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </remarks>
            -
            <returns>An array of byte</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArrayLittleEndian">
            <summary>
            Returns the value as a byte array,
            where the array is in reverse order.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/> for discussion of
            different stack#x2019;s storage formats for Bluetooth Addresses.
            </para>
            <para>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </para>
            </remarks>
            -
            <returns>An array of byte of length six representing the Bluetooth address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArrayBigEndian">
            <summary>
            Returns the value as a byte array,
            where the array is in standard order.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/> for discussion of
            different stack#x2019;s storage formats for Bluetooth Addresses.
            </para>
            <para>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </para>
            </remarks>
            -
            <returns>An array of byte of length six representing the Bluetooth address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToInt64">
            <summary>
            Returns the Bluetooth address as a long integer.
            </summary>
            -
            <returns>An <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.BluetoothAddress"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothAddress"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.BluetoothAddress"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Equality(InTheHand.Net.BluetoothAddress,InTheHand.Net.BluetoothAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.BluetoothAddress"/> objects are equal.<para><b>New in v1.5</b></para>
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the values of the two instance are equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Inequality(InTheHand.Net.BluetoothAddress,InTheHand.Net.BluetoothAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.BluetoothAddress"/> objects are not equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the value of the two instance is different;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString">
            <summary>
            Converts the address to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
            <remarks>The default return format is without a separator character 
            - use the <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            overload for more formatting options.</remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this address.
            The format parameter can be "N", "C", or "P".
            If format is null or the empty string (""), "N" is used.</param>
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/>.</returns>
            <remarks><list type="table">
            <listheader><term>Specifier</term><term>Format of Return Value </term></listheader>
            <item><term>N</term><term>12 digits: <para>XXXXXXXXXXXX</para></term></item>
            <item><term>C</term><term>12 digits separated by colons: <para>XX:XX:XX:XX:XX:XX</para></term></item>
            <item><term>P</term><term>12 digits separated by periods: <para>XX.XX.XX.XX.XX.XX</para></term></item>
            </list></remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.None">
            <summary>
            Provides a null Bluetooth address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this 
            <see cref="T:InTheHand.Net.BluetoothAddress"/> instance, according to the provided format specifier.
            </summary>
            -
            <param name="format">A single format specifier that indicates how to format the value of this Address.
            See <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </param>
            <param name="formatProvider">Ignored.
            </param>
            -
            <returns>A <see cref="T:System.String"/> representation of the value of this
            <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <remarks>See <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Clone">
            <summary>
            Creates a copy of the <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </summary>
            <remarks>Creates a copy including of the internal byte array.
            </remarks>
            <returns>A copy of the <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.BluetoothAddress.Sap">
            <summary>
            Significant address part.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothAddress.Nap">
            <summary>
            Non-significant address part.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothRadio">
            <summary>
            Represents a Bluetooth Radio device.
            </summary>
            <remarks>Allows you to query properties of the radio hardware and set the mode.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.AllRadios">
            <summary>
             Gets an array of all Bluetooth radios on the system.  
            </summary>
            <remarks>Under Windows CE this will only ever return a single <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            <para>If the device has a third-party stack this property will return an empty collection</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.PrimaryRadio">
            <summary>
            Gets the primary <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/>.
            </summary>
            <remarks>For Windows CE based devices this is the only <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/>, for Windows XP this is the first available <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            <para>If the device has a third-party stack this property will return null</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.IsSupported">
            <summary>
            Gets a value that indicates whether the 32feet.NET library can be used with the current device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.StackFactory">
            <summary>
            Gets a class factory for creating client and listener instances on a particular stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Remote">
            <summary>
            Gets whether the radio is on a Bluetooth stack on a remote machine.
            </summary>
            -
            <value>Is <see langword="null"/> if the radio is on to the local
            machine, otherwise it&#x2019;s the name of the remote machine to which the
            radio is attached.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Handle">
            <summary>
            Gets the handle for this radio.
            </summary>
            <remarks>Relevant only on Windows XP.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HardwareStatus">
            <summary>
            Returns the current status of the Bluetooth radio hardware.
            </summary>
            <value>A member of the <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HardwareStatus"/> enumeration.</value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">
            <summary>
            Gets or Sets the current mode of operation of the Bluetooth radio.
            </summary>
            <remarks>
            <para><strong>Microsoft CE/WM</strong></para>
            This setting will be persisted when the device is reset.
            An Icon will be displayed in the tray on the Home screen and a ?Windows Mobile device will emit a flashing blue LED when Bluetooth is enabled.
            
            <para><strong>Widcomm Win32</strong></para>
            <para>Is supported.
            </para>
            
            <para><strong>Widcomm CE/WM</strong></para>
            <para>Get and Set both supported.
            </para>
            <list type="table">
            <listheader><term>Mode</term><term>Get</term><term>Set</term>
            </listheader>
            <item><term>PowerOff</term><term>Disabled or non-connectable</term>
            <term>CONNECT_ALLOW_NONE</term>
            </item>
            <item><term>Connectable</term><term>Connectable</term>
            <term>CONNECT_ALLOW_ALL, note not CONNECT_ALLOW_PAIRED.</term>
            </item>
            <item><term>Discoverable</term><term>Discoverable</term>
            <term>Plus also discoverable.</term>
            </item>
            </list>
            <para>Note also that when the Widcomm stack is disabled/off
            we report <c>PowerOff</c> (not in 2.4 and earlier), but
            we can't turn put it in that mode from the library.
            Neither can we turn it back on, <strong>except</strong> that
            it happens when the application first uses Bluetooth!
            </para>
            
            <para><strong>Widcomm Win32</strong></para>
            <para>Set is not supported.  There's no Widcomm API support.
            </para>
            
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LocalAddress">
            <summary>
            Get the address of the local Bluetooth radio device.
            </summary>
            -
            <remarks><para>The property can return a <see langword="null"/> value in
            some cases.  For instance on CE when the radio is powered-off the value 
            will be <see>null</see>.</para>
            </remarks>
            -
            <value>The address of the local Bluetooth radio device.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Name">
            <summary>
            Returns the friendly name of the local Bluetooth radio.
            </summary>
            -
            <remarks>
            <para>Devices normally cache the remote device name, only reading it the first
            time the remote device is discovered.  It is generally not useful then to change
            the name to provide a status update.  For instance on desktop Windows
            with the Microsoft stack we haven't found a good way for the name to be
            flushed so that it is re-read, even deleting the device didn't flush the
            name if I remember correctly.
            </para>
            <para>Currently read-only on Widcomm stack.  Probably could be supported,
            let us know if you need this function.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.ClassOfDevice">
            <summary>
            Returns the Class of Device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Manufacturer">
            <summary>
            Returns the manufacturer of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion">
            <summary>
            Bluetooth Version supported by the Host Controller Interface implementation.
            </summary>
            -
            <remarks>
            <para>There are five fields returned by the Read Local Version Information
            HCI command: HCI Version, HCI Revision, LMP Version,
            Manufacturer_Name, and LMP Subversion.
            We expose all five, but not all platforms provide access to them all.
            The Microsoft stack on desktop Windows exposes all five,
            except for Windows XP which only exposes the Manufacturer
            and LmpSubversion values.  Bluetopia apparently exposes none of them.
            The Microsoft stack on Windows Mobile, Widcomm on both platforms,
            BlueSoleil, and BlueZ expose all five.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciRevision">
            <summary>
            Manufacture's Revision number of the HCI implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LmpVersion">
            <summary>
            Bluetooth Version supported by the Link Manager Protocol implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LmpSubversion">
            <summary>
            Manufacture's Revision number of the LMP implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.SoftwareManufacturer">
            <summary>
            Returns the manufacturer of the Bluetooth software stack running locally.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.DecoratorNetworkStream">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.ObexListener">
            <summary>
            Provides a simple, programmatically controlled OBEX protocol listener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.#ctor">
            <overloads>
            Initializes a new instance of the ObexListener class.
            </overloads>
            -
            <summary>
            Initializes a new instance of the ObexListener class using the Bluetooth transport.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.#ctor(InTheHand.Net.ObexTransport)">
            <summary>
            Initializes a new instance of the ObexListener class specifiying the transport to use.
            </summary>
            -
            <param name="transport">Specifies the transport protocol to use.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Start">
            <summary>
            Allows this instance to receive incoming requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Stop">
            <summary>
            Causes this instance to stop receiving incoming requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Close">
            <summary>
            Shuts down the ObexListener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.GetContext">
            <summary>
            Waits for an incoming request and returns when one is received.
            </summary>
            -
            <remarks>
            <para>This method blocks waiting for a new connection.  It will
            return when a new connection completes or 
            <see cref="M:InTheHand.Net.ObexListener.Stop"/>/<see cref="M:InTheHand.Net.ObexListener.Close"/>
            has been called.
            </para>
            </remarks>
            -
            <returns>Returns a <see cref="T:InTheHand.Net.ObexListenerContext"/>
            or <see langword="null"/> if
            <see cref="M:InTheHand.Net.ObexListener.Stop"/>/<see cref="M:InTheHand.Net.ObexListener.Close"/>
            has been called.
            </returns>
        </member>
        <member name="P:InTheHand.Net.ObexListener.Authenticate">
            <summary>
            Get or set whether the transport connection (e.g. Bluetooth) will
            require Authentication.
            </summary>
            -
            <remarks>
            <para>Only Bluetooth supports this, TCP/IP and IrDA do not.
            On Bluetooth this uses <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Authenticate">BluetoothListener.Authenticate</see>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListener.Encrypt">
            <summary>
            Get or set whether the transport connection (e.g. Bluetooth) will
            require Encryption.
            </summary>
            -
            <remarks>
            <para>Only Bluetooth supports this, TCP/IP and IrDA do not.
            On Bluetooth this uses <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Encrypt">BluetoothListener.Encrypt</see>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListener.IsListening">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Net.ObexListener"/> has been started.
            </summary>
        </member>
        <member name="M:InTheHand.Net.AsyncResult`1.SetAsCompletedWithResultOf(InTheHand.SystemCore.Func{`0},System.Boolean)">
            <summary>
            Get the results of the operation from the specified function
            and set the operation as completed,
            or if getting the results fails then set the corresponding error
            completion.
            </summary>
            -
            <remarks>
            <para>The pattern that comes to mind when calling
            <see cref="M:SetAsCompleted(TResult,AsyncResultCompletion)"/> is
            the incorrect:
            <code>try {
               var result = SomeStatementsAndFunctionCallsToGetTheResult(...);
               ar.SetAsCompleted(result, false);
            } catch (Exception ex) {
               ar.SetAsCompleted(ex, false);
            }
            </code>
            That is wrong because if the user callback fails with an exception
            then we'll catch it and try to call SetAsCompleted a second time!
            </para>
            <para>We need to instead call SetAsCompleted outside of the try
            block.  This method provides that pattern.
            </para>
            </remarks>
            -
            <param name="getResultsOrThrow">A delegate containing the function
            to call to get the result.
            It should throw an exception in error cases.
            </param>
            <param name="completedSynchronously"></param>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Manufacturer">
            <summary>
            Manufacturer codes.
            </summary>
            <remarks>Defined in Bluetooth Specifications <see href="https://www.bluetooth.org/Technical/AssignedNumbers/identifiers.htm"/>.</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
            event.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo[],System.Object)">
            <summary>
            Initialise a new instance.
            </summary>
            -
            <param name="devices">The result, may be empty but not null.
            </param>
            <param name="userState">Any user state object.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            Initialise a new instance.
            </summary>
            -
            <param name="exception">The resultant error.
            </param>
            <param name="userState">Any user state object.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.Devices">
            <summary>
            Gets the list of discovered Bluetooth devices.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothComponent">
             <summary>
             Provides simple access to asynchronous methods on Bluetooth features, for
             instance to background device discovery.
             </summary>
             -
             <example>
             <code lang="VB.NET">
             Public Sub DiscoDevicesAsync()
                 Dim bco As New BluetoothComponent()
                 AddHandler bco.DiscoverDevicesProgress, AddressOf HandleDiscoDevicesProgress
                 AddHandler bco.DiscoverDevicesComplete, AddressOf HandleDiscoDevicesComplete
                 bco.DiscoverDevicesAsync(255, True, True, True, False, 99)
             End Sub
            
             Private Sub HandleDiscoDevicesProgress(ByVal sender As Object, ByVal e As DiscoverDevicesEventArgs)
                 Console.WriteLine("DiscoDevicesAsync Progress found {0} devices.", e.Devices.Length)
             End Sub
            
             Private Sub HandleDiscoDevicesComplete(ByVal sender As Object, ByVal e As DiscoverDevicesEventArgs)
                 Debug.Assert(CInt(e.UserState) = 99)
                 If e.Cancelled Then
                     Console.WriteLine("DiscoDevicesAsync cancelled.")
                 ElseIf e.Error IsNot Nothing Then
                     Console.WriteLine("DiscoDevicesAsync error: {0}.", e.Error.Message)
                 Else
                     Console.WriteLine("DiscoDevicesAsync complete found {0} devices.", e.Devices.Length)
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.#ctor(InTheHand.Net.Sockets.BluetoothClient)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
            -
            <param name="cli">A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> 
            instance to use to run discovery on.  Must be non-null.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.Dispose(System.Boolean)">
            <summary>
            Optionally disposes of the managed resources used by the
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged
            resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.OnDiscoveryComplete(InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs"/>
            object that contains event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.OnDiscoveryProgress(InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs"/>
            object that contains event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Discovers accessible Bluetooth devices and returns their names and addresses.
            This method does not block the calling thread.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            for more information.
            </para>
            <para>The devices are presented in the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
            and <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/> events.
            </para>
            </remarks>
            -
            <param name="maxDevices">The maximum number of devices to get information about.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.
            </param>
            <param name="remembered">True to return remembered devices.
            </param>
            <param name="unknown">True to return previously unknown devices.
            </param>
            <param name="discoverableOnly">True to return only the devices that 
            are in range, and in    discoverable mode.  See the remarks section.
            </param>
            <param name="state">A user-defined object that is passed to the method
            invoked when the asynchronous operation completes.
            </param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete">
            <summary>
            Occurs when an device discovery operation completes.
            </summary>
            -
            <remarks>
            <para>This event is raised at the end of the discovery process
            and lists all the discovered devices.
            </para>
            </remarks>
            -
            <seealso cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress">
            <summary>
            Occurs during an device discovery operation
            to show one or more new devices.
            </summary>
            -
            <remarks>
            <para>This event is raised for all discovered devices, both the
            known devices which are presented first, if requested,
            as well as newly discovery device found by the inquiry process,
            again if requested.
            </para>
            <para>Note that any event instance may include one or more devices.  Note
            also that a particular device may be presented more than one time;
            including once from the &#x2018;known&#x2019; list, once when a
            device is dicovered, and possibly another time when the discovery
            process retrieves the new device&#x2019;s Device Name.
            </para>
            </remarks>
            -
            <seealso cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IL2CapClient">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IL2CapClient.GetMtu">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStreamBase.Bond(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Wrapper around CBtIf::Bond().
            </summary>
            <param name="device"><see cref="T:InTheHand.Net.BluetoothAddress"/></param>
            <param name="passcode"><see cref="T:System.String"/></param>
            <returns><see langword="true"/> if pairing was completed.
            <see langword="false"/> if were already paired, or pairing failed.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.NativeMethods.BluetoothAuthenticateDevice(System.IntPtr,System.IntPtr,InTheHand.Net.Bluetooth.Msft.BLUETOOTH_DEVICE_INFO@,System.String,System.Int32)">
            <summary>
            The BluetoothAuthenticateDevice function sends an authentication request to a remote Bluetooth device.
            </summary>
            <param name="hwndParent">The window to parent the authentication wizard.
            If NULL, the wizard will be parented off the desktop.</param>
            <param name="hRadio">A valid local radio handle, or NULL. If NULL, authentication is attempted on all local radios; if any radio succeeds, the function call succeeds.</param>
            <param name="pbtdi">A structure of type BLUETOOTH_DEVICE_INFO that contains the record of the Bluetooth device to be authenticated.</param>
            <param name="pszPasskey">A Personal Identification Number (PIN) to be used for device authentication. If set to NULL, the user interface is displayed and and the user must follow the authentication process provided in the user interface. If pszPasskey is not NULL, no user interface is displayed. If the passkey is not NULL, it must be a NULL-terminated string. For more information, see the Remarks section.</param>
            <param name="ulPasskeyLength">The size, in characters, of pszPasskey.
            The size of pszPasskey must be less than or equal to BLUETOOTH_MAX_PASSKEY_SIZE.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.NativeMethods.BluetoothAuthenticateDeviceEx(System.IntPtr,System.IntPtr,InTheHand.Net.Bluetooth.Msft.BLUETOOTH_DEVICE_INFO@,System.Byte[],InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements)">
            <summary>
            The BluetoothAuthenticateDeviceEx function sends an authentication request to a remote Bluetooth device. Additionally, this function allows for out-of-band data to be passed into the function call for the device being authenticated.
            Note  This API is supported in Windows Vista SP2 and Windows 7.
            </summary>
            <param name="hwndParentIn">The window to parent the authentication wizard.
            If NULL, the wizard will be parented off the desktop.</param>
            <param name="hRadioIn">A valid local radio handle or NULL.
            If NULL, then all radios will be tried. If any of the radios succeed, then the call will succeed.</param>
            <param name="pbtdiInout">A pointer to a BLUETOOTH_DEVICE_INFO structure describing the device being authenticated.</param>
            <param name="pbtOobData">Pointer to device specific out-of-band data to be provided with this API call.
            If NULL, then UI is displayed to continue the authentication process.
            If not NULL, no UI is displayed.</param>
            <param name="authenticationRequirement">An AUTHENTICATION_REQUIREMENTS enumeration that specifies the protection required for authentication.</param>
            <returns></returns>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_LOCAL_INFO">
            <summary>
            Input:  none
            Output:  BTH_LOCAL_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_RADIO_INFO">
            <summary>
            Input:  BTH_ADDR
            Output:  BTH_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_DEVICE_INFO">
             <summary>
             use this ioctl to get a list of cached discovered devices in the port driver.
            
             Input: None
             Output: BTH_DEVICE_INFO_LIST
             </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_DISCONNECT_DEVICE">
            <summary>
            Input:  BTH_ADDR
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_DEVICE_RSSI">
            <summary>
            Input:   BTH_GET_DEVICE_RSSI
            Output:  ULONG
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_GET_RECORDS">
            <summary>
            Input:   BTH_EIR_GET_RECORDS
            Output:  UCHAR array, sequence of length + type + data fields triplets.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_SUBMIT_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  HANDLE
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_UPDATE_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_REMOVE_RECORD">
            <summary>
            Input:   HANDLE
            Output:  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_HCI_VENDOR_COMMAND">
            <summary>
            Input:   BTH_VENDOR_SPECIFIC_COMMAND 
            Output:  PVOID
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_CONNECT">
            <summary>
            Input:  BTH_SDP_CONNECT
            Output:  BTH_SDP_CONNECT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_DISCONNECT">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SERVICE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_SEARCH_REQUEST
            Output:  ULONG * number of handles wanted
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SERVICE_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SUBMIT_RECORD">
            <summary>
            Input:  raw SDP stream (at least 2 bytes)
            Ouptut: HANDLE_SDP
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_REMOVE_RECORD">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SUBMIT_RECORD_WITH_INFO">
            <summary>
            Input:  BTH_SDP_RECORD + raw SDP record
            Output:  HANDLE_SDP
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_REGISTER">
            <summary>
            Register the service. For SAP, this means sending out a periodic broadcast.
            This is an NOP for the DNS namespace.
            For persistent data stores, this means updating the address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_DEREGISTER">
            <summary>
             Remove the service from the registry.
             For SAP, this means stop sending out the periodic broadcast.
             This is an NOP for the DNS namespace.
             For persistent data stores this means deleting address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_DELETE">
            <summary>
            Delete the service from dynamic name and persistent spaces.
            For services represented by multiple CSADDR_INFO structures (using the SERVICE_MULTIPLE flag), only the specified address will be deleted, and this must match exactly the corresponding CSADDR_INFO structure that was specified when the service was registered 
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
            -
            <remarks>
            <para>Used by <see cref="P:InTheHand.Net.Bluetooth.BluetoothPublicFactory.BluetoothSecurity"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            -
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            -
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">Address of the requesting device.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">The device whose Link Key to retrieve.</param>
            <param name="linkKey">The 16-byte Link Key to set.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Device Identification Profile specification.
            </summary>
            -
            <remarks>
            <para>&#x201C;This document specifies a method by which Bluetooth devices may
            provide information that may be used by peer Bluetooth devices to
            find representative icons or load associated support software. This
            information is published as Bluetooth SDP records, and optionally in
            an Extended Inquiry Response.&#x201D;
            </para>
            <para>Used in records with Service Class ID:
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation"/>.
            </para>
            <para>As well as the attributes defined here, use of some of the universal
            attributes is recommended, they are:
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl"/>,
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/>,
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.SpecificationId">
            <summary>
            SpecificationId [0x0200]
            </summary>
            <remarks>The version of the Bluetooth Device ID Profile Specification
            supported by the device.
            e.g. version 1.3 will be value 0x0103. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorId">
            <summary>
            VendorId [0x0201]
            </summary>
            <remarks>
            <para>The id assigned by the organisation in <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource" />. [<c>UInt16</c>]
            </para>
            <para>&#x201C;The value <c>FFFF</c> is reserved as the default id when
            no Device ID Service Record is present in the device.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.ProductId">
            <summary>
            ProductId [0x0202]
            </summary>
            <remarks>Distinguishes between different products made by the same vendor. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.Version">
            <summary>
            Version [0x0203]
            </summary>
            <remarks>The version of the product. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.PrimaryRecord">
            <summary>
            PrimaryRecord [0x0204]
            </summary>
            <remarks>If multiple Device ID records are present this indicates the one &#x2019;primary&#x201A; record. [<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource">
            <summary>
            VendorIdSource [0x0205]
            </summary>
            <remarks>Designates which organisation assigned the Vendor ID value. [<c>UInt16</c>]
            <list type="table">
            <listheader><term>Value</term><term>Assigning Organisation</term></listheader>
            <item><term>1</term><term>Bluetooth SIG</term></item>
            <item><term>2</term><term>USB Implementors Forum</term></item>
            <item><term>0, 3-FFFF</term><term>reserved</term></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.L2CapListener">
            <summary>
            Listens for connections from L2CAP Bluetooth network clients.
            </summary>
            -
            <remarks>
            <para>The <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class provides simple methods 
            that listen for and accept incoming connection requests.  New connections 
            are returned as <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> instances.
            </para>
            <para>In the normal case a the listener is initialised with a 
            <see cref="T:System.Guid"/> holding the Service Class Id on which it is 
            to accept connections, the listener will automatically create a SDP 
            Service Record containg that Service Class Id and the port number
            (L2CAP Protocol Service Multiplexer) that it has started listening on.
            The standard usage is thus as follows.
            </para>
            <code lang="VB.NET">
            Class MyConsts
              Shared ReadOnly MyServiceUuid As Guid _
                = New Guid("{00112233-4455-6677-8899-aabbccddeeff}")
            End Class
            
              ...
              Dim lsnr As New L2CapListener(MyConsts.MyServiceUuid)
              lsnr.Start()
              ' Now accept new connections, perhaps using the thread pool to handle each
              Dim conn As New L2CapClient = lsnr.AcceptClient()
              Dim peerStream As Stream = conn.GetStream()
              ...
            </code>
            <para>One can also pass the L2CapListener a Service Name, or
            a custom Service Record (Service Discovery Protocol record).
            To create a custom Service Record use 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>.
            </para>
            <para>There are overloads of the constructor which take a 
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> parameter instead of a 
            <see cref="T:System.Guid"/> as the Service Class Id, the Class Id
            value should be specified in that case in the endpoint.
            If the port value is specified in the endpoint, then the listener will 
            attempt to bind to that L2CAP PSM locally.  The address in the endpoint is 
            largely ignored as no current stack supports more than one local radio.
            </para>
            <para>The L2CAP protocol accepts only certain PSM values.  The value is
            a 16-bit integer, and the low byte must be odd and the high byte must
            be even. So e.g. 0x0001 is valid, but 0x0002 and 0x0101 are invalid.
            The range below 0x1001 is reserved for standards allocations.
            See the L2CAP Specification for more information, L2CAP section 4.2
            (and SDP section 5.1.5) in the version 2.1 specification.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class
            that listens on the specified service identifier.
            </summary>
            -
            <param name="service">The Bluetooth service to listen on.
            Either one of the values on <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>,
            or your custom UUID stored in a <see cref="T:System.Guid"/>.
            See the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> documentation for more information 
            on the usage of this argument.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class
            with the specified local endpoint.
            </summary>
            -
            <remarks>
            <para>The simpler constructor <see cref="M:InTheHand.Net.Sockets.L2CapListener.#ctor(System.Guid)"/>
            taking just a <see cref="T:System.Guid">System.Guid</see> is used 
            in most cases instead of this one.
            </para>
            </remarks>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            Either one of the values on <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>,
            or your custom UUID stored in a <see cref="T:System.Guid"/>.
            See the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> documentation for more information 
            on the usage of this argument.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum
            number of pending connection.
            </summary>
            -
            <param name="backlog">The maximum length of the pending connections
            queue.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Stop">
            <summary>
            Closes the listener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.BeginAcceptClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An AsyncCallback delegate that references
            the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object containing information 
            about the accept operation. This object is passed to the callback
            delegate when the operation is complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.EndAcceptClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates
            a new <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> to handle remote host communication.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned
            by a call to the <see cref="M:InTheHand.Net.Sockets.L2CapListener.BeginAcceptClient(System.AsyncCallback,System.Object)"/> method.
            </param>
            -
            <returns>A <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.AcceptClient">
            <summary>
            Accepts a pending connection request.
            </summary>
            -
            <remarks>AcceptClient is a blocking method that returns a
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Sockets.L2CapListener.Pending"/> method to determine if connection
            requests are available in the incoming connection queue if you want
            to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.L2CapClient.GetStream"/> method to obtain
            the underlying <see cref="T:System.IO.Stream"/> of the returned
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            The <see cref="T:System.IO.Stream"/> will provide you with methods for
            sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>, be sure
            to call its <see cref="M:InTheHand.Net.Sockets.L2CapClient.Close"/> method.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> used to send and receive data.</returns>
            -
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            -
            <returns>true if there is a connection pending; otherwise, false.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            -
            <value>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            that the listener is using for communications.
            </value>
            -
            <remarks>
            <para>The <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> 
            property of the endpoint will contain the port number (L2CAP PSM) 
            that the listener is listening on.
            On some platforms, the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            is similarly set, or is <see cref="F:InTheHand.Net.BluetoothAddress.None">BluetoothAddress.None</see> 
            if not known.
            The endpoint&#x2019;s <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is never set.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            -
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.L2CapListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDADeviceInfo">
            <summary>
            Provides information about remote devices connected by infrared communications.
            </summary>
            <seealso cref="T:System.Net.Sockets.IrDADeviceInfo"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDADeviceInfo.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDADeviceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceAddress">
            <summary>
            Returns the address of the remote device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceID">
            <summary>
            Provided solely for compatibility with System.Net.IrDA - consider using <see cref="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceAddress"/> instead.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.CharacterSet">
            <summary>
            Gets the character set used by the server, such as ASCII.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.Hints">
            <summary>
            Gets the type of the device, such as a computer.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames">
            <summary>
            Specifies the media type information for an object.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Image">
            <summary>
            Specifies the type of image data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Gif">
            <summary>
            Specifies that the image data is in Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Jpg">
            <summary>
            Specifies that the image data is in Joint Photographic Experts Group (JPEG) format.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Text">
            <summary>
            Specifies the type of text data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Html">
            <summary>
            Specifies that the data is in HTML format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Plain">
            <summary>
            Specifies that the data is in plain text format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vCalendar">
            <summary>
            Specifies that the data is in vCalendar format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vCard">
            <summary>
            Specifies that the data is in vCard format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vMessage">
            <summary>
            Specifies that the data is in vMsg format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vNote">
            <summary>
            Specifies that the data is in vNote format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Xml">
            <summary>
            Specifies that the data is in XML format.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange">
            <summary>
            Specifies the type of Object Exchange specific data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.Capabilities">
            <summary>
            Used to retrieve supported object types.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.FolderListing">
            <summary>
            Used to retrieve folder listing with OBEX FTP.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.ObjectProfile">
            <summary>
            Used to retrieve an object profile.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothPublicFactory">
            <summary>
            Provides the means to create Bluetooth classes on the one selected Bluetooth
            stack where multiple are loaded in the same process.
            </summary>
            -
            <remarks>when 
            <para>When calling <c>new BluetoothClient()</c>, <c>new BluetoothListener()</c>,
            etc when multiple Bluetooth stacks are loaded at the same time then the
            instance is created on the primary stack.  This class allows the application
            to select which stack the instance is created on.
            Access this class via property
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.StackFactory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothClient">
            <overloads>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            class, using the respective stack and/or radio.
            </overloads>
            -
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            class, using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothClient(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class,
            with the specified local endpoint and
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.#ctor(InTheHand.Net.BluetoothEndPoint)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid)">
            <overloads>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class, using the respective stack and/or radio.
            </overloads>
            -
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id, local device address and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id, local device address and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothDeviceInfo(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <param name="addr">See <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexWebRequest(System.Uri)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.ObexWebRequest"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexWebRequest"/>.
            </returns>
            -
            <param name="requestUri">See <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexWebRequest(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this <see cref="T:InTheHand.Net.ObexWebRequest"/> class,
            given a scheme, a Bluetooth Device Address, and a remote path name; 
            using the respective stack and/or radio.
            </summary>
            -
            <param name="scheme">The Uri scheme. One of 
            <c>obex</c>, <c>obex-push</c>, <c>obex-ftp</c>, or <c>obex-sync</c>.
            </param>
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexWebRequest"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexListener">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.ObexListener"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexListener"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothPublicFactory.BluetoothSecurity">
            <summary>
            Gets the <see cref="T:InTheHand.Net.Bluetooth.BluetoothSecurity"/>
            instance for the respective stack and/or radio.
            </summary>
            -
            <value>A <see cref="T:InTheHand.Net.Bluetooth.BluetoothSecurity"/>
            as an <see cref="T:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity"/>
            </value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthPairRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;BthPairRequest passes the parameters to the <c>BthSetPIN</c>
            function and creates an ACL connection. Once the connection is established,
            it calls the <c>BthAuthenticate</c> function to authenticate the device.&#x201D;
            </para>
            <para>On Windows XP/Vista platforms this calls <c>BluetoothAuthenticateDevice</c>,
            if the pin argument is set to null a Wizard is displayed to accept a PIN from the user,
            otherwise the function executes in transparent mode.
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements)">
            <summary>
            Intiates pairing for a remote device
            with SSP if it is available.
            </summary>
            -
            <param name="device">Remote device with which to pair.</param>
            <param name="authenticationRequirement">
            Note: not supported by all platforms.
            </param>
            -
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <param name="device"></param>
            <param name="linkkey"></param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <param name="device">Address of the requesting device.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest()"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothFactoryFactory">
            <exclude/>
            <summary>
            Defines a class that provides Bluetooth Factory initialisation but returns
            multiple factories.
            </summary>
            -
            <remarks>
            <para>In most cases configuration is provided so that
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/> loads one or more
            classes each derived from <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/>.
            There the instance is the factory.  This interface allows a class to be 
            loaded by <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/> but 
            instead <strong>returns</strong> a list of factory instances.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothFactoryFactory.GetFactories(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Get the list of factories.
            </summary>
            <param name="errors">A list of exceptions, to which any errors in 
            attempting to create the factories are added.
            </param>
            <returns>A list of successfully created factories.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsSDKInitialized">
            <summary>
            The Btsdk_IsSDKInitialized function indicates whether a successful
            call to Btsdk_Init is made.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsServerConnected">
            <summary>
            The Btsdk_IsServerConnected function checks whether client
            application can call BlueSoleil Server APIs.
            </summary>
            <returns>
            When this fuction returns
            <see langword="true"/>, client application can call APIs normally, versa versit.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_SetStatusInfoFlag(System.UInt16)">
            <summary>
            The Btsdk_SetStatusInfoFlag function is used to set the status
            changing callback types which the user wants to receive.
            </summary>
            -
            <remarks>
            usMsgType can be one of the following value or their combination:
            <list type="definition">
            <item><term>BTSDK_NTSERVICE_STATUS_FLAG</term>
            <description>The status change of BlueSoleil server
            event or OS message event.</description>
            </item>
            <item><term>BTSDK_BLUETOOTH_STATUS_FLAG</term>
            <description>Message event of the change of Bluetooth</description>
            status.
            </item>
            <item><term>BTSDK_REFRESH_STATUS_FLAG</term>
            <description>Refresh event.</description>
            </item>
            </list>
            </remarks>
            -
            <param name="usMsgType">See remarks.</param>
            -
            <returns>BTSDK_OK for success, other for error code.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsBluetoothReady">
            <summary>
            The Btsdk_IsBluetoothReady function checks whether the local
            Bluetooth device is working.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_UpdateRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            Gets the current user-friendly name of the specified remote device.
            </summary>
            -
            <remarks>
            Before calling Btsdk_UpdateRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_StartBluetooth.
            The user-friendly device name is a UTF-8 character string. The device name acquired by this
            command is stored automatically in the device database.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteRSSI(System.UInt32,System.SByte@)">
            <summary>
            "gets the RSSI value of the specified remote device."
            </summary>
            -
            <remarks>
            <para>
            </para>
            <para>"a connection between local device and the specified
            remote device must be created first."
            </para>
            </remarks>
            -
            <param name="device_handle">hDev
            </param>
            <param name="prssi">"Range: -128 to 127 (dB)."
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteLinkQuality(System.UInt32,System.UInt16@)">
            <summary>
            "gets the current link quality value of the connection between local
            device and the specified remote device."
            </summary>
            -
            <remarks>"The higher the value, the better the link quality is."
            </remarks>
            -
            <returns>"Range: 0 to 0xFF."
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            "Gets the user-friendly name of the specified remote device from the device database."
            </summary>
            -
            <remarks>
            "Before calling Btsdk_GetRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_Init.
            The user-friendly device name is a UTF-8 character string. The Btsdk_GetRemoteDeviceNamefunction returns =BTSDK_OPERATION_FAILURE immediately if the device name doesn’t
            exist in the database. In this case, the application shall call Btsdk_UpdateRemoteDeviceName
            to acquire the name information directly from the remote device.
            BlueSoleil will automatically update the device name when the local device connects to the
            specified remote device.
            </remarks>
        </member>
        <member name="M:Utils.Process2.GetProcessesByName(System.String)">
            <summary>
            NETCF Version of: Creates an array of new Process components and associates them with all the process resources on the local computer that share the specified process name.
            </summary>
            -
            <param name="processName">e.g. "BTExplorer"
            </param>
            -
            <returns>An array of type <see cref="T:System.Diagnostics.Process"/>
            that represents the process resources running the specified application or file.
            </returns>
        </member>
        <member name="T:InTheHand.Net.ObexTransport">
            <summary>
            Supported network transports for Object Exchange.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.IrDA">
            <summary>
            Infrared (IrDA)
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.Bluetooth">
            <summary>
            Bluetooth
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.Tcp">
            <summary>
            TCP/IP
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.SocketClientAdapter">
            <summary>
            An adapter that provides a <see cref="T:System.Net.Sockets.Socket">System.Net.Sockets.Socket</see>-like
            interface to <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> etc.
            </summary>
            -
            <remarks>
            <para>Required as  on Widcomm/Broadcom <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            does not support getting a <see cref="T:System.Net.Sockets.Socket"/> from
            the <see cref="T:InTheHand.Net.Sockets.BluetoothClient.Client"/> property.
            Motivated by upgrading of <see cref="T:InTheHand.Net.ObexListener"/> to
            be usable on Widcomm.
            </para>
            <para>Also adapts <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>, and
            <see cref="T:System.Net.Sockets.TcpClient"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.SocketAdapter">
            <summary>
            Provide a <see cref="T:System.Net.Sockets.Socket">System.Net.Sockets.Socket</see>-like
            interace to another connection type e.g. a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            </summary>
            -
            <remarks>
            <para>See class <see cref="T:InTheHand.Net.Sockets.SocketClientAdapter"/>
            for an implementation that adapts <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            etc to the <see cref="T:System.Net.Sockets.Socket">Socket</see>-like interface.
            That is required as on Widcomm/Broadcom <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            does not support getting a <see cref="T:System.Net.Sockets.Socket"/> from
            the <see cref="T:InTheHand.Net.Sockets.BluetoothClient.Client"/> property.
            Motivated by upgrading of <see cref="T:InTheHand.Net.ObexListener"/> to
            be usable on Widcomm.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordUtilities">
            <summary>
            Utilities method working on SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>s, for instance to
            produce a 'dump' of the record's contents.
            </summary>
            -
            <remarks>
            This class produces output like the following:
            <code lang="none">
            AttrId: 0x0000 -- ServiceRecordHandle
            UInt32: 0x0
            
            AttrId: 0x0001 -- ServiceClassIdList
            ElementSequence
                Uuid16: 0x1000 -- ServiceDiscoveryServer
            
            AttrId: 0x0004 -- ProtocolDescriptorList
            ElementSequence
                ElementSequence
                    Uuid16: 0x100 -- L2CapProtocol
                    UInt16: 0x1
                ElementSequence
                    Uuid16: 0x1 -- SdpProtocol
            ( ( L2Cap, PSM=Sdp ), ( Sdp ) )
            
            AttrId: 0x0005 -- BrowseGroupList
            ElementSequence
                Uuid16: 0x1002 -- PublicBrowseGroup
            
            AttrId: 0x0006 -- LanguageBaseAttributeIdList
            ElementSequence
                UInt16: 0x656E
                UInt16: 0x6A
                UInt16: 0x100
            
            AttrId: 0x0100 -- ServiceName
            TextString: [en] 'Service Discovery'
            
            AttrId: 0x0101 -- ServiceDescription
            TextString: [en] 'Publishes services to remote devices'
            
            AttrId: 0x0102 -- ProviderName
            TextString: [en] 'Microsoft'
            
            AttrId: 0x0200 -- VersionNumberList
            ElementSequence
                UInt16: 0x100
            
            AttrId: 0x0201 -- ServiceDatabaseState
            UInt32: 0x1
            </code>
            The Service Class Id names and Attribute Id names are looked up using 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)"/>/etc and
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/>
            respectively.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.ServiceRecord)">
            <overloads>
            Produces a raw 'dump' of the given record, not including attribute names etc.
            </overloads>
            -
            <summary>
            Gets a string containing a raw 'dump' of the given record, not including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Produce a raw 'dump' of the given record, not including attribute names etc, to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])">
            <overloads>
            Produces a 'dump' of the given record, including attribute names etc.
            </overloads>
            --
            <summary>
            Gets a <see cref="T:System.String"/> containing a 'dump' of the given record, including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/> 
            overload for more information.
            </param>
            -
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])">
            <summary>
            Produce a 'dump' of the given record, including attribute names etc to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            -
            <remarks>
            <para>The system has built-in a set of mappings from Service Class to 
            its Attribute IDs. This is supplied by the 
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class,
            and contains the Attribute IDs defined in the base SDP specification as 
            well as in Bluetooth Profiles specification e.g. ObjectPushProfile, Headset,
            Panu, etc.
            If however the record being decoded is a custom one then a set of extra 
            Attribute Id definitions can be supplied in the 
            <paramref name="attributeIdEnumDefiningTypes"/> parameter.
            The Attribute IDs for a particular Service Class 
            should be defined in a static class and the set of such classes should 
            be passed as their <see cref="T:System.Type"/> object. e.g.
            <code lang="C#">
            static class FooAttributeId
            {
                public const ServiceAttributeId BarName = (ServiceAttributeId)0x0300;
            }
            
            &#x2026;
                ServiceRecordUtilities.Dump(writer, myRecord, typeof(FooAttributeId));
            &#x2026;
            </code>
            </para>
            </remarks>
            -
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            </param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.GuidToHackProtocolId(System.Guid,System.String@)">
            <summary>
            Attempt to get the name of the protocol,
            and optionally it's enum id if we handle it specially.
            </summary>
            -
            <param name="protocolGuid">The input.
            </param>
            <param name="protoStr">The protocol's name if known, or its
            Guid.ToString if not.
            We handle some explicitly, and otherwise we see if there's a
            matching value in BluetoothService that has its name suffixed "Protocol".
            </param>
            -
            <returns>The id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordUtilities.HackProtocolId"/>.
            We handle some explicitly,
            otherwise we see if its a UUID16 and convert it automatically,
            finally if neither we return <c>zero</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements">
            <summary>
            The AUTHENTICATION_REQUIREMENTS enumeration specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequired">
            <summary>
            Protection against a "Man in the Middle" attack is not required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequired">
            <summary>
            Protection against a "Man in the Middle" attack is required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotDefined">
            <summary>
            Protection against "Man in the Middle" attack is not defined.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtIf.CheckDependencies(System.Exception)">
            <summary>
            Check whether all the of dependencies are correct.
            </summary>
            -
            <param name="wrapException">The original exception we got on trying
            to load Widcomm.  Or <c>null</c> if Widcomm loaded successfully and
            we're just doing a check of the dependencies.
            </param>
            -
            <returns>Does not return if <paramref name="wrapException"/> is non-null,
            instead will throw it, or a more explanatory exception (with it as
            an inner exception).
            If <paramref name="wrapException"/> is null,
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtIf.ReportNeedNeedNativeDllUpgrade(System.Exception,System.Boolean)">
            <summary>
            ReportNeedNeedNativeDllUpgrade, call from pair of catch:
            EntryPointNotFoundException and MissingMethodException.
            </summary>
            <param name="ex">The exception.</param>
            <param name="mayAssert">Whether we may put up an (Debug.)Assert dialog box.
            </param>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.CONNECT_ERR">
            <summary>
            Could not connect to remote device 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.CONNECT_REJ">
            <summary>
            Remote device rejected the connection 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.SECURITY">
            <summary>
            Security failed 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.BAD_RECORD">
            <summary>
            Remote Service Record Error 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.OTHER_ERROR">
            <summary>
            Other error
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.SUCCESS">
            <summary>
            success response
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.EOF">
            <summary>
            no more devices found
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.ERROR">
            <summary>
            can not find exsiting entry for bda provided as input
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.MEM_ERROR">
            <summary>
            out of memory
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS">
            <summary>
            Used by OnStackChanges virtual method.
            </summary>
            <remarks>
            <para>1000-WCE-PG100-RCD.pdf (03/20/06) says:
            "... no longer used: DEVST_UP and DEVST_ERROR."
            and:
            "Values defined in BtIfClasses.h are:
            <code lang="none">
            • DEVST_DOWN — The stack is down and no longer available.
            • DEVST_UNLOADED — The stack is down, but should be available again after DEVST_RELOADED.
            • DEVST_RELOADED — The stack has been successfully reloaded."
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Down">
            <summary>
            Device is present, but down [Seen (on BTW)]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Up">
            <summary>
            Device is present and UP [Doc'd as obsolete, but I see it (on BTW)]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Error">
            <summary>
            Device is in error (maybe being removed) [Doc'd as obsolete]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Unloaded">
            <summary>
            Stack is being unloaded
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Reloaded">
            <summary>
            Stack reloaded after being unloaded
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CreateFromStoredRemoteDeviceInfo(InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used when loading a stack stored/remembered/maybe-paired device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CreateFromHandleDeviceResponded(System.Byte[],System.Byte[],System.Byte[],System.Boolean,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used when a device is discovered during Inquiry.
            </summary>
            -
            <remarks>
            <para>When the result of Inquiry and get-stack-stored-devices are merged,
            the remembered/authenticated flags may get set then (with <see cref="M:SetAuthenticated"/>).
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CheckAndSetIfPaired(InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Called after reading the device from the Registry, to find if it is paired.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.Merge(InTheHand.Net.Bluetooth.Factory.IBluetoothDeviceInfo)">
            <summary>
            For use when the results of Inquiry and get-stack-stored-devices are merged.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB">
            <summary>
            
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB.ToByteArray">
            <summary>
            Internal bytes
            </summary>
            <returns></returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB.Length">
            <summary>
            Size of the structure.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.so_RFCOMM_CONNINFO">
            <summary>
            Use with struct rfcomm_conninfo{hci_handle, dev_class}.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.BDADDR_ANY">
            
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.StackConsts.SdpRecordRegisterFlags">
            <summary>
            Values of the flags parameter to sdp_record_register
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.StackConsts.SdpConnectFlags">
            <summary>
            Values of the flags parameter to sdp_connect
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.sdp_attrreq_type_t.SDP_ATTR_REQ_INDIVIDUAL">
            <summary>
            Attributes are specified as individual elements
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.sdp_attrreq_type_t.SDP_ATTR_REQ_RANGE">
            <summary>
            Attributes are specified as a range
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BlueSoleil.SerialPortNetworkStream.Connected">
            <summary>
            For FooBarClient.Connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.NO_SERVICE">
            <summary>
            &#x201C;No service record with the specified search pattern is found on the remote device.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.SERVICE_RECORD_NOT_EXIST">
            <summary>
            &#x201C;The specified service record does not exist on the remote device..&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.PAGE_TIMEOUT">
            <summary>
            &#x201C;HCI error &#x201C;Page Timeout (0X04)&#x201D; is received.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebRequestCreate">
            <summary>
            Used to create a new web request for obex uri scheme
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexStatusCode">
            <summary>
            Specifies the status codes returned for an Object Exchange (OBEX) operation.
            </summary>
            <remarks>OBEX codes are directly related to their HTTP equivalents - see <see cref="T:System.Net.HttpStatusCode"/>.</remarks>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Final">
            <summary>
            Applied to another code to indicate this is the only response or final response in a series.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Continue">
            <summary>
            Equivalent to HTTP status 100.
            Continue indicates that the client can continue with its request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.OK">
            <summary>
            Equivalent to HTTP status 200.
            OK indicates that the request succeeded and that the requested information is in the response.
            This is the most common status code to receive.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Created">
            <summary>
            Equivalent to HTTP status 201.
            Created indicates that the request resulted in a new resource created before the response was sent. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Accepted">
            <summary>
            Equivalent to HTTP status 202.
            Accepted indicates that the request has been accepted for further processing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NonAuthorativeInformation">
            <summary>
            Equivalent to HTTP status 203.
            NonAuthoritativeInformation indicates that the returned metainformation is from a cached copy instead of the origin server and therefore may be incorrect.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NoContent">
            <summary>
            Equivalent to HTTP status 204.
            NoContent indicates that the request has been successfully processed and that the response is intentionally blank.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ResetContent">
            <summary>
            Equivalent to HTTP status 205.
            ResetContent indicates that the client should reset (not reload) the current resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PartialContent">
            <summary>
            Equivalent to HTTP status 206.
            PartialContent indicates that the response is a partial response as requested by a GET request that includes a byte range.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MultipleChoices">
            <summary>
            Equivalent to HTTP status 300.
            MultipleChoices indicates that the requested information has multiple representations.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MovedPermanently">
            <summary>
            Equivalent to HTTP status 301.
            MovedPermanently indicates that the requested information has been moved to the URI specified in the Location header.
            The default action when this status is received is to follow the Location header associated with the response.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MovedTemporarily">
            <summary>
            Equivalent to HTTP status 302.
            Redirect indicates that the requested information is located at the URI specified in the Location header.
            The default action when this status is received is to follow the Location header associated with the response.
            When the original request method was POST, the redirected request will use the GET method.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.SeeOther">
            <summary>
            Equivalent to HTTP status 303.
            SeeOther automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotModified">
            <summary>
            Equivalent to HTTP status 304.
            NotModified indicates that the client's cached copy is up to date.
            The contents of the resource are not transferred.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.UseProxy">
            <summary>
            Equivalent to HTTP status 305.
            UseProxy indicates that the request should use the proxy server at the URI specified in the Location header.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.BadRequest">
             <summary>
             Equivalent to HTTP status 400.
             BadRequest indicates that the request could not be understood by the server. BadRequest is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code. 
            
             <see cref="T:InTheHand.Net.ObexWebRequest"/> reports errors through 
             <see cref="P:InTheHand.Net.ObexWebResponse.StatusCode">ObexWebResponse.StatusCode</see>,
             this status code is overloaded by it to report failure to connect to the server.
             </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Unauthorized">
            <summary>
            Equivalent to HTTP status 401.
            Unauthorized indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PaymentRequired">
            <summary>
            Equivalent to HTTP status 402.
            PaymentRequired is reserved for future use.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Forbidden">
            <summary>
            Equivalent to HTTP status 403.
            Forbidden indicates that the server refuses to fulfill the request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotFound">
            <summary>
            Equivalent to HTTP status 404.
            NotFound indicates that the requested resource does not exist on the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to HTTP status 405.
            MethodNotAllowed indicates that the request method (POST or GET) is not allowed on the requested resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotAcceptable">
            <summary>
            Equivalent to HTTP status 406.
            NotAcceptable indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to HTTP status 407.
            ProxyAuthenticationRequired indicates that the requested proxy requires authentication.
            The Proxy-authenticate header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestTimeout">
            <summary>
            Equivalent to HTTP status 408.
            RequestTimeout indicates that the client did not send a request within the time the server was expecting the request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Conflict">
            <summary>
            Equivalent to HTTP status 409.
            Conflict indicates that the request could not be carried out because of a conflict on the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Gone">
            <summary>
            Equivalent to HTTP status 410.
            Gone indicates that the requested resource is no longer available.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.LengthRequired">
            <summary>
            Equivalent to HTTP status 411.
            LengthRequired indicates that the required Content-length header is missing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PreconditionFailed">
            <summary>
            Equivalent to HTTP status 412.
            PreconditionFailed indicates that a condition set for this request failed, and the request cannot be carried out.
            Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestedEntityTooLarge">
            <summary>
            Equivalent to HTTP status 413.
            RequestEntityTooLarge indicates that the request is too large for the server to process.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestedUrlTooLarge">
            <summary>
            Equivalent to HTTP status 414.
            RequestUriTooLong indicates that the URI is too long.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to HTTP status 415.
            UnsupportedMediaType indicates that the request is an unsupported type.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.InternalServerError">
            <summary>
            Equivalent to HTTP status 500.
            InternalServerError indicates that a generic error has occurred on the server.
            
            <see cref="T:InTheHand.Net.ObexWebRequest"/> reports errors through 
            <see cref="P:InTheHand.Net.ObexWebResponse.StatusCode">ObexWebResponse.StatusCode</see>,
            this status code is used by it to report failure to send the object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotImplemented">
            <summary>
            Equivalent to HTTP status 501.
            NotImplemented indicates that the server does not support the requested function.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.BadGateway">
            <summary>
            Equivalent to HTTP status 502.
            BadGateway indicates that an intermediate proxy server received a bad response from another proxy or the origin server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to HTTP status 503.
            ServiceUnavailable indicates that the server is temporarily unavailable, usually due to high load or maintenance.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.GatewayTimeout">
            <summary>
            Equivalent to HTTP status 504.
            GatewayTimeout indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to HTTP status 505.
            HttpVersionNotSupported indicates that the requested HTTP version is not supported by the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.DatabaseFull">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.DatabaseLocked">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAClient">
            <summary>
            Makes connections to services on peer IrDA devices.
            </summary>
            -
            <remarks>
            <para>Makes connections to services on peer IrDA devices.  It allows 
            discovery of all devices in range, then a connection can be made to 
            the required service on the chosen peer.  Or, given just the 
            service name a connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range—as is often the case.</para>
            <para>It can be used with both the full and Compact frameworks, and can 
            be used as a replacement for the latter's built-in version simply by 
            changing the referenced namespace and assembly.
            It also has features extra 
            to those in the CF's version.  For instance, following the 
            pattern of <see cref="T:System.Net.Sockets.TcpClient"/> in framework 
            version 2, it provides access to the underlying 
            <see cref="T:System.Net.Sockets.Socket"/> via a <c>Client</c> 
            property.  This is particularly useful as it allows setting socket 
            options, for instance IrCOMM Cooked mode with option <see 
            cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode"/>.
            </para>
            <para>There a number of well-known services, a few are listed here.
            <list type="bullet">
            <listheader><term>Service description</term>
                <description>Service Name, Protocol type</description></listheader>
            <item><term>OBEX file transfer</term>
                <description>OBEX:IrXfer, (TinyTP)</description></item>
            <item><term>OBEX general</term>
                <description>OBEX, (TinyTP)</description></item>
            <item><term>Printing</term>
                <description>IrLPT, IrLMP mode</description></item>
            <item><term>IrCOMM e.g. to modems</term>
                <description>IrDA:IrCOMM, IrCOMM 9-Wire/Cooked mode</description></item>
            </list>
            The modes required by the last two are set by socket option, as noted 
            for IrCOMM above.
            </para>
            <para>
            Of course the library also includes specific OBEX protocol support, both 
            client and server, see <see cref="T:InTheHand.Net.ObexWebRequest"/> etc.
            </para>
            </remarks>
            -
            <example>Example code to connect to a IrCOMM service would be as 
            follows.
            <code lang="VB.NET">
            Public Shared Sub Main()
              Dim cli As New IrDAClient
              ' Set IrCOMM Cooked/9-wire mode.
              cli.Client.SetSocketOption(IrDASocketOptionLevel.IrLmp, _
                IrDASocketOptionName.NineWireMode, _
                1)  ' equivalent to 'True'
              ' Connect
              cli.Connect("IrDA:IrCOMM")
              ' Connected, now send and receive e.g. by using the 
              ' NetworkStream returned by cli.GetStream
              ...
            End Sub
            </code>
            </example>
            -
            <seealso cref="N:InTheHand.Net.Sockets"/>
            <seealso cref="T:System.Net.Sockets.IrDAClient"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> class,
            and optionally connects to a peer device.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> class.
            </summary>
            <remarks>
            <para>
            It then allows discovery of all devices in range using <see cref="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices"/>, then a 
            connection can be made to the  required service on the chosen peer using <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            Or, given just the  service name a connection will be made to an arbitrary 
            peer, using <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/>.  This is 
            most useful when it is expected that there will be only one device in 
            range — as is often the case.</para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> 
            class and connects to the specified service name.
            </summary>
            -
            <remarks>
            <para>This is 
            equivalent to calling the default constructor followed by 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/>.      
            </para>
            <para>
            As noted the connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range &#x2014; as is often the case.  If a connection is to be made to
            a particular remote peer, then use the 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.#ctor(InTheHand.Net.IrDAEndPoint)"/>
            overload.
            </para>
            <para>
            Infrared connections are made by specifying a Service Name, which can 
            be any value provided the participating devices refer the same name.
            </para>
            <para>
            See <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> 
            for the errors that can occur.
            </para>
            </remarks>
            -
            <param name="service">
            A <see cref="T:System.String"/> containing the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor(InTheHand.Net.IrDAEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> 
            class and connects to the specified endpoint.
            </summary>
            <remarks>
            <para>
            This is 
            equivalent to calling the default constructor followed by 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            </para>
            <para>
            The endpoint specifies both the peer device and service name 
            to connect to.  If only one device is expected to be in range, or 
            an arbitrary peer device is suitable, then one can use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.#ctor(System.String)"/> instead.
            </para>
            </remarks>
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices">
            <summary>
            Obtains information about available devices.
            </summary>
            -
            <remarks>
            <para>Returns a maximum of 8 devices, for more flexibility use the other overloads.</para>
            </remarks>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices(System.Int32)">
            <summary>
            Obtains information about a specified number of devices.
            </summary>
            -
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices(System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Obtains information about available devices using a socket.
            </summary>
            -
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            <param name="irdaSocket">A <see cref="T:System.Net.Sockets.Socket"/>
            to be uses to run the discovery process.
            It should have been created for the IrDA protocol</param>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.ParseDeviceList(System.Byte[])">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of the peer device using the specified socket.
            </summary>
            <param name="irdaSocket">A connected IrDA <c>Socket</c>.</param>
            <returns>The name of the remote device.</returns>
            -
            <remarks>
            This finds the name of the device to which the socket is connection, 
            an exception will occur if the socket is not connected.
            </remarks>
            -
            <exception cref="T:System.ArgumentNullException">
            <c>s</c> is null (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The remote device is not present in the list of discovered devices.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The socket is not connected.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)">
            <overloads>
            Forms a connection to the specified peer service.
            </overloads>
            --
            <summary>
            Forms a connection to the specified endpoint.
            </summary>
            <remarks>
            <para>
            The endpoint specifies both the peer device and service name 
            to connect to.  If only one device is expected to be in range, or 
            an arbitrary peer device is suitable, then one can use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> instead.
            </para>
            </remarks>
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)">
            <summary>
            Forms a connection to the specified service on an arbitrary peer.
            </summary>
            <remarks>
            As noted the connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range &#x2014; as is often the case.  If a connection is to be made to
            a particular remote peer, then use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            </remarks>
            <param name="service">The Service Name to connect to eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to a 
            specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.</param>
            -
            <exception cref="T:System.InvalidOperationException">
            No peer IrDA device was found.  The exception has message &#x201C;No device&#x201D;.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            A connection could not be formed.  See the exception message or 
            <see cref="P:System.Net.Sockets.SocketException.SocketErrorCode"/> 
            (or <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> on NETCF) 
            for what error occurred.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(InTheHand.Net.IrDAEndPoint,System.AsyncCallback,System.Object)">
            <overloads>
            Begins an asynchronous request for a remote host connection.
            </overloads>
            -
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by an endpoint. 
            </summary>
            -
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a service name (string). 
            </summary>
            -
            <param name="service">The service name of the remote host.</param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
            -
            <remarks>
            <para>
            See <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> 
            for the errors that can occur.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned
            by a call to <see cref="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(InTheHand.Net.IrDAEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(System.String,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and the underlying connection.
            </summary>
            -
            <remarks>The two XxxxxClient classes produced by Microsoft (TcpClient, 
            and IrDAClient in the NETCF) have various documented behaviours and various
            actual behaviours for close/dispose/finalize on the various platforms. :-(
            The current TcpClient implementation is that 
            Close/Dispose closes the connection by closing the underlying socket and/or
            NetworkStream, and finalization doesn't close either.  This is the behaviour
            we use for the here (for <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>,
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>).  (The documentation in MSDN for 
            <see cref="T:System.Net.Sockets.TcpClient"/> is still wrong by-the-way,
            see <see href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=158480">
            Microsoft feedback #158480</see>).
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.GetStream">
            <summary>
            Returns the <see cref="T:System.Net.Sockets.NetworkStream"/> used to send and receive data.
            </summary>
            -
            <returns>The underlying <c>NetworkStream</c>.</returns>
            -
            <remarks>
            <para>
            <c>GetStream</c> returns a <c>NetworkStream</c> 
            that you can use to send and receive data. The <c>NetworkStream</c> class 
            inherits from the <see cref="T:System.IO.Stream"/> class, which provides a 
            rich collection of methods and properties used to facilitate network communications.
            </para>
            <para>You must call the <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/> 
            method, or one of its overloads, first, or 
            the <c>GetStream</c> method will throw an <c>InvalidOperationException</c>.
            After you have obtained the <c>NetworkStream</c>, call the 
            <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/>
            method to send data to the remote host.
            Call the <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> 
            method to receive data arriving from the remote host.
            Both of these methods block until the specified operation is performed.
            You can avoid blocking on a read operation by checking the 
            <see cref="P:System.Net.Sockets.NetworkStream.DataAvailable"/> property.
            A <c>true</c> value means that data has arrived from the remote host and
            is available for reading. In this case, <c>Read</c> is 
            guaranteed to complete immediately.
            If the remote host has shutdown its connection, <c>Read</c> will 
            immediately return with zero bytes.
            </para>
            <note>
            Closing the <c>NetworkStream</c> closes the connection.  
            Similarly Closing, Disposing, or the finalization of the <c>IrDAClient</c> 
            Disposes the <c>NetworkStream</c>.
            This is new behaviour post 2.0.60828.0.
            <!-- [dodgy?]TcpClient documentation:
            You must close the NetworkStream when you are through sending and
            receiving data. Closing TcpClient does not release the NetworkStream.-->
            </note>
            <note>
            If you receive a SocketException, use SocketException.ErrorCode to obtain
            the specific error code. After you have obtained this code, you can refer
            to the Windows Sockets version 2 API error code documentation in MSDN
            for a detailed description of the error.
            </note>
            </remarks>
            -
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> is not connected to a remote host.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <c>IrDAClient</c> has been closed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.IrDAClient.Close"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made. 
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Available">
            <summary>
            The number of bytes of data received from the network and available to be read.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <remarks>
            This is particularly useful as it allows setting socket 
            options, for instance IrCOMM Cooked mode, ie
            <see cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode"/>.
            </remarks>
            <example>Example code to connect to a IrCOMM service would be as 
            follows, note the use of the Client property.
            <code lang="VB.NET">
            Public Shared Sub Main()
               Dim cli As New IrDAClient
               ' Set IrCOMM Cooked/9-wire mode.
               cli.Client.SetSocketOption( _
                 IrDASocketOptionLevel.IrLmp, _
                 IrDASocketOptionName.NineWireMode, _
                 1)  ' representing true
               ' Connect
               cli.Connect("IrDA:IrCOMM")
               ' Connected, now send and receive e.g. by using the 
               ' NetworkStream returned by cli.GetStream
               ...
            End Sub
            </code>
            </example>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> for an <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> is connected to a remote host.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.RemoteMachineName">
            <summary>
            Gets the name of the peer device participating in the communication.
            </summary>
            -
            <remarks>
            This finds the name of the device to which the client is connection, 
            an exception will occur if the socket is not connected.
            </remarks>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the remote device is not found in the discovery cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The socket is not connected.
            </exception>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothClient">
            <summary>
            Provides client connections for Bluetooth RFCOMM network services.
            </summary>
            <remarks>
            <note>This class currently only supports devices which use the Microsoft 
            and Widcomm Bluetooth stacks, devices which use the other stacks will 
            not work.
            </note>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>When connecting
            normally an endpoint with an Address and a Service Class Id 
            is specified, then the system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            If instead a port value is provided in the endpoint then the SDP 
            lookup will be skipped and  the system will connect to the specified 
            port directly.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>
            this class always uses RFCOMM, instead the Service Class Id of the 
            particular service to which you want to connect must be specified,
            perhaps
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort">BluetoothService.SerialPort</see>,
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush">BluetoothService.ObexObjectPush</see>,
            or the unique UUID/<see cref="T:System.Guid"/> that you are using in
            your custom server application.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class and binds it to the specified local endpoint.
            </summary>
            <param name="localEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> to which you bind the Bluetooth Socket.
            Only necessary on multi-radio system where you want to select the local radio to use.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices">
            <summary>
            Discovers accessible Bluetooth devices, both remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(255, true, true, true)
            </para>
            </remarks>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32)">
            <summary>
            Discovers accessible Bluetooth devices, both remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(maxDevices, true, true, true)
            </para>
            </remarks>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices, optionally remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices, optionally remembered and in-range or just in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>The <paramref name="discoverableOnly"/> parameter is not supported 
            on the Microsoft stack on WinXP as the stack there returns the remembered and Device-Inquiry-results already 
            merged, it is however supported on Windows 7.
            It is supported on WM/CE and on Widcomm (both platforms).
            Note when that flag is set the other related flag values are ignored.
            </para>
            <para>To remove devices from the list of remembered/authenticated
            devices use <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">BluetoothSecurity.RemoveDevice</see>
            </para>
            </remarks>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            <param name="discoverableOnly">True to return only the devices that 
            are in range, and in discoverable mode.  See the remarks section.</param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevicesInRange">
            <summary>
            Discovers Bluetooth devices that are in range and are in &#x2018;discoverable mode&#x2019;
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(255, false, false, false, true)
            </para>
            </remarks>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginDiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            An asynchronous version of <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            -
            <param name="maxDevices">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="authenticated">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="remembered">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="unknown">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="discoverableOnly">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="callback">An optional asynchronous callback, to be called 
            when the discovery is complete.
            </param>
            <param name="state">A user-provided object that distinguishes this 
            particular asynchronous discovery request from other requests.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous discovery, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.EndDiscoverDevices(System.IAsyncResult)">
            <summary>
            Ends an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned
            by <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginDiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <returns>See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects a client to a specified endpoint.
            </summary>
            -
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the server on the remote device.</param>
            -
            <remarks>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>Normally an endpoint with an Address and a Service Class Id 
            is specified, then the system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            If instead a port value is provided in the endpoint then the SDP 
            lookup will be skipped and  the system will connect to the specified 
            port directly.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothClient">class</see> remarks for more information.
            </para> 
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified Bluetooth address and service identifier. 
            </summary>
            -
            <remarks>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>The system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothClient">class</see> remarks for more information.
            </para> 
            </remarks>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote host.
            </param>
            <param name="service">The Service Class Id of the service on the remote host.
            The standard Bluetooth Service Classes are provided on class 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a <see cref="T:InTheHand.Net.BluetoothAddress"/> and a service identifier (Guid). 
            </summary>
            -
            <remarks>
            <para>See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            method for information on the usage of the values in the endpoint.
            </para>
            </remarks>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote host.
            </param>
            <param name="service">The Service Class Id of the service on the remote host.
            The standard Bluetooth Service Classes are provided on class 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that 
            references the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object that contains information 
            about the connect operation. This object is passed to the <paramref name="requestCallback"/> 
            delegate when the operation is complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote server is specified by a <see cref="T:InTheHand.Net.BluetoothEndPoint"/>. 
            </summary>
            -
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that 
            represents the server on the remote device.
            See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for information on the usage of the values in the endpoint.
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that 
            references the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object that contains information 
            about the connect operation. This object is passed to the <paramref name="requestCallback"/> 
            delegate when the operation is complete.
            </param>
            -
            <remarks>
            <para>See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for information on the usage of the values in the endpoint.
            </para>
            </remarks>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned by a call to 
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <remarks>The two XxxxxClient classes produced by Microsoft (TcpClient, 
            and IrDAClient in the NETCF) have had various documented behaviours and various
            actual behaviours for close/dispose/finalize on the various platforms. :-(
            The current TcpClient implementation on is that 
            Close/Dispose closes the connection by closing the underlying socket and/or
            NetworkStream, and finalization doesn't close either.  This is the behaviour
            we use for the here (for <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>,
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>).  (The documentation in MSDN for 
            <see cref="T:System.Net.Sockets.TcpClient"/> is still wrong by-the-way,
            see <see href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=158480">
            Microsoft feedback #158480</see>).
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetStream">
            <summary>
            Gets the underlying stream of data.
            </summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"/>.</returns>
            <remarks><see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> returns a <see cref="T:System.Net.Sockets.NetworkStream"/> that you can use to send and receive data.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> class inherits from the <see cref="T:System.IO.Stream"/> class, which provides a rich collection of methods and properties used to facilitate network communications.
            <para>You must call the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/> / <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            method first, or the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method will throw an <see cref="T:System.InvalidOperationException"/>.
            After you have obtained the <see cref="T:System.Net.Sockets.NetworkStream"/>, call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/> method to send data to the remote host.
            Call the <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> method to receive data arriving from the remote host.
            Both of these methods block until the specified operation is performed.
            You can avoid blocking on a read operation by checking the <see cref="P:System.Net.Sockets.NetworkStream.DataAvailable"/> property.
            A true value means that data has arrived from the remote host and is available for reading.
            In this case, <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> is guaranteed to complete immediately.
            If the remote host has shutdown its connection, <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> will immediately return with zero bytes.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(System.String)">
            <summary>
            Sets the PIN associated with the remote device.
            </summary>
            <param name="pin">PIN which must be composed of 1 to 16 ASCII characters.</param>
            <remarks>
            <para>Is not supported on all platforms.
            For instance see the Widcomm documentation 
            </para>
            <para>Assigning null (Nothing in VB) or an empty String will revoke the PIN.
            </para>
            <para>In version 2.3 could only be called when connected.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>
            <para>Is not supported on all platforms.
            For instance see the Widcomm documentation 
            </para>
            <para>Assigning null (Nothing in VB) or an empty String will revoke the PIN.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetRemoteMachineName(InTheHand.Net.BluetoothAddress)">
            <summary>
            Gets the name of the specified remote device.
            </summary>
            <param name="a">Address of remote device.</param>
            <returns>Friendly name of specified device.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of a device by a specified socket.
            </summary>
            <param name="s"> A <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <returns>Returns a string value of the computer or device name.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.InquiryAccessCode">
            <summary>
            Get or set the Device Discovery Inquiry Access Code.
            </summary>
            -
            <remarks>
            <para>This is supported only the Microsoft stack on WindowsMobile/etc.
            It is not supported on any other platforms.
            </para>
            <para>The default value is
            <see cref="F:InTheHand.Net.BluetoothAddress.Giac">GIAC</see> (0x9E8B33).
            See also constant 
            <see cref="F:InTheHand.Net.BluetoothAddress.Liac">LIAC</see> (0x9E8B00).
            The valid range is 0x9E8B00 through 0x9E8B3f.
            </para>
            </remarks>
            -
            <value>An <see cref="T:System.Int32"/> containing the Access Code
            to be used for Inquiry.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.InquiryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>On Windows CE the actual value used is expressed in units of 1.28 seconds, so will be the nearest match for the value supplied.
            The default value is 10 seconds. The maximum is 60 seconds.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data received from the network and available to be read.</value>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            -
            <value>The underlying network <see cref="T:System.Net.Sockets.Socket"/>.</value>
            -
            <remarks>
            <note>The property is only supported on Microsoft Bluetooth stack platforms.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> for a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is connected to a remote host.
            </summary>
            <value>true if the <see cref="P:InTheHand.Net.Sockets.BluetoothClient.Client"/> socket was connected to a remote resource as of the most recent operation; otherwise, false.</value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LingerState">
            <summary>
            Gets or sets a value that specifies whether the client will delay closing 
            in an attempt to send all pending data.
            </summary>
            -
            <remarks>
            <para>See <see cref="P:System.Net.Sockets.Socket.LingerState">Socket.LingerState</see>.
            </para>
            <para>In Widcomm, linger <c>false</c> (disabled) is not supported.
            </para>
            </remarks>
            -
            <value>A <see cref="T:System.Net.Sockets.LingerOption"/> that specifies 
            how to linger while closing a socket.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LinkKey">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LinkPolicy">
            <summary>
            Returns the Link Policy of the current connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.RemoteEndPoint">
            <summary>
            Get the remote endpoint.
            </summary>
            -
            <value>
            The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> with which the 
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is communicating.
            </value>
            -
            <remarks>
            <para>Note it can't be guaranteed that the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            and <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> parts
            of the returned endpoint are valid; and this will affect the
            <see cref="M:InTheHand.Net.BluetoothEndPoint.ToString"/> output.
            In particular, on MSFT, the <see cref="P:InTheHand.Net.Sockets.BluetoothClient.RemoteEndPoint"/>
            for a client connection seems to have no <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/>
            and a garbage <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>,
            so we would display garbage there in <see cref="M:InTheHand.Net.BluetoothEndPoint.ToString"/>.
            An in-bound/server connection however does have a valid Port.
            (There the endpoints are returned from the native socket).
            On the other hand on Widcomm, Bluetopia and on BlueSoleil the
            opposite is the case: for a client the Port is known but it isn't
            for a server, and the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is blank in both cases.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothClient.LiveDiscoveryCallback">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.IrDA.IrDAAttributeType">
            <summary>
            Defines the type of an IAS attribute.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.Integer">
            <summary>
            Identifies an integer attribute value.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.OctetSequence">
            <summary>
            Identifies a binary, or octet, attribute value.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.String">
            <summary>
            Identifies a string attribute value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder">
            <summary>
            Provides a simple way to build a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>, 
            including ServiceClassIds and ServiceNames attributes etc.
            </summary>
            -
            <remarks>
            <para>The service&#x2019;s Class Id can be set with the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Guid)"/>/<see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt16)"/>/etc
            methods, the protocol stack set with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property (default RFCOMM), and the Service Name set with the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceName"/>
            property.  Other properties and methods exist for controlling the more advanced 
            attributes.
            </para>
            <para>Adding the standard text-string attributes (ServiceName etc) is normally quite
            difficult due to the very baroque manner of specifying these strings&#x2019; character 
            encoding and natural language.  The builder handles all the complexity internally; 
            the strings are written in UTF-8 encoding and marked as 'English' language.
            </para>
            </remarks>
            -
            <example>
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.AddServiceClass(BluetoothService.SerialPort);
            bldr.ServiceName = "Alan's SPP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.ProtocolType = BluetoothProtocolDescriptorType.GeneralObex;
            bldr.AddServiceClass(BluetoothService.ObexFileTransfer);
            bldr.ServiceName = "Alan's FTP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.#ctor">
            <summary>
            Create a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ReportIfDuplicates(System.Collections.Generic.List{InTheHand.Net.Bluetooth.ServiceAttribute},System.Boolean)">
            <param name="list">The list to check for duplicates.
            </param>
            <param name="storedList"><c>true</c> if checking a previously stored list 
            of attributes, and <c>false</c> if checking a immediate addition of an 
            attribute. Thus throws <c>InvalidOperationException</c> and 
            <c>ArgumentException</c> respectively.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Guid)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid128">A <see cref="T:System.Guid"/> containing a 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt16)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16">A <see cref="T:System.UInt16"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid32">A <see cref="T:System.UInt32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Int32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16or32">A <see cref="T:System.Int32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddBluetoothProfileDescriptor(System.Guid,System.Byte,System.Byte)">
            <summary>
            Add a <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList"/> 
            element.
            </summary>
            -
            <param name="classId">The Service Class Id of the Bluetooth profile, 
            as a <see cref="T:System.Guid"/>
            </param>
            <param name="majorVersion">The major version number, as a <see cref="T:System.Byte"/>.
            </param>
            <param name="minorVersion">The minor version number, as a <see cref="T:System.Byte"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(System.Collections.Generic.IEnumerable{InTheHand.Net.Bluetooth.ServiceAttribute})">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(System.Collections.IEnumerable)">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.IEnumerable"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(InTheHand.Net.Bluetooth.ServiceAttribute[])">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an array of 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.ServiceAttribute)">
            <overloads>
            Add a custom attribute.
            </overloads>
            -
            <summary>
            Add a custom attribute from a given <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            </summary>
            -
            <param name="serviceAttribute">An attribute as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instance.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(System.UInt16,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.FromJsr82ServerUri(System.String)">
             <summary>
             Converts a Java JSR 82 Bluetooth server URL into a 
             <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> instance.
             </summary>
             -
             <remarks>
             <note type="caution">The <c>authenticate</c> and <c>encrypt</c> and any 
             related parameters are completely disregarded.  When using with 
             <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> you must take 
             care to set the required security requirements on it directly.
             </note>
             This method is intended to read the Service Record (SDP) related items only; 
             in particular the Service Class ID UUID and Service Name parameters.
             It supports only the <c>btspp</c> and <c>btObex</c> schemes and only for
             server-side use only.  For instance
            <code lang="none">btspp://localhost:3B9FA89520078C303355AAA694238F08;name=FooBar</code>
             and
            <code lang="none">btgoep://localhost:3B9FA89520078C303355AAA694238F08</code>
             There is no suppport for e.g.
            <code lang="none">btl2cap://localhost:3B9FA89520078C303355AAA694238F08;name=Aserv</code>
             as the library supports only RFCOMM connections currently.
             </remarks>
             -
             <param name="url">A server-side JSR 82 URL in one of the supported forms.
             </param>
             -
             <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> 
             initialised with the supported components of the supplied JSR 82 URL.
             </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceRecord">
            <summary>
            Gets the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance 
            constructed by the specified <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> instance.
            </summary>
            -
            <value>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> that contains 
            the URI constructed by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> .
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> 
            created by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> properties is invalid.
            For instance, if duplicates attributes are disallowed but duplicates are 
            present.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProviderName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceDescription">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType">
            <summary>
            Get or set which type of element will be added for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <value>An instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType"/> 
            enumeration.
            </value>
            -
            <remarks><para>Supported type are the following:
            </para>
            <list type="bullet">
            <item><term>None</term>
            <description>No PDL attribute will be added.</description>
            </item>
            <item><term>Rfcomm</term>
            <description>A standard RFCOMM element will be added.</description>
            </item>
            <item><term>Goep</term>
            <description>A standard GOEP (OBEX) element will be added.</description>
            </item>
            </list>
            <para>The default is <see cref="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.Rfcomm"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecord">
            <summary>
            Holds an SDP service record.
            </summary>
            -
            <remarks>
            <para>A Service Record is the top-level container in the Service Discovery
            protocol/database.  It contains a list of Service Attributes each identified 
            by a numerical identifier (its <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>),
            and with its data held in a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> has methods to access the
            various types of data it contains.
            </para>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc. The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            <para><see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> provides the normal 
            collection-type methods properties e.g. 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Count"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Item(System.Int32)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetEnumerator"/>.  So, to 
            access a particular attribute&#x2019;s content get the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> using one of those methods 
            and then read the data from the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>. 
            See the example below.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>The SDP specification defines the content of <c>TextString</c> element
            type very loosely and they are thus very difficult to handle when reading 
            from a record.
            The encoding of the string content is
            not set in the specification, and thus implementors are free to use any 
            encoding they fancy, for instance ASCII, UTF-8, 
            UTF-16, Windows-1252, etc &#x2014; all of which have been seen in record 
            from real devices.  It would have been much more sensible to mandate UTF-8 
            as the other part of the Bluetooth protocol suite do e.g. the PIN is always
            stored as a UTF-8 encoded string.
            </para>
            <para>Not only that but some of the attributes defined in the SDP specification
            can be included in more than one &#x2018;natural language&#x2019; version,
            and the definition of the language and the string&#x2019;s encoding
            is not included in the element, but is 
            instead defined in a separate element and the ID of the string attribute
            modified.  Yikes!
            </para>
            <para>  This makes it near impossible to decode the bytes in
            a string element at parse time and create the string object then.  Therefore
            the parser creates an element containing the raw bytes from the string which
            hopefully the user will know how to decode, passing the required encoding 
            information to one of methods on the element i.e.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            which takes a multi-language-base item from the same record (see e.g.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>),
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
            which takes a .NET <see cref="T:System.Text.Encoding"/> object,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/>,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            on the record which again takes a multi-language-base item.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>A Service Record can be created from the source byte array by using the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
            method or the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            on <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>.  A record
            can also be created from a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            passed to the constructor 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceAttribute})"/>.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>From the SDP specification:
            </para>
            <list type="bullet">
            <item><term>2.2 ServiceRecord </term><description>&#x201C;&#x2026;
            a list of service attributes.&#x201D;</description></item>
            <item><term>2.3 ServiceAttribute</term><description>&#x201C;&#x2026;
            two components: an attribute id and an attribute value.&#x201D;</description></item>
            <item><term>2.4 Attribute ID</term><description>&#x201C;&#x2026;
            a 16-bit unsigned integer&#x201D;,
            &#x201C;&#x2026;represented as a data element.&#x201D;</description></item>
            <item><term>2.5 Attribute Value</term><description>&#x201C;&#x2026;
            a variable length field whose meaning is determined by the attribute ID&#x2026;&#x201D;,
            &#x201C;&#x2026;represented by a data element.&#x201D;</description></item>
            <item><term>3.1 Data Element</term><description>&#x201C;&#x2026;
            a typed data representation.
            It consists of two fields: a header field and a data field.
            The header field, in turn, is composed of two parts: a type descriptor and a size descriptor.
            &#x201D;</description></item>
            <item><term>3.2 Data Element Type Descriptor </term><description>&#x201C;&#x2026;
            a 5-bit type descriptor.&#x201D;</description></item>
            <item><term>3.3 Data Element Size Descriptor </term><description>&#x201C;&#x2026;
            The data element size descriptor is represented as a
            3-bit size index followed by 0, 8, 16, or 32 bits.&#x201D;</description></item>
            </list>
            </remarks>
            -
            <example>
            <code lang="C#">
            ServiceRecord record = ...
            ServiceAttribute attr = record.GetAttributeById(UniversalAttributeId.ServiceRecordHandle);
            ServiceElement element = attr.Value;
            if(element.ElementType != ElementType.UInt32) {
              throw new FooException("Invalid record content for ServiceRecordHandle");
            }
            UInt32 handle = (UInt32)element.Value;
            </code>
            or
            <code lang="VB.NET">
            Dim bppRecord As ServiceRecord = ...
            Dim attr As ServiceAttribute = bppRecord.GetAttributeById(BasicPrintingProfileAttributeId.PrinterName)
            Dim element As ServiceElement = attr.Value;
            ' Spec say it is in UTF-8
            Dim printerName As String = element.GetValueAsStringUtf8()
            </code>
            </example>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgNotSeq">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgNoAttributeWithId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgListContainsNotAttribute">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            containing no <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceAttribute})">
            <overloads>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(InTheHand.Net.Bluetooth.ServiceAttribute[])">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an array of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> by parsing
            the given array of <see cref="T:System.Byte"/>.
            </summary>
            -
            <remarks>This uses the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>
            with its default settings.
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.  In particular for the errors that can result, two
            of which are listed here.
            </remarks>
            -
            <param name="recordBytes">A byte array containing the encoded Service Record.
            </param>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeByIndex(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Determines whether a service attribute with the specified ID, 
            and optional natural language, is in the List.
            </overloads>
            -
            <summary>
            Determines whether a service attribute with the specified ID is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Returns the attribute with the given ID.
            </overloads>
            -
            <summary>
            Returns the attribute with the given ID.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Determines whether a TextString service attribute with the specified ID 
            and natural language 
            is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Returns the attribute with the given ID and natural language.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID and language.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id with the given language base in the record.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateLanguageBasedAttributeId(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Create the attribute id resulting for adding the language base attribute id.
            </summary>
            -
            <returns>The result <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</returns>
            -
            <exception cref="T:System.OverflowException">
            <paramref name="baseId"/> added to the <paramref name="id"/>
            would create an id that cannot be represented as an Attribute Id.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the specified natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, given 
            the Language attribute it should use it to find and decode the string.
            If the primary Language attribute is to be used, then use the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/> 
            method that takes only the id parameter.
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            LanguageBaseItem primaryLang = record.GetPrimaryLanguageBaseItem();
            if (primaryLang == null) {
              Console.WriteLine("Primary multi-language not present, would have to guess the string's encoding.");
              return;
            }
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName, primaryLang);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the primary natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, it will 
            find the primary Language attribute and use it to find and decode the string.
            And if there is no primary Language attribute, which is the case in many 
            of the records one sees on mobile phones, it will attempt the operation 
            assuming the string is encoded in UTF-8 (or ASCII).
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetLanguageBaseList">
            <summary>
            Gets the list of LanguageBaseAttributeId items in the service record.
            </summary>
            -
            <remarks>
            See also <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>.
            </remarks>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            An array of length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem">
            <summary>
            Gets the primary LanguageBaseAttributeId item in the service record.
            </summary>
            -
            <remarks>
            For instance, can be used with methods 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            etc.  See example code in the first.
            </remarks>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>, or null
            if the service record contains no such attribute, or 
            no primary language item (one with Base Id 0x0100) is included.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetLanguageBaseList"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            of type <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </returns>
            -
            <example>
            In C#:
            <code lang="C#">
            foreach (ServiceAttribute curAttr in record) {
               if (curAttr.Id == UniversalAttributeId.ProtocolDescriptorList) {
               ...
            }
            </code>
            In Visual Basic:
            <code lang="VB.NET">
            For Each curAttr As ServiceAttribute In record
               If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
               ...
            Next
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray">
            <summary>
            Return the byte array representing the service record.
            </summary>
            -
            <remarks>The byte array content is created dynamically from the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance using
            the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/> class.
            </remarks>
            -
            <returns>The result as an array of <see cref="T:System.Byte"/>.
            </returns>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.ServiceRecord.SourceBytes"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.Count">
            <summary>
            Gets the count of attributes in the record.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.</returns>
            -
            <exception cref="T:System.Exception">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.AttributeIds">
            <summary>
            Get a list of the numerical IDs of the Attributes in the record 
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.
            </summary>
            -
            <remarks>
            This method will likely be only rarely used: instead 
            one would generally want either to read a specific attribute using 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            or read every attribute by using 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>'s
            <c>IEnumerable</c> ability e.g.
            <code lang="VB.NET">
               For Each curAttr As ServiceAttribute In record
                  If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
                  ...
               Next
            </code>
            <para>Note, for NETCFv1 this returns an instance of the non-Generic list 
            <see cref="T:System.Collections.IList"/>.
            </para>
            </remarks>
            -
            (Provide a pure example since NDocs makes big mess of displaying Generic types).
            <example>
            In C#:
            <code lang="C#">
              IList&lt;ServiceAttributeId&gt; ids = record.GetAttributeIds();
            </code>
            In VB.NET:
            <code lang="VB.NET">
              Dim ids As IList(Of ServiceAttributeId) = record.GetAttributeIds()
            </code>
            Or without Generics in .NET 1.1 (NETCFv1) in VB.NET:
            <code lang="VB.NET">
              Dim ids As IList = record.GetAttributeIds()
            </code>
            </example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.SourceBytes">
            <summary>
            Get the raw byte array from which the record was parsed.
            </summary>
            -
            <remarks>
            <para>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> can be created either by manually building new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s holding new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>s, or it can be created
            by <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> parsing an array
            of bytes read from another machine by e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>.
            In that case this method returns that source byte array.
            </para>
            <para>To creates a Service Record byte array from the contained
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s use
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray"/> or <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/>.
            </para>
            </remarks>
            -
            <value>
            An array of <see cref="T:System.Byte"/>, or <see langword="null"/> if
            the record was not created by parsing a raw record.
            </value>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceAttributeId">
            <summary>
            A Service Attribute Id identifies each attribute within an SDP service record.
            </summary>
            -
            <remarks>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc, see namespace <see cref="N:InTheHand.Net.Bluetooth.AttributeIds"/>.
            The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIdLookup">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.  Implementing <see cref="T:System.Enum"/>-like
            behaviour.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Type[])">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Type[],InTheHand.Net.Bluetooth.LanguageBaseItem[],InTheHand.Net.Bluetooth.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            <param name="langBaseList">
            The list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> applying 
            to the current record.  They are used when an attribute is marked as a
            multi-language one and thus need the base offset removed from the specified
            numerical value.
            </param>
            <param name="applicableLangBase">
            The applicable <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> if the 
            matched attribute is a multi-language one.  <see langword="null"/> 
            (<see langword="Nothing"/> in Visual Basic), if no attribute was matched
            or it was not a multi-language one.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup._GetNameIfMatchesMultiLang(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Reflection.FieldInfo,InTheHand.Net.Bluetooth.LanguageBaseItem[],InTheHand.Net.Bluetooth.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute">
            <summary>
            Indicates that the field to which it is applied represents an SDP Attribute 
            that can exist in multiple language instances and thus has a language base 
            offset applied to its numerical ID when added to a record.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute"/>
            class. 
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs">
            <summary>
            Provides data for an authentication event.
            </summary>
            -
            <remarks>
            <para>For usage information, see the class documentation at
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> it includes
            an example, 
            also see the documentation on each of this class&#x2019;s properties.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.SixDigitsFormatString">
            <summary>
            A format string to display the Passkey or comparison Number as six decimal digits.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ErrorMessageSendingAnotherPinIsDisallowed_">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.#ctor">
            <summary>
            Initialize an instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo)">
            <summary>
            Initialize an instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
            </summary>
            -
            <param name="device">The device information to store in the event args.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ConfirmOob(System.Byte[],System.Byte[])">
            <summary>
            Creates a positive response to the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand"/>
            pairing event also providing optional security values.
            </summary>
            -
            <param name="c">An byte array of length 16 bytes, or null.
            A 128-bit cryptographic key used for two-way authentication.
            </param>
            <param name="r">An byte array of length 16 bytes, or null.
            A randomly generated number used for one-way authentication.
            If this number is not provided by the device initiating the OOB
            session, this value is 0.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Device">
            <summary>
            Gets the device requiring an authentication response as a
            <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationRequirements">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements"/>
            enumeration value that specifies the 'Man in the Middle' protection
            required for authentication.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.IoCapability">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothIoCapability"/>
            enumeration value that defines the input/output capabilities of the
            Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationMethod">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod"/>
            enumeration value that defines the authentication method utilized
            by the Bluetooth device.
            </summary>
            -
            <remarks>
            <para>The method to be used depends on the
            and the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.IoCapability"/> on both machines.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.JustWorksNumericComparison">
            <summary>
            Gets whether the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
            method is of subtype "JustWorks".
            </summary>
            -
            <remarks>
            <para>Gets whether the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
            method is of subtype "JustWorks".
            </para>
            <para>If true then a simple Yes/No answer from the user is adequate,
            Or if false then the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>.
            value should be displayed to the user(s) so that he/she/they can
            verify that the values displayed on both devices are the same.
            Is null if 
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationRequirements"/>
            is not 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey">
            <summary>
            Get the Numeric or Passcode value being used by the 
            SSP pairing event.
            </summary>
            -
            <value>Is a six digit number from 000000 to 999999,
            or <see langword="null"/> if not present.
            </value>
            -
            <remarks>
            <para>Will be present in the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>,
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.JustWorksNumericComparison"/>,
            and <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.PasskeyNotification"/>
            authentication methods only.
            </para>
            <para>Is a six digit number from 000000 to 999999.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskeyAsString">
            <summary>
            Gets the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            formatted in its correct six decimal digits format.
            </summary>
            -
            <value>A <see cref="T:System.String"/> representing
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            formatted in its six decimal digits format,
            or <see langword="null"/> if 
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            is <see langword="null"/>.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Pin">
            <summary>
            Gets or sets the PIN string to be used to authenticate the specified device.
            </summary>
            -
            <remarks>
            <para>Is only used in the 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy"/>
            pairing method.
            </para>
            <para>On an authentication event, a PIN response is sent if the value 
            returned from the handler is not <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Confirm">
            <summary>
            Get or set whether we will respond positively, negatively or
            ignore the SSP pairing event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ResponseNumberOrPasskey">
            <summary>
            Get or set what Numeric or Passcode value or whether no value
            will be used in responding to the SSP pairing event.
            </summary>
            -
            <remarks>
            <para>Is a number from 000000 to 999999, or null if not to be included
            in the response.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult">
            <summary>
            Gets or sets whether the callback is called again after the PIN response
            is sent.
            </summary>
            -
            <remarks><para>This is useful to see the error code returned by sending
            the PIN response. It can thus also be used to see the successful result 
            of sending the PIN response.  See the documentation on the 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AttemptNumber">
            <summary>
            Gets how many attempts at sending a PIN have been tried.
            </summary>
            <remarks>
            When there&#x2019;s a new PIN request, the first time the callback is
            called this property will have value zero.  If the PIN is rejected and
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/>
            was set, then the callback will be recalled and this property will have
            value one, etc.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode">
            <summary>
            The Windows error code returned by the last PIN response attempt.
            </summary>
            -
            <remarks><para>A bad PIN/passcode value appears to result in a error code
            with value 1244, which is <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorNotAuthenticated"/>.
            </para>
            <para>If one tries to respond to that failure with another passcode,
            then error 1167 <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected"/>
            results.  So it seems that only one attempt is possible.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCodeAsUnsigned">
            <summary>
            The Windows error code returned by the last PIN response attempt,
            as an unsigned value.
            </summary>
            -
            <remarks>See <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CannotSendAnotherResponse">
            <summary>
            Gets whether it is not possible to send another PIN response.
            </summary>
            <remarks><para>For instance, in testing it appears that after one response
            the device becomes non-contactable, any PIN response returning error code
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothSocketOptionName">
            <summary>
            Defines <see cref="T:System.Net.Sockets.Socket"/> configuration option names for the <see cref="T:System.Net.Sockets.Socket"/> class.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.Authenticate">
            <summary>
            On connected socket, triggers authentication.
            On not connected socket, forces authentication on connection.
            For incoming connection this means that connection is rejected if authentication cannot be performed.
            </summary>
            <remarks>The optval and optlen parameters are ignored; however, Winsock implementation on Windows CE requires optlen to be at least 4 and optval to point to at least an integer datum.</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPAuthenticate">
            <summary>
            Toggles authentication under Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;(ULONG)TRUE/FALSE</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.Encrypt">
            <summary>
            On a connected socket, this command turns encryption on or off.
            On an unconnected socket, this forces encryption to be on or off on connection.
            For an incoming connection, this means that the connection is rejected if the encryption cannot be turned on.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetPin">
            <summary>
            This sets or revokes PIN code to use with a connection or socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetLink">
            <summary>
            This sets or revokes link key to use with a connection or peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLink">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtu">
            <summary>
            Get or set the default MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtu">
            <summary>
            This sets default MTU (maximum transmission unit) for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtu">
            <summary>
            Returns MTU (maximum transmission unit).
            For connected socket, this is negotiated value, for server (accepting) socket it is MTU proposed for negotiation on connection request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtuMaximum">
            <summary>
            Get or set the maximum MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;max. mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtuMaximum">
            <summary>
            This sets maximum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtuMaximum">
            <summary>
            Returns maximum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtuMinimum">
            <summary>
            Get or set the minimum MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;min. mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtuMinimum">
            <summary>
            This sets minimum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtuMinimum">
            <summary>
            Returns minimum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetXOnLimit">
            <summary>
            This sets XON limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetXOnLimit">
            <summary>
            Returns XON limit for a connection.
            XON limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification version 1.1).
            When amount of incoming data received, but not read by an application for a given connection grows past this limit, a flow control command is sent to the peer requiring suspension of transmission.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetXOffLimit">
            <summary>
            This sets XOFF limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetXOffLimit">
            <summary>
            Returns XOFF limit for a connection.
            XOFF limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification 1.1).
            If flow has been suspended because of buffer run-up, when amount of incoming data received, but not read by an application for a given connection falls below this limit, a flow control command is sent to the peer allowing continuation of transmission.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetSendBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetSendBuffer">
            <summary>
             Returns maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetReceiveBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetReceiveBuffer">
            <summary>
            Returns maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetV24Break">
            <summary>
            Retrieves last v24 and break signals set through MSC command from peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetRls">
            <summary>
            Retrieves last line status signals set through RLS command from peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SendMsc">
            <summary>
            Sends MSC command. V24 and breaks are as specified in RFCOMM Specification.
            Only modem signals and breaks can be controlled, RFCOMM reserved fields such as flow control are ignored and should be set to 0.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SendRls">
            <summary>
            Sends RLS command.
            Argument is as specified in RFCOMM Specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetFlowType">
            <summary>
            Gets flow control type on the connected socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetPageTimeout">
            <summary>
            Sets the page timeout for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetPageTimeout">
            <summary>
            Gets the current page timeout.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetScan">
            <summary>
            Sets the scan mode for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetScan">
            <summary>
            Gets the current scan mode.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetCod">
            <summary>
            Sets the class of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetCod">
            <summary>
            Retrieve the Class of Device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLocalVersion">
            <summary>
            Get the version information from the Bluetooth adapter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetRemoteVersion">
            <summary>
            Get the version of the remote adapter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetAuthenticationEnabled">
            <summary>
            Retrieves the authentication settings.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetAuthenticationEnabled">
            <summary>
            Sets the authentication policy of the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ReadRemoteName">
            <summary>
            Reads the remote name of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLinkPolicy">
            <summary>
            Retrieves the link policy of the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetLinkPolicy">
            <summary>
            Sets the link policy for an existing baseband connection.
            The socket must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterHoldMode">
            <summary>
            Places the ACL connection to the specified peer device in HOLD mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterSniffMode">
            <summary>
            Places the ACL connection to the specified peer device in SNIFF mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ExitSniffMode">
            <summary>
            Forces the ACL connection to the peer device to leave SNIFF mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterParkMode">
            <summary>
            Places the ACL connection to the peer device in PARK mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ExitParkMode">
            <summary>
            Forces the ACL connection to the peer device to leave PARK mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMode">
            <summary>
            Gets the current mode of the connection.
            The mode can either be sniff, park, or hold. The socket must be connected.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.RemoveService(System.IntPtr,System.Byte[])">
            <exclude/>
            <summary>
            Remove a SDP record as added by <see cref="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.SetService(System.Byte[],InTheHand.Net.Bluetooth.ServiceClass)"/>.
            </summary>
            <param name="handle">The handle.
            </param>
            <param name="sdpRecord">The raw record, presumably not actually used by the stack.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.SetService(System.Byte[],InTheHand.Net.Bluetooth.ServiceClass)">
            <exclude/>
            <summary>
            Add a SDP record.
            </summary>
            -
            <param name="sdpRecord">An array of <see cref="T:System.Byte"/>
            containing the complete SDP record.
            </param>
            <param name="cod">A <see cref="T:InTheHand.Net.Bluetooth.ServiceClass"/>
            containing any bits to set in the devices Class of Device value.
            </param>
            -
            <returns>A handle representing the record, pass to 
            <see cref="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.RemoveService(System.IntPtr,System.Byte[])"/> to remote the record.
            </returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.SelectBluetoothDeviceForm">
            <summary>
            Managed code dialog for Windows CE systems.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebRequest">
            <summary>
            Provides an OBEX implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            -
            <remarks>
            <para>If you want to transfer an file or other object using the standard 
            service as used by Windows' Wireless Link / Bluetooth File Transfer Wizard, 
            Palm's Beam, Nokia's Send via Infrared, then use the OBEX protocol.  
            </para>
            <para>The PUT operation is supported, and there is new support for GET,
            (see the documentation at the <see cref="P:InTheHand.Net.ObexWebRequest.Method"/>
            property).
            Changing folders is not supported, nor is getting a folder listing.
            </para>
            <para>In the previous version there were some issue with handling file names 
            that include non-English characters, and connections 
            to some device types failed.  Also if the connection to the peer was lost
            then the request could hang reading forever.  See the release note and bugs
            database for more information.
            </para>
            </remarks>
            -
            <example>
            For Bluetooth one can use code like the following to send a file:
            (Note a failure is signalled by an exception).
            <code lang="VB.NET">
            Dim addr As BluetoothAddress = BluetoothAddress.Parse("002233445566")
            Dim path As String = "HelloWorld.txt"
            '
            Dim req As New ObexWebRequest(addr, path)
            req.ReadFile("Hello World.txt")
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            That constructor isn't available for other transports (TCP/IP, IrDA)
            so one has to create a Uri to provide the scheme, address, and path
            parameters.  Thus use code like the following to send a file.
            <code lang="VB.NET">
            ' The host part of the URI is the device address, e.g. IrDAAddress.ToString(),
            ' and the file part is the OBEX object name.
            Dim addr As BluetoothAddress = ...
            Dim addrStr As String = addr.ToString("N")
            Dim uri As New Uri("obex://" &amp; addrStr &amp; "/HelloWorld.txt")
            '
            Dim req As New ObexWebRequest(uri)
            req.ReadFile("Hello World.txt")
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            Or, to send locally generated content use something like the following.
            <code lang="VB.NET">
            Dim addr As BluetoothAddress = ...
            Dim path As String = "HelloWorld2.txt"
            '
            Dim req As New ObexWebRequest(addr, path)
            Using content As Stream = req.GetRequestStream()
               ' Using a StreamWriter to write text to the stream...
               Using wtr As New StreamWriter(content)
                  wtr.WriteLine("Hello World GetRequestStream")
                  wtr.WriteLine("Hello World GetRequestStream 2")
                  wtr.Flush()
                  ' Set the Length header value
                  req.ContentLength = content.Length
               End Using
               ' In this case closing the StreamWriter also closed the Stream, but ...
            End Using
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse) 
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            See also the ObexPushApplication and ObexPushVB sample programs.
            </example>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)">
            <overloads>
            Create a new Obex request with the specified <see cref="T:System.Uri"/>.
            </overloads>
            -
            <summary>
            Create a new Obex request with the specified <see cref="T:System.Uri"/>.
            </summary>
            <param name="requestUri">e.g. "obex://112233445566/HelloWorld.txt"</param>
            <remarks>Uri must use one of the following schemes - obex, obex-push, obex-ftp, obex-sync.
            The host name must be the device address in short hex, or dotted hex notation - not the default representation using the colon separator</remarks>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri,System.IO.Stream)">
            <summary>
            [Advanced usage]
            Create a new Obex request with the specified <see cref="T:System.Uri"/> 
            and the open <see cref="T:System.IO.Stream"/> connection to an OBEX server.
            </summary>
            -
            <param name="requestUri">[Advanced usage]
            A url of the form 
            &#x201C;<i>scheme</i><c>:///</c><i>filename</i>&#x201D;, 
            &#x201C;e.g. <c>obex:///foo.txt</c>&#x201D;.
            That is the host part is blank, 
            and the scheme and filename parts set as for the other constructor 
            <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)"/>
            </param>
            <param name="stream">An instance of <see cref="T:System.IO.Stream"/>
            already connected to an OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this class given a scheme, 
            a Bluetooth Device Address, and a remote path name.
            </summary>
            -
            <param name="scheme">The Uri scheme. One of 
            <c>obex</c>, <c>obex-push</c>, <c>obex-ftp</c>, or <c>obex-sync</c>.
            </param>
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this class given 
            a Bluetooth Device Address, and a remote path name.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            ObexWebRequest(String scheme, BluetoothAddress target, String path)
            </see>
            with scheme &#x201C;<c>obex</c>&#x201D;.
            </para>
            </remarks>
            -
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> object to use to write request data.
            </summary>
            -
            <returns>A <see cref="T:System.IO.Stream"/> to use to write request data.</returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.ReadFile(System.String)">
            <summary>
            Reads the contents of the specified file to the request stream.
            </summary>
            <param name="fileName">The filename (including the path) from which to read.</param>
            <remarks>Provides an easy equivalent to manually writing the file contents to the request stream.</remarks>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.GetResponse">
            <summary>
            Returns the OBEX server response.
            </summary>
            -
            <returns>An <see cref="T:InTheHand.Net.ObexWebResponse"/>.</returns>
            -
            <exception cref="T:System.Net.WebException">
            An error occurred, with the error that occured being stored in the 
            <see cref="P:System.Exception.InnerException"/> property.  If the error 
            occurred in the connect phase then the <see cref="P:System.Net.WebException.Status"/>
            property will have value <see cref="F:System.Net.WebExceptionStatus.ConnectFailure"/>,
            and in the operation phase on the desktop CLR it will have value
            <see cref="F:System.Net.WebExceptionStatus.UnknownError"/>
            </exception>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.StreamReadBlockMust(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            A wrapper for Stream.Read that blocks until the requested number of bytes
            have been read, and throw an exception if the stream is closed before that occurs.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.StreamReadBlock(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            A wrapper for Stream.Read that blocks until the requested number of bytes
            have been read or the end of the Stream has been reached.
            Returns the number of bytes read.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins a request for a OBEX server response.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous operation, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Begins a request for a OBEX server response.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object that was obtained when the asynchronous operation was started.
            </param>
            -
            <returns>An <see cref="T:InTheHand.Net.ObexWebResponse"/>.</returns>
            -
            <exception cref="T:System.Net.WebException">
            An error occurred, with the error that occured being stored in the 
            <see cref="P:System.Exception.InnerException"/> property.  If the error 
            occurred in the connect phase then the <see cref="P:System.Net.WebException.Status"/>
            property will have value <see cref="F:System.Net.WebExceptionStatus.ConnectFailure"/>,
            and in the operation phase on the desktop CLR it will have value
            <see cref="F:System.Net.WebExceptionStatus.UnknownError"/>
            </exception>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Headers">
            <summary>
            Specifies a collection of the name/value pairs that make up the OBEX headers.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Method">
            <summary>
            Gets or sets the method for the request.
            </summary>
            <remarks>
            <para>For Object Exchange the method code is mapped to the equivalent HTTP style method.
            For example "PUT", "GET" etc. "PUT" is the default value.
            There is new support for GET as of version 2.5.
            </para>
            <para>To use GET change the <c>Method</c> to "<c>GET</c>" and you must also use
            scheme "<c>obex-ftp</c>" in the URL instead of the usual "<c>obex</c>"
            -- unless you know that the default OBEX server you are connecting
            supports GET.
            </para>
            <para>For a PUT sample see the <see cref="T:InTheHand.Net.ObexWebRequest">class</see>
            documentation.  For GET, see below.
            </para>
            
            <example>
            <code lang="VB.NET">
            ' The host part of the URI is the device address, e.g. IrDAAddress.ToString(),
            ' and the file part is the OBEX object name.
            Dim addr As String = "112233445566"
            Dim uri As New Uri("obex-ftp://" &amp; addr &amp; "/HelloWorld.txt")
            Dim req As New ObexWebRequest(uri)
            req.Method = "GET"
            Dim rsp As ObexWebResponse = CType(req.GetResponse(), ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            Using content As Stream = rsp.GetResponseStream()
               ' Using a StreamReader to read text from the stream...
               Using rdr As New StreamReader(content)
                  While True
                     Dim line As String = rdr.ReadLine()
                     If line Is Nothing Then Exit While
                     Console.WriteLine(line)
                  End While
               End Using
            End Using
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.ContentType">
            <summary>
            Gets or sets the value of the Type OBEX header.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.ContentLength">
            <summary>
            Gets or sets the Length OBEX header.
            </summary>
            <remarks>This property is mandatory, if not set no data will be sent.
            If you use the <see cref="M:InTheHand.Net.ObexWebRequest.ReadFile(System.String)"/> helper method this value is automatically populated with the size of the file that was read.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Proxy">
            <summary>
            Not Supported - do not use, this will throw an exception.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Timeout">
            <summary>
            Gets or sets the time-out value for the <see cref="M:InTheHand.Net.ObexWebRequest.GetResponse"/> method.
            </summary>
            -
            <remarks>
            <para>In versions 3.2 and earlier this property was ignored on
            Windows Mobile.  It is now (untested!) supported there,
            but not with the Microsoft Bluetooth stack there as it doesn't
            support timeouts.
            A cunning solution is available let me know of your requirements...
            </para>
            </remarks>
            -
            <value>The number of milliseconds to wait before the request times out.
            The default is 50,000 milliseconds (50 seconds).
            A value of -1 or 0 represents no time-out.</value>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.RequestUri">
            <summary>
            Gets the original Uniform Resource Identifier (URI) of the request. 
            </summary>
            <remarks>For an ObexPush request the URI will use the "obex://" prefix, followed by the numerical device id in hex format.
            The path section of the URI represents the remote filename of the pushed object. Subfolders are not supported. Some devices may only support specific object types e.g. V-Card.</remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothListener">
            <summary>
            Listens for connections from Bluetooth RFCOMM network clients.
            </summary>
            <remarks>
            <para>The <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class provides simple methods 
            that listen for and accept incoming connection requests.  New connections 
            are returned as <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> instances 
            (on Microsoft Bluetooth stack platforms alone a new <see cref="T:System.Net.Sockets.Socket"/> 
            instance can be returned for new connections).
            </para>
            <para>In the normal case a the listener is initialised with a 
            <see cref="T:System.Guid"/> holding the Service Class Id on which it is 
            to accept connections, the listener will automatically create a SDP 
            Service Record containg that Service Class Id and the port number
            (RFCOMM Service Channel Number) that it has started listening on.
            The standard usage is thus as follows.
            </para>
            <code lang="VB.NET">
            Class MyConsts
              Shared ReadOnly MyServiceUuid As Guid _
                = New Guid("{00112233-4455-6677-8899-aabbccddeeff}")
            End Class
            
              ...
              Dim lsnr As New BluetoothListener(MyConsts.MyServiceUuid)
              lsnr.Start()
              ' Now accept new connections, perhaps using the thread pool to handle each
              Dim conn As New BluetoothClient = lsnr.AcceptBluetoothClient()
              Dim peerStream As Stream = conn.GetStream()
              ...
            </code>
            <para>One can also pass the BluetoothListener a Service Name (v2.4), 
            a custom Service Record (Service Discovery Protocol record), and/or 
            set Class of Service bit(s). To create a custom Service Record use 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>.
            </para>
            <para>There are overloads of the constructor which take a 
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> parameter instead of a 
            <see cref="T:System.Guid"/> as the Service Class Id, the Class Id
            value should be specified in that case in the endpoint.
            If the port value is specified in the endpoint, then the listener will 
            attempt to bind to that port locally.  The address in the endpoint is 
            largely ignored as no current stack supports more than one local radio.
            </para>
            <para>As of version 3.4 we catch an exception if it occurs on the new 
            port set-up and it is stored. That error will be returned to any subsequent 
            Accept; that is we assume that the error affects the listener completely 
            and so make no attempt to start a new port and all subsequent Accept 
            complete with the original error.
            </para>
            <para>In the Bluetopia case previously the 'one port at a time' error
            was unhandled and occurred on a background thread and therefore killed
            the application.  Now it is caught and returned to the next Accept.
            Even better the first Accept successfully returns back to the caller.
            So BluetoothListener is now usable to that extent: one connection can
            be accepted.  After that it needs to be discarded and a new server created.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier. 
            </summary>
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service on which to listen for incoming connection attempts.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array, e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            -
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            -
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <remarks>
            <note>The method is only supported on Microsoft Bluetooth stack platforms.
            </note>
            </remarks>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
            -
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.EndAcceptBluetoothClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            -
            <remarks>
            <note>The method is only supported on Microsoft Bluetooth stack platforms.
            </note>
            <para>AcceptSocket is a blocking method that returns a <see cref="T:System.Net.Sockets.Socket"/> that you can use to send and receive data.
            If you want to avoid blocking, use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue.
            </para>
            <para>The <see cref="T:System.Net.Sockets.Socket"/> returned is initialized with the address and channel number of the remote device.
            You can use any of the Send and Receive methods available in the <see cref="T:System.Net.Sockets.Socket"/> class to communicate with the remote device.
            When you are finished using the <see cref="T:System.Net.Sockets.Socket"/>, be sure to call its <see cref="M:System.Net.Sockets.Socket.Close"/> method.
            If your application is relatively simple, consider using the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient"/> method rather than the AcceptSocket method.
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</para></remarks>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/> used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <remarks>AcceptTcpClient is a blocking method that returns a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method to obtain the underlying <see cref="T:System.Net.Sockets.NetworkStream"/> of the returned <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> will provide you with methods for sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, be sure to call its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/> method.
            If you want greater flexibility than a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> offers, consider using <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket"/>.</para></remarks>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> component.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            -
            <value>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            that the listener is using for communications.
            </value>
            -
            <remarks>
            <para>The <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> 
            property of the endpoint will contain the port number (RFCOMM Channel 
            Number) that the listener is listening on.
            On some platforms, the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            is similarly set, or is <see cref="F:InTheHand.Net.BluetoothAddress.None"/> 
            if not known.  The endpoint&#x2019;s <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is never set.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceClass">
            <summary>
            Get or set the Service Class flags that this service adds to the host 
            device&#x2019;s Class Of Device field.
            </summary>
            -
            <remarks>
            <para>The Class of Device value contains a Device part which describes 
            the primary service that the device provides, and a Service part which 
            is a set of flags indicating all the service types that the device supports, 
            e.g. <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Audio"/> etc.
            This property supports setting those flags; bits set in this value will be 
            <strong>added</strong> to the host device&#x2019;s CoD Service Class bits when the listener
            is active.  For Win32 see <see href="http://msdn.microsoft.com/en-us/library/aa362940(VS.85).aspx">MSDN &#x2014; BTH_SET_SERVICE Structure</see>
            </para>
            <para><note>Supported on Win32, but not supported on WindowsMobile/WinCE 
            as there's no native API for it.  The WindowCE section of MSDN mentions the
            Registry value <c>COD</c> at key <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Bluetooth\sys</c>. 
            However my (Jam) has value 0x920100 there but advertises a CoD of 0x100114, 
            so its not clear how the values relate to each other.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            -
            <value>The underlying network <see cref="T:System.Net.Sockets.Socket"/>.</value>
            -
            <remarks>
            <note>The property is only supported on Microsoft Bluetooth stack platforms.
            </note>
            <para><see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> creates a <see cref="T:System.Net.Sockets.Socket"/> to listen for incoming client connection requests.
            Classes deriving from <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> can use this property to get this <see cref="T:System.Net.Sockets.Socket"/>.
            Use the underlying <see cref="T:System.Net.Sockets.Socket"/> returned by the <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Server"/> property if you require access beyond that which <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> provides.
            </para>
            <para>Note <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Server"/> property only returns the <see cref="T:System.Net.Sockets.Socket"/> used to listen for incoming client connection requests.
            Use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket"/> method to accept a pending connection request and obtain a <see cref="T:System.Net.Sockets.Socket"/> for sending and receiving data.
            You can also use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient"/> method to accept a pending connection request and obtain a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> for sending and receiving data.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initializes an instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> class 
            for the device with the given address.
            </summary>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh">
            <summary>
            Forces the system to refresh the device information.
            </summary>
            -
            <remarks>
            See <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName"/>
            for one reason why this method is necessary.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Update">
            <summary>
            Updates the device name used to display the device, affects the local computer cache.
            </summary>
            <remarks>On Windows CE this only affects devices which are already paired.</remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
             
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             <para>This overload is silent on error; the other overload raises an exception
             if required
             (<see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)"/>).
             </para>
             </remarks>
             -
             <exception cref="T:System.PlatformNotSupportedException">
             Thrown if this method is called on Windows CE platforms.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <param name="throwOnError">Whether the method should raise an exception
             when 
             </param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             </remarks>
             -
             <exception cref="T:System.ComponentModel.Win32Exception">The call failed.
             </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database.
            </summary>
            -
            <remarks>
            <para>
            For instance to see whether the device has an an Serial Port service
            search for UUID <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort"/>,
            or too find all the services that use RFCOMM use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol"/>,
            or all the services use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol"/>.
            </para>
            <para>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </para>
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
            -
            <example>
            <code lang="VB.NET">
            Dim bdi As BluetoothDeviceInfo = ...
            Dim records As ServiceRecord() = bdi.GetServiceRecords(BluetoothService.RFCommProtocol)
            ' Dump each to console
            For Each curRecord As ServiceRecord In records
               ServiceRecordUtilities.Dump(Console.Out, curRecord)
            Next
            </code>
            </example>
            
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.BeginGetServiceRecords(System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>.
            </param>
            <param name="callback">An optional asynchronous callback, to be called 
            when the query is complete.
            </param>
            <param name="state">A user-provided object that distinguishes this 
            particular asynchronous Service Record lookup query from other requests.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous Service Record lookup query, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.EndGetServiceRecords(System.IAsyncResult)">
            <summary>
            Ends an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object that was obtained when the asynchronous operation was started.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecordsUnparsed(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database,
            returning the raw byte rather than a parsed record.
            </summary>
            -
            <remarks>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>An array of array of <see cref="T:System.Byte"/>.</returns>
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetVersions">
            <summary>
            Gets the radio version and manufacturer information for the device.
            Needs a connection to the device.
            </summary>
            -
            <remarks>
            <para>Includes information such as the LMP versions, supported
            features and the manufacturer of the radio/Bluetooth Controller.
            </para>
            <para>If the device is not connected this information cannot be
            obtained; an error will occur if there is no connection.
            The values will be cached until <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/> is called.
            </para>
            <para>This feature is currently supported only on the
            Microsoft Bluetooth stack on both desktop Windows and Windows
            Mobile. However Windows XP does not provide this information.
            Implementation is possible on some of the other Bluetooth stacks
            and will depend on demand/support for the user community.
            </para>
            </remarks>
            -
            <exception cref="T:System.ComponentModel.Win32Exception">
            An error occurred, desktop Windows returns error code
            1167 ERROR_DEVICE_NOT_CONNECTED and Windows Mobile returns error code
            1168 ERROR_NOT_FOUND.
            Windows XP which does not support this functionality returns error code
            2 ERROR_FILE_NOT_FOUND.
            </exception>
            <exception cref="T:System.NotImplementedException">
            Not yet implemented.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This stack does not support getting this information.
            </exception>
            -
            <returns>The radio version etc information as a
            <see cref="T:InTheHand.Net.Bluetooth.RadioVersions"/> instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.ShowDialog">
            <summary>
            Displays information about the device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.IsAMsftInternalType(System.Object)">
            <summary>
            E.g. used internally by WPF.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceAddress">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName">
            <summary>
            Gets a name of a device.
            </summary>
            -
            <remarks>
            <para>Note, that due the way in which Bluetooth device discovery works,
            the existence and address of a device is known first, but a separate
            query has to be carried out to find whether the device also has a name.
            This means that if a device is discovered afresh then this property might
            return only a text version of the device&#x2019;s address and not its
            name, one can also see this in the Windows&#x2019; Bluetooth device dialogs
            where the device appears first with its address and the name is later
            updated.  To see the name, wait for some time and access this property again
            having called <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/>
            in the meantime.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">
            <summary>
            Returns the Class of Device of the remote device.
            </summary>
            -
            <remarks>
            <para>
            Some CE 4.2 devices such as original PPC2003 devices don't have the native 
            API on which this property depends &#x2014; it was added as part of a hotfix. 
            The property will always return zero in such a case.  On WM/CE we also 
            attempt to get the CoD value as part of the discovery process; this is 
            of course only works for devices in-range.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Rssi">
            <summary>
            Returns the signal strength for the Bluetooth connection with the peer device.
            <para><b>Supports only on some platforms.</b></para>
            </summary>
            -
            <value>Valid values for this property are -128 to 128.  It returns
            <see cref="F:System.Int32.MinValue">Int32.MinValue</see> on failure.
            </value>
            -
            <remarks>
            <para>Thus there are multiple reasons which this property can return
            the error value (i.e. <see cref="F:System.Int32.MinValue">Int32.MinValue</see>).
            </para>
            <list type="number">
            <item>On an unsupported platform, e.g. MSFT+Win32, or MSFT+CE/WM on an
            older version.  See below.
            </item>
            <item>The remote device is not turned-on or in range.  See below.
            </item>
            <item>On Widcomm, there is no connection to the remote device.  See below.
            </item>
            </list>
            
            <para>Platform support:</para>
            <list type="bullet">
            <item>Does <b>not</b> work on Win32 with the Microsoft Bluetooth stack.
            That platform provide no support for RSSI, please contact Microsoft
            to complain.
            </item>
            <item>Works on Windows Mobile 5.0, Windows Embedded CE 6.0, or later
            versions.
            </item>
            <item>Works on Widcomm, both platforms.
            We will <i>not</i> try to connect, see below.
            </item>
            </list>
            <para>
            </para>
            
            <para>Finally, to get an RSSI value Bluetooth requires an open
            connection to the peer device.
            On Widcomm we will <i>not</i> attempt to connect, so the caller must
            ensure that there's a connection --
            perhaps it could call <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            just before accessing this property.
            On CE/WM if there is no active connection, then we will attempt to
            create one.  This of course <i>can</i> be <i>slow</i>, and <i>will</i>
            be slow if the remote device is not in range.
            (Bluetooth 2.1 supports getting the RSSI value at discovery time which
            might provide the solution for many cases.  However only the MSFT+Win32
            stack specifically supports v2.1, and of course it doesn't support RSSI
            at all!)
            </para>
            <para>Note that the Bluetooth specification doesn't require that the
            radio hardware provides any great precision in its RSSI readings.
            The spec says for instance, in v2.1 Volume 2 Part E ("HCI") Section 7.5.4:
            &#x201C;Note: how accurate the dB values will be depends on the Bluetooth hardware.
            The only requirements for the hardware are that the Bluetooth device is able to
            tell whether the RSSI is inside, above or below the Golden Device Power Range.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.InstalledServices">
            <summary>
            Returns a list of services which are already installed for use on the calling machine.
            </summary>
            <remarks>
            <para>This property returns the services already configured for use. 
            Those are the ones that are checked in the &#x201C;Services&#x201D; tab
            of the device&#x2019;s property sheet in the Bluetooth Control panel.
            I presume the behaviour is similar on CE.
            </para>
            <para>Will only return available services for paired devices.
            </para>
            <para>It of course will also only returns standard system services which Windows understands.
            (On desktop Windows this method calls the OS function <c>BluetoothEnumerateInstalledServices</c>).
            </para>
            <para>To see all the services that a device advertises use the 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected.
            </summary>
            <remarks>Not supported under Windows CE and will always return false.</remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device. Not all remembered devices are authenticated.
            </summary>
            -
            <remarks>Now supported under Windows CE — will return the same as 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>.
            </remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded. All authenticated devices are remembered.
            </summary>
            <remarks>Is now supported on both CE and XP.</remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen">
            <summary>
            Date and Time this device was last seen by the system.
            </summary>
            -
            <remarks><para>Is set by the Inquiry (Device Discovery) process on
            the stacks where we handle Inquiry directly &#x2014; that is
            every platform except the Microsoft stack on Win32 (MSFT+Win32),
            so is supported under MSFT+WM, Widcomm, Bluetopia, etc, etc.
            </para>
            <para>This value is supported on Windows 7 with the Microsoft stack.
            It it not supported on earlier Win32 versions as the native 
            API has a bug.  The value provided is always simply the current 
            time, e.g. after a discovery for every device returned this value has 
            the time of the discovery operation.  Tracked by workitem 
            <see href="http://www.codeplex.com/32feet/WorkItem/View.aspx?WorkItemId=10280">10280</see>.
            </para>
            </remarks>
            -
            <value>
            An instance of <see cref="T:System.DateTime"/> containing the time in UTC,
            or <c>DateTime</c>.<see cref="F:System.DateTime.MinValue"/>
            if there's no value.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastUsed">
            <summary>
            Date and Time this device was last used by the system.
            </summary>
            -
            <remarks>
            <para>Not supported on most stacks: Widcomm, Bluetopia, MSFT+WM 
            and will return <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>
            </para>
            <para>Is supported on Windows 7 with the Microsoft stack.  Is not
            supported on earlier Win32 versions &#x2014; there it just always
            returns the current time, see <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen"/>.
            </para>
            </remarks>
            -
            <value>
            An instance of <see cref="T:System.DateTime"/> containing the time in UTC,
            or <c>DateTime</c>.<see cref="F:System.DateTime.MinValue"/> 
            if there's no value.
            </value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DeviceClass">
            <summary>
            Class of Device flags as assigned in the Bluetooth specifications.
            </summary>
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">ClassOfDevice.Device</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous">
            <summary>
            Miscellaneous &#x2014; 
            [Ref #2: Used where a more specific Major Device Class code
            is not suited (but only as specified in this document). Devices
            that do not have a major class code assigned can use the all-1 code
            (<see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized"/>)
            until 'classified']
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Computer">
            <summary>
            Major class: Computer (desktop,notebook, PDA, organizers, .... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.DesktopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Desktop workstation.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.ServerComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Server-class computer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.LaptopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Laptop.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.HandheldComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Handheld PC/PDA (clam shell).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.PdaComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Palm sized PC/PDA.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WearableComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Wearable computer (Watch sized).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Phone">
            <summary>
            Major class: Phone (cellular, cordless, payphone, modem, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CellPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cellular.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CordlessPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cordlss.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.SmartPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Smart phone.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WiredPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Wired modem or voice gateway.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.IsdnAccess">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Common ISDN Access.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AccessPointAvailable">
            <summary>
            Major class: LAN /Network Access point.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AudioVideoUnclassified">
            <summary>
            Major class: Audio/Video (headset,speaker,stereo, video display, vcr.....
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Peripheral">
            <summary>
            Major class: Peripheral (mouse, joystick, keyboards, ..... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Imaging">
            <summary>
            Major class: Imaging (printing, scanner, camera, display, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Wearable">
            <summary>
            Major class: Wearable.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Toy">
            <summary>
            Major class: Toy.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Medical">
            <summary>
            Major class: Medical.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized">
            <summary>
            Uncategorized, specific device code not specified
            &#x2014; see <see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DeviceClass_Masks">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId">
            <summary>
            Service Attribute IDs defined by the OBEX related specifications,
            i.e. Object Push and Synchronization Profiles specifications.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.GoepL2capPsm">
            <summary>
            GOEP L2Cap PSM
            </summary>
            <remarks>
            New in GOEP v2.0 but not numbered there.
            New in OPP v1.2, FTP v1.2, and BIP v1.1.
            <para>[<c>UInt16</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedDataStoresList">
            <summary>
            Supported Data Stores List (Synchronization Profile)
            </summary>
            <remarks>
            Synchronization Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>Phonebook</description></item>
            <item><term>0x03</term><description>Calendar</description></item>
            <item><term>0x05</term><description>Notes</description></item>
            <item><term>0x06</term><description>Message</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFormatsList">
            <summary>
            Supported Formats List (Object Push Profile)
            </summary>
            <remarks>
            Object Push Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>vCard 2.1</description></item>
            <item><term>0x02</term><description>vCard 3.0</description></item>
            <item><term>0x03</term><description>vCard 2.1</description></item>
            <item><term>0x04</term><description>vCal 1.0</description></item>
            <item><term>0x05</term><description>vNote</description></item>
            <item><term>0x06</term><description>vMessage</description></item>
            <item><term>0xFF</term><description>any type of object</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedCapabilities">
            <summary>
            Supported Capabilities (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>Generic imaging</description></item>
            <item><term>Bit 1</term><description>Capturing</description></item>
            <item><term>Bit 2</term><description>Printing</description></item>
            <item><term>Bit 3</term><description>Displaying</description></item>
            <item><term>Bit 4..7</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFeatures">
            <summary>
            Supported Features (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt16</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>ImagePush</description></item>
            <item><term>Bit 1</term><description>ImagePush-Store</description></item>
            <item><term>Bit 2</term><description>ImagePush-Print</description></item>
            <item><term>Bit 3</term><description>ImagePush-Display</description></item>
            <item><term>Bit 4</term><description>ImagePull</description></item>
            <item><term>Bit 5</term><description>AdvancedImagePrinting</description></item>
            <item><term>Bit 6</term><description>AutomaticArchive</description></item>
            <item><term>Bit 7</term><description>RemoteCamera</description></item>
            <item><term>Bit 8</term><description>RemoteDisplay</description></item>
            <item><term>Bit 9..15</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFunctions">
            <summary>
            Supported Functions (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt32</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>GetCapabilities</description></item>
            <item><term>Bit 1</term><description>PutImage</description></item>
            <item><term>Bit 2</term><description>PutLinkedAttachment</description></item>
            <item><term>Bit 3</term><description>PutLinkedThumbnail</description></item>
            <item><term>Bit 4</term><description>RemoteDisplay</description></item>
            <item><term>Bit 5</term><description>GetImagesList</description></item>
            <item><term>Bit 6</term><description>GetImageProperties</description></item>
            <item><term>Bit 7</term><description>GetImage</description></item>
            <item><term>Bit 8</term><description>GetLinkedThumbnail</description></item>
            <item><term>Bit 9</term><description>GetLinkedAttachment</description></item>
            <item><term>Bit 10</term><description>DeleteImage</description></item>
            <item><term>Bit 11</term><description>StartPrint</description></item>
            <item><term>Bit 12</term><description>Reserved</description></item>
            <item><term>Bit 13</term><description>StartArchive</description></item>
            <item><term>Bit 14</term><description>GetMonitoringImage</description></item>
            <item><term>Bit 16</term><description>GetStatus</description></item>
            <item><term>Bit 15, 17..31</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.TotalImagingDataCapacity">
            <summary>
            Total Imaging Data Capacity (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt64</c>]</para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Basic Printing Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DocumentFormatsSupported">
            <summary>
            Document Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.CharacterRepertoiresSupported">
            <summary>
            Character Repertoires Supported
            </summary>
            <remarks>[<c>UInt128</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.XhtmlPrintImageFormatsSupported">
            <summary>
            XHTML-Print Image Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ColorSupported">
            <summary>
            Color Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.Model1284Id">
            <summary>
            1284ID
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterName">
            <summary>
            Printer Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterLocation">
            <summary>
            Printer Location
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DuplexSupported">
            <summary>
            Duplex Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MediaTypesSupported">
            <summary>
            Media Types Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaWidth">
            <summary>
            MaxMediaWidth
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaLength">
            <summary>
            MaxMediaLength
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.EnhancedLayoutSupported">
            <summary>
            Enhanced Layout Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.RuiFormatsSupported">
            <summary>
            RUI Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingRuiSupported">
            <summary>
            Reference Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingRuiSupported">
            <summary>
            Direct Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingTopUrl">
            <summary>
            Reference Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingTopUrl">
            <summary>
            Direct Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterAdminRuiTopUrl">
            <summary>
            Printer Admin RUI Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DeviceName">
            <summary>
            Device Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Personal Area Networking Profile specification.
            </summary>PersonalAreaNetworkingProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.SecurityDescription">
            <summary>
            Security Description
            </summary>
            <remarks>&#x201C;Security Description&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.NetAccessType">
            <summary>
            NetAccessType
            </summary>
            <remarks>&#x201C;Type of Network Access Available&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.MaxNetAccessRate">
            <summary>
            MaxNetAccessRate
            </summary>
            <remarks>&#x201C;Maximum possible Network Access Data Rate&#x201D; [<c>UInt32</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv4Subnet">
            <summary>
            IPv4Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv6Subnet">
            <summary>
            IPv6Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Headset Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId.RemoteAudioVolumeControl">
            <summary>
            Remote audio volume control
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Hand-Free Profile specification.
            </summary>HandFreeProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.Network">
            <summary>
            Network
            </summary>
            <remarks>
            <para>&#x201C;The "Network" attribute states, if the AG has the capability 
            to reject incoming calls[4]. This attribute is not encoded as a data element 
            sequence; it is simply an 8-bit unsigned integer. The information given 
            in the “Network” attribute shall be the same as the information given 
            in Bit 5 of the unsolicited result code +BRSF (see Section 4.24.3). An 
            attribute value of 0x00 is translated to a bit value of 0; an attribute 
            value of 0x01 is translated to a bit value of 1.&#x201D;
            </para>
            [<c>UInt8</c>]
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.SupportedFeatures">
            <summary>
            SupportedFeatures
            </summary>
            <remarks>
            <para>&#x201C;The attribute &#x201C;SupportedFeatures&#x201D; states the features 
            supported in each device. &#x2026;
            The set of features supported in each case is bit-wise defined in this 
            attribute on a yes/no basis. The mapping between the features and their 
            corresponding bits within the attribute is listed below in for the HF 
            and in for the AG. &#x2026;
            <code lang="none">
            Bit     Feature                                                     Default in HF
            (0=LSB)
            0       EC and/or NR function (yes/no, 1 = yes, 0 = no)             0
            1       Call waiting and three way calling(yes/no, 1 = yes, 0 = no) 0
            2       CLI presentation capability (yes/no, 1 = yes, 0 = no)       0
            3       Voice recognition activation (yes/no, 1= yes, 0 = no)       0
            4       Remote volume control (yes/no, 1 = yes, 0 = no)             0
            </code>
            <para>Table 5.2 “SupportedFeatures” attribute bit mapping for the HF</para>
            <code lang="none">
            Bit     Feature                                             Default in AG
            (0=LSB)
            0       Three-way calling (yes/no, 1 = yes, 0 = no)         1
            1       EC and/or NR function (yes/no, 1 = yes, 0 = no)     0
            2       Voice recognition function (yes/no, 1 = yes, 0 = no)    0
            3       In-band ring tone capability (yes/no, 1 = yes, 0 = no)  1
            4       Attach a phone number to a voice tag (yes/no, 1 = yes, 0 = no)  0
            </code>
            Table 5.4 “SupportedFeatures” attribute bit mapping for the AG&#x201D;
            </para>
            [<c>UInt16</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId">
            <summary>
            Service Attribute IDs defined by the Health Device Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.SupportFeaturesList">
            <summary>
            SupportFeaturesList
            </summary>
            -
            <remarks>
            <para>"This is a sequence for which each element is a sequence that
            describes a single application data end-point on the device. The
            Supported Features attribute (MDEP List) provides an indication of
            the data types that an MDEP supports.",
            "...each description is itself a sequence of three or more elements."
            </para>
            <c>[Sequence]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.DataExchangeSpecification">
            <summary>
            DataExchangeSpecification
            </summary>
            -
            <remarks>
            <para>"This attribute is a one-byte reference, with the value taken
            from the Bluetooth Assigned Numbers [3] to identify the Data Exchange
            Protocol used (e.g. ISO/IEEE 11073-20601 specification)."
            e.g. value 0x01 is ISO/IEEE 11073-20601, "Health informatics - Personal
            health device communication - Application profile - Optimized exchange
            protocol"
            </para>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.McapSupportedProcedures">
            <summary>
            MCAP Supported Procedures
            </summary>
            -
            <remarks>
            <para>"This attribute is a one byte bit-mask that indicates the MCAP
            procedures that are supported by this HDP service."
            </para>
            <code lang="none">
            0x02  Supports Reconnect Initiation 3
            0x04  Supports Reconnect Acceptance 4
            0x08  Supports Clock Synchronization Protocol (includes support for at least Sync-Slave Role)
            0x10  Supports Sync-Master Role
            </code>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.ObexListenerContext">
            <summary>
            Provides access to the request and response objects used by the <see cref="T:InTheHand.Net.ObexListener"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerContext.Request">
            <summary>
            Gets the <see cref="T:InTheHand.Net.ObexListenerRequest"/> that represents a client's request for a resource
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothProtocolType">
            <summary>
            Specifies additional protocols that the <see cref="T:System.Net.Sockets.Socket"/> class supports.
            </summary>
            <remarks>
            <para>These constants are defined by the Bluetooth SIG - <see href="https://www.bluetooth.org/Technical/AssignedNumbers/service_discovery.htm"/>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.Sdp">
            <summary>
            Service Discovery Protocol (bt-sdp)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.RFComm">
            <summary>
            Bluetooth RFComm protocol (bt-rfcomm)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.L2Cap">
            <summary>
            Logical Link Control and Adaptation Protocol (bt-l2cap)
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDASocketOptionName">
            <summary>
            Socket option constants to set IrDA specific connection modes, and 
            get/set IrDA specific features.
            </summary>
            <remarks>
            Socket option constants to set IrDA specific connection modes, and 
            get/set IrDA specific features: 
            for instance to set IrLMP mode, or get the maximum send size.  Pass 
            to <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])"/>/etc and
            <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])"/>/etc,  
            along with optionLevel <c>IrDASocketOptionLevel.</c><see 
            cref="F:InTheHand.Net.Sockets.IrDASocketOptionLevel.IrLmp"/>; 
            see the examples below.
            <para><b>New in v1.5.51015</b></para>
            </remarks>
            <example><para>For instance, where <c>cli</c> is an instance of 
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>.</para>
            In VB.NET, to set IrLMP mode (<c>IrLptMode</c>).
            <code lang="VB.NET">
            cli.Client.SetSocketOption(IrDASocketOptionLevel.Irlmp,  _
               IrDASocketOptionName.IrLptMode, _
               1) 'representing true; can use True itself in FXv2.
            </code>
            In C#, to retrieve the maximum send size.
            <code lang="C#">
            int maxSendSize = (int)cli.Client.GetSocketOption(
               IrDASocketOptionLevel.Irlmp,
               IrDASocketOptionName.SendPduLength);
            </code>
            </example>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.EnumDevice">
            <summary>
            Gets the list of discovered devices.  
            Is used internally by <c>IrDAClient.DiscoverDevices</c>.  
            </summary>
            <remarks>
            In native terms takes a <c>DEVICE_LIST</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IasSet">
            <summary>
            Sets an entry in the local IAS (Information Access Service) database.
            </summary>
            <remarks>
            In native terms takes a <c>IAS_SET</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IasQuery">
            <summary>
            Queries an entry in the peer's IAS (Information Access Service) database.
            </summary>
            <remarks>
            In native terms takes a <c>IAS_QUERY</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.SendPduLength">
            <summary>
            Retrieve the maximum send size when using IrLMP directly 
            (<see cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.IrLptMode"/>).  
            IrLMP requires sent data to fit in one frame.
            </summary>
            <remarks>
            <c>Integer</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.ExclusiveMode">
            <summary>
            Restricts the link to one application-level (IrLMP) connection; 
            for use when low latency is required.
            Returns an error on all tested platforms.
            </summary>
            <remarks>
            Returns an error on all tested platforms.  <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IrLptMode">
            <summary>
            Sets IrLMP mode, disabling TinyTP.  Used for instance when 
            printing with IrLPT.
            </summary>
            <remarks>
            On Windows NT platforms at least, is ignored on server-side sockets.
            <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode">
            <summary>
            Sets IrCOMM 9-Wire/Cooked mode.  Used for instance when connecting 
            to the modem in a mobile phone (service name <c>IrDA:IrCOMM</c>).  
            </summary>
            <remarks>
            In operation, received IrCOMM control information is discarded and 
            null information is sent.
            <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.SharpMode">
            <summary>
            Reportedly sets non-IrDA Sharp ASK mode on the Windows CE 
            platform.  Presence unverified.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceElement">
             <summary>
             Holds an SDP data element.
             </summary>
             -
             <remarks>
             <para>A Service Element hold the data in a SDP Service Record.  It can 
             hold various types of data, being like the &#x2018;variant&#x2019; type in some
             environments.  Each <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> in
             a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> holds its content in a
             Service Element.
             </para>
             <para>The types currently defined in the Service Discovery specification
             include unsigned and signed integers 
             of various sizes (8-bit, 16-bit etc), UUIDs in the full 128-bit form or
             in the 16 and 32-bit forms, TextString, Url etc.  An element can itself
             also contain a list of element, either as a &#x2018;sequence&#x2019; or an
             &#x2018;alternative&#x2019;, and thus an attribute can contain a tree of values,
             e.g. as used by the 
             <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             attribute.
             </para>
             <para>The type that an element is holding can be accessed with the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementTypeDescriptor"/> and 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementType"/> properties which
             are of type <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and
             <see cref="T:InTheHand.Net.Bluetooth.ElementType"/> respectively, the former being 
             the &#x2018;major&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.UnsignedInteger"/>, and
             the latter the &#x2018;minor&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt16"/>.
             </para>
             <para>The element's value can be accessed in various ways, either directly 
             in its internal form through its <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
             property.  It has return type <see cref="T:System.Object"/> so the value 
             will have to be cast before use, see the <c>UInt16</c> example below.  There
             are also a number of type-specific methods, e.g. 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/>,
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             etc.  Each will throw an <see cref="T:System.InvalidOperationException"/>
             if the element is not of a suitable type.  The complete set is:</para>
             <list type="table">
             <listheader><term><see cref="T:InTheHand.Net.Bluetooth.ElementType"/></term>
             <description>Access method, or .NET Type for direct access</description>
             </listheader>
             <item><term><c>Nil</c></term>
             <description><see langword="null"/></description></item>
             
             <item><term><c>Uint8</c></term><description><see cref="T:System.Byte"/></description></item>
             <item><term><c>Uint16</c></term><description><see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uint32</c></term><description><see cref="T:System.UInt32"/></description></item>
             <item><term><c>Uint64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Uint128</c></term><description>Currently unsupported.</description></item>
             
             <item><term><c>Int8</c></term><description><see cref="T:System.SByte"/></description></item>
             <item><term><c>Int16</c></term><description><see cref="T:System.Int16"/></description></item>
             <item><term><c>Int32</c></term><description><see cref="T:System.Int32"/></description></item>
             <item><term><c>Int64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Int128</c></term><description>Currently unsupported.</description></item>
            
             <item><term><c>Uuid16</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid32</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid128</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/></description></item>
             
             <item><term><c>TextString</c></term><description>With 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/> etc.
             The underlying value can be an array of bytes, or as a <see cref="T:System.String"/>
             the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> will set an
             array of bytes, whereas a manually created record will likely contain a
             <see cref="T:System.String"/>.
             </description></item>
             
             <item><term><c>Boolean</c></term><description><see cref="T:System.Boolean"/></description></item>
             
             <item><term><c>ElementSequence</c></term><description>With
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/> or
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>
             </description></item>
             <item><term><c>ElementSequence</c></term><description>-"-</description></item>
            
             <item><term><c>Url</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>,
             can be stored interally as <see cref="T:System.Uri"/> or as an array of bytes
             </description></item>
             </list>
             
             <para>Note that there are no access 
             methods for the numeric type for instance so the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property will have
             to be used e.g.
             <code lang="C#">
             // ElementType is UInt16
             ushort x = (ushort)element.Value;
             </code>
             or
             <code lang="C#">
             // ElementType is UInt16
             Dim x As UShort = CUShort(element.Value);
             </code>
             </para>
             <para>Additional type-specific methods can be added as required, in fact the 
             full set of 19+ could be added, it just requires implementation and test&#x2026;
             </para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotUuidType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotTextStringType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotUrlType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotSeqAltType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgSeqAltTypeNeedElementArray">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgFmtCreateNumericalGivenNonNumber">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgListContainsNotElement">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)">
             <overloads>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </overloads>
             -
             <summary>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </summary>
             -
             <remarks>
             <para>The type of the object passed in the <paramref name="value"/> parameter
             <strong>must</strong> suit the type of the element.  For instance if the element type is 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> then the object
             passed in must be a <see cref="T:System.Byte"/>, if the element type is
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.TextString"/> then the object
             must either be a <see cref="T:System.String"/> or the string encoded as 
             an array of <see cref="T:System.Byte"/>, 
             and if the element type is <see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid16"/>
             then the object passed in must be a <see cref="T:System.UInt16"/>,
             etc.
             For the full list of types see the class level documentation 
             (<see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>).
             </para>
             <para>For numerical element types the 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
             factory method will accept any integer type and attempt to convert it to the 
             required type before creating the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>,
             for example for element type <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> 
             it will accept an <see cref="T:System.Int32"/> parameter and convert
             it to a <see cref="T:System.Byte"/> internally.
             </para>
             </remarks>
             -
             <param name="type">The type of the element as an ElementType.
             </param>
             <param name="value">The value for the new element,
             <strong>must</strong> suit the type of the element.
             See the remarks for more information.
             </param>
             -
             <example>
             <code lang="C#">
             ServiceElement e
             e = new ServiceElement(ElementType.TextString, "Hello world");
             e = new ServiceElement(ElementType.TextString, new byte[] { (byte)'h', (byte)'i', });
             e = new ServiceElement(ElementType.Uuid16, (UInt16)0x1101);
            
            
             int i = 10;
             int j = -1;
             
             // Error, Int32 not suitable for element type UInt8.
             ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
             
             // Success, Byte value 10 stored.
             ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
             
             // Error, -1 not in range of type Byte.
             ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceElement})">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,InTheHand.Net.Bluetooth.ServiceElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Obsolete, use <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/> instead.
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Create an instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            but internally converting the numeric value to the required type.
            </summary>
            -
            <remarks>
            <para>As noted in the constructor documentation 
            (<see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>)
            the type of the value supplied <strong>must</strong> exactly match the element's natural type,
            the contructor will return an error if that is not the case. This method 
            will instead attempt to convert the value to the required type.  It uses 
            the <see cref="T:System.IConvertible"/> interface to do the conversion, for
            instance if the element type is <c>Uint16</c> then it will cast the input value
            to <see cref="T:System.IConvertible"/> and call 
            <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/> on it.
            If the value is not convertible to the element type then an 
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown see below.
            </para>
            <para>For instance, passing in an C# <c>int</c> / Visual Basic <c>Integer</c>
            to the constructor will fail for element types <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/>
            etc, however by using this method it will succeed if the value is in the
            correct range.
            For example
            <code lang="C#">
            int i = 10;
            int j = -1;
            
            // Error, Int32 not suitable for element type UInt8.
            ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
            
            // Success, Byte value 10 stored.
            ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
            
            // Error, -1 not in range of type Byte.
            ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
            </code>
            The last example failing with:
            <code lang="none">
            System.ArgumentOutOfRangeException: Value '-1'  of type 'System.Int32' not valid for element type UInt16.
             ---> System.OverflowException: Value was either too large or too small for a UInt16.
               at System.Convert.ToUInt16(Int32 value)
               at System.Int32.System.IConvertible.ToUInt16(IFormatProvider provider)
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               --- End of inner exception stack trace ---
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               at InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(ElementType elementType, Object value)
               at MiscFeatureTestCs.Main(String[] args)
            </code>
            </para>
            </remarks>
            -
            <param name="elementType">The type of the element as an ElementType.
            Should be one of the <c>UnsignedInteger</c>/<c>TwosComplementInteger</c> types.
            </param>
            <param name="value">The value for the new element,
            should be a numerical type.
            </param>
            -
            <returns>The new element.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            The <paramref name="elementType"/> is not a numerical type.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value wasn&#x2019;t convertible to the required type, e.g. if -1 is
            passed for element type UInt8, as shown above.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList">
            <summary>
            Gets the value as a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an list.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray">
            <summary>
            Gets the value as a array of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an array.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri">
            <summary>
            Gets the value as a <see cref="T:System.Uri"/>.
            </summary>
            -
            <returns>The Url value as a <see cref="T:System.Uri"/>.
            </returns>
            -
            <remarks>
            <para>It turns out that we can't trust vendors to add only valid
            URLs to their records, for instance the iPhone has an attribute
            with value "www.apple.com" which isn't a URL as it has no scheme
            part (http://) etc.
            </para>
            <para>Thus a Url value in an element can be stored in a number of
            formats.  If created by the parser then it will be stored as a 
            <see cref="T:System.String"/> or as an array of
            <see cref="T:System.Byte"/> if property
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation">ServiceRecordParser.LazyUrlCreation</see>
            is set.  If created locally it can be those types or also 
            <see cref="T:System.Uri"/> .
            </para>
            <para>This method will try to convert from those formats to <see cref="T:System.Uri"/>.
            If the URL is invalid e.g. has bad characters or is missing the scheme
            part etc then an error will occur.  One can instead access the
            element's <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
            property and expect one of the three types.  When created by the 
            parser it will be of type <see cref="T:System.String"/> unless 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation"/>
            is set.
            </para>
            </remarks>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Url"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid">
            <summary>
            Gets the value as a <see cref="T:System.Guid"/>.
            </summary>
            -
            <returns>The UUID value as a <see cref="T:System.Guid"/>.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid128"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            where it is encoded using the given encoding form.
            </summary>
            -
            <param name="encoding">The <see cref="T:System.Text.Encoding"/>
            object to be used to decode the string value
            if it has been read as a raw byte array.
            </param>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as specified by the given IETF Charset identifer.
            </summary>
            -
            <remarks>
            Note that a strict decoding of the string is carried out 
            (except on the NETCF where it is not supported). 
            Thus if the value is not in the specified encoding, or has been
            encoded incorrectly, then an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as UTF-8.
            </summary>
            -
            <remarks>
            Note: a strict decoding is used.
            Thus if the value is not in UTF-8 encoding or has been
            encoded incorrectly an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            On NETCF, an <see cref="T:System.ArgumentException"/> is thrown; not that
            <see cref="T:System.ArgumentException"/> is the base class of the
            <see cref="T:System.Text.DecoderFallbackException"/> exception.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.ElementType">
            <summary>
            Gets the type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.ElementTypeDescriptor">
            <summary>
            Gets the SDP Element Type Descriptor of the element
            as an <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.Value">
            <summary>
            Gets the value of the element as the .NET type it is stored as.
            </summary>
            <remarks>
            In most cases the type-specific property should be used instead, e.g 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, etc.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList">
            <summary>
            Gets a list of enum-like classes containing SDP Service Attribute Id definitions 
            for a particular Service Class.
            </summary>
            -
            <remarks>
            See method 
            <see cref="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Get a list of enum-like classes containing Service Attribute Id definitions 
            for the type of the Service Class contained in the given Service Record.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            whose <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            element will be retrieved, and its Service Class Id will used
            for the lookup.
            </param>
            -
            <returns>
            An array of <see cref="T:System.Type"/> each of which is a enum-like class 
            which defines the set of Service Attribute IDs used by a particular 
            Service Class e.g. ObjectPushProfile.
            An empty array will be returned if none of the Service Classes
            are known, or the record contains no 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute, or it is invalid.
            <note>Currently only the first Service Class Id is looked-up.</note>
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="record"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class contained in the given 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            (type <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>) data element.
            </summary>
            -
            <param name="idElement">A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            of 'UUID' type containing the Service Class to search for.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown or the element is not of <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>
            type.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="idElement"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(System.Guid)">
            <overloads>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified.
            </overloads>
            -
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified by UUID.
            </summary>
            -
            <param name="uuid">The Service Class to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LanguageBaseItem">
            <summary>
            Represents a member of the SDP 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>,
            Attribute
            which provides for multi-language strings in a record.
            </summary>
            <remarks>
            &#x201C;The 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute is a list in which each 
            member contains a language identifier, a character encoding identifier, and 
            a base attribute ID for each of the natural languages used in the service 
            record.&#x201D;
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.PrimaryLanguageBaseAttributeId">
            <summary>
            The primary language is specified to have base attribute ID 0x0100.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.Utf8EncodingId">
            <summary>
            The Id for the UTF-8 encoding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotU16">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseBaseInvalid">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotInThrees">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgFormatUnrecognizedEncodingId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangMustAsciiTwoChars">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </overloads>
            -
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.Int16,System.Int16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.String,System.UInt16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.String,System.Int16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.ParseListFromElementSequence(InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Gets the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            items in the service record.
            </summary>
            -
            <param name="elementSequence">
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            data from the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute.
            </param>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.  
            An array length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            <paramref name="elementSequence"/> is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
            The element sequence contains incorrectly formatted or invalid content,
            for example it contains the wrong element data types, or doesn't contain
            the elements in groups of three as required.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.CreateElementSequenceFromList(InTheHand.Net.Bluetooth.LanguageBaseItem[])">
            <summary>
            Create a data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute
            from the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            </summary>
            -
            <param name="list">
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </param>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            element, to be added to a generally the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.CreateEnglishUtf8PrimaryLanguageItem">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance
            for a primary language of English and a string encoding of UTF-8.
            </summary>
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.GetEncoding">
            <summary>
            Gets an <see cref="T:System.Text.Encoding"/> appropriate for this language base item.
            </summary>
            -
            <returns>The <see cref="T:System.Text.Encoding"/>
            appropriate for this language base item.
            </returns>
            -
            <remarks>
            <para>We support the following set of mappings from encoding id to .NET
            Encoding name.
            <list type="table">
            <listheader><term>Id</term><description>Encoding</description></listheader>
            <item><term>3</term><description>us-ascii</description></item>
            <item><term>4</term><description>iso-8859-1</description></item>
            <item><term>5</term><description>iso-8859-2</description></item>
            <item><term>6</term><description>iso-8859-3</description></item>
            <item><term>7</term><description>iso-8859-4</description></item>
            <item><term>8</term><description>iso-8859-5</description></item>
            <item><term>9</term><description>iso-8859-6</description></item>
            <item><term>10</term><description>iso-8859-7</description></item>
            <item><term>11</term><description>iso-8859-8</description></item>
            <item><term>12</term><description>iso-8859-9</description></item>
            <item><term>13</term><description>iso-8859-10</description></item>
            <item><term>106 (0x006a)</term><description>UTF-8</description></item>
            <item><term>109</term><description>iso-8859-13</description></item>
            <item><term>110</term><description>iso-8859-14</description></item>
            <item><term>111</term><description>iso-8859-15</description></item>
            <item><term>112</term><description>iso-8859-16</description></item>
            <item><term>1013 (0x03f5)</term><description>unicodeFFFE (UTF-16BE)</description></item>
            <item><term>1014</term><description>utf-16 (UTF-16LE)</description></item>
            <item><term>1015</term><description>utf-16 (UTF-16, we assume UTF16-LE)</description></item>
            <item><term>2252 to 2258 (0x08cc to 0x08d2)</term><description>windows-1252 to Windows-1258</description></item>
            </list>
            Note that not all platforms support all these Encodings, for instance on
            my Windows XP SP2 box iso-8859-10/-14/-16 are not supported.  On NETCF on
            Windows Mobile 5 only five of the ISO-8859 encodings are supported.
            Regardless I've seen no SDP records that use ISO-8859 encodings so this is 
            not a problem, most records actually use UTF-8.
            </para>
            </remarks>
            -
            <exception cref="T:System.NotSupportedException">
            The IETF encoding id for this language base item is currently unknown.
            If valid, add it to the <c>s_IetfCharsetIdToDotNetEncodingNameTable</c> table, 
            providing a mapping to its Windows code page name.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.TestAllDefinedEncodingMappingRows(System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguage">
            <summary>
            Gets the value of the Natural Language field of the entry.
            </summary>
            <example>Some example value may be "en", and "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguageAsUInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguageAsInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.AttributeIdBase">
            <summary>
            Gets the base Attribute Id for this language.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId">
            <summary>
            Get the IETF Charset identifier for this language.
            </summary>
            -
            <remarks>
            <para>Example values are 3 for US-ASCII and 106 for UTF-8.
            See the full list at <see href="http://www.iana.org/assignments/character-sets"/>
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingIdAsInt16"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingIdAsInt16">
            <summary>
            Get the IETF Charset identifier for this language, as an Int16.
            </summary>
            -
            <remarks>
            <para>
            See <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>.
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceClass">
            <summary>
            Class of Service flags as assigned in the Bluetooth specifications.
            </summary>
            -
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">ClassOfDevice.Service</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="http://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.None">
            <summary>
            No service class bits set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Capturing">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Rendering">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Positioning">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.LimitedDiscoverableMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.RadioMode">
            <summary>
            Determine all the possible modes of operation of the Bluetooth radio.
            </summary>
            -
            <remarks>See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">BluetoothRadio.Mode</see>
            for what is supported on what platforms.  For instance setting the mode
            is not supported on Widcomm+Win32.  On Widcomm WM/CE setting <c>PowerOff</c>
            actually sets 'CONNECT_ALLOW_NONE', and not actually disabled/off.
            Also when the stack is disabled, setting connectable/discoverable 
            does not manage to turn the radio on.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">BluetoothRadio.Mode</seealso>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.PowerOff">
            <summary>
            Bluetooth is disabled on the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.Connectable">
            <summary>
            Bluetooth is connectable but your device cannot be discovered by other devices.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.Discoverable">
            <summary>
            Bluetooth is activated and fully discoverable.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.Structs.rfcomm_conninfo">
            <summary>
            Use with so_RFCOMM_CONNINFO.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Human Interface Device (HID) Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceReleaseNumber">
            <summary>
            HIDDeviceReleaseNumber
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;A numeric expression identifying the device release number in Binary-Coded 
            Decimal. This is a vendor-assigned field, which defines the version of 
            the product identified by the Bluetooth Device Identification [13] VendorID 
            and ProductID attributes. This attribute is intended to differentiate 
            between versions of products with identical VendorIDs and ProductIDs. 
            The value of the field is 0xJJMN for version JJ.M.N (JJ – major version 
            number, M – minor version number, N – sub-minor version number). &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ParserVersion">
            <summary>
            HIDParserVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each version of a profile is assigned a 16-bit unsigned integer version
            number of the base HID Specification [4] that the device was designed to. The value
            of the field is 0xJJMN for version JJ.M.N &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceSubclass">
            <summary>
            HIDDeviceSubclass
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDDeviceSubclass attribute is an 8-bit integer, which
            identifies the type of device (keyboard, mouse, joystick, gamepad,
            remote control, sensing device, etc.). Keyboards and mice are required
            to support boot mode operation. In boot mode, a device presents a fixed
            report, thus negating the requirement for a HID parser.
            <para></para>The Attribute value is identical to the low-order 8 bits
            of the Class of Device/Service (CoD) field in the FHS packet, where
            bits 7-2 contain the 6 bit Minor Device Class value (defined in Section
            1.2 of the Bluetooth Assigned Numbers document [8]) and bits 1-0 are
            set to zero.  &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.CountryCode">
            <summary>
            HIDCountryCode
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDCountryCode attribute is an 8-bit integer, which identifies
            which country the hardware is localized for. Most hardware is not localized
            and thus this value would be zero (0).&#x2026; 
            </para><para>The valid country codes are listed in the HID Specification
            [4].&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.VirtualCable">
            <summary>
            HIDVirtualCable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDVirtualCable attribute is a boolean value, which indicates
            whether the device supports virtual connections as described in Section
            Virtual Cables and Connection Re-Establishment. Devices that have this
            attribute True indicate that the device supports 1:1 bonding with a host,
            and the device expects to automatically reconnect if the connection is
            dropped for any unknown reason.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ReconnectInitiate">
            <summary>
            HIDReconnectInitiate
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDReconnectInitiate attribute is a boolean value, which
            indicates whether the device initiates the reconnection process or
            expects the host to. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DescriptorList">
            <summary>
            HIDDescriptorList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDDescriptorList Data Element Sequence performs the function of the
            HID Descriptor that is defined in Section 6.2 of the HID Specification [4]. The
            HIDDescriptorList identifies the descriptors associated with the device. &#x2026;
            </para><para>The HIDDescriptorList is a Data Element Sequence that consists of
            one or more HIDDescriptors. A HIDDescriptor is a data element sequence containing, 
            minimally, a pair of elements. For compatibility with future versions of the HID
            profile, addition elements found in a HIDDescriptor shall be ignored. &#x2026;
                   &#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.LangIdBaseList">
            <summary>
            HIDLANGIDBaseList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDLANGIDBaseList is a Data Element Sequence that consists of one or
            more HIDLANGIDBases. A HIDLANGIDBase is a data element sequence containing, minimally, 
            two elements for each of the languages used in the service record: a language identifier
            (LANGID) and a base attribute ID. For compatibility with future versions of the
            HID profile, additional elements found in a HIDLANGIDBase shall be ignored.
            </para><para>The first element, called the HIDLANGID, contains an identifier representing
            the natural language ID. The language is encoded according to the “Universal Serial
            Bus Language Identifiers (LANGIDs)” Specification [9].
            </para><para>The second element, called the HIDLanguageBase, contains an attribute
            ID that serves as the base attribute ID for the natural language in the service
            record. Different service records within a server may use different base attribute
            ID values for the same language. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SdpDisable">
            <summary>
            HIDSDPDisable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDSDPDisable attribute is a boolean value, which indicates whether
            connection to the SDP channel and Control or Interrupt channels are mutually exclusive.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BatteryPower">
            <summary>
            HIDBatteryPower
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDBatteryPower attribute is a boolean value, which indicates whether
            the device is battery powered (and requires careful power management) or has some
            other source of power that requires minimal management. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.RemoteWake">
            <summary>
            HIDRemoteWake
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDRemoteWake attribute is a boolean value, which indicates whether
            the device considers itself remote wake up-capable. When a system enters a suspend
            (or standby) state, this flag shall be used to determine whether the host includes
            this device in the set of devices that can wake it up. A mouse or keyboard are
            typical examples of Remote Wake up devices.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BootDevice">
            <summary>
            HIDBootDevice
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDBootDevice is an 8-bit Boolean value that when True indicates whether
            the device supports boot protocol mode and by inference the Set_Protocol and Get_Protocol
            commands. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SupervisionTimeout">
            <summary>
            HIDSupervisionTimeout
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDSupervisionTimeout is a 16-bit value which indicates the device
            vendor’s recommended baseband Link Supervision Timeout value in slots. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.NormallyConnectable">
            <summary>
            HIDNormallyConnectable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDNormallyConnectable is an optional Boolean attribute that specifies
            whether a HID is normally in Page Scan mode (when no connection is active) or not.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ProfileVersion">
            <summary>
            HIDProfileVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each device designed to this specification shall include a 16-bit unsigned
            integer version number of the Bluetooth HID Specification (this document) that
            the device was designed to. The value of the field is 0xJJMN for version JJ.M.N
            (JJ – major version number, M – minor version number, N – sub-minor version number);
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAListener">
            <summary>
            Places a socket in a listening state to monitor infrared connections from a specified service or network address.
            </summary>
            <remarks>This class monitors a service by specifying a service name or a network address.
            The listener does not listen until you call one of the <see cref="M:InTheHand.Net.Sockets.IrDAListener.Start"/>
            methods.</remarks>
            <seealso cref="T:System.Net.Sockets.IrDAListener"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.#ctor(InTheHand.Net.IrDAEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> class.
            </summary>
            <param name="ep">The network address to monitor for making a connection.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> class.
            </summary>
            <param name="service">The name of the service to listen for.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            <returns>A socket.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.AcceptIrDAClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <returns>An <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> object.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            -
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptIrDAClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.EndAcceptIrDAClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptIrDAClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>An <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Pending">
            <summary>
            Determines if a connection is pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.Active">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> is actively listening for client connections.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.LocalEndpoint">
            <summary>
            Gets an <see cref="T:InTheHand.Net.IrDAEndPoint"/> representing the local device.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType">
            <summary>
            Configures what type of element will be added by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>
            for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <remarks><para>Used with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.None">
            <summary>
            No PDL attribute will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.L2Cap">
            <summary>
            A standard L2CAP element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.Rfcomm">
            <summary>
            A standard RFCOMM element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.GeneralObex">
            <summary>
            A standard GOEP (OBEX) element will be added.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ClassOfDevice">
            <summary>
            Describes the device and service capabilities of a device.
            </summary>
            -
            <remarks>
            <para>Is returned by the properties
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">BluetoothDeviceInfo.ClassOfDevice</see>
            and
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.ClassOfDevice">BluetoothRadio.ClassOfDevice</see>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(System.UInt32)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <remarks>
            <para>An example raw value is 0x00020104, which stands for
            device: DesktopComputer, service: Network.
            </para>
            </remarks>
            -
            <param name="cod">A <see cref="T:System.UInt32"/> containing the
            raw Class of Device value.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(InTheHand.Net.Bluetooth.DeviceClass,InTheHand.Net.Bluetooth.ServiceClass)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <param name="device">A <see cref="T:InTheHand.Net.Bluetooth.DeviceClass"/>
            value.
            </param>
            <param name="service">A <see cref="T:InTheHand.Net.Bluetooth.ServiceClass"/>
            value.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.ToString">
            <summary>
            Returns the numerical value represented in a hexadecimal.
            </summary>
            -
            <returns>A <see cref="T:System.String"/> containing
            the numerical value represented in a hexadecimal
            e.g. "720104", "5A020C".
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            object.
            </summary>
            <param name="obj">An object
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="obj"/> is an instance of <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            and equals the value of this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(InTheHand.Net.Bluetooth.ClassOfDevice)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/> value.
            </summary>
            <param name="other">An <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="other"/>
            has the same value as this instance; otherwise, false.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">
            <summary>
            Returns the device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.MajorDevice">
            <summary>
            Returns the major device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">
            <summary>
            Returns supported service types.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value">
            <summary>
            Gets the numerical value.
            </summary>
            <seealso cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.ValueAsInt32"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.ValueAsInt32">
            <summary>
            Gets the numerical value, suitable for CLS Compliance.
            </summary>
            <seealso cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioEventArgs">
            <summary>
            The base class for classes containing Radio In- and Out-of-Range events.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioEventArgs.Device">
            <summary>
            Gets the device to which the event applies.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs">
            <summary>
            The data for Radio Out-of-Range event.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs.ToString">
            <summary>
            Gets a string representation of the event.
            </summary>
            <returns>A string (e.g. contains the device address and name).</returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs">
            <summary>
            The data for Radio Out-of-Range event.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.ToString">
            <summary>
            Gets a string representation of the event.
            </summary>
            <returns>A string (e.g. contains the device address, name and the current and previous flags).</returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.CurrentState">
            <summary>
            The current state of the device according to the Bluetooth stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.PreviousState">
            <summary>
            The previous state of the device according to the Bluetooth stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.GainedStates">
            <summary>
            The flags that are set in the current state
            and weren't in the previous state (calculated).
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.LostStates">
            <summary>
            The flags that are not set in the current state
            but were in the previous state (calculated).
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothService">
            <summary>
            Standard Bluetooth Profile identifiers.
            </summary>
            -
            <remarks>
            <para>See the list at <see href="http://www.bluetooth.com/Specification%20Documents/AssignedNumbersServiceDiscovery.pdf"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Empty">
            <summary>
            Represents an empty service Guid.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BluetoothBase">
            <summary>
            Represents the base Guid from which all standard Bluetooth profiles are derived - not used for connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SdpProtocol">
            <summary>
            [0x0001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdpProtocol">
            <summary>
            [0x0002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">
            <summary>
            [0x0003]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcpProtocol">
            <summary>
            [0x0004]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcsBinProtocol">
            <summary>
            [0x0005]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcsAtProtocol">
            <summary>
            [0x0006]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AttProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IPProtocol">
            <summary>
            [0x0009]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.FtpProtocol">
            <summary>
            [0x000A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HttpProtocol">
            <summary>
            [0x000C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.WspProtocol">
            <summary>
            [0x000E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BnepProtocol">
            <summary>
            [0x000F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UpnpProtocol">
            <summary>
            [0x0010]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HidpProtocol">
            <summary>
            [0x0011]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyControlChannelProtocol">
            <summary>
            [0x0012]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyDataChannelProtocol">
            <summary>
            [0x0014]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyNotificationProtocol">
            <summary>
            [0x0016]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AvctpProtocol">
            <summary>
            [0x0017]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AvdtpProtocol">
            <summary>
            [0x0019]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CmtpProtocol">
            <summary>
            [0x001B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiCPlaneProtocol">
            <summary>
            [0x001D] ?????
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.McapControlChannelProtocol">
            <summary>
            [0x001E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.McapDataChannelProtocol">
            <summary>
            [0x001F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol">
            <summary>
            [0x0100]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ServiceDiscoveryServer">
            <summary>
            [0x1000]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BrowseGroupDescriptor">
            <summary>
            [0x1001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PublicBrowseGroup">
            <summary>
            [0x1002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort">
            <summary>
            Provides a basic Serial emulation connect over Bluetooth. [0x1101]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.LanAccessUsingPpp">
            <summary>
            Used to establish PPP connections over RFComm channels. [0x1102]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DialupNetworking">
            <summary>
            [0x1103]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync">
            <summary>
            [0x1104]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush">
            <summary>
            Used for sending binary objects between devices.[0x1105]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexFileTransfer">
            <summary>
            OBEX version of an FTP server [0x1106]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSyncCommand">
            <summary>
            [0x1107]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Headset">
            <summary>
            HSP (Headset Profile) — Supports Bluetooth headset devices.[0x1108]
            See also 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CordlessTelephony">
            <summary>
            [0x1109]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSource">
            <summary>
            [0x110A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSink">
            <summary>
            [0x110B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlTarget">
            <summary>
            [0x110C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AdvancedAudioDistribution">
            <summary>
            [0x110D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControl">
            <summary>
            [0x110E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlController">
            <summary>
            [0x110F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Intercom">
            <summary>
            [0x1110]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Fax">
            <summary>
            [0x1111]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway">
            <summary>
            [0x1112]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Wap">
            <summary>
            [0x1113]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.WapClient">
            <summary>
            [0x1114]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Panu">
            <summary>
            [0x1115]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Nap">
            <summary>
            [0x1116]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GN">
            <summary>
            [0x1117]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrinting">
            <summary>
            [0x1118]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReferencePrinting">
            <summary>
            [0x1119]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging">
            <summary>
            [0x111A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder">
            <summary>
            [0x111B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive">
            <summary>
            [0x111C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects">
            <summary>
            [0x111D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Handsfree">
            <summary>
            Supports hands free kits such as a car kits which provide audio and more advanced call control than the Headset profile. [0x111E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HandsfreeAudioGateway">
            <summary>
            [0x111F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrintingReferenceObjects">
            <summary>
            [0x1120]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReflectedUI">
            <summary>
            [0x1121]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BasicPrinting">
            <summary>
            Used for printing simple text, HTML, vCard objects and similar. [0x1122]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PrintingStatus">
            <summary>
             [0x1123]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HumanInterfaceDevice">
            <summary>
            Supports human interface devices such as keyboards and mice. [0x1124]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacement">
            <summary>
             [0x1125]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementPrint">
            <summary>
             [0x1126]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementScan">
            <summary>
             [0x1127]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CommonIsdnAccess">
            <summary>
            Common_ISDN_Access [0x1128]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoConferencingGW">
            <summary>
             [0x1129]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiMT">
            <summary>
            UDI_MT [0x112A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiTA">
            <summary>
            UDI_TA [0x112B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioVideo">
            <summary>
             [0x112C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SimAccess">
            <summary>
            SIM_Access [0x112D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPce">
            <summary>
            Phonebook Access - PCE [0x112E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPse">
            <summary>
            Phonebook Access - PSE [0x112F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccess">
            <summary>
            Phonebook Access [0x1130]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset">
            <summary>
            Headset [0x1131]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessServer">
            <summary>
            Message Access Server [0x1132]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageNotificationServer">
            <summary>
            Message Notification Server [0x1133]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessProfile">
            <summary>
            Message Access Profile [0x1134]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation">
            <summary>
            Bluetooth Device Identification. [0x1200]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericNetworking">
            <summary>
             [0x1201]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericFileTransfer">
            <summary>
             [0x1202]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericAudio">
            <summary>
             [0x1203]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericTelephony">
            <summary>
             [0x1204]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnp">
            <summary>
             [0x1205]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIP">
            <summary>
             [0x1206]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPPan">
            <summary>
            ESDP_UPNP_IP_PAN [0x1300]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPLap">
            <summary>
            ESDP_UPNP_IP_LAP [0x1301]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPL2Cap">
            <summary>
            ESDP_UPNP_L2CAP [0x1302]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSource">
            <summary>
            Video Distribution Profile - Source [0x1303]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSink">
            <summary>
            Video Distribution Profile - Sink [0x1304]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoDistribution">
            <summary>
            Video Distribution Profile [0x1305]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDevice">
            <summary>
            Health Device Profile (HDP) [0x1400]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSource">
            <summary>
            Health Device Profile (HDP) - Source [0x1401]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSink">
            <summary>
            Health Device Profile (HDP) - Sink [0x1402]
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid">
            The service class UUID as a <see cref="T:System.Guid"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit short UUID form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit short UUID form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.DeleteKnownDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the device by deleting it from the Registry.
            </summary>
            <param name="device">The device address.</param>
            <returns>Whether the device is deleted -- it is no longer a remembered device.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.GetExtendedError">
            <summary>
            Call CBtIf::GetExtendedError.
            </summary>
            -
            <remarks>
            <para>Is not currently used anywhere...
            </para>
            <para>Not supported on Widcomm WCE WM/WinCE, we (natively) return -1.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WBtRc"/> value.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.IsRemoteDevicePresent(System.Byte[])">
            <summary>
            CBtIf::IsRemoteDevicePresent
            </summary>
            -
            <remarks>
            <note>"added BTW and SDK 5.0.1.1000"</note>
            <note>"added BTW-CE and SDK 1.7.1.2700"</note>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.IsRemoteDeviceConnected(System.Byte[])">
            <summary>
            CBtIf::IsRemoteDeviceConnected
            </summary>
            -
            <remarks>
            <note>"added BTW 5.0.1.300, SDK 5.0"</note>
            <note>"added BTW-CE and SDK 1.7.1.2700"</note>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.BTHNS_RESULT">
            <summary>
            Bluetooth specific flags returned from WSALookupServiceNext 
            in WSAQUERYSET.dwOutputFlags in response to device inquiry.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_GENERAL_DISCOVERABLE">
            <summary>
            &#x201C;Sets the device into general discoverable mode. This is
            the default discoverable mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_LIMITED_DISCOVERABLE">
            <summary>
            &#x201C;Sets the device into limited discoverable mode. If this
            value is specified, BTSDK_GENERAL_DISCOVERABLE
            mode value is ignored by BlueSoleil.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_DISCOVERABLE">
            <summary>
            &#x201C;Makes the device discoverable. This is equivalent to
            BTSDK_GENERAL_DISCOVERABLE.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_CONNECTABLE">
            <summary>
            &#x201C;Makes the device connectable. This is the default
            connectable mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_PAIRABLE">
            <summary>
            &#x201C;Makes the device pairable. This is the default pairable
            mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.CONN_IND">
            <summary>
            &#x201C;A remote device connects to a local service record.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.DISC_IND">
            <summary>
            &#x201C;The remote device disconnects the connection, or the
            connection is lost due to radio communication problems,
            e.g. the remote device is out of communication range.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.CONN_CFM">
            <summary>
            &#x201C;A local device connects to a remote service record.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.DISC_CFM">
            <summary>
            &#x201C;The local device disconnects the connection from remote
            service.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.AttributeLookup">
            <summary>
            "Possible flags for member 'mask' in _BtSdkRemoteServiceAttrStru"
            </summary>
        </member>
        <member name="T:InTheHand.Net.IrDAEndPoint">
            <summary>
            Represents an end point for an infrared connection.
            </summary>
            <seealso cref="T:System.Net.IrDAEndPoint"/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAEndPoint"/> class.
            </summary>
            <param name="irdaDeviceID">The device identifier.</param>
            <param name="serviceName">The Service Name to connect to/listen on eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to
            / a server is to listen on 
            a specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.
            </param>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.#ctor(InTheHand.Net.IrDAAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAEndPoint"/> class.
            </summary>
            <param name="irdaDeviceAddress">The device address.</param>
            <param name="serviceName">The Service Name to connect to/listen on eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to
            / a server is to listen on 
            a specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.
            </param>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Create(System.Net.SocketAddress)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.IrDAEndPoint"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.IrDAEndPoint"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.ToString">
            <summary>
            Returns the string representation of the IrDAEndPoint.
            </summary>
            <remarks>
            <para>
            The string is in format <c>&lt;DeviceAddress&gt;:&lt;ServiceName&gt;</c>
            </para>
            An example is:
            <code lang="none">"04E20304:OBEX"</code>
            </remarks>
            <returns>The string representation of the IrDAEndPoint.</returns>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.Address">
            <summary>
            Gets or sets an address for the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.DeviceID">
            <summary>
            Gets or sets an identifier for the device.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The specified byte array is null (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified byte array is not four bytes long.
            </exception>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.AddressFamily">
            <summary>
            Gets the address family to which the endpoint belongs.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LinkPolicy">
            <summary>
            Flags to describe Link Policy.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Disabled">
            <summary>
            Disables all LAN Manager (LM) modes. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.MasterSlave">
            <summary>
            Enables the master slave switch.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Hold">
            <summary>
            Enables Hold mode.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Sniff">
            <summary>
            Enables Sniff Mode.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Park">
            <summary>
            Enables Park Mode.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication">
             <summary>
             Provides Bluetooth authentication services on desktop Windows.
             </summary>
             -
             <remarks>
             <note>This class is supported on desktop Windows and with the Microsoft
             stack only.
             </note>
             <para>This class can be used in one of two ways.  Firstly
             an instance can be created specifying one device that is being connected
             to and the PIN string to use for it.  (That form is used internally by
             <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to support
             its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(System.String)"/> method).
             </para>
             <para>Secondly it can also be used a mode where a user supplied
             callback will be called when any device requires authentication,
             the callback includes a parameter of type 
             <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
             Various authentication methods are available in Bluetooth version
             2.1 and later.  Which one is being used is indicated by the
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationMethod"/>
             property.
             If it is <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy"/>
             then the callback method should set the
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Pin"/>
             property.
             </para>
             <para>
             For the other authentication methods 
             e.g. <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
             or <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand"/>
             the callback method should use one or more of the other properties and
             methods e.g.
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>,
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Confirm"/>,
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ResponseNumberOrPasskey"/>,
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ConfirmOob(System.Byte[],System.Byte[])"/>
             etc.
             </para>
             <para>
             See the example below for a 'Legacy' method handler.
             The callback mode can be configured to do a callback after the 
             &#x2018;send PIN&#x2019; action, this allows one to see if it was successful 
             etc.  An example sequence where the PIN was <strong>incorrect</strong> is as follows.
             </para>
             <code lang="none">
            Authenticate one device -- with wrong passcode here the first two times.
            Passcode respectively: 'BAD-x', 'BAD-y', '9876'
            Making PC discoverable
            Hit Return to complete
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 0, Last error code 0
              Sending "BAD-x"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 1, Last error code 1244
              Sending "BAD-y"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 2, Last error code 1167
              Sending "9876"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 3, Last error code 1167
            etc
            </code>
             <para>
             That is we see the error code of <c>1244=NativeErrorNotAuthenticated</c>
             once, and then the peer device disappears (<c>1167=NativeErrorDeviceNotConnected</c>).
             I suppose that's a security feature -- its stops an attacker
             from trying again and again with different passcodes.
            
             Anyway the result of that is that is it <strong>not</strong> worth repeating 
             the callback after the device disappears.  The code now enforces this.  With 
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/> 
             set to <c>true</c>, if the result of the previous attempt was &#x2018;success&#x2019; 
             or &#x2018;device not connected&#x2019; then any new PIN set in the callback 
             won&#x2019;t be used and thus the callback won&#x2019;t be called again 
             for that authentication attempt.
             </para>
             <para>A successful authentication process can thus be detected by checking if
             <code>e.PreviousNativeErrorCode == NativeErrorSuccess &amp;&amp; e.AttemptNumber != 0</code>
             </para>
             <para>
             </para>
             <para>The instance will continue receiving authentication requests
             until it is disposed or garbage collected, so keep a reference to it
             whilst it should be active and call 
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
             when you&#x2019;re finished.
             </para>
             </remarks>
             -
             <example>
             If one wants to respond to PIN requests for one device with a known PIN then
             use the simple form which is initialized with an address and PIN.
             <code lang="C#">
             BluetoothWin32Authentication authenticator
                 = new BluetoothWin32Authentication(remoteEP.Address, m_pin);
             // when the peer is expected to require pairing, perhaps do some work.
             authenticator.Dispose();
             </code>
             
             If one wants to see the PIN request, perhaps to be able to check the type
             of the peer by its address then use the form here which requests callbacks.
             (Note that this code assumes that 'Legacy' PIN-based pairing is being
             used; setting the Pin property will presumably have no effect if the
             authentication method being used is one of the v2.1 SSP forms).
             <code lang="VB.NET">
             Using pairer As New BluetoothWin32Authentication(AddressOf Win32AuthCallbackHandler)
                 Console.WriteLine("Hit Return to stop authenticating")
                 Console.ReadLine()
             End Using
             ...
             
             Sub Win32AuthCallbackHandler(ByVal sender As Object, ByVal e As InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)
                ' Note we assume here that 'Legacy' pairing is being used,
                ' and thus we only set the Pin property!
                Dim address As String = e.Device.DeviceAddress.ToString()
                Console.WriteLine("Received an authentication request from address " + address)
                
                ' compare the first 8 hex numbers, this is just a special case because in the
                ' used scenario the model of the devices can be identified by the first 8 hex
                ' numbers, the last 4 numbers being the device specific part.
                If address.Substring(0, 8).Equals("0099880D") OrElse _
                        address.Substring(0, 8).Equals("0099880E") Then
                    ' send authentication response
                    e.Pin = "5276"
                ElseIf (address.Substring(0, 8).Equals("00997788")) Then
                    ' send authentication response
                    e.Pin = "ásdfghjkl"
                End If
             End Sub
             </code>
             </example>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorSuccess">
            <summary>
            Windows&#x2019; ERROR_SUCCESS
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorNotAuthenticated">
            <summary>
            Windows&#x2019; ERROR_NOT_AUTHENTICATED
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected">
            <summary>
            Windows&#x2019; ERROR_DEVICE_NOT_CONNECTED
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.#ctor(InTheHand.Net.BluetoothAddress,System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class.
            </overloads>
            -
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class,
            to respond to a specific address with a specific PIN string.
            </summary>
            -
            <remarks>
            <para>The instance will continue receiving authentication requests
            until it is disposed or garbage collected, so keep a reference to it
            whilst it should be active, and call 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
            when you&#x2019;re finished.
            </para>
            </remarks>
            -
            <param name="remoteAddress">The address of the device to authenticate,
            as a <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </param>
            <param name="pin">The PIN string to use for authentication, as a
            <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.#ctor(System.EventHandler{InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs})">
             <summary>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class,
             to call a specified handler when any device requires authentication.
             </summary>
             -
             <remarks>
             <para>See the example below.
             </para>
             <para>The callback mode can be configured to do a callback after the 
             &#x2018;send PIN&#x2019;action, this allows one to see if it was successful 
             etc.  An example sequence where the PIN was <strong>incorrect</strong> is as follows.
             </para>
             <code lang="none">
            Authenticate one device -- with wrong passcode here the first two times.
            Passcode respectively: 'BAD-x', 'BAD-y', '9876'
            Making PC discoverable
            Hit Return to complete
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 0, Last error code 0
              Sending "BAD-x"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 1, Last error code 1244
              Sending "BAD-y"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 2, Last error code 1167
              Sending "9876"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 3, Last error code 1167
            etc
            </code>
             <para>
             That is we see the error code of <c>1244=NativeErrorNotAuthenticated</c>
             once, and then the peer device disappears (<c>1167=NativeErrorDeviceNotConnected</c>).
             I suppose that's a security feature -- its stops an attacker
             from trying again and again with different passcodes.
            
             Anyway the result of that is that is it <strong>not</strong> worth repeating 
             the callback after the device disappears.  The code now enforces this.  With 
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/> 
             set to <c>true</c>, if the result of the previous attempt was &#x2018;success&#x2019; 
             or &#x2018;device not connected&#x2019; then any new PIN set in the callback 
             won&#x2019;t be used and thus the callback won&#x2019;t be called again 
             for that authentication attempt.
             </para>
             <para>A successful authentication process can thus be detected by setting
             <c>CallbackWithResult=true</c> and checking in the callback if
             <code>  e.PreviousNativeErrorCode == NativeErrorSuccess &amp;&amp; e.AttemptNumber != 0</code>
             </para>
             <para>
             </para>
             <para>The instance will continue receiving authentication requests
             until it is disposed or garbage collected, so keep a reference to it
             whilst it should be active, and call 
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
             when you&#x2019;re finished.
             </para>
             </remarks>
             -
             <param name="handler">A reference to a handler function that can respond
             to authentication requests.
             </param>
             -
             <example>
             <code lang="VB.NET">
             Using pairer As New BluetoothWin32Authentication(AddressOf Win32AuthCallbackHandler)
                 Console.WriteLine("Hit Return to stop authenticating")
                 Console.ReadLine()
             End Using
             ...
             
             Sub Win32AuthCallbackHandler(ByVal sender As Object, ByVal e As InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)
                Dim address As String = e.Device.DeviceAddress.ToString()
                Console.WriteLine("Received an authentication request from address " + address)
                
                ' compare the first 8 hex numbers, this is just a special case because in the
                ' used scenario the model of the devices can be identified by the first 8 hex
                ' numbers, the last 4 numbers being the device specific part.
                If address.Substring(0, 8).Equals("0099880D") OrElse _
                        address.Substring(0, 8).Equals("0099880E") Then
                    ' send authentication response
                    e.Pin = "5276"
                ElseIf (address.Substring(0, 8).Equals("00997788")) Then
                    ' send authentication response
                    e.Pin = "ásdfghjkl"
                End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.OnAuthentication(InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)">
            <summary>
            Calls the authentication callback handler.
            </summary>
            -
            <param name="e">An instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/> 
            containing the details of the authentication callback.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose">
            <summary>
            Release the unmanaged resources used by the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose(System.Boolean)">
            <summary>
            Release the unmanaged resources used by the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/>,
            and optionally disposes of the managed resources.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod">
            <summary>
            The BluetoothAuthenticationMethod enumeration defines the supported
            authentication types during device pairing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy">
            <summary>
            The Bluetooth device supports authentication via a PIN.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand">
            <summary>
            The Bluetooth device supports authentication via out-of-band data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison">
            <summary>
            The Bluetooth device supports authentication via numeric comparison.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.PasskeyNotification">
            <summary>
            The Bluetooth device supports authentication via passkey notification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Passkey">
            <summary>
            The Bluetooth device supports authentication via passkey.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexMethod">
            <summary>
            Methods which can be carried out in an Object Exchange transaction.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Put">
            <summary>
            Sends an object to a receiving device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Get">
            <summary>
            Requests a file from the remote device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Connect">
            <summary>
            Negotiate an Object Exchange connection with a remote device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Disconnect">
            <summary>
            Disconnect an existing Object Exchange session.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.PutFinal">
            <summary>
            Sends the last packet of an object to a receiving device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.SetPath">
            <summary>
            Change remote path on an Object Exchange server.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.L2CapClient">
            <summary>
            Provides client connections to a remote Bluetooth L2CAP service.
            </summary>
            -
            <remarks>
            <para>For RFCOMM connections use <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </para>
            <para>The normal usage is o create an instance, connect with 
            <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>,
            and if successful one then calls <see cref="M:InTheHand.Net.Sockets.L2CapClient.GetStream"/>
            to send and receive data.
            </para>
            <para>See the <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for more information
            on specifying the remote service to connect to.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.L2CapClient.Dispose"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.L2CapClient.Close"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects to a remote Bluetooth L2CAP service
            using the specified remote endpoint.
            </summary>
            -
            <remarks>
            <para>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> must
            have the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            set, and either the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            or <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> properties
            set.
            The port is the L2CAP PSM number, and if set a connection will be
            made to that PSM and the Service Class Id ignored.
            Note that only certain PSM values are valid.  See 
            <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> for more
            information.
            </para>
            </remarks>
            -
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to which you intend to connect. See the remarks for usage.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            </summary>
            -
            <remarks>
            <para>See 
            <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            for more information.
            </para>
            </remarks>
            -
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to which you intend to connect.
            See 
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>,
            for more information.
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/>
            delegate that references the method to invoke when the operation is
            complete.
            </param>
            <param name="state">A user-defined object that contains information
            about the connect operation. This object is passed to the
            <paramref name="requestCallback"/> delegate when the operation is
            complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> object that
            references the asynchronous connection,
            which may still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object returned by a call to 
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>,
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.GetStream">
            <summary>
            Returns the <see cref="T:System.IO.Stream"/> used to send and
            receive data.
            </summary>
            -
            <remarks>
            <para>Note it is NOT a <see cref="T:System.Net.Sockets.NetworkStream"/>.
            That type handles SOCK_STREAM connections, whereas L2CAP uses
            SOCK_SEQPACKET.
            Different Stream subclasses may be returned by different platforms.
            </para>
            </remarks>
            -
            <returns>The <see cref="T:System.IO.Stream"/> used to send and
            receive data.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.GetMtu">
            <summary>
            Get the MTU................
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapClient.RemoteEndPoint">
            <summary>
            Get the remote endpoint.
            </summary>
            -
            <value>
            The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> with which the 
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> is communicating.
            </value>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_UpdateRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            Gets the current user-friendly name of the specified remote device.
            </summary>
            -
            <remarks>
            Before calling Btsdk_UpdateRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_StartBluetooth.
            The user-friendly device name is a UTF-8 character string. The device name acquired by this
            command is stored automatically in the device database.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_GetRemoteLinkQuality(System.UInt32,System.UInt16@)">
            <summary>
            "gets the current link quality value of the connection between local
            device and the specified remote device."
            </summary>
            -
            <remarks>"The higher the value, the better the link quality is."
            </remarks>
            -
            <returns>"Range: 0 to 0xFF."
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_GetRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            "Gets the user-friendly name of the specified remote device from the device database."
            </summary>
            -
            <remarks>
            "Before calling Btsdk_GetRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_Init.
            The user-friendly device name is a UTF-8 character string. The Btsdk_GetRemoteDeviceNamefunction returns =BTSDK_OPERATION_FAILURE immediately if the device name doesn’t
            exist in the database. In this case, the application shall call Btsdk_UpdateRemoteDeviceName
            to acquire the name information directly from the remote device.
            BlueSoleil will automatically update the device name when the local device connects to the
            specified remote device.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.ObexListenerRequest">
            <summary>
            Describes an incoming OBEX request to an <see cref="T:InTheHand.Net.ObexListener"/> object.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListenerRequest.WriteFile(System.String)">
            <summary>
            Writes the body of the request to the specified file path.
            </summary>
            <param name="fileName">The filename (including the path) to write to.</param>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ContentLength64">
            <summary>
            Gets the length of the body data included in the request.
            <para><b>New in v1.5.51015</b></para>
            </summary>
            <value>A long value that contains the value from the request's Length header.
            This value is -1 if the content length is not known.</value>
            <remarks>The Length header expresses the length, in bytes, of the body data that accompanies the request.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ContentType">
            <summary>
            Gets the MIME type of the body data included in the request.
            </summary>
            <value>A <see cref="T:System.String"/> that contains the text of the request's Type header.</value>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.Headers">
            <summary>
            Gets the collection of header name/value pairs sent in the request.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> that contains the OBEX headers included in the request.</value>
            <remarks>For a complete list of request headers, see the <see cref="T:InTheHand.Net.ObexHeader"/> enumeration.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.LocalEndPoint">
            <summary>
            Get the device address and service to which the request is directed.
            </summary>
            -
            <remarks>
            The <see cref="T:System.Net.EndPoint"/> instance returned will be of the 
            subtype that matches the address family that the <see cref="T:InTheHand.Net.ObexListener"/> 
            is listening on.  For instance if the listener was created with 
            <see cref="T:InTheHand.Net.ObexTransport"/>.<see cref="F:InTheHand.Net.ObexTransport.Bluetooth"/>
            then the <see cref="T:System.Net.EndPoint"/> will be of type
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>, and similarly for 
            <see cref="T:InTheHand.Net.IrDAEndPoint"/> and
            <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.ObexListenerRequest.RemoteEndPoint"/>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ObexMethod">
            <summary>
            Gets the method specified by the client.
            </summary>
            <remarks>Only PUT is supported in this version.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the body data sent by the client.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ProtocolVersion">
            <summary>
            Gets the OBEX version used by the requesting client
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.RawUrl">
            <summary>
            Gets the URL information (without the host and port) requested by the client.
            </summary>
            <value>A <see cref="T:System.String"/> that contains the raw URL for this request.</value>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.RemoteEndPoint">
            <summary>
            Gets the device address and service from which the request originated.
            </summary>
            -
            <remarks>
            The <see cref="T:System.Net.EndPoint"/> instance returned will be of the 
            subtype that matches the address family that the <see cref="T:InTheHand.Net.ObexListener"/> 
            is listening on.  For instance if the listener was created with 
            <see cref="T:InTheHand.Net.ObexTransport"/>.<see cref="F:InTheHand.Net.ObexTransport.Bluetooth"/>
            then the <see cref="T:System.Net.EndPoint"/> will be of type
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>, and similarly for 
            <see cref="T:InTheHand.Net.IrDAEndPoint"/> and
            <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
            -
            <example>
            C#
            <code lang="C#">
              ObexListener lsnr = new ObexListener(ObexTransport.Bluetooth)
              ... ...
              ObexListenerRequest olr = ...
              BluetoothEndPoint remoteEp = (BluetoothEndPoint)olr.RemoteEndPoint;
              BluetoothAddress remoteAddr = remoteEp.Address;
            </code>
            Visual Basic
            <code lang="VB.NET">
              Dim lsnr As New ObexListener(ObexTransport.IrDA)
              ... ...
              Dim olr As ObexListenerRequest = ...
              Dim remoteEp As IrDAEndPoint = CType(olr.RemoteEndPoint, IrDAEndPoint);
              Dim remoteAddr As IrDAAddress = remoteEp.Address;
            </code>
            </example>
            -
            <seealso cref="P:InTheHand.Net.ObexListenerRequest.LocalEndPoint"/>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.UserHostAddress">
            <summary>
            Gets the server address to which the request is directed.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.Url">
            <summary>
            Gets the <see cref="T:System.Uri"/> object requested by the client.
            </summary>
            <value>A <see cref="T:System.Uri"/> object that identifies the resource requested by the client.</value>
        </member>
        <member name="T:InTheHand.Net.AsyncResultCompletion">
            <summary>
            Used with
            <see cref="M:InTheHand.Net.AsyncResultNoResult.SetAsCompleted(System.Exception,InTheHand.Net.AsyncResultCompletion)">
            AsyncResultNoResult.SetAsCompleted</see> and 
            <see cref="M:InTheHand.Net.AsyncResult{TResult}.SetAsCompleted(TResult,AsyncResultNoResult.AsyncResultCompletion)">
            AsyncResult&lt;TResult&gt;.SetAsCompleted</see>.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.IsSync">
            <summary>
            Equivalent to <c>true</c> for the <see cref="T:System.Boolean"/>
            #x201C;completedSynchronously&#x201D; parameter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.IsAsync">
            <summary>
            Equivalent to <c>false</c> for the <see cref="T:System.Boolean"/>
            #x201C;completedSynchronously&#x201D; parameter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.MakeAsync">
            <summary>
            Forces the callback to run on a thread-pool thread.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDACharacterSet">
            <summary>
            Describes the character sets supported by the device.
            </summary>
            <remarks>The <see cref="T:InTheHand.Net.Sockets.IrDACharacterSet"/> enumeration describes the following character sets, which are used by the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/> classes.</remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDAClient"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ASCII">
            <summary>
            The ASCII character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin1">
            <summary>
            The western European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin2">
            <summary>
            The eastern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin3">
            <summary>
            The southern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin4">
            <summary>
            The northern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Cyrillic">
            <summary>
            The Cyrillic graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Arabic">
            <summary>
            The Arabic graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Greek">
            <summary>
            The Greek graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Hebrew">
            <summary>
            The Hebrew graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin5">
            <summary>
            The Turkish graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.Unicode">
            <summary>
            The Unicode character set.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LmpFeatures">
            <summary>
            Created from v2.1 specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.None">
            <summary>
            There are no supported features.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ThreeSlotPackets">
            <summary>
            [0]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ParkState">
            <summary>
            [8]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.CvsdSynchronousData">
            <summary>
            [16]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EnhancedDataRateAcl2MbpsMode">
            <summary>
            [25]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EV4Packets">
            <summary>
            [32]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EV5Packets">
            <summary>
            [33]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.AfhCapableSlave">
            <summary>
            [35]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.AfhClassificationSlave">
            <summary>
            [36]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.BrEdrNotSupported">
            <summary>
            [37] v4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.LeSupported_Controller">
            <summary>
            [38] v4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ThreeSlotEnhancedDataRateAclPackets">
            <summary>
            [39]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.FiveSlotEnhancedDataRateAclPackets">
            <summary>
            [40]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SniffSubrating">
            <summary>
            [41] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.PauseEncryption">
            <summary>
            [42] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ExtendedInquiryResponse">
            <summary>
            [48] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SimultaneousLeAndBrEdrToSameDeviceCapable_Controller">
            <summary>
            [49]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SecureSimplePairing">
            <summary>
            [51] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EncapsulatedPdu">
            <summary>
            [52] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ErroneousDataReporting">
            <summary>
            [53] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.NonFlushablePacketBoundaryFlag">
            <summary>
            [54] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.LinkSupervisionTimeoutChangedEvent">
            <summary>
            [56] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.InquiryTxPowerLevel">
            <summary>
            [57] v2.1
            (Changed name from 'InquiryResponseTxPowerLevel' in v2.1 
            to 'InquiryTxPowerLevel' in v3.0).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EnhancedPowerControl">
            <summary>
            [58] v3.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ExtendedFeatures">
            <summary>
            [63] Present since v2.0 at least.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.HardwareStatus">
            <summary>
            Specifies the current status of the Bluetooth hardware.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Unknown">
            <summary>
            Status cannot be determined.
            </summary>
            XXXX &#x201C;The stack is not present.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.NotPresent">
            <summary>
            Bluetooth radio not present.
            </summary>
            &#x201C;The adapter is not present.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Initializing">
            <summary>
            Bluetooth radio is in the process of starting up.
            </summary>
            &#x201C;The adapter might be installed.
            The stack is currently on the way up. Call again later.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Running">
            <summary>
            Bluetooth radio is active.
            </summary>
            &#x201C;The adapter is installed and the stack is running.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Shutdown">
            <summary>
            Bluetooth radio is in the process of shutting down.
            </summary>
            &#x201C;The adapter is installed, but the stack is not running.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Error">
            <summary>
            Bluetooth radio is in an error state.
            </summary>
            &#x201C;The adapter might be installed.
            The stack is on the way down. Call again later.&#x201D; CE5
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE">
            <summary>
            "Define common return code for new SDK functions that would normally return BOOL"
            </summary>
            -
            <remarks>"Added BTW and SDK 5.0.1.1100".
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Success">
            <summary>
            "The call was successful"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Fail">
            <summary>
            "Unspecified failure"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.NotSupported">
            <summary>
            "The API is not supported on the platform BTW stack version"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Busy">
            <summary>
            "The API cannot complete at this time, but may be retried"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.InvalidParam">
            <summary>
            "One of the API parameters was invalid"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.ErrResources">
            <summary>
            "A necessary resource could not be obtained"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Timeout">
            <summary>
            "The operation timed out before completion"
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.Structs.BtSdkRemoteServiceAttrStru.#ctor(InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.AttributeLookup,System.UInt16,System.Byte[],System.IntPtr)">
            <summary>
            for Test.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.Structs.BtSdkRmtSPPSvcExtAttrStru.#ctor(System.Byte)">
            <summary>
            for Test.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.BlueSoleilSocketException">
            <summary>
            SocketException holding a BlueSoleil error code from the original error,
            which is added to the exception message.
            </summary>
            -
            <remarks>
            Will always be internal so just catch SocketException as for the other stacks.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.IrDAAddress">
            <summary>
            Represents an IrDA device address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAAddress"/> class with the specified address.
            </summary>
            <param name="address">Address as 4 byte array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="address"/> was null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="address"/> was not a 4 byte array.</exception>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAAddress"/> class with the specified address.
            </summary>
            <param name="address"><see cref="T:System.Int32"/> representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToInt32">
            <summary>
            Returns the IrDA address as an integer.
            </summary>
            -
            <returns>An <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToByteArray">
            <summary>
            Returns the internal byte array.
            </summary>
            -
            <returns>An array of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.TryParse(System.String,InTheHand.Net.IrDAAddress@)">
            <summary>
            Converts the string representation of an address to it's <see cref="T:InTheHand.Net.IrDAAddress"/> equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing an address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:InTheHand.Net.IrDAAddress"/> equivalent to the address contained in s, if the conversion succeeded, or null (Nothing in Visual Basic) if the conversion failed.
            The conversion fails if the s parameter is null or is not of the correct format.</param>
            <returns>true if s is a valid IrDA address; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.Parse(System.String)">
            <summary>
            Converts the string representation of an IrDA address to a new <see cref="T:InTheHand.Net.IrDAAddress"/> instance.
            </summary>
            <param name="irdaString">A string containing an address to convert.</param>
            <returns>New <see cref="T:InTheHand.Net.IrDAAddress"/> instance.</returns>
            <remarks>Address must be specified in hex format optionally separated by the colon or period character e.g. 00000000, 00:00:00:00 or 00.00.00.00.</remarks>
            <exception cref="T:System.ArgumentNullException">irdaString is null.</exception>
            <exception cref="T:System.FormatException">irdaString is not a valid IrDA address.</exception>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString">
            <summary>
            Converts the address to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "C" or "P". If format is null or the empty string (""), "N" is used.</param>
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/>.</returns>
            <remarks><list type="table">
            <listheader><term>Specifier</term><term>Format of Return Value </term></listheader>
            <item><term>N</term><term>8 digits: <para>XXXXXXXX</para></term></item>
            <item><term>C</term><term>8 digits separated by colons: <para>XX:XX:XX:XX</para></term></item>
            <item><term>P</term><term>8 digits separated by periods: <para>XX.XX.XX.XX</para></term></item>
            </list></remarks>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.IrDAAddress"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.IrDAAddress"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.IrDAAddress"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.op_Equality(InTheHand.Net.IrDAAddress,InTheHand.Net.IrDAAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.IrDAAddress"/> objects are equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the values of the two instance are equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.op_Inequality(InTheHand.Net.IrDAAddress,InTheHand.Net.IrDAAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.IrDAAddress"/> objects are not equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the value of the two instance is different;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:InTheHand.Net.IrDAAddress.None">
            <summary>
            Provides a null IrDA address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.System#IComparable#CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "C" or "P". If format is null or the empty string (""), "N" is used.</param>
            <param name="formatProvider">Ignored.</param>
            -
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/>.</returns>
            -
            <remarks>See <see cref="M:InTheHand.Net.IrDAAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDASocketOptionLevel">
            <summary>
            Defines additional IrDA socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> methods.
            </summary>
            <remarks>
            Use along with the socket options defined by 
            <see cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionLevel.IrLmp">
            <summary>
            The socket option level for use with IrDA sockets 
            along with the options defined in <see 
            cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </summary>
            <remarks>
            Use along with the socket options defined by 
            <see cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAHints">
            <summary>
            Describes an enumeration of possible device types, such as Fax.
            </summary>
            <seealso cref="T:System.Net.Sockets.IrDAHints"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.None">
            <summary>
            Unspecified device type.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.PnP">
            <summary>
            A Plug and Play interface.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.PdaAndPalmtop">
            <summary>
            A Pocket PC or similar.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Computer">
            <summary>
            A personal computer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Printer">
            <summary>
            A printer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Modem">
            <summary>
            A modem.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Fax">
            <summary>
            A fax.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.LanAccess">
            <summary>
            A local area network access.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Extension">
            <summary>
            Contains extended hint bytes.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Telephony">
            <summary>
            A telephonic device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.FileServer">
            <summary>
            A personal computer file server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.IrCOMM">
            <summary>
            Device supports IrCOMM.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Obex">
            <summary>
            Device supports Object Exchange.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE">
            <summary>
            Define SPP connection states
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.CONNECTED">
            <summary>
            port now connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.DISCONNECTED">
            <summary>
            port now disconnected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.RFCOMM_CONNECTION_FAILED">
             <summary>
            rfcomm connction failed
             </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.PORT_IN_USE">
            <summary>
            Port in use, for SPPClient only [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.PORT_NOT_CONFIGURED">
            <summary>
            no port configured [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.SERVICE_NOT_FOUND">
            <summary>
            service not found [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.ALLOC_SCN_FAILED">
            <summary>
            [for SPP Server Only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.SDP_FULL">
            <summary>
            [for SPP Server Only]
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE">
            <summary>
            Define SPP connection states
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE.CONNECTED">
            <summary>
            port now connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE.DISCONNECTED">
            <summary>
            port now disconnected
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE">
            <summary>
            Define return code for SPP Client functions
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.SUCCESS">
            <summary>
            Operation initiated without error
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NO_BT_SERVER">
            <summary>
            COM server could not be started
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.ALREADY_CONNECTED">
            <summary>
            attempt to connect before previous connection closed
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NOT_CONNECTED">
            <summary>
            attempt to close unopened connection
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NOT_ENOUGH_MEMORY">
            <summary>
            local processor could not allocate memory for open
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.INVALID_PARAMETER__CE_UE">
            <summary>
            One or more of function parameters are not valid
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.UNKNOWN_ERROR__CE_IP">
            <summary>
            Any condition other than the above
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NO_EMPTY_PORT">
            <summary>
            no empty port
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.LICENSE_ERROR">
            <summary>
            license error
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE__WCE">
            <summary>
            Define return code for SPP Client functions
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener">
            <summary>
            Listens for connections from Bluetooth network clients.
            </summary>
            <remarks>The <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.
            You can use either a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> or a <see cref="T:System.Net.Sockets.Socket"/> to connect with a <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/></remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier. 
            </summary>
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service on which to listen for incoming connection attempts.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array, e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            -
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.EndAcceptBluetoothClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            <remarks>AcceptSocket is a blocking method that returns a <see cref="T:System.Net.Sockets.Socket"/> that you can use to send and receive data.
            If you want to avoid blocking, use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue.
            <para>The <see cref="T:System.Net.Sockets.Socket"/> returned is initialized with the address and channel number of the remote device.
            You can use any of the Send and Receive methods available in the <see cref="T:System.Net.Sockets.Socket"/> class to communicate with the remote device.
            When you are finished using the <see cref="T:System.Net.Sockets.Socket"/>, be sure to call its <see cref="M:System.Net.Sockets.Socket.Close"/> method.
            If your application is relatively simple, consider using the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient"/> method rather than the AcceptSocket method.
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</para></remarks>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/> used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <remarks>AcceptTcpClient is a blocking method that returns a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method to obtain the underlying <see cref="T:System.Net.Sockets.NetworkStream"/> of the returned <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> will provide you with methods for sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, be sure to call its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/> method.
            If you want greater flexibility than a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> offers, consider using <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket"/>.</para></remarks>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> component.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.LocalEndPoint">
            <summary>
             Gets the underlying <see cref="T:InTheHand.Net.BluetoothEndPoint"/> of the current <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/>.  
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceClass">
            <summary>
            Get or set the Service Class flags that this service adds to the host 
            device&#x2019;s Class Of Device field.
            </summary>
            -
            <remarks>
            <para>The Class of Device value contains a Device part which describes 
            the primary service that the device provides, and a Service part which 
            is a set of flags indicating all the service types that the device supports, 
            e.g. <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Audio"/> etc.
            This property supports setting those flags; bits set in this value will be 
            added to the host device&#x2019;s CoD Service Class bits when the listener
            is active.
            </para>
            <para><note>Supported on Win32, but not supported on WindowsMobile/WinCE 
            as there's no native API for it.  The WindowCE section of MSDN mentions the
            Registry value <c>COD</c> at key <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Bluetooth\sys</c>. 
            However my (Jam) has value 0x920100 there but advertises a CoD of 0x100114, 
            so its not clear how the values relate to each other.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>The underlying <see cref="T:System.Net.Sockets.Socket"/>.</value>
            <remarks><see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> creates a <see cref="T:System.Net.Sockets.Socket"/> to listen for incoming client connection requests.
            Classes deriving from <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> can use this property to get this <see cref="T:System.Net.Sockets.Socket"/>.
            Use the underlying <see cref="T:System.Net.Sockets.Socket"/> returned by the <see cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server"/> property if you require access beyond that which <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> provides.
            <para>Note <see cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server"/> property only returns the <see cref="T:System.Net.Sockets.Socket"/> used to listen for incoming client connection requests.
            Use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket"/> method to accept a pending connection request and obtain a <see cref="T:System.Net.Sockets.Socket"/> for sending and receiving data.
            You can also use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient"/> method to accept a pending connection request and obtain a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> for sending and receiving data.</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.InTheHand#Net#Bluetooth#Factory#IBluetoothClient#DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices and returns their names and addresses.
            </summary>
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            <param name="discoverableOnly">True to return only discoverable devices
            (where both in range and in discoverable mode).
            When <see langword="true"/> all other flags are ignored.
            <strong>Note: Does NOT work on Win32 with the Microsoft stack.</strong>
            </param>
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
            -
            <remarks>
            <para>The <see paramref="discoverableOnly"/> flag will discover only 
            the devices that are in range and are in discoverable mode.  This works 
            only on WM/CE with the Microsoft stack, or on any platform with the 
            Widcomm stack.
            </para>
            <para>
            It does not work on desktop Windows with the Microsoft 
            stack, where the in range and remembered devices are returned already 
            merged!  There simple all devices will be returned.  Even the 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen">BluetoothDeviceInfo.LastSeen</see>
            property is of no use there: on XP and Vista at least the value provided 
            is always simply the current time.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects a client to a specified endpoint.
            </summary>
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a <see cref="T:InTheHand.Net.BluetoothEndPoint"/>. 
            </summary>
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> containing the 
            address and UUID of the remote service.</param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned by a call to 
            <see cref="M:BeginConnect(InTheHand.Net.Sockets.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:BeginConnect(InTheHand.Net.Sockets.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.SetPin(System.String)">
            <summary>
            Sets the PIN associated with the currently connected device.
            </summary>
            <param name="pin">PIN which must be composed of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.GetRemoteMachineName(InTheHand.Net.BluetoothAddress)">
            <summary>
            Gets the name of the specified remote device.
            </summary>
            <param name="a">Address of remote device.</param>
            <returns>Friendly name of specified device.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of a device by a specified socket.
            </summary>
            <param name="s"> A <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <returns>Returns a string value of the computer or device name.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the BluetoothClient and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Finalize">
            <summary>
            Frees resources used by the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.InquiryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>On Windows CE the actual value used is expressed in units of 1.28 seconds, so will be the nearest match for the value supplied.
            The default value is 10 seconds. The maximum is 60 seconds.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.LinkKey">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.LinkPolicy">
            <summary>
            Returns the Link Policy of the current connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.MsftSocketOptionHelper.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.MsftSocketOptionHelper.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId">
            <summary>
            Defines the ids for the &#x201C;universal attributes&#x201D;, those 
            &#x201C;whose definitions are common to all service records.&#x201D;
            </summary>
            <remarks>
            <para>&#x201C;
            Universal attributes are those service attributes whose definitions are common
            to all service records. Note that this does not mean that every service record
            must contain values for all of these service attributes. However, if a service
            record has a service attribute with an attribute ID allocated to a universal
            attribute, the attribute value must conform to the universal attribute’s definition.
            </para><para>&#x201C;
            Only two attributes are required to exist in every service record instance. They
            are the ServiceRecordHandle (attribute ID 0x0000) and the ServiceClassIDList
            (attribute ID 0x0001). All other service attributes are optional within a service
            record.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x000D-0x01FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordHandle">
            <summary>
            A service record handle is a 32-bit number that uniquely identifies each service
            record within an SDP server.
            [0x0000]
            </summary>
            <remarks>
            <para>[<c>32-bit unsigned integer</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList">
            <summary>
            The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to.
            [0x0001]
            </summary>
            <remarks>
            <para>[<c>Data Element Sequence</c>]</para>
            <para>&#x201C;The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to. The UUIDs are listed in order from the most specific
            class to the most general class. The ServiceClassIDList must contain at least
            one service class UUID.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordState">
             <summary>
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes.
             [0x0002]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes. If this attribute is contained in a service record, its value is
             guaranteed to change when any other attribute value is added to, deleted from
             or changed within the service record. This permits a client to check the value of
             this single attribute. If its value has not changed since it was last checked, the
             client knows that no other attribute values within the service record have
             changed.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceId">
             <summary>
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record.
             [0x0003]
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             <para>&#x201C;
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record. This service attribute is particularly
             useful if the same service is described by service records in more than one
             SDP server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList">
             <summary>
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             [0x0004]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>&#x201C;
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             </para><para>&#x201C;
             If the ProtocolDescriptorList describes a single stack, it takes the form of a data
             element sequence in which each element of the sequence is a protocol
             descriptor. Each protocol descriptor is, in turn, a data element sequence whose
             first element is a UUID identifying the protocol and whose successive elements
             are protocol-specific parameters. Potential protocol-specific parameters are a
             protocol version number and a connection-port number. The protocol descriptors
             are listed in order from the lowest layer protocol to the highest layer protocol
             used to gain access to the service.
             </para><para>&#x201C;
             If it is possible for more than one kind of protocol stack to be used to gain
             access to the service, the ProtocolDescriptorList takes the form of a data element
             alternative where each member is a data element sequence as described
             in the previous paragraph.
             </para><para>&#x201C;
             Protocol Descriptors
             </para><para>&#x201C;
             A protocol descriptor identifies a communications protocol and provides protocol-
             specific parameters. A protocol descriptor is represented as a data element
             sequence. The first data element in the sequence must be the UUID that identifies
             the protocol. Additional data elements optionally provide protocol-specific
             information, such as the L2CAP protocol/service multiplexer (PSM) and the
             RFCOMM server channel number (CN) shown below.
             </para><para>&#x201C;
             ProtocolDescriptorList Examples
             </para><para>&#x201C;
             These examples are intended to be illustrative. The parameter formats for each
             protocol are not defined within this specification.
             </para><para>&#x201C;
             In the first two examples, it is assumed that a single RFCOMM instance exists
             on top of the L2CAP layer. In this case, the L2CAP protocol specific information
             (PSM) points to the single instance of RFCOMM. In the last example, two different
             and independent RFCOMM instances are available on top of the L2CAP
             layer. In this case, the L2CAP protocol specific information (PSM) points to a
             distinct identifier that distinguishes each of the RFCOMM instances. According
             to the L2CAP specification, this identifier takes values in the range
             0x1000-0xFFFF.
             </para><para>&#x201C;
             IrDA-like printer
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=1 ), ( PostscriptStream ) )
             </para><para>&#x201C;
             IP Network Printing
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=2 ), ( PPP ), ( IP ), ( TCP ),
             ( IPP ) )
             </para><para>&#x201C;
             Synchronization Protocol Descriptor Example
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1001 ), ( RFCOMM, CN=1 ), ( Obex ), ( vCal ) )
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1002 ), ( RFCOMM, CN=1 ), ( Obex ),
             </para><para>&#x201C;
             ( otherSynchronisationApplication ) )
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BrowseGroupList">
             <summary>
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs.
             [0x0005]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs. The top-level browse group ID, called PublicBrowseRoot and
             representing the root of the browsing hierarchy, has the value 
             00001002-0000-1000-8000-00805F9B34FB 
             (UUID16: 0x1002) from the Bluetooth Assigned
             Numbers document.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList">
             <summary>
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             [0x0006]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             </para><para>&#x201C;
             The LanguageBaseAttributeIDList attribute is a list in which each member contains
             a language identifier, a character encoding identifier, and a base attribute
             ID for each of the natural languages used in the service record. The Language-
             BaseAttributeIDList attribute consists of a data element sequence in which
             each element is a 16-bit unsigned integer. The elements are grouped as triplets
             (threes).
             </para><para>&#x201C;
             The first element of each triplet contains an identifier representing the natural
             language. The language is encoded according to ISO 639:1988 (E/F): “Code
             for the representation of names of languages”.
             </para><para>&#x201C;
             The second element of each triplet contains an identifier that specifies a character
             encoding used for the language. Values for character encoding can be
             found in IANA's database1, and have the values that are referred to as MIBEnum
             values. The recommended character encoding is UTF-8.
             </para><para>&#x201C;
             The third element of each triplet contains an attribute ID that serves as the
             base attribute ID for the natural language in the service record. Different service
             records within a server may use different base attribute ID values for the
             same language.
             </para><para>&#x201C;
             To facilitate the retrieval of human-readable universal attributes in a principal
             language, the base attribute ID value for the primary language supported by a
             service record must be 0x0100. Also, if a LanguageBaseAttributeIDList
             attribute is contained in a service record, the base attribute ID value contained
             in its first element must be 0x0100.
             </para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceInfoTimeToLive">
             <summary>
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged.
             [0x0007]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged. This time interval is measured from the time that the
             attribute value is retrieved from the SDP server. This value does not imply a
             guarantee that the service record will remain available or unchanged. It is
             simply a hint that a client may use to determine a suitable polling interval to revalidate
             the service record contents.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceAvailability">
             <summary>
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients.
             [0x0008]
             </summary>
            <remarks>
             <para>[<c>8-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients. A value of 0xFF indicates
             that the service is not currently in use and is thus fully available, while a
             value of 0x00 means that the service is not accepting new clients. For services
             that support multiple simultaneous clients, intermediate values indicate the relative
             availability of the service on a linear scale.
             &#x201D;</para><para>&#x201C;
             For example, a service that can accept up to 3 clients should provide ServiceAvailability
             values of 0xFF, 0xAA, 0x55, and 0x00 when 0, 1, 2, and 3 clients, respectively,
             are utilizing the service. The value 0xAA is approximately (2/3) * 0xFF and
             represents 2/3 availability, while the value 0x55 is approximately (1/3)*0xFF and
             represents 1/3 availability. Note that the availability value may be approximated as
             &#x201D;</para><para>&#x201C;
             <c>( 1 - ( current_number_of_clients / maximum_number_of_clients ) ) * 0xFF</c>
             &#x201D;</para><para>&#x201C;
             When the maximum number of clients is large, this formula must be modified to
             ensure that ServiceAvailability values of 0x00 and 0xFF are reserved for their
             defined meanings of unavailability and full availability, respectively.
             &#x201D;</para><para>&#x201C;
             Note that the maximum number of clients a service can support may vary
             according to the resources utilized by the service's current clients.
             &#x201D;</para><para>&#x201C;
             A non-zero value for ServiceAvailability does not guarantee that the service will
             be available for use. It should be treated as a hint or an approximation of availability
             status.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList">
             <summary>
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms.
             [0x0009]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms. Each profile descriptor is a data element sequence whose
             first element is the UUID assigned to the profile and whose second element is
             a 16-bit profile version number.
             &#x201D;</para><para>&#x201C;
             Each version of a profile is assigned a 16-bit unsigned integer profile version
             number, which consists of two 8-bit fields. The higher-order 8 bits contain the
             major version number field and the lower-order 8 bits contain the minor version
             number field. The initial version of each profile has a major version of 1 and a
             minor version of 0. When upward compatible changes are made to the profile,
             the minor version number will be incremented. If incompatible changes are
             made to the profile, the major version number will be incremented.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl">
             <summary>
             This attribute is a URL which points to documentation on the service described
             by a service record.
             [0x000A]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl">
             <summary>
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record.
             [0x000B]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record. Since different
             operating environments require different executable formats, a mechanism
             has been defined to allow this single attribute to be used to locate an executable
             that is appropriate for the client device’s operating environment. In the
             attribute value URL, the first byte with the value 0x2A (ASCII character ‘*’) is to
             be replaced by the client application with a string representing the desired
             operating environment before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing operating environments is contained
             in the Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the ClientExecutableURL attribute is
             http://my.fake/public/*/client.exe. On a device capable of executing SH3 WindowsCE
             files, this URL would be changed to http://my.fake/public/sh3-
             microsoft-wince/client.exe. On a device capable of executing Windows 98 binaries,
             this URL would be changed to http://my.fake/public/i86-microsoft-win98/
             client.exe.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.IconUrl">
             <summary>
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record.
             [0x000C]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record. Since different
             hardware devices require different icon formats, a mechanism has been
             defined to allow this single attribute to be used to locate an icon that is appropriate
             for the client device. In the attribute value URL, the first byte with the
             value 0x2A (ASCII character ‘*’) is to be replaced by the client application with
             a string representing the desired icon format before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing icon formats is contained in the
             Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the IconURL attribute is http://my.fake/
             public/icons/*. On a device that prefers 24 x 24 icons with 256 colors, this URL
             would be changed to http://my.fake/public/icons/24x24x8.png. On a device that
             prefers 10 x 10 monochrome icons, this URL would be changed to http://
             my.fake/public/icons/10x10x1.png.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName">
             <summary>
             The ServiceName attribute is a string containing the name of the service represented
             by a service record.
             [0x0000 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             The ServiceName attribute is a string containing the name of the service represented
             by a service record. It should be brief and suitable for display with an
             Icon representing the service. The offset 0x0000 must be added to the attribute
             ID base (contained in the LanguageBaseAttributeIDList attribute) in order to
             compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription">
             <summary>
             This attribute is a string containing a brief description of the service.
             [0x0001 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing a brief description of the service. It should
             be less than 200 characters in length. The offset 0x0001 must be added to the
             attribute ID base (contained in the LanguageBaseAttributeIDList attribute) in
             order to compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName">
             <summary>
             This attribute is a string containing the name of the person or organization providing
             the service.
             [0x0002 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing the name of the person or organization providing
             the service. The offset 0x0002 must be added to the attribute ID base
             (contained in the LanguageBaseAttributeIDList attribute) in order to compute
             the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.AdditionalProtocolDescriptorLists">
             <summary>
             The AdditionalProtocolDescriptorLists attribute supports services that 
             require more channels in addition to the service described in the ProtocolDescriptorList
             attribute.  It contains a sequence of ProtocolDescriptorList-elements.
             [0x000D]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>Defined in Bluetooth version 2.1, SDP section 5.1.6.</para>
             <para>&#x201C;The AdditionalProtocolDescriptorLists attribute contains 
             a sequence of ProtocolDescriptorList-elements. Each element having the 
             same format as the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             described in section 5.1.5. The ordering of the elements is
             significant and should be specified and fixed in Profiles that make use of this
             attribute.</para>
             <para>&#x201D;The AdditionalProtocolDescriptorLists attribute supports services that require
             more channels in addition to the service described in Section 5.1.5 . If the AdditionalProtocolDescriptorLists
             attribute is included in a service record, the ProtocolDescriptorList
             attribute must be included.&#x201D;
             </para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId">
            <summary>
            This service class describes service records that contain attributes of service
            discovery server itself.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes service records that contain attributes of service
            discovery server itself. The attributes listed in this section are only valid if the
            ServiceClassIDList attribute contains the
            ServiceDiscoveryServerServiceClassID. Note that all of the universal attributes
            may be included in service records of the ServiceDiscoveryServer class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0202-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList">
             <summary>
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             &#x201D;</para><para>&#x201C;
             A version number is a 16-bit unsigned integer consisting of two fields. The
             higher-order 8 bits contain the major version number field and the low-order 8
             bits contain the minor version number field. The initial version of SDP has a
             major version of 1 and a minor version of 0. When upward compatible changes
             are made to the protocol, the minor version number will be incremented. If
             incompatible changes are made to SDP, the major version number will be
             incremented. This guarantees that if a client and a server support a common
             major version number, they can communicate if each uses only features of the
             specification with a minor version number that is supported by both client and
             server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.ServiceDatabaseState">
             <summary>
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records.
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records. If this attribute exists, its value is guaranteed to change
             when any of the other service records are added to or deleted from the server's
             database. If this value has not changed since the last time a client queried its
             value, the client knows that a) none of the other service records maintained by
             the SDP server have been added or deleted; and b) any service record handles
             acquired from the server are still valid. A client should query this attribute's
             value when a connection to the server is established, prior to using any service
             record handles acquired during a previous connection.
             &#x201D;</para><para>&#x201C;
             Note that the ServiceDatabaseState attribute does not change when existing
             service records are modified, including the addition, removal, or modification of
             service attributes. A service record's ServiceRecordState attribute indicates
             when that service record is modified.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId">
            <summary>
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device. The attributes listed in
            this section are only valid if the ServiceClassIDList attribute contains the BrowseGroupDescriptorServiceClassID.
            Note that all of the universal attributes may
            be included in service records of the BrowseGroupDescriptor class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0201-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId">
             <summary>
             This attribute contains a UUID that can be used to locate services that are
             members of the browse group that this service record describes.
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             </remarks>
        </member>
        <member name="T:InTheHand.TextWriterTraceListener32f">
            <summary>
            For use on NETCFv2
            </summary>
            -
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.TextWriterTraceListener32f.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.TextWriterTraceListener32f"/> class
            </summary>
            -
            <param name="filename">The filename of the log file to write to.
            Unlike the .NET supplied class this filename is relative to the
            folder that the calling assembly is located in.
            </param>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.Marshal32.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            NETCF doesn't have <see cref="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.IrDA.IrDAService">
            <summary>
            Standard IrDA service names.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.IrComm">
            <summary>
            Well-known Service Name &#x201C;IrDA:IrCOMM&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.IrLpt">
            <summary>
            Well-known Service Name &#x201C;IrLPT&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.ObjectExchange">
            <summary>
            Well-known Service Name &#x201C;OBEX&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceAttribute">
            <summary>
            Holds an attribute from an SDP service record.
            </summary>
            -
            <remarks>
            Access its SDP Data Element through the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property and read the 
            data value through the methods and properties on the returned 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceAttribute.#ctor(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceAttribute.#ctor(System.UInt16,InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.Id">
            <summary>
            Get the Attribute Id for this attribute.
            </summary>
            -
            <remarks>
            <note >Id is a <em>unsigned</em> 32-bit integer but we use return it
            is a <em>signed</em> 32-bit integer for CLS Compliance reasons.  It
            should not thus be used for ordering etc, for example 0xFFFF will sort
            before 0x0001 which is backwards.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.IdAsOrdinalNumber">
            <summary>
            Get the Attribute Id as a number, e.g. for comparison.
            </summary>
            -
            <remarks>
            <para>Property <see cref="P:Id"/> should be used as an identifier,
            but not as a number.  That#x2019;s because the range is <em>unsigned</em>
            32-bit integer but we use return it is a <em>signed</em> 32-bit integer.
            Thus an example list will sort as { 0xFFFF, 0x8001, 0x0001, 0x0302 }
            when it should sort as { 0x0001, 0x0302, 0x8001,0xFFFF }
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.Value">
            <summary>
            Get the value of this attributes as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.RadioVersions">
            <summary>
            Stores the LMP etc versions.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.RadioVersions.#ctor(InTheHand.Net.Bluetooth.LmpVersion,System.UInt16,InTheHand.Net.Bluetooth.LmpFeatures,InTheHand.Net.Bluetooth.Manufacturer)">
            <summary>
            Initialises a new instance.
            </summary>
            -
            <param name="lmpVersion">The LMP Version.
            </param>
            <param name="lmpSubversion">The LMP Subversion
            as a <see cref="T:System.UInt16"/>.
            </param>
            <param name="lmpSupportedFeatures">The LMP Supported Features.
            </param>
            <param name="mfg">The Manufacturer.
            </param>
            <summary>
            Get the LMP Subversion value.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpVersion">
            <summary>
            Get the LMP Version.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpSubversion">
            <summary>
            Get the LMP Subversion.
            </summary>
            -
            <remarks>
            <note>This is of CLR type <see cref="T:System.Int32"/> for CLS
            compliance.  The Bluetooth value is of course of type
            <see cref="T:System.UInt16"/>.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpSupportedFeatures">
            <summary>
            Get the LMP Supported Features.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.Manufacturer">
            <summary>
            Get the Manufacturer.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothListener">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.SdpService.DESC_TYPE">
            <summary>
            Define for service attribute, all the 'Descriptor Type' values.
            These are also referred to as 'attribute type' values
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.PORT_EV">
            <summary>
            Define RFCOMM Port events that registered application can receive in the callback
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RXCHAR">
            <summary>
            Any Character received
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RXFLAG">
            <summary>
            Received certain character
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.TXEMPTY">
            <summary>
            Transmitt Queue Empty
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CTS">
            <summary>
            CTS changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.DSR">
            <summary>
            DSR changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RLSD">
            <summary>
            RLSD changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.BREAK">
            <summary>
            Ring signal detected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.ERR">
            <summary>
            Line status error occurred
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RING">
            <summary>
            Ring signal detected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CTSS">
            <summary>
            CTS state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.DSRS">
            <summary>
            DSR state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RLSDS">
            <summary>
            RLSD state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.OVERRUN">
            <summary>
            receiver buffer overrun
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.TXCHAR">
            <summary>
            Any character transmitted
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CONNECTED">
            <summary>
            RFCOMM connection established
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CONNECT_ERR">
            <summary>
            Was not able to establish connection; or disconnected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.FC">
            <summary>
            flow control enabled flag changed by remote
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.FCS">
            <summary>
            flow control status true = enabled
            </summary>
        </member>
    </members>
</doc>
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core.Windows</name>
  </assembly>
  <members>
    <member name="T:PalmSens.AuxInput.AuxiliaryInputCollection">
      <summary>
            Collection of possible auxiliary input types
            Also contains the selected aux. input
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputCollection.#ctor(System.Collections.Specialized.StringCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputCollection" /> class.
            </summary>
      <param name="stringCollection">The string collection.</param>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputCollection.AuxInputSelected">
      <summary>
            Gets or sets the aux input selected.
            </summary>
      <value>
            The aux input selected.
            </value>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputCollection.SaveToSettings">
      <summary>
            Saves the list to PalmSens.Core.settings.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.ADUCUploader">
      <summary>
            Summary description for ADUCUploader.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.#ctor(System.IO.Stream)">
      <summary>
            Create a new ADUCUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.ADUCUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ADUCUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ADUCUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.WriteData(System.Int64,System.Byte[])">
      <summary>
            Write to the data memory
            </summary>
      <param name="address">address in memory to write to</param>
      <param name="data">data to write to memory</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.SendReset">
      <summary>
            Reset the currently connected device. 
            </summary>
      <remarks>
            This will restart the firmware.
            </remarks>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.Reset">
      <summary>
            Reset the device. 
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.WaitVersion">
      <summary>
            Wait for receiving a 25-byte processor version.
            </summary>
      <returns>string with processor details</returns>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.ClearCodeMemory">
      <summary>
            Clear code memory of remote device
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.ClearCodeDataMemory">
      <summary>
            Clear code and data memory of remote device
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.RunFirmware">
      <summary>
            Run firmware from default location
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.ADUCUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.#ctor(System.IO.Stream)">
      <summary>
            Create a new ARMUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.ARMUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ARMUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.ARMUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.ARMUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.SAM_BA_APPLETS_VERSION">
            Refers to the Version of SAM-BA 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_INIT">
            Applet initialization command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_FULL_ERASE">
            Applet full erase command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_WRITE">
            Applet write command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_READ">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_LOCK">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_UNLOCK">
            Applet read command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_GPNVM">
            Applet set/clear GPNVM command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_SECURITY">
            Applet set security bit command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BUFFER_ERASE">
            Applet buffer erase command code.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BINARY_PAGE">
            Applet binary page command code for Dataflash.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_LIST_BAD_BLOCKS">
            List Bad Blocks of a Nandflash
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_TAG_BLOCK">
            Tag a Nandflash Block
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_READ_UNIQUE_ID">
            Read the Unique ID bits (on SAM3)
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_ERASE_BLOCKS">
            Applet blocks erase command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_BATCH_ERASE">
            Applet batch full erase command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletCommand.APPLET_CMD_RESET">
            Applet reset command code. 
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_SUCCESS">
            Operation was successful.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_DEV_UNKNOWN">
            Device unknown.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_WRITE_FAIL">
            Write operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_READ_FAIL">
            Read operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_PROTECT_FAIL">
            Protect operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_UNPROTECT_FAIL">
            Unprotect operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_ERASE_FAIL">
            Erase operation failed.
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_NO_DEV">
            No device defined in board.h
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_ALIGN_ERROR">
            Read / write address is not aligned
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_BAD_BLOCK">
            Read / write found bad block
        </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.AppletResponse.APPLET_FAIL">
            Applet failure.
        </member>
    <member name="T:PalmSens.Windows.Comm.SAMBAUploader.AppletCommType">
            Communication link identification
        </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Create a new ADUCUploader instance.
            </summary>
      <param name="s">stream to use for communication</param>
    </member>
    <member name="F:PalmSens.Windows.Comm.SAMBAUploader.Stream">
      <summary>
            Stream used for communication.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.SAMBAUploader.VersionString">
      <summary>
            Device processor version.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.SAMBAUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.UploadApplet(PalmSens.Comm.Firmware)">
      <summary>
            Uploads the applet to RAM that is used to program the firmware from RAM into flash, since this cannot be done directly.
            </summary>
      <param name="appf">The firmware</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.Upload(PalmSens.Comm.Firmware)">
      <summary>
            Upload specified firmware
            </summary>
      <param name="f">firmware to upload</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.SAMBAUploader.RunFirmware(System.Int64)">
      <summary>
            Run firmware from specified address
            </summary>
      <param name="address">address on remote device</param>
    </member>
    <member name="T:PalmSens.Windows.Comm.FTDIStream">
      <summary>
            Communication with the PalmSens using a FTDI USB cable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Flush">
      <summary>
            Flush the stream
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.SetLength(System.Int64)">
      <summary>
            Change the length of the stream (not implemented, will always throw a NotSupportedException)
            </summary>
      <param name="value">new length</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Seek to the specified position (not supported)
            </summary>
      <param name="offset">
      </param>
      <param name="origin">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanWrite">
      <summary>
            Whether writing to this stream is possible (always returns true)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanRead">
      <summary>
            Whether reading from this stream is possible (always returns true)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.CanSeek">
      <summary>
            Whether seeking in this stream is possible (always returns false)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.Length">
      <summary>
            Length of this stream (always throws a NotSupportedException)
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIStream.Position">
      <summary>
            Current position in the stream (always throws a NotSupportedException)
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Close">
      <summary>
            Closes the port
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Read data from the stream
            </summary>
      <param name="data">buffer to store the data</param>
      <param name="offset">offset in the buffer</param>
      <param name="count">number of bytes to try to read</param>
      <returns>number of bytes read</returns>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Write to the stream
            </summary>
      <param name="data">data to write</param>
      <param name="offset">offset to start writing at</param>
      <param name="count">number of bytes to write</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIPort.ToString">
      <summary>
            Returns string description of instance.
            </summary>
      <returns>string description</returns>
    </member>
    <member name="T:PalmSens.Windows.Comm.FTDIPort.FTDIException">
      <summary>
            Exception thrown during communication trouble using FTDI cable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.FTDIPort.GetAvailableDevices(System.UInt32[])">
      <summary>
            Returns a list of connected FTDI cables. Only works when no connections have been made yet.
            </summary>
      <returns>Array list with serial numbers</returns>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.DTR">
      <summary>
            Change Data Terminal Ready line.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.CBUS0">
      <summary>
            Change CBUS0 IO pin.
            </summary>
    </member>
    <member name="P:PalmSens.Windows.Comm.FTDIPort.RTS">
      <summary>
            Change Ready to Send line.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.TCPServer">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.TCPServer.Start(System.Net.IPEndPoint)">
      <summary>
            Start the TCP server
            </summary>
      <param name="endpoint">port to listen on</param>
    </member>
    <member name="M:PalmSens.Windows.Comm.TCPServer.Stop">
      <summary>
            Stop a running TCP server
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Comm.WebFirmware">
      <summary>
            Obtain firmare from the web.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Comm.WebFirmware.#ctor(System.Double,PalmSens.Comm.enumDeviceType)">
      <summary>
            Instantiate new firmware.
            </summary>
      <param name="version">current version</param>
      <param name="type">device type</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.BluetoothDevice.Open(System.Int32)">
      <summary>
            Baudrate does not apply for establishing the Bluetooth connection
            </summary>
      <param name="baudrate">Ignored.</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.FTDIDevice.Open">
      <summary>
            Opens this instance and auto detects the baudrate if nescessary.
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Devices.FTDIDevice.Open(System.Int32)">
      <summary>
            Opens the connection at the specified baudrate.
            </summary>
      <param name="baudrate">The baudrate.</param>
    </member>
    <member name="M:PalmSens.Windows.Devices.TCPDevice.Open(System.Int32)">
      <summary>
            Baudrate does not apply for establishing the Bluetooth connection
            </summary>
      <param name="baudrate">Ignored.</param>
    </member>
    <member name="M:PalmSens.Windows.AutosaveDuringMeasurement.#ctor(PalmSens.Comm.CommManager,System.Single,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.AutosaveDuringMeasurement" /> class.
            </summary>
      <param name="comm">The CommManager.</param>
      <param name="session">The session manager to save.</param>
      <param name="interval">The interval in minutes.</param>
      <param name="filepath">The filepath.</param>
    </member>
    <member name="M:PalmSens.Windows.AutosaveDuringMeasurement.Start">
      <summary>
            Starts this instance.
            </summary>
    </member>
    <member name="T:PalmSens.Windows.Data.MeasurementSet">
      <summary>
            This library is only useful for putting Curve data in a DataTable.
            It is not essential in any way.
            </summary>
    </member>
    <member name="F:PalmSens.Windows.Data.MeasurementSet.Measurement">
      <summary>
            Returns the Measurement
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.MeasurementSet.#ctor(PalmSens.Measurement)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.MeasurementSet" /> class.
            </summary>
      <param name="m">The m.</param>
    </member>
    <member name="T:PalmSens.Windows.Data.DataSetTable">
      <summary>
            Returns Curve information as a System.Data.DataTable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.DataSetTable.#ctor(PalmSens.Data.DataSet)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.DataSetTable" /> class.
            </summary>
      <param name="dataSet">The data set.</param>
    </member>
    <member name="M:PalmSens.Windows.Data.DataSetTable.GetColumnNames">
      <summary>
            Gets the column names.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Windows.Data.CurveTable">
      <summary>
            Returns Curve information as a System.Data.DataTable
            </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.CurveTable.#ctor(PalmSens.Plottables.Curve,PalmSens.Units.Prefix)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.DataSetTable" /> class.
            </summary>
      <param name="c">The curve.</param>
      <param name="prefix">
      </param>
    </member>
    <member name="T:PalmSens.Windows.Data.EISTable">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Windows.Data.EISTable.#ctor(PalmSens.Plottables.EISData,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Windows.Data.EISTable" /> class.
            </summary>
      <param name="eis">The eis.</param>
    </member>
    <member name="T:PalmSens.Windows.LoadSaveHelperFunctions">
      <summary>
            Functions for saving and loading files.
            - Working with relative paths
            - Save rich text to single line
            -...
            </summary>
    </member>
    <member name="P:PalmSens.Windows.LoadSaveHelperFunctions.AssemblyDirectory">
      <summary>
            Gets the assembly directory.
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.LoadMethodDialogFilter">
      <summary>
            Use as filter for load method file dialog
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevLoadDialogPath">
      <summary>
            The default dialog path for loading files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevSaveDialogPath">
      <summary>
            The default dialog path for saving files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevMethodLoadDialogPath">
      <summary>
            The default dialog path for saving method files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.PrevMethodSaveDialogPath">
      <summary>
            The default dialog path for saving method files
            </summary>
    </member>
    <member name="F:PalmSens.Windows.LoadSaveHelperFunctions.CurrentPath">
      <summary>
            The path of the current file to use for relative paths
            </summary>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.MakeRelative(System.String)">
      <summary>
            Makes an absolute path relative to the location of the file
            </summary>
      <param name="absolutepath">The absolute path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.ShortenPathForDisplay(System.String,System.Int32)">
      <summary>
            Shortens the path for display.
            </summary>
      <param name="fullPath">The full path.</param>
      <param name="maxLength">Max length of the string. Default is 60 characters, minimum is 20 characters</param>
      <returns>A path with a \...\ parts in it if longer than maxLength</returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.SaveStringToFile(System.String,System.String)">
      <summary>
            Saves the string to the given filepath using the default encoding from DataFile.DefaultEncoding
            </summary>
      <param name="contents">The contents.</param>
      <param name="filepath">The filepath.</param>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.SaveStringToFile(System.String,System.String,System.Text.Encoding)">
      <summary>
            Saves the string to the given filepath
            </summary>
      <param name="contents">The contents.</param>
      <param name="filepath">The filepath.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.MakeAbsolute(System.String)">
      <summary>
            Makes an absolute path relative to the location of the file
            </summary>
      <param name="inputpath">The inputpath.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.GetNextAvailableDataFilename(System.String,System.String)">
      <summary>
            Gets the next available data filename.
            Returns a filepath as filepath-#.extension, where # is an incremental number.
            </summary>
      <param name="filepath">The filepath.</param>
      <param name="extension">The extension.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.GetValidFilename(System.String)">
      <summary>
            Filters out invalid characters and returns cleaned filename.
            </summary>
      <param name="filename">The filename.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadMethod(System.String,System.Boolean)">
      <summary>
            Loads the method. Allowed extensions: .psmethod, .pst and .pss
            </summary>
      <param name="filepath">The filepath.</param>
      <param name="isCorrosion">if set to <c>true</c> [is corrosion]. This is only required for old style method files with extension .pmt and .pms.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadCurve(System.String,System.Boolean)">
      <summary>
            Loads the curve and tries to load the corresponding method file if exists.
            </summary>
      <param name="filepath">The filepath.</param>
      <returns>Curve with corresponding method</returns>
    </member>
    <member name="M:PalmSens.Windows.LoadSaveHelperFunctions.LoadMuxMeasurementFile(System.String,System.Boolean)">
      <summary>
            Loads the mux measurement file and tries to load the corresponding method file if exists.
            </summary>
      <param name="filepath">The filepath.</param>
      <returns>Measurement with curve data and corresponding method parameters</returns>
    </member>
    <member name="T:FTD2XX_NET.FTDI">
      <summary>
            Class wrapper for FTD2XX.DLL
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.#ctor">
      <summary>
            Constructor for the FTDI class.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.#ctor(System.String)">
      <summary>
            Non default constructor allowing passing of string for dll handle.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Finalize">
      <summary>
            Destructor for the FTDI class.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_STATUS">
      <summary>
            Status values for FTDI devices.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_OK">
      <summary>
            Status OK
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_HANDLE">
      <summary>
            The device handle is invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_FOUND">
      <summary>
            Device not found
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED">
      <summary>
            Device is not open
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_IO_ERROR">
      <summary>
            IO error
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INSUFFICIENT_RESOURCES">
      <summary>
            Insufficient resources
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_PARAMETER">
      <summary>
            A parameter was invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_BAUD_RATE">
      <summary>
            The requested baud rate is invalid
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_ERASE">
      <summary>
            Device not opened for erase
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_WRITE">
      <summary>
            Device not poened for write
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_FAILED_TO_WRITE_DEVICE">
      <summary>
            Failed to write to device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_READ_FAILED">
      <summary>
            Failed to read the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_WRITE_FAILED">
      <summary>
            Failed to write the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_ERASE_FAILED">
      <summary>
            Failed to erase the device EEPROM
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_NOT_PRESENT">
      <summary>
            An EEPROM is not fitted to the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_EEPROM_NOT_PROGRAMMED">
      <summary>
            Device EEPROM is blank
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_INVALID_ARGS">
      <summary>
            Invalid arguments
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STATUS.FT_OTHER_ERROR">
      <summary>
            An other error has occurred
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DATA_BITS">
      <summary>
            Permitted data bits for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DATA_BITS.FT_BITS_8">
      <summary>
            8 data bits
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DATA_BITS.FT_BITS_7">
      <summary>
            7 data bits
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_STOP_BITS">
      <summary>
            Permitted stop bits for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STOP_BITS.FT_STOP_BITS_1">
      <summary>
            1 stop bit
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_STOP_BITS.FT_STOP_BITS_2">
      <summary>
            2 stop bits
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_PARITY">
      <summary>
            Permitted parity values for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_NONE">
      <summary>
            No parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_ODD">
      <summary>
            Odd parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_EVEN">
      <summary>
            Even parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_MARK">
      <summary>
            Mark parity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PARITY.FT_PARITY_SPACE">
      <summary>
            Space parity
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_FLOW_CONTROL">
      <summary>
            Permitted flow control values for FTDI devices
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_NONE">
      <summary>
            No flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_RTS_CTS">
      <summary>
            RTS/CTS flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_DTR_DSR">
      <summary>
            DTR/DSR flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLOW_CONTROL.FT_FLOW_XON_XOFF">
      <summary>
            Xon/Xoff flow control
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_PURGE">
      <summary>
            Purge buffer constant definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PURGE.FT_PURGE_RX">
      <summary>
            Purge Rx buffer
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_PURGE.FT_PURGE_TX">
      <summary>
            Purge Tx buffer
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_MODEM_STATUS">
      <summary>
            Modem status bit definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_CTS">
      <summary>
            Clear To Send (CTS) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_DSR">
      <summary>
            Data Set Ready (DSR) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_RI">
      <summary>
            Ring Indicator (RI) modem status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_MODEM_STATUS.FT_DCD">
      <summary>
            Data Carrier Detect (DCD) modem status
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_LINE_STATUS">
      <summary>
            Line status bit definitions
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_OE">
      <summary>
            Overrun Error (OE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_PE">
      <summary>
            Parity Error (PE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_FE">
      <summary>
            Framing Error (FE) line status
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_LINE_STATUS.FT_BI">
      <summary>
            Break Interrupt (BI) line status
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EVENTS">
      <summary>
            FTDI device event types that can be monitored
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_RXCHAR">
      <summary>
            Event on receive character
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_MODEM_STATUS">
      <summary>
            Event on modem status change
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EVENTS.FT_EVENT_LINE_STATUS">
      <summary>
            Event on line status change
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_BIT_MODES">
      <summary>
            Permitted bit mode values for FTDI devices.  For use with SetBitMode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_RESET">
      <summary>
            Reset bit mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_ASYNC_BITBANG">
      <summary>
            Asynchronous bit-bang mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_MPSSE">
      <summary>
            MPSSE bit mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_BITBANG">
      <summary>
            Synchronous bit-bang mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_MCU_HOST">
      <summary>
            MCU host bus emulation mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_FAST_SERIAL">
      <summary>
            Fast opto-isolated serial mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_CBUS_BITBANG">
      <summary>
            CBUS bit-bang mode - only available on FT232R and FT232H
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_FIFO">
      <summary>
            Single channel synchronous 245 FIFO mode - only available on FT2232H channel A and FT232H
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS">
      <summary>
            Available functions for the FT232R CBUS pins.  Controlled by FT232R EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT232R CBUS EEPROM options - Tx Data Enable
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_PWRON">
      <summary>
            FT232R CBUS EEPROM options - Power On
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT232R CBUS EEPROM options - Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT232R CBUS EEPROM options - Tx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT232R CBUS EEPROM options - Tx and Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT232R CBUS EEPROM options - Sleep
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK48">
      <summary>
            FT232R CBUS EEPROM options - 48MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK24">
      <summary>
            FT232R CBUS EEPROM options - 24MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK12">
      <summary>
            FT232R CBUS EEPROM options - 12MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK6">
      <summary>
            FT232R CBUS EEPROM options - 6MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_IOMODE">
      <summary>
            FT232R CBUS EEPROM options - IO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_WR">
      <summary>
            FT232R CBUS EEPROM options - Bit-bang write strobe
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_RD">
      <summary>
            FT232R CBUS EEPROM options - Bit-bang read strobe
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS">
      <summary>
            Available functions for the FT232H CBUS pins.  Controlled by FT232H EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TRISTATE">
      <summary>
            FT232H CBUS EEPROM options - Tristate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT232H CBUS EEPROM options - Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT232H CBUS EEPROM options - Tx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT232H CBUS EEPROM options - Tx and Rx LED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_PWREN">
      <summary>
            FT232H CBUS EEPROM options - Power Enable#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT232H CBUS EEPROM options - Sleep
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_0">
      <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 0
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_1">
      <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 1
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_IOMODE">
      <summary>
            FT232H CBUS EEPROM options - IO Mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT232H CBUS EEPROM options - Tx Data Enable
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK30">
      <summary>
            FT232H CBUS EEPROM options - 30MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK15">
      <summary>
            FT232H CBUS EEPROM options - 15MHz clock
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK7_5">
      <summary>
            FT232H CBUS EEPROM options - 7.5MHz clock
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS">
      <summary>
            Available functions for the X-Series CBUS pins.  Controlled by X-Series EEPROM settings
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TRISTATE">
      <summary>
            FT X-Series CBUS EEPROM options - Tristate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_RXLED">
      <summary>
            FT X-Series CBUS EEPROM options - RxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXLED">
      <summary>
            FT X-Series CBUS EEPROM options - TxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXRXLED">
      <summary>
            FT X-Series CBUS EEPROM options - TxRxLED#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_PWREN">
      <summary>
            FT X-Series CBUS EEPROM options - PwrEn#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_SLEEP">
      <summary>
            FT X-Series CBUS EEPROM options - Sleep#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_0">
      <summary>
            FT X-Series CBUS EEPROM options - Drive_0
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_1">
      <summary>
            FT X-Series CBUS EEPROM options - Drive_1
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_GPIO">
      <summary>
            FT X-Series CBUS EEPROM options - GPIO
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXDEN">
      <summary>
            FT X-Series CBUS EEPROM options - TxdEn
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK24MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk24MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK12MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk12MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK6MHz">
      <summary>
            FT X-Series CBUS EEPROM options - Clk6MHz
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger">
      <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger_N">
      <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_TXE">
      <summary>
            FT X-Series CBUS EEPROM options - I2C_TXE#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_RXF">
      <summary>
            FT X-Series CBUS EEPROM options - I2C_RXF#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_VBUS_Sense">
      <summary>
            FT X-Series CBUS EEPROM options - VBUS_Sense
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_WR">
      <summary>
            FT X-Series CBUS EEPROM options - BitBang_WR#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_RD">
      <summary>
            FT X-Series CBUS EEPROM options - BitBang_RD#
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Time_Stamp">
      <summary>
            FT X-Series CBUS EEPROM options - Time_Stampe
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Keep_Awake">
      <summary>
            FT X-Series CBUS EEPROM options - Keep_Awake#
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_FLAGS">
      <summary>
            Flags that provide information on the FTDI device state
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLAGS.FT_FLAGS_OPENED">
      <summary>
            Indicates that the device is open
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_FLAGS.FT_FLAGS_HISPEED">
      <summary>
            Indicates that the device is enumerated as a hi-speed USB device
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT">
      <summary>
            Valid values for drive current options on FT2232H, FT4232H and FT232H devices.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_4MA">
      <summary>
            4mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_8MA">
      <summary>
            8mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_12MA">
      <summary>
            12mA drive current
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_16MA">
      <summary>
            16mA drive current
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DEVICE">
      <summary>
            List of FTDI device types
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_BM">
      <summary>
            FT232B or FT245B device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_AM">
      <summary>
            FT8U232AM or FT8U245AM device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_100AX">
      <summary>
            FT8U100AX device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_UNKNOWN">
      <summary>
            Unknown device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_2232">
      <summary>
            FT2232 device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_232R">
      <summary>
            FT232R or FT245R device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_2232H">
      <summary>
            FT2232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4232H">
      <summary>
            FT4232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_232H">
      <summary>
            FT232H device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_X_SERIES">
      <summary>
            FT X-Series device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_0">
      <summary>
            FT4222 hi-speed device Mode 0 - 2 interfaces
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_1_2">
      <summary>
            FT4222 hi-speed device Mode 1 or 2 - 4 interfaces
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222H_3">
      <summary>
            FT4222 hi-speed device Mode 3 - 1 interface
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE.FT_DEVICE_4222_PROG">
      <summary>
            OTP programmer board for the FT4222.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE">
      <summary>
            Type that holds device information for GetDeviceInformation method.
            Used with FT_GetDeviceInfo and FT_GetDeviceInfoDetail in FTD2XX.DLL
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Flags">
      <summary>
            Indicates device state.  Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Type">
      <summary>
            Indicates the device type.  Can be one of the following: FT_DEVICE_232R, FT_DEVICE_2232C, FT_DEVICE_BM, FT_DEVICE_AM, FT_DEVICE_100AX or FT_DEVICE_UNKNOWN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.ID">
      <summary>
            The Vendor ID and Product ID of the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.LocId">
      <summary>
            The physical location identifier of the device
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.SerialNumber">
      <summary>
            The device serial number
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.Description">
      <summary>
            The device description
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE.ftHandle">
      <summary>
            The device handle.  This value is not used externally and is provided for information only.
            If the device is not open, this value is 0.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EEPROM_DATA">
      <summary>
            Common EEPROM elements for all devices.  Inherited to specific device type EEPROMs.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.VendorID">
      <summary>
            Vendor ID as supplied by the USB Implementers Forum
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.ProductID">
      <summary>
            Product ID
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.Manufacturer">
      <summary>
            Manufacturer name string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.ManufacturerID">
      <summary>
            Manufacturer name abbreviation to be used as a prefix for automatically generated serial numbers
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.Description">
      <summary>
            Device description string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.SerialNumber">
      <summary>
            Device serial number string
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.MaxPower">
      <summary>
            Maximum power the device needs
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.SelfPowered">
      <summary>
            Indicates if the device has its own power supply (self-powered) or gets power from the USB port (bus-powered)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_EEPROM_DATA.RemoteWakeup">
      <summary>
            Determines if the device can wake the host PC from suspend by toggling the RI line
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232B and FT245B devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number.  Should be either 0x0110 (USB 1.1) or 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT2232 devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number.  Should be either 0x0110 (USB 1.1) or 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.AIsHighCurrent">
      <summary>
            Enables high current IOs on channel A
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.BIsHighCurrent">
      <summary>
            Enables high current IOs on channel B
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFifo">
      <summary>
            Determines if channel A is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFifoTar">
      <summary>
            Determines if channel A is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFAIsFastSer">
      <summary>
            Determines if channel A is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFifo">
      <summary>
            Determines if channel B is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFifoTar">
      <summary>
            Determines if channel B is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.IFBIsFastSer">
      <summary>
            Determines if channel B is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232R and FT245R devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.UseExtOsc">
      <summary>
            Disables the FT232R internal clock source.  
            If the device has external oscillator enabled it must have an external oscillator fitted to function
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.HighDriveIOs">
      <summary>
            Enables high current IOs
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.EndpointSize">
      <summary>
            Sets the endpoint size.  This should always be set to 64
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertTXD">
      <summary>
            Inverts the sense of the TXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRXD">
      <summary>
            Inverts the sense of the RXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRTS">
      <summary>
            Inverts the sense of the RTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertCTS">
      <summary>
            Inverts the sense of the CTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDTR">
      <summary>
            Inverts the sense of the DTR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDSR">
      <summary>
            Inverts the sense of the DSR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertDCD">
      <summary>
            Inverts the sense of the DCD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.InvertRI">
      <summary>
            Inverts the sense of the RI line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE.RIsD2XX">
      <summary>
            Determines if the VCP driver is loaded
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT2232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALSlowSlew">
      <summary>
            Determines if AL pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALSchmittInput">
      <summary>
            Determines if the AL pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.ALDriveCurrent">
      <summary>
            Determines the AL pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHSlowSlew">
      <summary>
            Determines if AH pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHSchmittInput">
      <summary>
            Determines if the AH pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AHDriveCurrent">
      <summary>
            Determines the AH pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLSlowSlew">
      <summary>
            Determines if BL pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLSchmittInput">
      <summary>
            Determines if the BL pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BLDriveCurrent">
      <summary>
            Determines the BL pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHSlowSlew">
      <summary>
            Determines if BH pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHSchmittInput">
      <summary>
            Determines if the BH pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BHDriveCurrent">
      <summary>
            Determines the BH pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFifo">
      <summary>
            Determines if channel A is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFifoTar">
      <summary>
            Determines if channel A is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFAIsFastSer">
      <summary>
            Determines if channel A is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFifo">
      <summary>
            Determines if channel B is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFifoTar">
      <summary>
            Determines if channel B is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.IFBIsFastSer">
      <summary>
            Determines if channel B is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            For self-powered designs, keeps the FT2232H in low power state until BCBUS7 is high
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT4232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ASlowSlew">
      <summary>
            Determines if A pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ASchmittInput">
      <summary>
            Determines if the A pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ADriveCurrent">
      <summary>
            Determines the A pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BSlowSlew">
      <summary>
            Determines if B pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BSchmittInput">
      <summary>
            Determines if the B pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BDriveCurrent">
      <summary>
            Determines the B pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CSlowSlew">
      <summary>
            Determines if C pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CSchmittInput">
      <summary>
            Determines if the C pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CDriveCurrent">
      <summary>
            Determines the C pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DSlowSlew">
      <summary>
            Determines if D pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DSchmittInput">
      <summary>
            Determines if the D pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DDriveCurrent">
      <summary>
            Determines the D pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.ARIIsTXDEN">
      <summary>
            RI of port A acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BRIIsTXDEN">
      <summary>
            RI of port B acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CRIIsTXDEN">
      <summary>
            RI of port C acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DRIIsTXDEN">
      <summary>
            RI of port D acts as RS485 transmit enable (TXDEN)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.AIsVCP">
      <summary>
            Determines if channel A loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.BIsVCP">
      <summary>
            Determines if channel B loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.CIsVCP">
      <summary>
            Determines if channel C loads the VCP driver
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE.DIsVCP">
      <summary>
            Determines if channel D loads the VCP driver
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to FT232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACSlowSlew">
      <summary>
            Determines if AC pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACSchmittInput">
      <summary>
            Determines if the AC pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ACDriveCurrent">
      <summary>
            Determines the AC pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADSlowSlew">
      <summary>
            Determines if AD pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADSchmittInput">
      <summary>
            Determines if the AD pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.ADDriveCurrent">
      <summary>
            Determines the AD pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus5">
      <summary>
            Sets the function of the CBUS5 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus6">
      <summary>
            Sets the function of the CBUS6 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus7">
      <summary>
            Sets the function of the CBUS7 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus8">
      <summary>
            Sets the function of the CBUS8 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.Cbus9">
      <summary>
            Sets the function of the CBUS9 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFifo">
      <summary>
            Determines if the device is in FIFO mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFifoTar">
      <summary>
            Determines if the device is in FIFO target mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFastSer">
      <summary>
            Determines if the device is in fast serial mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsFT1248">
      <summary>
            Determines if the device is in FT1248 mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248Cpol">
      <summary>
            Determines FT1248 mode clock polarity
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248Lsb">
      <summary>
            Determines if data is ent MSB (0) or LSB (1) in FT1248 mode
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.FT1248FlowControl">
      <summary>
            Determines if FT1248 mode uses flow control
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.IsVCP">
      <summary>
            Determines if the VCP driver is loaded
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            For self-powered designs, keeps the FT232H in low power state until ACBUS7 is high
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE">
      <summary>
            EEPROM structure specific to X-Series devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.PullDownEnable">
      <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.SerNumEnable">
      <summary>
            Determines if the serial number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.USBVersionEnable">
      <summary>
            Determines if the USB version number is enabled
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.USBVersion">
      <summary>
            The USB version number: 0x0200 (USB 2.0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACSlowSlew">
      <summary>
            Determines if AC pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACSchmittInput">
      <summary>
            Determines if the AC pins have a Schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ACDriveCurrent">
      <summary>
            Determines the AC pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADSlowSlew">
      <summary>
            Determines if AD pins have a slow slew rate
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADSchmittInput">
      <summary>
            Determines if AD pins have a schmitt input
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.ADDriveCurrent">
      <summary>
            Determines the AD pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus0">
      <summary>
            Sets the function of the CBUS0 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus1">
      <summary>
            Sets the function of the CBUS1 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus2">
      <summary>
            Sets the function of the CBUS2 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus3">
      <summary>
            Sets the function of the CBUS3 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_GPIO, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus4">
      <summary>
            Sets the function of the CBUS4 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus5">
      <summary>
            Sets the function of the CBUS5 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.Cbus6">
      <summary>
            Sets the function of the CBUS6 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK24,
            FT_CBUS_CLK12, FT_CBUS_CLK6, FT_CBUS_BCD_CHARGER, FT_CBUS_BCD_CHARGER_N, FT_CBUS_VBUS_SENSE, FT_CBUS_BITBANG_WR,
            FT_CBUS_BITBANG_RD, FT_CBUS_TIME_STAMP, FT_CBUS_KEEP_AWAKE
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertTXD">
      <summary>
            Inverts the sense of the TXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRXD">
      <summary>
            Inverts the sense of the RXD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRTS">
      <summary>
            Inverts the sense of the RTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertCTS">
      <summary>
            Inverts the sense of the CTS line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDTR">
      <summary>
            Inverts the sense of the DTR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDSR">
      <summary>
            Inverts the sense of the DSR line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertDCD">
      <summary>
            Inverts the sense of the DCD line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.InvertRI">
      <summary>
            Inverts the sense of the RI line
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDEnable">
      <summary>
            Determines whether the Battery Charge Detection option is enabled.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDForceCbusPWREN">
      <summary>
            Asserts the power enable signal on CBUS when charging port detected.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.BCDDisableSleep">
      <summary>
            Forces the device never to go into sleep mode.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CSlaveAddress">
      <summary>
            I2C slave device address.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CDeviceId">
      <summary>
            I2C device ID
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.I2CDisableSchmitt">
      <summary>
            Disable I2C Schmitt trigger.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248Cpol">
      <summary>
            FT1248 clock polarity - clock idle high (1) or clock idle low (0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248Lsb">
      <summary>
            FT1248 data is LSB (1) or MSB (0)
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.FT1248FlowControl">
      <summary>
            FT1248 flow control enable.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.RS485EchoSuppress">
      <summary>
            Enable RS485 Echo Suppression
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.PowerSaveEnable">
      <summary>
            Enable Power Save mode.
            </summary>
    </member>
    <member name="F:FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE.IsVCP">
      <summary>
            Determines whether the VCP driver is loaded.
            </summary>
    </member>
    <member name="T:FTD2XX_NET.FTDI.FT_EXCEPTION">
      <summary>
            Exceptions thrown by errors within the FTDI class.
            </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="inner">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.FT_EXCEPTION.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
      </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetNumberOfDevices(System.UInt32@)">
      <summary>
            Gets the number of FTDI devices available.  
            </summary>
      <returns>FT_STATUS value from FT_CreateDeviceInfoList in FTD2XX.DLL</returns>
      <param name="devcount">The number of FTDI devices available.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceList(FTD2XX_NET.FTDI.FT_DEVICE_INFO_NODE[])">
      <summary>
            Gets information on all of the FTDI devices available.  
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfoDetail in FTD2XX.DLL</returns>
      <param name="devicelist">An array of type FT_DEVICE_INFO_NODE to contain the device information for all available devices.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the supplied buffer is not large enough to contain the device info list.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByIndex(System.UInt32)">
      <summary>
            Opens the FTDI device with the specified index.  
            </summary>
      <returns>FT_STATUS value from FT_Open in FTD2XX.DLL</returns>
      <param name="index">Index of the device to open.
            Note that this cannot be guaranteed to open a specific device.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenBySerialNumber(System.String)">
      <summary>
            Opens the FTDI device with the specified serial number.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="serialnumber">Serial number of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByDescription(System.String)">
      <summary>
            Opens the FTDI device with the specified description.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="description">Description of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.OpenByLocation(System.UInt32)">
      <summary>
            Opens the FTDI device at the specified physical location.  
            </summary>
      <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
      <param name="location">Location of the device to open.</param>
      <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Close">
      <summary>
            Closes the handle to an open FTDI device.  
            </summary>
      <returns>FT_STATUS value from FT_Close in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Read(System.Byte[],System.UInt32,System.UInt32@)">
      <summary>
            Read data from an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which will be populated with the data read from the device.</param>
      <param name="numBytesToRead">The number of bytes requested from the device.</param>
      <param name="numBytesRead">The number of bytes actually read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Read(System.String@,System.UInt32,System.UInt32@)">
      <summary>
            Read data from an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
      <param name="dataBuffer">A string containing the data read</param>
      <param name="numBytesToRead">The number of bytes requested from the device.</param>
      <param name="numBytesRead">The number of bytes actually read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.Byte[],System.Int32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.Byte[],System.UInt32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.String,System.Int32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Write(System.String,System.UInt32,System.UInt32@)">
      <summary>
            Write data to an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
      <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
      <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
      <param name="numBytesWritten">The number of bytes actually written to the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ResetDevice">
      <summary>
            Reset an open FTDI device.
            </summary>
      <returns>FT_STATUS value from FT_ResetDevice in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Purge(System.UInt32)">
      <summary>
            Purge data from the devices transmit and/or receive buffers.
            </summary>
      <returns>FT_STATUS value from FT_Purge in FTD2XX.DLL</returns>
      <param name="purgemask">Specifies which buffer(s) to be purged.  Valid values are any combination of the following flags: FT_PURGE_RX, FT_PURGE_TX</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetEventNotification(System.UInt32,System.Threading.EventWaitHandle)">
      <summary>
            Register for event notification.
            </summary>
      <returns>FT_STATUS value from FT_SetEventNotification in FTD2XX.DLL</returns>
      <remarks>After setting event notification, the event can be caught by executing the WaitOne() method of the EventWaitHandle.  If multiple event types are being monitored, the event that fired can be determined from the GetEventType method.</remarks>
      <param name="eventmask">The type of events to signal.  Can be any combination of the following: FT_EVENT_RXCHAR, FT_EVENT_MODEM_STATUS, FT_EVENT_LINE_STATUS</param>
      <param name="eventhandle">Handle to the event that will receive the notification</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.StopInTask">
      <summary>
            Stops the driver issuing USB in requests.
            </summary>
      <returns>FT_STATUS value from FT_StopInTask in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.RestartInTask">
      <summary>
            Resumes the driver issuing USB in requests.
            </summary>
      <returns>FT_STATUS value from FT_RestartInTask in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ResetPort">
      <summary>
            Resets the device port.
            </summary>
      <returns>FT_STATUS value from FT_ResetPort in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.CyclePort">
      <summary>
            Causes the device to be re-enumerated on the USB bus.  This is equivalent to unplugging and replugging the device.
            Also calls FT_Close if FT_CyclePort is successful, so no need to call this separately in the application.
            </summary>
      <returns>FT_STATUS value from FT_CyclePort in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Rescan">
      <summary>
            Causes the system to check for USB hardware changes.  This is equivalent to clicking on the "Scan for hardware changes" button in the Device Manager.
            </summary>
      <returns>FT_STATUS value from FT_Rescan in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.Reload(System.UInt16,System.UInt16)">
      <summary>
            Forces a reload of the driver for devices with a specific VID and PID combination.
            </summary>
      <returns>FT_STATUS value from FT_Reload in FTD2XX.DLL</returns>
      <remarks>If the VID and PID parameters are 0, the drivers for USB root hubs will be reloaded, causing all USB devices connected to reload their drivers</remarks>
      <param name="VendorID">Vendor ID of the devices to have the driver reloaded</param>
      <param name="ProductID">Product ID of the devices to have the driver reloaded</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBitMode(System.Byte,System.Byte)">
      <summary>
            Puts the device in a mode other than the default UART or FIFO mode.
            </summary>
      <returns>FT_STATUS value from FT_SetBitMode in FTD2XX.DLL</returns>
      <param name="Mask">Sets up which bits are inputs and which are outputs.  A bit value of 0 sets the corresponding pin to an input, a bit value of 1 sets the corresponding pin to an output.
            In the case of CBUS Bit Bang, the upper nibble of this value controls which pins are inputs and outputs, while the lower nibble controls which of the outputs are high and low.</param>
      <param name="BitMode"> For FT232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT2232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT4232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG.
            For FT232R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG.
            For FT245R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG.
            For FT2232 devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL.
            For FT232B and FT245B devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not support the requested bit mode.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetPinStates(System.Byte@)">
      <summary>
            Gets the instantaneous state of the device IO pins.
            </summary>
      <returns>FT_STATUS value from FT_GetBitMode in FTD2XX.DLL</returns>
      <param name="BitMode">A bitmap value containing the instantaneous state of the device IO pins</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadEEPROMLocation(System.UInt32,System.UInt16@)">
      <summary>
            Reads an individual word value from a specified location in the device's EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_ReadEE in FTD2XX.DLL</returns>
      <param name="Address">The EEPROM location to read data from</param>
      <param name="EEValue">The WORD value read from the EEPROM location specified in the Address paramter</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteEEPROMLocation(System.UInt32,System.UInt16)">
      <summary>
            Writes an individual word value to a specified location in the device's EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_WriteEE in FTD2XX.DLL</returns>
      <param name="Address">The EEPROM location to read data from</param>
      <param name="EEValue">The WORD value to write to the EEPROM location specified by the Address parameter</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EraseEEPROM">
      <summary>
            Erases the device EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_EraseEE in FTD2XX.DLL</returns>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when attempting to erase the EEPROM of a device with an internal EEPROM such as an FT232R or FT245R.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232BEEPROM(FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232B or FT245B device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee232b">An FT232B_EEPROM_STRUCTURE which contains only the relevant information for an FT232B and FT245B device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT2232EEPROM(FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT2232 device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee2232">An FT2232_EEPROM_STRUCTURE which contains only the relevant information for an FT2232 device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232REEPROM(FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232R or FT245R device.
            Calls FT_EE_Read in FTD2XX DLL
            </summary>
      <returns>An FT232R_EEPROM_STRUCTURE which contains only the relevant information for an FT232R and FT245R device.</returns>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT2232HEEPROM(FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT2232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee2232h">An FT2232H_EEPROM_STRUCTURE which contains only the relevant information for an FT2232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT4232HEEPROM(FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT4232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee4232h">An FT4232H_EEPROM_STRUCTURE which contains only the relevant information for an FT4232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadFT232HEEPROM(FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an FT232H device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Read in FTD2XX DLL</returns>
      <param name="ee232h">An FT232H_EEPROM_STRUCTURE which contains only the relevant information for an FT232H device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.ReadXSeriesEEPROM(FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE)">
      <summary>
            Reads the EEPROM contents of an X-Series device.
            </summary>
      <returns>FT_STATUS value from FT_EEPROM_Read in FTD2XX DLL</returns>
      <param name="eeX">An FT_XSERIES_EEPROM_STRUCTURE which contains only the relevant information for an X-Series device.</param>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232BEEPROM(FTD2XX_NET.FTDI.FT232B_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232B or FT245B device.
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232b">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT2232EEPROM(FTD2XX_NET.FTDI.FT2232_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT2232 device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee2232">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232REEPROM(FTD2XX_NET.FTDI.FT232R_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232R or FT245R device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232r">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT2232HEEPROM(FTD2XX_NET.FTDI.FT2232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT2232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee2232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT4232HEEPROM(FTD2XX_NET.FTDI.FT4232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT4232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee4232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteFT232HEEPROM(FTD2XX_NET.FTDI.FT232H_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an FT232H device.
            Calls FT_EE_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EE_Program in FTD2XX DLL</returns>
      <param name="ee232h">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.WriteXSeriesEEPROM(FTD2XX_NET.FTDI.FT_XSERIES_EEPROM_STRUCTURE)">
      <summary>
            Writes the specified values to the EEPROM of an X-Series device.
            Calls FT_EEPROM_Program in FTD2XX DLL
            </summary>
      <returns>FT_STATUS value from FT_EEPROM_Program in FTD2XX DLL</returns>
      <param name="eeX">The EEPROM settings to be written to the device</param>
      <remarks>If the strings are too long, they will be truncated to their maximum permitted lengths</remarks>
      <exception cref="T:FTD2XX_NET.FTDI.FT_EXCEPTION">Thrown when the current device does not match the type required by this method.</exception>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEReadUserArea(System.Byte[],System.UInt32@)">
      <summary>
            Reads data from the user area of the device EEPROM.
            </summary>
      <returns>FT_STATUS from FT_UARead in FTD2XX.DLL</returns>
      <param name="UserAreaDataBuffer">An array of bytes which will be populated with the data read from the device EEPROM user area.</param>
      <param name="numBytesRead">The number of bytes actually read from the EEPROM user area.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEWriteUserArea(System.Byte[])">
      <summary>
            Writes data to the user area of the device EEPROM.
            </summary>
      <returns>FT_STATUS value from FT_UAWrite in FTD2XX.DLL</returns>
      <param name="UserAreaDataBuffer">An array of bytes which will be written to the device EEPROM user area.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceType(FTD2XX_NET.FTDI.FT_DEVICE@)">
      <summary>
            Gets the chip type of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="DeviceType">The FTDI chip type of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDeviceID(System.UInt32@)">
      <summary>
            Gets the Vendor ID and Product ID of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="DeviceID">The device ID (Vendor ID and Product ID) of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDescription(System.String@)">
      <summary>
            Gets the description of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="Description">The description of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetSerialNumber(System.String@)">
      <summary>
            Gets the serial number of the current device.
            </summary>
      <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
      <param name="SerialNumber">The serial number of the current device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetRxBytesAvailable(System.UInt32@)">
      <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
      <returns>FT_STATUS value from FT_GetQueueStatus in FTD2XX.DLL</returns>
      <param name="RxQueue">The number of bytes available to be read.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetTxBytesWaiting(System.UInt32@)">
      <summary>
            Gets the number of bytes waiting in the transmit buffer.
            </summary>
      <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
      <param name="TxQueue">The number of bytes waiting to be sent.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetEventType(System.UInt32@)">
      <summary>
            Gets the event type after an event has fired.  Can be used to distinguish which event has been triggered when waiting on multiple event types.
            </summary>
      <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
      <param name="EventType">The type of event that has occurred.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetModemStatus(System.Byte@)">
      <summary>
            Gets the current modem status.
            </summary>
      <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
      <param name="ModemStatus">A bit map representaion of the current modem status.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLineStatus(System.Byte@)">
      <summary>
            Gets the current line status.
            </summary>
      <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
      <param name="LineStatus">A bit map representaion of the current line status.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBaudRate(System.UInt32)">
      <summary>
            Sets the current Baud rate.
            </summary>
      <returns>FT_STATUS value from FT_SetBaudRate in FTD2XX.DLL</returns>
      <param name="BaudRate">The desired Baud rate for the device.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDataCharacteristics(System.Byte,System.Byte,System.Byte)">
      <summary>
            Sets the data bits, stop bits and parity for the device.
            </summary>
      <returns>FT_STATUS value from FT_SetDataCharacteristics in FTD2XX.DLL</returns>
      <param name="DataBits">The number of data bits for UART data.  Valid values are FT_DATA_BITS.FT_DATA_7 or FT_DATA_BITS.FT_BITS_8</param>
      <param name="StopBits">The number of stop bits for UART data.  Valid values are FT_STOP_BITS.FT_STOP_BITS_1 or FT_STOP_BITS.FT_STOP_BITS_2</param>
      <param name="Parity">The parity of the UART data.  Valid values are FT_PARITY.FT_PARITY_NONE, FT_PARITY.FT_PARITY_ODD, FT_PARITY.FT_PARITY_EVEN, FT_PARITY.FT_PARITY_MARK or FT_PARITY.FT_PARITY_SPACE</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetFlowControl(System.UInt16,System.Byte,System.Byte)">
      <summary>
            Sets the flow control type.
            </summary>
      <returns>FT_STATUS value from FT_SetFlowControl in FTD2XX.DLL</returns>
      <param name="FlowControl">The type of flow control for the UART.  Valid values are FT_FLOW_CONTROL.FT_FLOW_NONE, FT_FLOW_CONTROL.FT_FLOW_RTS_CTS, FT_FLOW_CONTROL.FT_FLOW_DTR_DSR or FT_FLOW_CONTROL.FT_FLOW_XON_XOFF</param>
      <param name="Xon">The Xon character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
      <param name="Xoff">The Xoff character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetRTS(System.Boolean)">
      <summary>
            Asserts or de-asserts the Request To Send (RTS) line.
            </summary>
      <returns>FT_STATUS value from FT_SetRts or FT_ClrRts in FTD2XX.DLL</returns>
      <param name="Enable">If true, asserts RTS.  If false, de-asserts RTS</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDTR(System.Boolean)">
      <summary>
            Asserts or de-asserts the Data Terminal Ready (DTR) line.
            </summary>
      <returns>FT_STATUS value from FT_SetDtr or FT_ClrDtr in FTD2XX.DLL</returns>
      <param name="Enable">If true, asserts DTR.  If false, de-asserts DTR.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetTimeouts(System.UInt32,System.UInt32)">
      <summary>
            Sets the read and write timeout values.
            </summary>
      <returns>FT_STATUS value from FT_SetTimeouts in FTD2XX.DLL</returns>
      <param name="ReadTimeout">Read timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
      <param name="WriteTimeout">Write timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetBreak(System.Boolean)">
      <summary>
            Sets or clears the break state.
            </summary>
      <returns>FT_STATUS value from FT_SetBreakOn or FT_SetBreakOff in FTD2XX.DLL</returns>
      <param name="Enable">If true, sets break on.  If false, sets break off.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetResetPipeRetryCount(System.UInt32)">
      <summary>
            Gets or sets the reset pipe retry count.  Default value is 50.
            </summary>
      <returns>FT_STATUS vlaue from FT_SetResetPipeRetryCount in FTD2XX.DLL</returns>
      <param name="ResetPipeRetryCount">The reset pipe retry count.  
            Electrically noisy environments may benefit from a larger value.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetDriverVersion(System.UInt32@)">
      <summary>
            Gets the current FTDIBUS.SYS driver version number.
            </summary>
      <returns>FT_STATUS value from FT_GetDriverVersion in FTD2XX.DLL</returns>
      <param name="DriverVersion">The current driver version number.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLibraryVersion(System.UInt32@)">
      <summary>
            Gets the current FTD2XX.DLL driver version number.
            </summary>
      <returns>FT_STATUS value from FT_GetLibraryVersion in FTD2XX.DLL</returns>
      <param name="LibraryVersion">The current library version.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetDeadmanTimeout(System.UInt32)">
      <summary>
            Sets the USB deadman timeout value.  Default is 5000ms.
            </summary>
      <returns>FT_STATUS value from FT_SetDeadmanTimeout in FTD2XX.DLL</returns>
      <param name="DeadmanTimeout">The deadman timeout value in ms.  Default is 5000ms.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetLatency(System.Byte)">
      <summary>
            Sets the value of the latency timer.  Default value is 16ms.
            </summary>
      <returns>FT_STATUS value from FT_SetLatencyTimer in FTD2XX.DLL</returns>
      <param name="Latency">The latency timer value in ms.
            Valid values are 2ms - 255ms for FT232BM, FT245BM and FT2232 devices.
            Valid values are 0ms - 255ms for other devices.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetLatency(System.Byte@)">
      <summary>
            Gets the value of the latency timer.  Default value is 16ms.
            </summary>
      <returns>FT_STATUS value from FT_GetLatencyTimer in FTD2XX.DLL</returns>
      <param name="Latency">The latency timer value in ms.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.InTransferSize(System.UInt32)">
      <summary>
            Sets the USB IN and OUT transfer sizes.
            </summary>
      <returns>FT_STATUS value from FT_SetUSBParameters in FTD2XX.DLL</returns>
      <param name="InTransferSize">The USB IN transfer size in bytes.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.SetCharacters(System.Byte,System.Boolean,System.Byte,System.Boolean)">
      <summary>
            Sets an event character, an error character and enables or disables them.
            </summary>
      <returns>FT_STATUS value from FT_SetChars in FTD2XX.DLL</returns>
      <param name="EventChar">A character that will be tigger an IN to the host when this character is received.</param>
      <param name="EventCharEnable">Determines if the EventChar is enabled or disabled.</param>
      <param name="ErrorChar">A character that will be inserted into the data stream to indicate that an error has occurred.</param>
      <param name="ErrorCharEnable">Determines if the ErrorChar is enabled or disabled.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.EEUserAreaSize(System.UInt32@)">
      <summary>
            Gets the size of the EEPROM user area.
            </summary>
      <returns>FT_STATUS value from FT_EE_UASize in FTD2XX.DLL</returns>
      <param name="UASize">The EEPROM user area size in bytes.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.GetCOMPort(System.String@)">
      <summary>
            Gets the corresponding COM port number for the current device.  If no COM port is exposed, an empty string is returned.
            </summary>
      <returns>FT_STATUS value from FT_GetComPortNumber in FTD2XX.DLL</returns>
      <param name="ComPortName">The COM port name corresponding to the current device.  If no COM port is installed, an empty string is passed back.</param>
    </member>
    <member name="M:FTD2XX_NET.FTDI.VendorCmdGet(System.UInt16,System.Byte[],System.UInt16)">
      <summary>
            Get data from the FT4222 using the vendor command interface.
            </summary>
      <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
    </member>
    <member name="M:FTD2XX_NET.FTDI.VendorCmdSet(System.UInt16,System.Byte[],System.UInt16)">
      <summary>
            Set data from the FT4222 using the vendor command interface.
            </summary>
      <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
    </member>
    <member name="P:FTD2XX_NET.FTDI.IsOpen">
      <summary>
            Gets the open status of the device.
            </summary>
    </member>
  </members>
</doc><?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Net.Personal</name>
    </assembly>
    <members>
        <member name="M:InTheHand.Net.ExceptionExtension.ToStringNoStackTrace(System.Exception)">
            <summary>
            Get the normal first line of <c>Exception.ToString()</c>,
            that is without the stack trace lines.
            </summary>
            -
            <remarks>
            Get the normal first line of <c>Exception.ToString()</c>,
            that is including details of all inner exceptions,
            but without the stack trace lines.
            e.g. <c>System.IO.IOException: An established connection was aborted by the software in your host machine. ---> System.Net.Sockets.SocketException: An established connection was aborted by the software in your host machine.</c>
            </remarks>
            -
            <param name="this">The exception.
            </param>
            -
            <returns>A string containing the first line of the <c>Exception.ToString()</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.ExceptionFactory.ArgumentOutOfRangeException(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.StringUtilities.IsNullOrEmpty(System.String)">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordParser">
            <summary>
            Parses an array of bytes into the contained SDP 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See the
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            methods for more information.
            </remarks>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ElementTypeDescriptorOffset">
            <summary>
            Bit offset of the ElementTypeDescriptor field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.SizeIndexMask"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.SizeIndexMask">
            <summary>
            Mask for the SizeIndex field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index, upper and lower respectively.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ElementTypeDescriptorOffset"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatUnknownType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatTypeNotTypeDSubtype">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgSizeIndexNotSuitTypeD">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgServiceRecordBytesZeroLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatInvalidHeaderBytes">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatTruncated">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgFormatNotSupportFull32bitSized">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgTypeNotAsExpected">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgTopElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgMultiSeqChildElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgSequenceOverruns">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBuffer_WithLengths">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBuffer">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgElementOverrunsBufferPrefix">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ErrorMsgAttributePairFirstMustUint16">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[])">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.
            </remarks>
            -
            <param name="buffer">A byte array containing the encoded Service Record.
            </param>
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            <para>If the record contains any element type not supported by the parser
            it will throw <see cref="T:System.NotImplementedException"/>. The
            only element types defined by SDP in v2.0 that are not currently implemented 
            are 64- and 128-bit integers.  Of course any types defined in a later 
            version will also throw this.  This behaviour can be changed with the
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.SkipUnhandledElementTypes"/> 
            property.
            </para>
            </remarks>
            -
            <param name="buffer">A byte array containing a Service Record.
            </param>
            <param name="offset">The position in the data buffer at which to
            begin parsing the Service Record.
            </param>
            <param name="length">The length of the Service Record in the byte array.
            </param>
            <returns>The Service Record parse from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[])"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitSearchAttributeResult(System.Byte[])">
            <summary>
            Split a sequence of records into the component records.
            </summary>
            -
            <remarks>
            <para>The Bluetooth SDP operation ServiceSearchAttribute returns its 
            result as a &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;  This
            method split that sequence into the individual attribute lists.
            </para>
            <para>On CE/Windows Mobile the result of a record lookup is in this form
            so <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            etc use this method to split the result into is constituent records.
            </para>
            </remarks>
            -
            <param name="multiRecord">A byte array holding the 
            &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;
            </param>
            -
            <returns>An array of byte arrays where each holds a SDP record
            (a &#x201C;data element sequence representing an attribute list.&#x201D;).
            If the input was zero length or empty then a zero length array is returned.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multiRecord"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.ParseContent(System.Boolean,System.Boolean,System.Byte[],System.Int32,System.Int32,System.Int32@,InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.SizeIndex,System.Int32,System.Int32)">
            <summary>
            For use when the content of the element is in an array
            i.e. the stack parses the element structure and returns the values in byte arrays.
            </summary>
            -
            <param name="networkOrderInteger">Whether the stack uses network order
            for UnsignedInteger and TwosComplementInteger elements (as used in the SDP format)
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="networkOrderUuid">Whether the stack uses network order
            for Uuid elements (as used in the SDP format) 
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="buffer">The byte array containing the SDP value.
            </param>
            <param name="offset">(?Always zero).
            </param>
            <param name="length">The length of the byte array.
            (Always equals <paramref name="contentLength"/>).
            </param>
            <param name="_readLength">
            </param>
            <param name="etd">The Element Type.
            </param>
            <param name="dbgSizeIndex">(Not used).
            </param>
            <param name="contentLength">The size of the value.
            </param>
            <param name="contentOffset">(?Always zero).
            </param>
            -
            <returns>
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementLength(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)">
            <summary>
            Split a header byte into its <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> parts.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            <param name="etd">The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            value from the header byte.
            </param>
            <param name="sizeIndex">The <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            value from a header byte.
            </param>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> value from a header byte.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> field from a header byte.
            </summary>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.TypeMatchesEtd(InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ElementType)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetEtdForType(InTheHand.Net.Bluetooth.ElementType)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordParser.SkipUnhandledElementTypes">
            <summary>
            Gets or set whether the parser will attempt to skip any unknown element
            type rather than producing an error.
            </summary>
            -
            <remarks>
            <para>
            An element type is added instead with 
            <c>ElementType.</c><see cref="F:InTheHand.Net.Bluetooth.ElementType.Unknown"/> 
            and <c>ElementTypeDescriptor.</c><see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Unknown"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation">
            <summary>
            Gets or sets whether any URL elements will be converted to 
            <see cref="T:System.Uri"/> instances at parse time, or left as raw byte arrays.
            </summary>
            -
            <remarks><para>
            This is useful when the URL element is badly formatted and thus the
            parser will reject the record, setting this property to <c>true</c> will
            allow the parse to complete without attempting to decode the URL value.
            </para>
            <para>When <c>true</c> the value is stored as a array of bytes, when
            <c>false</c> it is stored as a <see cref="T:System.String"/>;
            however in earlier versions it was stored as <see cref="T:System.Uri"/>,
            and since there was often invalid content on devices (e.g. iPhone)
            this often failed.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothSocketOptionLevel">
            <summary>
            Defines additional Bluetooth socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> methods.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.RFComm">
            <summary>
            Bluetooth RFComm protocol (bt-rfcomm)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.L2Cap">
            <summary>
            Logical Link Control and Adaptation Protocol (bt-l2cap)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionLevel.Sdp">
            <summary>
            Service Discovery Protocol (bt-sdp)
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSocketException">
            <summary>
            Note that this exception will always be internal, just catch SocketException.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothRadio">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothRadio.IsPlatformSupported">
            <summary>
            Gets a value that indicates whether the 32feet.NET library can be used with the current device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            When overidden, initiates 
            lookup the SDP record with the give Service Class Id
            to find the RFCOMM port number (SCN) that the server is listening on.
            The process returns a list of port numbers.
            </summary>
            <param name="address">The remote device.
            </param>
            <param name="serviceGuid">The Service Class Id.
            </param>
            <param name="asyncCallback">callback</param>
            <param name="state">state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.EndServiceDiscovery(System.IAsyncResult)">
            <summary>
            When overidden, 
            completes the SDP Record to port number lookup process
            </summary>
            -
            <param name="ar">IAsyncResult from <see cref="M:InTheHand.Net.Bluetooth.Factory.IUsesBluetoothConnectorImplementsServiceLookup.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <remarks>
            <para>There must be at least one entry in the result list for each
            Service Record found for the specified Service Class Id.  This
            allows us to know if no records were found, or that records were
            found but none of them were for RFCOMM.
            If a particular record does not have a RFCOMM port then -1 (negative
            one should be added to the list for it).
            </para>
            <para>The process may throw an exception if an error occurs, e.g.
            the remote device did not respond.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:System.Collections.Generic.List{System.Int32}"/>
            with at least one entry for each Service Record
            found for the specified Service Class Id, the item being -1 if the
            record has no port. is .
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonBluetoothInquiry`1">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothInquiry`1.InquiryTimeoutParams.InquiryLengthAsMiliseconds">
            <summary>
            Get timeout value in Int32 milliseconds,
            as NETCF <c>WaitHandle.WaitOne</c> can't use TimeSpan.
            </summary>
            -
            <returns>An Int32 containing the timeout value in milliseconds.
            </returns>
        </member>
        <member name="T:InTheHand.ObexUri">
            <summary>
            Contains <see cref="T:System.Uri"/> helper functionality.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObex">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexPush">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) Push protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexFtp">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) FTP protocol.
            </summary>
        </member>
        <member name="F:InTheHand.ObexUri.UriSchemeObexSync">
            <summary>
            Specifies that the URI is accessed through the Object Exchange (OBEX) Sync protocol.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebResponse">
            <summary>
            Provides an OBEX implementation of the <see cref="T:System.Net.WebResponse"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.GetResponseStream">
            <summary>
            Gets the stream used to read the body of the response from the server.
            </summary>
            -
            <returns>A <see cref="T:System.IO.Stream"/> containing the body of the response.</returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.Close">
            <summary>
            Frees the resources held by the response.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebResponse.WriteFile(System.String)">
            <summary>
            Writes the contents of the response to the specified file path.
            </summary>
            <param name="fileName">The filename (including the path) from which to read.</param>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.Headers">
            <summary>
            Gets the headers associated with this response from the server.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebResponse.StatusCode">
            <summary>
            Returns a status code to indicate the outcome of the request.
            </summary>
            -
            <remarks><para>Note, if a error occurs locally then the status code
            <see cref="F:InTheHand.Net.ObexStatusCode.InternalServerError"/> is returned.
            Therefore that error code could signal local or remote errors.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothListener">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.HciVersion">
            <summary>
            HCI_Version &#x2014; Assigned Numbers &#x2014; Host Controller Interface
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_0_b">
            <summary>
            Bluetooth Core Specification 1.0b
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_1">
            <summary>
            Bluetooth Core Specification 1.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v1_2">
            <summary>
            Bluetooth Core Specification 1.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v2_0wEdr">
            <summary>
            Bluetooth Core Specification 2.0 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v2_1wEdr">
            <summary>
            Bluetooth Core Specification 2.1 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v3_0wHS">
            <summary>
            Bluetooth Core Specification 3.0 + HS
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.v4_0">
            <summary>
            Bluetooth Core Specification 4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HciVersion.Unknown">
            <summary>
            Unknown version &#x2104; probably the stack API
            does not provide the value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LmpVersion">
            <summary>
            LMP VerNr &#x2014; Assigned Numbers &#x2014; Link Manager Protocol
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_0_b">
            <summary>
            Bluetooth Core Specification 1.0b
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_1">
            <summary>
            Bluetooth Core Specification 1.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v1_2">
            <summary>
            Bluetooth Core Specification 1.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v2_0wEdr">
            <summary>
            Bluetooth Core Specification 2.0 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v2_1wEdr">
            <summary>
            Bluetooth Core Specification 2.1 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v3_0wHS">
            <summary>
            Bluetooth Core Specification 3.0 + HS
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.v4_0">
            <summary>
            Bluetooth Core Specification 4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpVersion.Unknown">
            <summary>
            Unknown version &#x2104; probably the stack API
            does not provide the value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthPairRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;BthPairRequest passes the parameters to the <c>BthSetPIN</c>
            function and creates an ACL connection. Once the connection is established,
            it calls the <c>BthAuthenticate</c> function to authenticate the device.&#x201D;
            </para>
            <para>On Windows XP/Vista platforms this calls <c>BluetoothAuthenticateDevice</c>,
            if the pin argument is set to null a Wizard is displayed to accept a PIN from the user,
            otherwise the function executes in transparent mode.
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">The device whose Link Key to retrieve.</param>
            <param name="linkKey">The 16-byte Link Key to set.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">Address of the requesting device.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.L2CapPort.L2CapDisconnectReason.XXPending">
            <summary>
            Presumably this is surfaced as a OnConnectionPending
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.AddressFamily32">
            <summary>
            Specifies additional addressing schemes that an instance of the <see cref="T:System.Net.Sockets.Socket"/> class can use.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.AddressFamily32.Bluetooth">
            <summary>
            Bluetooth address.
            </summary>
            <value>32</value>
        </member>
        <member name="F:InTheHand.Net.Sockets.AddressFamily32.Irda">
            <summary>
            IrDA address used on some Windows CE platforms (Has a different value to <see cref="T:System.Net.Sockets.AddressFamily">AddressFamily.IrDA</see>).
            </summary>
            <value>22</value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordHelper">
            <summary>
            Some useful methods for working with a SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            including creating and accessing the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            for an RFCOMM service.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetRfcommChannelElement(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetL2CapChannelElement(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetRfcommChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The Channel Number as an unsigned byte cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.GetL2CapChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The PSM number as an uint16 cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.SetRfcommChannelNumber(InTheHand.Net.Bluetooth.ServiceRecord,System.Byte)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the RFCOMM Channel number.
            </param>
            <param name="channelNumber">The Channel number to set in the record.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.SetL2CapPsmNumber(InTheHand.Net.Bluetooth.ServiceRecord,System.Int32)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <remarks>
            <para>Note: We use an <see cref="T:System.Int32"/> for the
            <paramref name="psm"/> parameter as its natural type <see cref="T:System.UInt16"/> 
            in not usable in CLS Compliant interfaces.
            </para>
            </remarks>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the L2CAP PSM value.
            </param>
            <param name="psm">The PSM value to set in the record.
            Note that although the parameter is of type <see cref="T:System.Int32"/> 
            the value must actually be in the range of a <see cref="T:System.UInt16"/>,
            see the remarks for more information.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The PSM must fit in a 16-bit unsigned integer.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateL2CapProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateRfcommProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an RFCOMM service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateGoepProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an GOEP (i.e. OBEX) service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
               ElementSequence
                  Uuid16 = GOEP
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(InTheHand.Net.Bluetooth.ServiceElement[])">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service,
            with upper layer entries.
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure at the first layer:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            One can add layers above that; remember that all layers are formed
            of an ElementSequence.  See the example below.
            </remarks>
            -
            <example>
            <code>
            var netProtoList = new ServiceElement(ElementType.ElementSequence,
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0800),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0806)
                );
            var layer1 = new ServiceElement(ElementType.ElementSequence,
                new ServiceElement(ElementType.Uuid16, Uuid16_BnepProto),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0100), //v1.0
                netProtoList
                );
            ServiceElement element = ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(
                layer1);
            </code>
            </example>
            -
            <param name="upperLayers">The list of upper layer elements, one per layer.
            As an array.
            </param>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordCreator">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.ErrorMsgSupportOnlyLength255">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord,System.Byte[])">
            <overloads>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </overloads>
            -
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object,
            into the specified byte array.
            </summary>
            -
            <remarks>
            See the other overload <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            <param name="buffer">An array of <see cref="T:System.Byte"/> for the record
            to be written to.
            </param>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            The record bytes are longer that the supplied byte array buffer.
            </exception>
            -
            <returns>The length of the record in the array of <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteAttribute(InTheHand.Net.Bluetooth.ServiceAttribute,System.Byte[],System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
            -
            <remarks>
            <para>The only oddity (as with parsing) is with the <c>TextString</c>
            type.  The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> can
            either hold the string already encoded to its array of bytes or an 
            <see cref="T:System.String"/>.  In the latter case we will always simply 
            encode the string to an array of bytes using encoding 
            <see cref="P:System.Text.Encoding.UTF8"/>.
            </para>
            <para>Currently any UUIDs in the record are written out in the form supplied,
            we should probably write a &#x2018;short-form&#x2019; equivalent if its
            a &#x2018;Bluetooth-based&#x2019; UUID e.g. <c>Uuid128</c> as <c>Uuid16</c>.
            </para>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            -
            <returns>An array of <see cref="T:System.Byte"/> containing the resultant
            record bytes.  The length of the array is the length of the record bytes.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateAttrId(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Byte[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateElement(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Int32)">
            <summary>
            Create the element in the buffer starting at offset, and return its totalLength.
            </summary>
            <param name="element">The element to create.
            </param>
            <param name="buf">The byte array to write the encoded element to.
            </param>
            <param name="offset">The place to start writing in <paramref name="buf"/>.
            </param>
            
            <returns>The total length of the encoded element written to the buffer
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteVariableLength(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.WriteFixedLength(InTheHand.Net.Bluetooth.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.MakeVariableLengthHeader(System.Byte[],System.Int32,InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CompleteHeaderWrite(InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState,System.Byte[],System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.HeaderOffset">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.Etd">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.SizeIndex">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.HeaderLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecordCreator.HeaderWriteState.widcommNeedsStoring">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events">
            <summary>
            Provides access to the Bluetooth events from the Microsoft stack on
            desktop Windows.
            </summary>
            -
            <remarks>
            <note>Supported only by the Microsoft stack on desktop Windows.
            </note>
            <para>The Microsoft Bluetooth stack on Window raises events for various
            Bluetooth actions.  We expose that feature via this class.
            </para>
            <para>Currently it raises two types of event: in-range and out-of-range
            using classes: <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            and <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs"/>.
            Both have properties <c>Device</c> which return a <c>BluetoothDeviceInfo</c>.
            Then the in-range event also includes a set of flags, which in
            Windows XP are: Address, Cod, Name, Paired, Personal, and Connected;
            more events are available in Windows 7.  These events are provided on
            the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            class via properties:
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.CurrentState"/>
            and <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.PreviousState"/>,
            and also <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.GainedStates"/> etc.
            </para>
            <para>To see the events get an instance of this class via its method
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>.
            Then one should register for the events on that instance and keep a
            reference to it.
            </para>
            <para>Note that just being in range is not enough for
            devices to know that the other is present.  Without running device
            discovery or a connection attempt the two devices will not see each
            other.  Note however that Windows XP also does not raise events when
            running device discovery (inquiry), this is fixed in Windows 7
            (probably Vista).  See
            <see href="http://32feetnetdev.wordpress.com/2010/11/15/device-discovery-improvements-on-msftwin32/">32feet blog: Device Discovery improvements on MSFT+Win32</see>
            for more information.
            </para>
            
            <para>For example when connecting and disconnecting on Windows XP to
            another device that is not paired we see:
            </para>
            <example>
            <code lang="none">
            12:23:48.9582648: InRange 000A3A6865BB 'joe',
                now 'Address, Cod, Name, Connected'
                was 'Address, Cod, Name'.
            12:24:16.8009456: InRange 000A3A6865BB 'joe',
                now 'Address, Cod, Name'
                was 'Address, Cod, Name, Connected'.}}
            </code>
            </example>
            <para>For example when connecting and then disconnecting on Windows 7
            to another v2.1 device that is paired with we see:
            </para>
            <example>
            <code lang="none">
            20:53:25.5605469: InRange 00190E02C916 'alanlt2ws',
                now 'Address, Cod, Name, Paired, Personal, Connected, SspSupported, SspPaired, Rssi, Eir'
                was 'Address, Cod, Name, Paired, Personal,            SspSupported, SspPaired, Rssi, Eir'.
            20:53:27.7949219: InRange 00190E02C916 'fred',
                now 'Address, Cod, Name, Paired, Personal,            SspSupported, SspPaired, Rssi, Eir'
                was 'Address, Cod, Name, Paired, Personal, Connected, SspSupported, SspPaired, Rssi, Eir'.}}
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.#ctor">
            <summary>
            Initialise an instance of the class.
            </summary>
            -
            <remarks>
            <para>Consider using the method <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>
            instead of calling this constructor.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.#ctor(InTheHand.Net.Bluetooth.BluetoothRadio)">
            <summary>
            Initialise an instance of the class for the specified radio.
            </summary>
            -
            <param name="microsoftWin32BluetoothRadio">
            The radio to listen for events from.
            Must be non-null and a MSFT+Win32 stack radio.
            </param>
            -
            <remarks>Note that since the Microsoft stack supports only one radio
            (controller) there is lilely no benefit in calling this constructor
            as opposed to the other constructor or method
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.GetInstance">
            <summary>
            Gets a possible shared instance of this class.
            </summary>
            -
            <remarks>
            <para>If more that one piece of code is using this class then there
            is no need for each to have a private instance.  This method allows
            them to access a shared instance.  When first called it creates a
            new instance and keeps a weak-reference to it.  Subsequent callers
            will then get the same instance.  The instance is kept alive only
            as long as at least one caller keeps a reference to it.  If no
            references are kept then the instance will be deleted and a new
            instance will be created when this method is next called.
            </para>
            </remarks>
            -
            <returns>An instance of this class.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.OnInRange(InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.InRange"/> event.
            </summary>
            -
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.OnOutOfRange(InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.OutOfRange"/> event.
            </summary>
            -
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dispose">
            <summary>
            Releases the resources used by the instance.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the instance
            and optionally releases the managed resources.
            </summary>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.InRange">
            <summary>
            &#x201C;This message is sent when any of the following attributes
            of a remote Bluetooth device has changed: the device has been
            discovered, the class of device, name, connected state, or device
            remembered state. This message is also sent when these attributes
            are set or cleared.&#x201D;
            </summary>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothWin32Events.OutOfRange">
            <summary>
            &#x201C;This message is sent when a previously discovered device
            has not been found after the completion of the last inquiry.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.BthPortDeviceInterface">
            <summary>
            &#x201C;&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.RadioInRange">
            <summary>
            &#x201C;This message is sent when any of the following attributes of a remote Bluetooth device has changed:
            the device has been discovered, the class of device, name, connected state, or device remembered state.
            This message is also sent when these attributes are set or cleared.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.RadioOutOfRange">
            <summary>
            &#x201C;This message is sent when a previously discovered device has not been found after the completion of the last inquiry.
            This message will not be sent for remembered devices.
            The BTH_ADDRESS structure is the address of the device that was not found.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.PinRequest">
            <summary>
            &#x201C;This message should be ignored by the application.
            If the application must receive PIN requests, the BluetoothRegisterForAuthentication function should be used.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.L2capEvent">
            <summary>
            &#x201C;This message is sent when an L2CAP channel between the local radio and a remote Bluetooth device has been established or terminated. 
            For L2CAP channels that are multiplexers, such as RFCOMM, this message is only sent when the underlying channel is established, 
            not when each multiplexed channel, such as an RFCOMM channel, is established or terminated.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BluetoothDeviceNotificationEvent.HciEvent">
            <summary>
            &#x201C;This message is sent when a remote Bluetooth device connects or disconnects at the ACL level.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO">
            <summary>
            Buffer associated with GUID_BLUETOOTH_L2CAP_EVENT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.bthAddress">
            <summary>
            Remote radio address which the L2CAP event is associated with
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.psm">
            <summary>
            The PSM that is either being connected to or disconnected from
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.connected">
            <summary>
            If != 0, then the channel has just been established.  If == 0, then the
            channel has been destroyed.  Notifications for a destroyed channel will
            only be sent for channels successfully established.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_L2CAP_EVENT_INFO.initiated">
            <summary>
            If != 0, then the local host iniated the l2cap connection.  If == 0, then
            the remote host initated the connection.  This field is only valid if
            connect is != 0.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO">
            <summary>
            Buffer associated with GUID_BLUETOOTH_HCI_EVENT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.bthAddress">
            <summary>
            Remote radio address which the HCI event is associated with
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.connectionType">
            <summary>
            HCI_CONNNECTION_TYPE_XXX value
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.BTH_HCI_EVENT_INFO.connected">
            <summary>
            If != 0, then the underlying connection to the remote radio has just
            been estrablished.  If == 0, then the underlying conneciton has just been
            destroyed.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.ConfigChangeCanceled">
            <summary>
            A request to change the current configuration (dock or undock) has been canceled. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.ConfigChanged">
            <summary>
            The current configuration has changed, due to a dock or undock. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.CustomEvent">
            <summary>
            A custom event has occurred. 
            </summary>
            <remarks>Windows NT 4.0 and Windows 95:  This value is not supported.</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceArrival">
            <summary>
            A device or piece of media has been inserted and is now available. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceQueryRemove">
            <summary>
            Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceQueryRemoveFailed">
            <summary>
            A request to remove a device or piece of media has been canceled. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceRemoveComplete">
            <summary>
            A device or piece of media has been removed. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceRemovePending">
            <summary>
            A device or piece of media is about to be removed. Cannot be denied. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DeviceTypeSpecific">
            <summary>
            A device-specific event has occurred. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.DevNodesChanged">
            <summary>
            A device has been added to or removed from the system. 
            </summary>
            <remarks>Windows NT 4.0 and Windows Me/98/95:  This value is not supported.</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.QueryChangeConfig">
            <summary>
            Permission is requested to change the current configuration (dock or undock). 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.Dbt.UserDefined">
            <summary>
            The meaning of this message is user-defined. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Oem">
            <summary>
            oem-defined device type
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.DevNode">
            <summary>
            devnode number
            /// </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Port">
            <summary>
            l
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Network">
            <summary>
            network resource
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.DeviceInterface">
            <summary>
            device interface class
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Events.DbtDevTyp.Handle">
            <summary>
            file system handle
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS">
            <summary>
            The BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS structure contains specific configuration information about the Bluetooth device responding to an authentication request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.deviceInfo">
            <summary>
            A BLUETOOTH_DEVICE_INFO structure that contains information about a Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationMethod">
            <summary>
            A BLUETOOTH_AUTHENTICATION_METHOD enumeration that defines the authentication method utilized by the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.ioCapability">
            <summary>
            A BLUETOOTH_IO_CAPABILITY enumeration that defines the input/output capabilities of the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationRequirements">
            <summary>
            A AUTHENTICATION_REQUIREMENTS specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.Numeric_Value_Passkey">
            <summary>
            A ULONG value used for Numeric Comparison authentication.
            or
            A ULONG value used as the passkey used for authentication.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_PIN_INFO">
            <summary>
            The BLUETOOTH_PIN_INFO structure contains information used for authentication via PIN.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BLUETOOTH_OOB_DATA_INFO">
            <summary>
            The BLUETOOTH_OOB_DATA_INFO structure contains data used to authenticate prior to establishing an Out-of-Band device pairing.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothIoCapability">
            <summary>
            The BLUETOOTH_IO_CAPABILITY enumeration defines the input/output capabilities of a Bluetooth Device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayOnly">
            <summary>
            The Bluetooth device is capable of output via display only.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayYesNo">
            <summary>
            The Bluetooth device is capable of output via a display, 
            and has the additional capability to presenting a yes/no question to the user.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.KeyboardOnly">
            <summary>
            The Bluetooth device is capable of input via keyboard.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.NoInputNoOutput">
            <summary>
            The Bluetooth device is not capable of input/output.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.Undefined">
            <summary>
            The input/output capabilities for the Bluetooth device are undefined.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties">
            <summary>
            Specifies properties of a remote Bluetooth Device.
            </summary>
            -
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Originally from Win32 "bthdef.h" and used by struct
            BTH_DEVICE_INFO.flags. The flags are named BDIF_**.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Address">
            <summary>
            The address member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Cod">
            <summary>
            The classOfDevice member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Name">
            <summary>
            The name member contains valid data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Paired">
            <summary>
            The device is a remembered and authenticated device.
            The BDIF_PERSONAL flag is always set when this flag is set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Personal">
            <summary>
            The device is a remembered device. If this flag is set and
            the BDIF_PAIRED flag is not set, the device is not authenticated.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Connected">
            <summary>
            The remote Bluetooth device is currently connected to the local radio.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.Eir">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.BR">
            <summary>
            Bluetooth Basic Rate &#x2014; i.e. traditional Bluetooth
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothDeviceInfoProperties.LE">
            <summary>
            Bluetooth Low Energy
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.ISdpDiscoveryRecordsBuffer.RecordCount">
            <summary>
            Get the number of records that the buffer contains.
            </summary>
            -
            <value>An integer containing the number of records that the buffer contains,
            may be zero.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The buffer has 
            not yet been filled with a CSdpDiscoveryRec list.
            </exception>
            -
            <remarks>
            <para>In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.ServiceClassOnly">SdpSearchScope.ServiceClassOnly</see>
            this returns the actual number of records as the filtering is done by
            the stack.  In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.Anywhere">SdpSearchScope.Anywhere</see>
            this returns the pre-filtered number of records.  We do the filtering
            so this will likely be greater that the matching number of records.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.SdpDiscoveryRecordsBuffer.RecordCount">
            <summary>
            Get the number of records that the buffer contains.
            </summary>
            -
            <value>An integer containing the number of records that the buffer contains,
            may be zero.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The buffer has 
            not yet been filled with a CSdpDiscoveryRec list.
            </exception>
            -
            <remarks>
            <para>In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.ServiceClassOnly">SdpSearchScope.ServiceClassOnly</see>
            this returns the actual number of records as the filtering is done by
            the stack.  In <see cref="F:InTheHand.Net.Bluetooth.Widcomm.SdpSearchScope.Anywhere">SdpSearchScope.Anywhere</see>
            this returns the pre-filtered number of records.  We do the filtering
            so this will likely be greater that the matching number of records.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.SetParent(InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface)">
            <summary>
            To get to HandleDeviceResponded, HandleInquiryCompleted etc
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.StartDiscovery(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            &#x201C;This function requests a service discovery for a specific device.&#x201D;
            </summary>
            -
            <remarks>
            <para>&#x201C;When the discovery is complete the derived function OnDiscoveryComplete() is called.&#x201D;
            </para>
            </remarks>
            -
            <param name="address"></param>
            <param name="serviceGuid"></param>
            <returns>&#x201C;TRUE, if discovery has started; FALSE, if discovery has not started.&#x201D;</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.GetLastDiscoveryResult(InTheHand.Net.BluetoothAddress@,System.UInt16@)">
            <summary>
            &#x201C;When multiple discovery operations are in progress, the application 
            must call GetLastDiscoveryResult() from within the OnDiscoveryComplete() 
            to determine which remote devices reported services.&#x201D;
            </summary>
            <param name="address"></param>
            <param name="p_num_recs"></param>
            <returns>&#x201C;DISCOVERY_RESULT_SUCCESS, if the discovery operation was successful.&#x201D;</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.IBtIf.ReadDiscoveryRecords(InTheHand.Net.BluetoothAddress,System.Int32,InTheHand.Net.Bluetooth.Widcomm.ServiceDiscoveryParams)">
            <summary>
            &#x201C;This function is called when discovery is complete to retrieve the records 
            received from the remote device.&#x201D;
            </summary>
            -
            <remarks>
            <para>&#x201C;Discovery results for a device are not removed until the device fails to respond to an inquiry.&#x201D;
            </para>
            </remarks>
            -
            <param name="address"></param>
            <param name="maxRecords"></param>
            <param name="args"></param>
            <returns>The discovery records read, which may have recordCount equals zero.</returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothDeviceInfo">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.#ctor(System.IntPtr)">
            <overloads>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class.
            </overloads>
            -
            <summary>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class with the given native structure.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initializes an instance of the <see cref="T:BluetoothDeviceInfo"/> class 
            for the device with the given address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Refresh">
            <summary>
            Forces the system to refresh the device information.
            </summary>
            -
            <remarks>
            See <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName"/>
            for one reason why this method is necessary.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Update">
            <summary>
            Updates the device name used to display the device, affects the local computer cache.
            </summary>
            <remarks>On Windows CE this only affects devices which are already paired.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
             
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             <para>This overload is silent on error; the other overload raises an exception
             if required
             (<see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)"/>).
             </para>
             </remarks>
             -
             <exception cref="T:System.PlatformNotSupportedException">
             Thrown if this method is called on Windows CE platforms.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <param name="throwOnError">Whether the method should raise an exception
             when 
             </param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             </remarks>
             -
             <exception cref="T:System.ComponentModel.Win32Exception">The call failed.
             </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecords(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database.
            </summary>
            -
            <remarks>
            <para>
            For instance to see whether the device has an an Serial Port services
            search for UUID <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort"/>,
            or too find all the services that use RFCOMM use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol"/>,
            or all the services use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol"/>.
            </para>
            <para>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </para>
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
            -
            <example>
            <code lang="VB.NET">
            Dim bdi As BluetoothDeviceInfo = ...
            Dim records As ServiceRecord() = bdi.GetServiceRecords(BluetoothService.RFCommProtocol)
            ' Dump each to console
            For Each curRecord As ServiceRecord In records
               ServiceRecordUtilities.Dump(Console.Out, curRecord)
            Next
            </code>
            </example>
            
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecordsUnparsed(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database,
            returning the raw byte rather than a parsed record.
            </summary>
            -
            <remarks>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>An array of array of <see cref="T:System.Byte"/>.</returns>
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.GetServiceRecordsUnparsedWindowsRaw(System.Guid)">
            <summary>
            Returns the raw results from the native call(s); the format is different 
            on Win32 versus WinCE.
            </summary>
            <remarks>
            On CE this is thus a single item which is a ElementSequence of records.
            On Win32 it is an array with each item being a record.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.ShowDialog">
            <summary>
            Displays information about the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.DeviceAddress">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.DeviceName">
            <summary>
            Gets a name of a device.
            </summary>
            -
            <remarks>
            <para>Note, that due the way in which Bluetooth device discovery works,
            the existence and address of a device is known first, but a separate
            query has to be carried out to find whether the device also has a name.
            This means that if a device is discovered afresh then this property might
            return only a text version of the device&#x2019;s address and not its
            name, one can also see this in the Windows&#x2019; Bluetooth device dialogs
            where the device appears first with its address and the name is later
            updated.  To see the name, wait for some time and access this property again
            having called <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/>
            in the meantime.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.ClassOfDevice">
            <summary>
            Returns the Class of Device of the remote device.
            </summary>
            -
            <remarks>
            <para>
            Some CE 4.2 devices such as original PPC2003 devices don't have the native 
            API on which this property depends &#x2014; it was added as part of a hotfix. 
            The property will always return zero in such a case.  On WM/CE we also 
            attempt to get the CoD value as part of the discovery process; this is 
            of course only works for devices in-range.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Rssi">
            <summary>
            Returns the signal strength for the Bluetooth connection with the peer device.
            <para><b>Requires Windows Mobile 5.0 or Windows Embedded CE 6.0</b></para>
            </summary>
            -
            <value>Valid values for this property are -128 to 128.  It returns
            <see cref="F:System.Int32.MinValue">Int32.MinValue</see> on failure.
            </value>
            -
            <remarks>
            <para>This method requires an open connection to the peer device.
            If there is no active connection, then it will attempt to create one.
            </para>
            <note type="caution">Requires Windows Mobile 5.0 or Windows Embedded CE 6.0</note>
            <para>As well as the &#x2018;no connection&#x2019; issue, the native method
            on which the property depends is only present in later OS versions, so it 
            will fail on earlier devices.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.InstalledServices">
            <summary>
            Returns a list of services which are already installed for use on the calling machine.
            </summary>
            <remarks>
            <para>This property returns the services already configured for use. 
            Those are the ones that are checked in the &#x201C;Services&#x201D; tab
            of the device&#x2019;s property sheet in the Bluetooth Control panel.
            I presume the behaviour is similar on CE.
            </para>
            <para>Will only return available services for paired devices.
            </para>
            <para>It of course will also only returns standard system services which Windows understands.
            (On desktop Windows this method calls the OS function <c>BluetoothEnumerateInstalledServices</c>).
            </para>
            <para>To see all the services that a device advertises use the 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected.
            </summary>
            <remarks>Not supported under Windows CE and will always return false.</remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device. Not all remembered devices are authenticated.
            </summary>
            -
            <remarks>Now supported under Windows CE — will return the same as 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>.
            </remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded. All authenticated devices are remembered.
            </summary>
            <remarks>Is now supported on both CE and XP.</remarks>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothDeviceInfo.Remembered"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothClient">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.DiscoDevsParams">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream">
            <exclude/>
            <summary>
            
            </summary>
            -
            <remarks>
            <para>Sub-class must call various methods at the following events:
            <list type="bullet">
            <item><term>open</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)"/>
            or <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/> on failure</description>
            </item>
            <item><term>close</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/></description>
            </item>
            <item><term>data arrival</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandlePortReceive(System.Byte[])"/></description>
            </item>
            <item><term>flow control off</term>
            <description><see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.FreePendingWrites"/></description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.EnsureOpenForWrite">
            <summary>
            Fails if state is not Connected.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.EnsureOpenForRead">
            <summary>
            Fails if state is not Connected or PeerDidClose.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.RemovePortRecords">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOtherPreDestroy(System.Boolean)">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)">
            <summary>
            Called from CloseInternal and Dispose;
            RemovePortRecords is called before from both places.
            Dispose then calls DoOtherPreDestroy and DoPortDestroy in that order.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortDestroy(System.Boolean)">
            <summary>
            <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoPortClose(System.Boolean)"/>
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOtherSetup(InTheHand.Net.BluetoothEndPoint,System.Int32)">
            <summary>
            Called before DoOpenClient.
            For instance is empty on BTPS, on Widcomm it calls SetScnForPeerServer and SetSecurityLevelClient.
            </summary>
            <param name="bep">Endpoint</param>
            <param name="scn">Channel number</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoOpenClient(System.Int32,InTheHand.Net.BluetoothAddress)">
            <summary>
            Starts the connect process.  The async completion should call
            either <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)"/> or <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})"/>.
            </summary>
            <param name="scn">scn</param>
            <param name="addressToConnect">addr</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECTED(System.String)">
            <summary>
            Call when connection is successfully made.
            </summary>
            <param name="eventIdToString">Used for logging etc.  Pass a string
            containing the name of the stack's event/status that occurred.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.DoIsConnected(InTheHand.Net.BluetoothAddress@)">
            <summary>
            Get the remote address.
            </summary>
            -
            <param name="p_remote_bdaddr">On return contains the address to which we are connected.
            </param>
            -
            <returns><see langword="true"/> if connected, but we ignore the result.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.HandleCONNECT_ERR(System.String,System.Nullable{System.Int32})">
            <summary>
            Call when connection is un-successfully made (fails),
            and also when the connection closes.
            </summary>
            <param name="eventIdToString">Used for logging etc.  Pass a string
            containing the name of the stack's event/status that occurred.
            </param>
            <param name="socketErrorCode">The socket error code for this failure
            -- known.
            Pass for instance a value from <see cref="T:System.Net.Sockets.SocketError"/>
            as an <see cref="T:System.Int32"/>;
            or <see langword="null"/> respectively.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.CloseInternal(InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.BeginReadParameters}[]@,InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.BeginReadParameters}[]@)">
            <summary>
            Used: 1. when we get CONNECT_ERR from the stack, and POSSIBLY 2. when we close the 
            stream to do consumer timeout (SO_RCVTIMEO/etc).
            </summary>
            <param name="allRead">Out: to call <see cref="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.AbortIf(System.Collections.Generic.IList{InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}}, System.Collections.Generic.IList{InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}})"/>
            on.</param>
            <param name="allWrite">Out: to call <see cref="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.AbortIf(System.Collections.Generic.IList{InTheHand.Net.AsyncResult{System.Int32,InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}}, System.Collections.Generic.IList{InTheHand.Net.AsyncNoResult{InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStream.BeginReadParameters}})"/>
            on.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.CloseInternalAndAbort_willLock">
            <summary>
            Close the connection from the network/stack side (not from the consumer side).
            </summary>
            -
            <remarks>
            <para>When we call Close the object is disposed and outstanding and
            new operations fail with ObjectDisposedException.  This method
            instead closes the connection from the network/stack side and thus
            operations fail with an IO error etc.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.TryBondingIf_inLock(InTheHand.Net.BluetoothAddress,System.Int32,System.Exception@)">
            <summary>
            DEPRECATED, should return false.
            </summary>
            <returns>Whether Bonding was attempted and thus the connect should be retried.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Factory.CommonRfcommStream.Connected">
            <summary>
            Used by Client, note from MSDN Socket.Connected:
            "Gets a value that indicates whether a Socket is connected to a remote host as of the last Send or Receive operation."
            </summary>
            -
            <remarks>
            <para>From MSDN <see cref="P:System.Net.Sockets.Socket.Connected"/>:
            "Gets a value that indicates whether a Socket is connected to a remote host as of the last Send or Receive operation."
            From MSDN <see cref="P:System.Net.Sockets.TcpClient.Connected"/>:
            "true if the Client socket was connected to a remote resource as of the most recent operation; otherwise, false."
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.BluetoothEndPoint">
            <summary>
            Represents a network endpoint as a Bluetooth address and 
            a Service Class Id and/or a port number.
            </summary>
            -
            <remarks>
            <para>The BluetoothEndPoint class contains the host, service class id and port 
            information needed by an application to connect to a service on a host.
            By combining the host's Bluetooth address and class id or port number, 
            the BluetoothEndPoint class forms a connection point to a service.
            </para>
            <para>When used for instance when connecting with <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, 
            if the port is specified then the connection is made to that port, 
            otherwise a SDP lookup is done for a record with the class specified in 
            the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MinPort">
            <summary>
            Specifies the minimum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MaxPort">
            <summary>
            Specifies the maximum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MinScn">
            <summary>
            The minimum valid Server Channel Number, 1.
            </summary>
            <remarks>
            <para>
            Bluetooth's rfcomm.pdf: Part F:1 -- RFCOMM with TS 07.10 -- Serial Port Emulation
            </para>
            <para>
            Section 5.4:
            </para>
            <list type="table">
               &#x201C;The RFCOMM server channel number is a [five-bit field].
               Server applications registering with an RFCOMM service interface are assigned a
               Server Channel number in the range 1…30. [0 and 31 should not be used since
               the corresponding DLCIs are reserved in TS 07.10]&#x201D;
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothEndPoint.MaxScn">
            <summary>
            The maximum valid Server Channel Number, 30.
            </summary>
            <remarks><see cref="F:InTheHand.Net.BluetoothEndPoint.MinScn"/>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> class with the specified address and service.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">The Bluetooth service to use.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> class with the specified address, service and port number.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">The Bluetooth service to use.</param>
            <param name="port">Radio channel to use, -1 for any.</param>
            -
            <remarks>
            <para>See the <see cref="T:InTheHand.Net.BluetoothEndPoint"/> documentation for 
            how the combination of Service and Port are used when connecting with 
            BluetoothClient.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns>A <see cref="T:System.Net.SocketAddress"/> instance containing the socket address for the endpoint.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress">The <see cref="T:System.Net.SocketAddress"/> to use for the endpoint.</param>
            <returns>An <see cref="T:System.Net.EndPoint"/> instance using the specified socket address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.BluetoothEndPoint"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.ToString">
            <summary>
            Returns the string representation of the BluetoothEndPoint.
            </summary>
            <remarks>
            <para>
            We try to follow existing examples where possible; JSR-82 and similar
            use a URI of the form:</para>
            <code lang="none">bluetooth://xxxxxxxxxxxx:xx</code>
            or:
            <code lang="none">bluetooth://xxxxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code>
            or in some serialport only situations:
            <code lang="none">btspp://</code>
            <para>So we follow that pattern here, but of course without the URI prefix.
            If the form with the URI is required then the prefix can simply be appended.</para>
            <para>
            If the port is non default then we use that, otherwise just the full guid.
            </para>
            <para>Some examples are:</para>
            To the ObexObjectPush service:
            <code lang="none">"04E2030405F6:0000110500001000800000805f9b34fb"</code>
            To the SerialPort service:
            <code lang="none">"04E2030405F6:0000110100001000800000805f9b34fb"</code>
            With an Empty service GUID:
            <code lang="none">"04E2030405F6:00000000000000000000000000000000"</code>
            With port 9:
            <code lang="none">"04E2030405F6:9"</code>
            </remarks>
            <returns>The string representation of the BluetoothEndPoint.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Clone">
            <summary>
            Creates a copy of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/>.
            </summary>
            <remarks>Creates a copy including of the internal <see cref="T:InTheHand.Net.BluetoothAddress"/>
            </remarks>
            <returns>A copy of the <see cref="T:InTheHand.Net.BluetoothEndPoint"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.AddressFamily">
            <summary>
            Gets the address family of the Bluetooth address. 
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Address">
            <summary>
            Gets or sets the Bluetooth address of the endpoint.
            </summary>
            <seealso cref="T:InTheHand.Net.BluetoothAddress"/>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Service">
            <summary>
            Gets or sets the Bluetooth service to use for the connection.
            </summary>
            <seealso cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Port">
            <summary>
            Gets or sets the service channel number of the endpoint.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.HasPort">
            <summary>
            Gets whether a <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> is set.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor">
            <summary>
            Represents the type of the element in the SDP record binary format, 
            and is stored as the higher 5 bits of the header byte.
            </summary>
            <remarks>
            There is an identifier for each major type: String vs UUID vs unsigned integer.
            There are various sizes of UUID and integer type for instance, the resultant
            types are listed in enum <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.SizeIndex">
            <summary>
            Represents the size of the SDP element in the record binary format,
            and is stored as the lower 3 bits of the header byte.
            </summary>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ElementType">
            <summary>
            Represents the types that an SDP element can hold.
            </summary>
            <remarks>
            <para>
            (Is a logical combination of the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            field which defines the major type and the size field in the binary format; and
            the size field being made up of the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            field and any additional length bytes.
            </para>
            <para>Note, the values here are not the numerical bitwise combination of the 
            <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> fields as they appear 
            in the encoded protocol.  It was simpler to assign arbitrary values here as 
            firstly we wanted zero to be the 'Unknown' value, which conflicts with Nil's
            bitwise value; but also because the TextString, sequence and Url types can 
            have various SizeIndex values and thus they wouldn&#x2019;t be easily 
            representable by one value here).
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient">
            <summary>
            Provides client connections for Bluetooth network services with Widcomm stack.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.CommonDiscoveryBluetoothClient">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonDiscoveryBluetoothClient.ConvertBthInquiryParams(System.Int32,System.TimeSpan,System.Byte@,System.Byte@)">
            <summary>
            Convert the user Inquiry parameters to the formats used by HCI.
            </summary>
            <param name="maxDevices">The <c>maxDevices</c> parameter from e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Bool,System.Bool,System.Bool,System.Bool)"/>.
            </param>
            <param name="inquiryLength">The <see cref="P:InTheHand.Net.Sockets.BluetoothClient.InquiryLength"/> property
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </param>
            <param name="hciMaxResponses">On return contains the Num_Responses value to be passed to the HCI Inquiry command.
            If greater that 255 or less than zero, the value 0 will be returned.
            HCI uses zero as "Unlimited".
            </param>
            <param name="hciInquiryLength">On return contains the Inquiry_Length value to be passed to the HCI Inquiry command.
            Is scaled by the divisor 1.28secs
            and if not in range 1 to 0x30 inclusive is set to 10.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            When overidden, initiates 
            lookup the SDP record with the give Service Class Id
            to find the RFCOMM port number (SCN) that the server is listening on.
            The process returns a list of port numbers.
            </summary>
            <param name="address">The remote device.
            </param>
            <param name="serviceGuid">The Service Class Id.
            </param>
            <param name="asyncCallback">callback</param>
            <param name="state">state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.EndServiceDiscovery(System.IAsyncResult)">
            <summary>
            When overidden, 
            completes the SDP Record to port number lookup process
            </summary>
            -
            <param name="ar">IAsyncResult from <see cref="M:InTheHand.Net.Bluetooth.Factory.CommonBluetoothClient.BeginServiceDiscovery(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <remarks>
            <para>There must be at least one entry in the result list for each
            Service Record found for the specified Service Class Id.  This
            allows us to know if no records were found, or that records were
            found but none of them were for RFCOMM.
            If a particular record does not have a RFCOMM port then -1 (negative
            one should be added to the list for it).
            </para>
            <para>The process may throw an exception if an error occurs, e.g.
            the remote device did not respond.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:System.Collections.Generic.List{System.Int32}"/>
            with at least one entry for each Service Record
            found for the specified Service Class Id, the item being -1 if the
            record has no port. is .
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient.#ctor(InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStreamBase,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used by WidcommBluetoothListener to return the newly accepted connection.
            </summary>
            -
            <param name="strm">The WidcommRfcommStream containing the newly connected 
            RfCommPort.
            </param>
            <param name="factory">Factory to use in GetRemoteMachineName etc.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothClient.ReadKnownDeviceFromTheRegistry">
            <summary>
            ... Allow the tests to disable the Registry lookup.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.BluetoothFactory">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.BluetoothFactory.GetTheFactoryOfTypeOrDefault``1">
            <summary>
            PRE-RELEASE
            Get the instance of the given factory type -- if it exists.
            </summary>
            -
            <typeparam name="TFactory">The factory type e.g.
            <see cref="T:InTheHand.Net.Bluetooth.SocketsBluetoothFactory"/>
            or <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase"/>
            etc.
            </typeparam>
            -
            <returns>The instance of the given type or <c>null</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.BluetoothFactory.GetTheFactoryOfTypeOrDefault(System.Type)">
            <summary>
            PRE-RELEASE
            Get the instance of the given factory type -- if it exists.
            </summary>
            -
            <param name="factoryType">The factory type e.g.
            <see cref="T:InTheHand.Net.Bluetooth.SocketsBluetoothFactory"/>
            or <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase"/>
            etc.
            </param>
            -
            <returns>The instance of the given type or <c>null</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog">
            <summary>
            Provides a form to select an available Bluetooth device.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Reset">
            <summary>
            Resets the properties of the <see cref="T:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog"/> to their default values.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowCustomDialog">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns>true if the dialog box was successfully run; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.AddNewDeviceWizard">
            <summary>
            If TRUE, invokes the Add New Device Wizard.
            </summary>
            <remarks>Supported only on Windows XP/Vista with Microsoft stack.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.SkipServicesPage">
            <summary>
            If TRUE, skips the Services page in the Add New Device Wizard.
            </summary>
            <remarks>Supported only on Windows XP/Vista with Microsoft stack.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.Info">
            <summary>
            Gets or sets the information text.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ClassOfDevices">
            <summary>
            Array of class of devices to find.
            </summary>
            <remarks>Clear the collection to return all devices.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.SelectedDevice">
            <summary>
            Gets the selected Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowAuthenticated">
            <summary>
            If TRUE, authenticated devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowRemembered">
            <summary>
            If TRUE, remembered devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowUnknown">
            <summary>
            If TRUE, unknown devices are shown in the picker.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ForceAuthentication">
            <summary>
            If TRUE, forces authentication before returning.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly">
            <summary>
            If TRUE, only devices which are currently discoverable are shown in the picker.
            </summary>
            <remarks>
            <note>Does <strong>not</strong> work on the Microsoft stack on desktop Windows.
            There, when true the dialog will not open and will return an error to the caller.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.DiscoverableOnly">
            <summary>
            Obsolete, use <see cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
            instead.
            If TRUE, only devices which are currently discoverable are shown in the picker.
            </summary>
            <remarks>
            <para>Obsolete, use <see cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
            instead.
            </para>
            </remarks>
            <seealso cref="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.ShowDiscoverableOnly"/>
        </member>
        <member name="P:InTheHand.Windows.Forms.SelectBluetoothDeviceDialog.DeviceFilter">
             <summary>
             Set a function that will be called for each device
             that returns whether to include the device in the list or not.
             </summary>
             -
             <value>The function to call for each device.
             The function should returns <c>true</c> if the device is to be included or <c>false</c> if not.
             Pass <c>null</c> to the property to clear the filter function.
             </value>
             -
             <remarks>
             <para>The callback method is called for each device as it is 
             being added to the dialog box.  If the function returns <c>false</c> it 
             won't be added, otherwise it will be added and displayed. The 
             information about each device is provided as a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
             instance which will contain all the information about the device 
             that the discovery process knows and will also include any 
             information from the remembered/authenticated/paired devices. 
             Note that prior to Bluetooth v2.1 a separate query has to be 
             carried out to find whether the device also has a name, so unless 
             both devices are v2.1 or later then it&apos;s likely that the 
             name won't be included in the first discovery. 
             <see href="http://32feet.codeplex.com/wikipage?title=DeviceName%20and%20Discovery"/>
             </para>
             </remarks>
             -
             <example>
                 '......
                 Dim dlg As New InTheHand.Windows.Forms.SelectBluetoothDeviceDialog()
                 dlg.DeviceFilter = AddressOf FilterDevice
                 Dim rslt As DialogResult = dlg.ShowDialog()
                 '...... 
            
             Shared Function FilterDevice(ByVal dev As BluetoothDeviceInfo) As Boolean
                 Dim rslt As DialogResult = MessageBox.Show("Include this device " &amp; dev.DeviceAddress.ToString &amp; " " &amp; dev.DeviceName, "FilterDevice", MessageBoxButtons.YesNo)
                 Dim ret As Boolean = (DialogResult.Yes = rslt)
                 Return ret
             End Function
             </example>
        </member>
        <member name="T:InTheHand.Net.BluetoothAddress">
            <summary>
            Represents a Bluetooth device address.
            </summary>
            <remarks>The BluetoothAddress class contains the address of a bluetooth device.</remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.IacFirst">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.IacLast">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.Liac">
            <summary>
            Limited Inquiry Access Code.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.Giac">
            <summary>
            General Inquire Access Code.
            The default inquiry code which is used to discover all devices in range.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            <param name="address"><see cref="T:System.Int64"/> representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            -
            <remarks>
            <para>Note: The address should be supplied in little-endian order on the
            current Windows platform (which is little-endian).
            For forward compatibility it would be safer to use the 
            <see cref="M:InTheHand.Net.BluetoothAddress.Parse(System.String)"/> method, 
            which will be correct for all platforms.
            Or consider
            <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/>
            or 
            <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/>.
            
            </para>
            </remarks>
            -
            <param name="address">Address as 6 byte array.</param>
            <exception cref="T:System.ArgumentNullException">address passed was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">address passed was not a 6 byte array.</exception>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.BluetoothAddress"/> from an Array of <see cref="T:System.Byte"/>
            where the array is in standard order.
            </summary>
            -
            <remarks>
            <para>Different protocol stacks have different ways of storing a
            Bluetooth Address.   Some use an array of bytes e.g. "byte[6]",
            which means that the first byte of the address comes first in
            memory (which we&#x2019;ll call big-endian format).  Others
            e.g. the Microsoft stack use a long integer (e.g. uint64) which
            means that the *last* byte of the address come comes first in
            memory (which we&#x2019;ll call little-endian format)
            </para>
            <para>This method creates an address for the first form.
            See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/> for the second form.
            </para>
            </remarks>
            -
            <param name="address">An Array of <see cref="T:System.Byte"/>
            with the Bluetooth Address ordered as described above.
            </param>
            -
            <returns>The resultant <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.BluetoothAddress"/> from an Array of <see cref="T:System.Byte"/>
            where the array is in reverse order.
            </summary>
            -
            <remarks>
            <para>Different protocol stacks have different ways of storing a
            Bluetooth Address.   Some use an array of bytes e.g. "byte[6]",
            which means that the first byte of the address comes first in
            memory (which we&#x2019;ll call big-endian format).  Others
            e.g. the Microsoft stack use a long integer (e.g. uint64) which
            means that the *last* byte of the address come comes first in
            memory (which we&#x2019;ll call little-endian format)
            </para>
            <para>This method creates an address for the second form.
            See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromLittleEndian(System.Byte[])"/> for the first form.
            </para>
            </remarks>
            -
            <param name="address">An Array of <see cref="T:System.Byte"/>
            with the Bluetooth Address ordered as described above.
            </param>
            -
            <returns>The resultant <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.TryParse(System.String,InTheHand.Net.BluetoothAddress@)">
            <summary>
            Converts the string representation of an address to it's <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent to the address contained in s, if the conversion succeeded, or null (Nothing in Visual Basic) if the conversion failed.
            The conversion fails if the s parameter is null or is not of the correct format.</param>
            <returns>true if s is a valid Bluetooth address; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Parse(System.String)">
            <summary>
            Converts the string representation of a Bluetooth address to a new <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <returns>New <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.</returns>
            <remarks>Address must be specified in hex format optionally separated by the colon or period character e.g. 000000000000, 00:00:00:00:00:00 or 00.00.00.00.00.00.</remarks>
            <exception cref="T:System.ArgumentNullException">bluetoothString is null.</exception>
            <exception cref="T:System.FormatException">bluetoothString is not a valid Bluetooth address.</exception>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArray">
            <summary>
            Returns the value as a byte array.
            </summary>
            -
            <remarks>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </remarks>
            -
            <returns>An array of byte</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArrayLittleEndian">
            <summary>
            Returns the value as a byte array,
            where the array is in reverse order.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/> for discussion of
            different stack#x2019;s storage formats for Bluetooth Addresses.
            </para>
            <para>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </para>
            </remarks>
            -
            <returns>An array of byte of length six representing the Bluetooth address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArrayBigEndian">
            <summary>
            Returns the value as a byte array,
            where the array is in standard order.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.BluetoothAddress.CreateFromBigEndian(System.Byte[])"/> for discussion of
            different stack#x2019;s storage formats for Bluetooth Addresses.
            </para>
            <para>In previous versions this returned the internal array, it now
            returns a copy.  Addresses should be immutable, particularly for the
            None const!
            </para>
            </remarks>
            -
            <returns>An array of byte of length six representing the Bluetooth address.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToInt64">
            <summary>
            Returns the Bluetooth address as a long integer.
            </summary>
            -
            <returns>An <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.BluetoothAddress"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothAddress"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.BluetoothAddress"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Equality(InTheHand.Net.BluetoothAddress,InTheHand.Net.BluetoothAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.BluetoothAddress"/> objects are equal.<para><b>New in v1.5</b></para>
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the values of the two instance are equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Inequality(InTheHand.Net.BluetoothAddress,InTheHand.Net.BluetoothAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.BluetoothAddress"/> objects are not equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the value of the two instance is different;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString">
            <summary>
            Converts the address to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
            <remarks>The default return format is without a separator character 
            - use the <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            overload for more formatting options.</remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this address.
            The format parameter can be "N", "C", or "P".
            If format is null or the empty string (""), "N" is used.</param>
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/>.</returns>
            <remarks><list type="table">
            <listheader><term>Specifier</term><term>Format of Return Value </term></listheader>
            <item><term>N</term><term>12 digits: <para>XXXXXXXXXXXX</para></term></item>
            <item><term>C</term><term>12 digits separated by colons: <para>XX:XX:XX:XX:XX:XX</para></term></item>
            <item><term>P</term><term>12 digits separated by periods: <para>XX.XX.XX.XX.XX.XX</para></term></item>
            </list></remarks>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.None">
            <summary>
            Provides a null Bluetooth address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this 
            <see cref="T:InTheHand.Net.BluetoothAddress"/> instance, according to the provided format specifier.
            </summary>
            -
            <param name="format">A single format specifier that indicates how to format the value of this Address.
            See <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </param>
            <param name="formatProvider">Ignored.
            </param>
            -
            <returns>A <see cref="T:System.String"/> representation of the value of this
            <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
            -
            <remarks>See <see cref="M:InTheHand.Net.BluetoothAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Clone">
            <summary>
            Creates a copy of the <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </summary>
            <remarks>Creates a copy including of the internal byte array.
            </remarks>
            <returns>A copy of the <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.BluetoothAddress.Sap">
            <summary>
            Significant address part.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothAddress.Nap">
            <summary>
            Non-significant address part.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothRadio">
            <summary>
            Represents a Bluetooth Radio device.
            </summary>
            <remarks>Allows you to query properties of the radio hardware and set the mode.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.AllRadios">
            <summary>
             Gets an array of all Bluetooth radios on the system.  
            </summary>
            <remarks>Under Windows CE this will only ever return a single <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            <para>If the device has a third-party stack this property will return an empty collection</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.PrimaryRadio">
            <summary>
            Gets the primary <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/>.
            </summary>
            <remarks>For Windows CE based devices this is the only <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/>, for Windows XP this is the first available <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            <para>If the device has a third-party stack this property will return null</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.IsSupported">
            <summary>
            Gets a value that indicates whether the 32feet.NET library can be used with the current device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.StackFactory">
            <summary>
            Gets a class factory for creating client and listener instances on a particular stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Remote">
            <summary>
            Gets whether the radio is on a Bluetooth stack on a remote machine.
            </summary>
            -
            <value>Is <see langword="null"/> if the radio is on to the local
            machine, otherwise it&#x2019;s the name of the remote machine to which the
            radio is attached.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Handle">
            <summary>
            Gets the handle for this radio.
            </summary>
            <remarks>Relevant only on Windows XP.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HardwareStatus">
            <summary>
            Returns the current status of the Bluetooth radio hardware.
            </summary>
            <value>A member of the <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HardwareStatus"/> enumeration.</value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">
            <summary>
            Gets or Sets the current mode of operation of the Bluetooth radio.
            </summary>
            <remarks>
            <para><strong>Microsoft CE/WM</strong></para>
            This setting will be persisted when the device is reset.
            An Icon will be displayed in the tray on the Home screen and a ?Windows Mobile device will emit a flashing blue LED when Bluetooth is enabled.
            
            <para><strong>Widcomm Win32</strong></para>
            <para>Is supported.
            </para>
            
            <para><strong>Widcomm CE/WM</strong></para>
            <para>Get and Set both supported.
            </para>
            <list type="table">
            <listheader><term>Mode</term><term>Get</term><term>Set</term>
            </listheader>
            <item><term>PowerOff</term><term>Disabled or non-connectable</term>
            <term>CONNECT_ALLOW_NONE</term>
            </item>
            <item><term>Connectable</term><term>Connectable</term>
            <term>CONNECT_ALLOW_ALL, note not CONNECT_ALLOW_PAIRED.</term>
            </item>
            <item><term>Discoverable</term><term>Discoverable</term>
            <term>Plus also discoverable.</term>
            </item>
            </list>
            <para>Note also that when the Widcomm stack is disabled/off
            we report <c>PowerOff</c> (not in 2.4 and earlier), but
            we can't turn put it in that mode from the library.
            Neither can we turn it back on, <strong>except</strong> that
            it happens when the application first uses Bluetooth!
            </para>
            
            <para><strong>Widcomm Win32</strong></para>
            <para>Set is not supported.  There's no Widcomm API support.
            </para>
            
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LocalAddress">
            <summary>
            Get the address of the local Bluetooth radio device.
            </summary>
            -
            <remarks><para>The property can return a <see langword="null"/> value in
            some cases.  For instance on CE when the radio is powered-off the value 
            will be <see>null</see>.</para>
            </remarks>
            -
            <value>The address of the local Bluetooth radio device.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Name">
            <summary>
            Returns the friendly name of the local Bluetooth radio.
            </summary>
            -
            <remarks>
            <para>Devices normally cache the remote device name, only reading it the first
            time the remote device is discovered.  It is generally not useful then to change
            the name to provide a status update.  For instance on desktop Windows
            with the Microsoft stack we haven't found a good way for the name to be
            flushed so that it is re-read, even deleting the device didn't flush the
            name if I remember correctly.
            </para>
            <para>Currently read-only on Widcomm stack.  Probably could be supported,
            let us know if you need this function.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.ClassOfDevice">
            <summary>
            Returns the Class of Device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Manufacturer">
            <summary>
            Returns the manufacturer of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothRadio"/> device.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion">
            <summary>
            Bluetooth Version supported by the Host Controller Interface implementation.
            </summary>
            -
            <remarks>
            <para>There are five fields returned by the Read Local Version Information
            HCI command: HCI Version, HCI Revision, LMP Version,
            Manufacturer_Name, and LMP Subversion.
            We expose all five, but not all platforms provide access to them all.
            The Microsoft stack on desktop Windows exposes all five,
            except for Windows XP which only exposes the Manufacturer
            and LmpSubversion values.  Bluetopia apparently exposes none of them.
            The Microsoft stack on Windows Mobile, Widcomm on both platforms,
            BlueSoleil, and BlueZ expose all five.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciRevision">
            <summary>
            Manufacture's Revision number of the HCI implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LmpVersion">
            <summary>
            Bluetooth Version supported by the Link Manager Protocol implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LmpSubversion">
            <summary>
            Manufacture's Revision number of the LMP implementation.
            </summary>
            <remarks>
            See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.HciVersion"/> for more information.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.SoftwareManufacturer">
            <summary>
            Returns the manufacturer of the Bluetooth software stack running locally.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.DecoratorNetworkStream">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.ObexListener">
            <summary>
            Provides a simple, programmatically controlled OBEX protocol listener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.#ctor">
            <overloads>
            Initializes a new instance of the ObexListener class.
            </overloads>
            -
            <summary>
            Initializes a new instance of the ObexListener class using the Bluetooth transport.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.#ctor(InTheHand.Net.ObexTransport)">
            <summary>
            Initializes a new instance of the ObexListener class specifiying the transport to use.
            </summary>
            -
            <param name="transport">Specifies the transport protocol to use.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Start">
            <summary>
            Allows this instance to receive incoming requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Stop">
            <summary>
            Causes this instance to stop receiving incoming requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.Close">
            <summary>
            Shuts down the ObexListener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListener.GetContext">
            <summary>
            Waits for an incoming request and returns when one is received.
            </summary>
            -
            <remarks>
            <para>This method blocks waiting for a new connection.  It will
            return when a new connection completes or 
            <see cref="M:InTheHand.Net.ObexListener.Stop"/>/<see cref="M:InTheHand.Net.ObexListener.Close"/>
            has been called.
            </para>
            </remarks>
            -
            <returns>Returns a <see cref="T:InTheHand.Net.ObexListenerContext"/>
            or <see langword="null"/> if
            <see cref="M:InTheHand.Net.ObexListener.Stop"/>/<see cref="M:InTheHand.Net.ObexListener.Close"/>
            has been called.
            </returns>
        </member>
        <member name="P:InTheHand.Net.ObexListener.Authenticate">
            <summary>
            Get or set whether the transport connection (e.g. Bluetooth) will
            require Authentication.
            </summary>
            -
            <remarks>
            <para>Only Bluetooth supports this, TCP/IP and IrDA do not.
            On Bluetooth this uses <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Authenticate">BluetoothListener.Authenticate</see>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListener.Encrypt">
            <summary>
            Get or set whether the transport connection (e.g. Bluetooth) will
            require Encryption.
            </summary>
            -
            <remarks>
            <para>Only Bluetooth supports this, TCP/IP and IrDA do not.
            On Bluetooth this uses <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Encrypt">BluetoothListener.Encrypt</see>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListener.IsListening">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Net.ObexListener"/> has been started.
            </summary>
        </member>
        <member name="M:InTheHand.Net.AsyncResult`1.SetAsCompletedWithResultOf(InTheHand.SystemCore.Func{`0},System.Boolean)">
            <summary>
            Get the results of the operation from the specified function
            and set the operation as completed,
            or if getting the results fails then set the corresponding error
            completion.
            </summary>
            -
            <remarks>
            <para>The pattern that comes to mind when calling
            <see cref="M:SetAsCompleted(TResult,AsyncResultCompletion)"/> is
            the incorrect:
            <code>try {
               var result = SomeStatementsAndFunctionCallsToGetTheResult(...);
               ar.SetAsCompleted(result, false);
            } catch (Exception ex) {
               ar.SetAsCompleted(ex, false);
            }
            </code>
            That is wrong because if the user callback fails with an exception
            then we'll catch it and try to call SetAsCompleted a second time!
            </para>
            <para>We need to instead call SetAsCompleted outside of the try
            block.  This method provides that pattern.
            </para>
            </remarks>
            -
            <param name="getResultsOrThrow">A delegate containing the function
            to call to get the result.
            It should throw an exception in error cases.
            </param>
            <param name="completedSynchronously"></param>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Manufacturer">
            <summary>
            Manufacturer codes.
            </summary>
            <remarks>Defined in Bluetooth Specifications <see href="https://www.bluetooth.org/Technical/AssignedNumbers/identifiers.htm"/>.</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
            event.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo[],System.Object)">
            <summary>
            Initialise a new instance.
            </summary>
            -
            <param name="devices">The result, may be empty but not null.
            </param>
            <param name="userState">Any user state object.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            Initialise a new instance.
            </summary>
            -
            <param name="exception">The resultant error.
            </param>
            <param name="userState">Any user state object.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs.Devices">
            <summary>
            Gets the list of discovered Bluetooth devices.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothComponent">
             <summary>
             Provides simple access to asynchronous methods on Bluetooth features, for
             instance to background device discovery.
             </summary>
             -
             <example>
             <code lang="VB.NET">
             Public Sub DiscoDevicesAsync()
                 Dim bco As New BluetoothComponent()
                 AddHandler bco.DiscoverDevicesProgress, AddressOf HandleDiscoDevicesProgress
                 AddHandler bco.DiscoverDevicesComplete, AddressOf HandleDiscoDevicesComplete
                 bco.DiscoverDevicesAsync(255, True, True, True, False, 99)
             End Sub
            
             Private Sub HandleDiscoDevicesProgress(ByVal sender As Object, ByVal e As DiscoverDevicesEventArgs)
                 Console.WriteLine("DiscoDevicesAsync Progress found {0} devices.", e.Devices.Length)
             End Sub
            
             Private Sub HandleDiscoDevicesComplete(ByVal sender As Object, ByVal e As DiscoverDevicesEventArgs)
                 Debug.Assert(CInt(e.UserState) = 99)
                 If e.Cancelled Then
                     Console.WriteLine("DiscoDevicesAsync cancelled.")
                 ElseIf e.Error IsNot Nothing Then
                     Console.WriteLine("DiscoDevicesAsync error: {0}.", e.Error.Message)
                 Else
                     Console.WriteLine("DiscoDevicesAsync complete found {0} devices.", e.Devices.Length)
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.#ctor(InTheHand.Net.Sockets.BluetoothClient)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
            -
            <param name="cli">A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> 
            instance to use to run discovery on.  Must be non-null.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.Dispose(System.Boolean)">
            <summary>
            Optionally disposes of the managed resources used by the
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothComponent"/> class.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged
            resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.OnDiscoveryComplete(InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs"/>
            object that contains event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.OnDiscoveryProgress(InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.Bluetooth.DiscoverDevicesEventArgs"/>
            object that contains event data.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Discovers accessible Bluetooth devices and returns their names and addresses.
            This method does not block the calling thread.
            </summary>
            -
            <remarks>
            <para>See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            for more information.
            </para>
            <para>The devices are presented in the <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
            and <see cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/> events.
            </para>
            </remarks>
            -
            <param name="maxDevices">The maximum number of devices to get information about.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.
            </param>
            <param name="remembered">True to return remembered devices.
            </param>
            <param name="unknown">True to return previously unknown devices.
            </param>
            <param name="discoverableOnly">True to return only the devices that 
            are in range, and in    discoverable mode.  See the remarks section.
            </param>
            <param name="state">A user-defined object that is passed to the method
            invoked when the asynchronous operation completes.
            </param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete">
            <summary>
            Occurs when an device discovery operation completes.
            </summary>
            -
            <remarks>
            <para>This event is raised at the end of the discovery process
            and lists all the discovered devices.
            </para>
            </remarks>
            -
            <seealso cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress"/>
        </member>
        <member name="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesProgress">
            <summary>
            Occurs during an device discovery operation
            to show one or more new devices.
            </summary>
            -
            <remarks>
            <para>This event is raised for all discovered devices, both the
            known devices which are presented first, if requested,
            as well as newly discovery device found by the inquiry process,
            again if requested.
            </para>
            <para>Note that any event instance may include one or more devices.  Note
            also that a particular device may be presented more than one time;
            including once from the &#x2018;known&#x2019; list, once when a
            device is dicovered, and possibly another time when the discovery
            process retrieves the new device&#x2019;s Device Name.
            </para>
            </remarks>
            -
            <seealso cref="E:InTheHand.Net.Bluetooth.BluetoothComponent.DiscoverDevicesComplete"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IL2CapClient">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IL2CapClient.GetMtu">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommRfcommStreamBase.Bond(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Wrapper around CBtIf::Bond().
            </summary>
            <param name="device"><see cref="T:InTheHand.Net.BluetoothAddress"/></param>
            <param name="passcode"><see cref="T:System.String"/></param>
            <returns><see langword="true"/> if pairing was completed.
            <see langword="false"/> if were already paired, or pairing failed.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.NativeMethods.BluetoothAuthenticateDevice(System.IntPtr,System.IntPtr,InTheHand.Net.Bluetooth.Msft.BLUETOOTH_DEVICE_INFO@,System.String,System.Int32)">
            <summary>
            The BluetoothAuthenticateDevice function sends an authentication request to a remote Bluetooth device.
            </summary>
            <param name="hwndParent">The window to parent the authentication wizard.
            If NULL, the wizard will be parented off the desktop.</param>
            <param name="hRadio">A valid local radio handle, or NULL. If NULL, authentication is attempted on all local radios; if any radio succeeds, the function call succeeds.</param>
            <param name="pbtdi">A structure of type BLUETOOTH_DEVICE_INFO that contains the record of the Bluetooth device to be authenticated.</param>
            <param name="pszPasskey">A Personal Identification Number (PIN) to be used for device authentication. If set to NULL, the user interface is displayed and and the user must follow the authentication process provided in the user interface. If pszPasskey is not NULL, no user interface is displayed. If the passkey is not NULL, it must be a NULL-terminated string. For more information, see the Remarks section.</param>
            <param name="ulPasskeyLength">The size, in characters, of pszPasskey.
            The size of pszPasskey must be less than or equal to BLUETOOTH_MAX_PASSKEY_SIZE.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.NativeMethods.BluetoothAuthenticateDeviceEx(System.IntPtr,System.IntPtr,InTheHand.Net.Bluetooth.Msft.BLUETOOTH_DEVICE_INFO@,System.Byte[],InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements)">
            <summary>
            The BluetoothAuthenticateDeviceEx function sends an authentication request to a remote Bluetooth device. Additionally, this function allows for out-of-band data to be passed into the function call for the device being authenticated.
            Note  This API is supported in Windows Vista SP2 and Windows 7.
            </summary>
            <param name="hwndParentIn">The window to parent the authentication wizard.
            If NULL, the wizard will be parented off the desktop.</param>
            <param name="hRadioIn">A valid local radio handle or NULL.
            If NULL, then all radios will be tried. If any of the radios succeed, then the call will succeed.</param>
            <param name="pbtdiInout">A pointer to a BLUETOOTH_DEVICE_INFO structure describing the device being authenticated.</param>
            <param name="pbtOobData">Pointer to device specific out-of-band data to be provided with this API call.
            If NULL, then UI is displayed to continue the authentication process.
            If not NULL, no UI is displayed.</param>
            <param name="authenticationRequirement">An AUTHENTICATION_REQUIREMENTS enumeration that specifies the protection required for authentication.</param>
            <returns></returns>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_LOCAL_INFO">
            <summary>
            Input:  none
            Output:  BTH_LOCAL_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_RADIO_INFO">
            <summary>
            Input:  BTH_ADDR
            Output:  BTH_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_DEVICE_INFO">
             <summary>
             use this ioctl to get a list of cached discovered devices in the port driver.
            
             Input: None
             Output: BTH_DEVICE_INFO_LIST
             </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_DISCONNECT_DEVICE">
            <summary>
            Input:  BTH_ADDR
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_GET_DEVICE_RSSI">
            <summary>
            Input:   BTH_GET_DEVICE_RSSI
            Output:  ULONG
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_GET_RECORDS">
            <summary>
            Input:   BTH_EIR_GET_RECORDS
            Output:  UCHAR array, sequence of length + type + data fields triplets.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_SUBMIT_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  HANDLE
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_UPDATE_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_EIR_REMOVE_RECORD">
            <summary>
            Input:   HANDLE
            Output:  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_HCI_VENDOR_COMMAND">
            <summary>
            Input:   BTH_VENDOR_SPECIFIC_COMMAND 
            Output:  PVOID
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_CONNECT">
            <summary>
            Input:  BTH_SDP_CONNECT
            Output:  BTH_SDP_CONNECT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_DISCONNECT">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SERVICE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_SEARCH_REQUEST
            Output:  ULONG * number of handles wanted
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SERVICE_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SUBMIT_RECORD">
            <summary>
            Input:  raw SDP stream (at least 2 bytes)
            Ouptut: HANDLE_SDP
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_REMOVE_RECORD">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.NativeMethods.MsftWin32BthIOCTL.IOCTL_BTH_SDP_SUBMIT_RECORD_WITH_INFO">
            <summary>
            Input:  BTH_SDP_RECORD + raw SDP record
            Output:  HANDLE_SDP
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_REGISTER">
            <summary>
            Register the service. For SAP, this means sending out a periodic broadcast.
            This is an NOP for the DNS namespace.
            For persistent data stores, this means updating the address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_DEREGISTER">
            <summary>
             Remove the service from the registry.
             For SAP, this means stop sending out the periodic broadcast.
             This is an NOP for the DNS namespace.
             For persistent data stores this means deleting address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Msft.WSAESETSERVICEOP.RNRSERVICE_DELETE">
            <summary>
            Delete the service from dynamic name and persistent spaces.
            For services represented by multiple CSADDR_INFO structures (using the SERVICE_MULTIPLE flag), only the specified address will be deleted, and this must match exactly the corresponding CSADDR_INFO structure that was specified when the service was registered 
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
            -
            <remarks>
            <para>Used by <see cref="P:InTheHand.Net.Bluetooth.BluetoothPublicFactory.BluetoothSecurity"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            -
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            -
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">Address of the requesting device.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            -
            <param name="device">The device whose Link Key to retrieve.</param>
            <param name="linkKey">The 16-byte Link Key to set.</param>
            -
            <returns><c>true</c> if the operation was successful; <c>false</c> otherwise.</returns>
            -
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Device Identification Profile specification.
            </summary>
            -
            <remarks>
            <para>&#x201C;This document specifies a method by which Bluetooth devices may
            provide information that may be used by peer Bluetooth devices to
            find representative icons or load associated support software. This
            information is published as Bluetooth SDP records, and optionally in
            an Extended Inquiry Response.&#x201D;
            </para>
            <para>Used in records with Service Class ID:
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation"/>.
            </para>
            <para>As well as the attributes defined here, use of some of the universal
            attributes is recommended, they are:
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl"/>,
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/>,
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.SpecificationId">
            <summary>
            SpecificationId [0x0200]
            </summary>
            <remarks>The version of the Bluetooth Device ID Profile Specification
            supported by the device.
            e.g. version 1.3 will be value 0x0103. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorId">
            <summary>
            VendorId [0x0201]
            </summary>
            <remarks>
            <para>The id assigned by the organisation in <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource" />. [<c>UInt16</c>]
            </para>
            <para>&#x201C;The value <c>FFFF</c> is reserved as the default id when
            no Device ID Service Record is present in the device.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.ProductId">
            <summary>
            ProductId [0x0202]
            </summary>
            <remarks>Distinguishes between different products made by the same vendor. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.Version">
            <summary>
            Version [0x0203]
            </summary>
            <remarks>The version of the product. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.PrimaryRecord">
            <summary>
            PrimaryRecord [0x0204]
            </summary>
            <remarks>If multiple Device ID records are present this indicates the one &#x2019;primary&#x201A; record. [<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource">
            <summary>
            VendorIdSource [0x0205]
            </summary>
            <remarks>Designates which organisation assigned the Vendor ID value. [<c>UInt16</c>]
            <list type="table">
            <listheader><term>Value</term><term>Assigning Organisation</term></listheader>
            <item><term>1</term><term>Bluetooth SIG</term></item>
            <item><term>2</term><term>USB Implementors Forum</term></item>
            <item><term>0, 3-FFFF</term><term>reserved</term></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.L2CapListener">
            <summary>
            Listens for connections from L2CAP Bluetooth network clients.
            </summary>
            -
            <remarks>
            <para>The <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class provides simple methods 
            that listen for and accept incoming connection requests.  New connections 
            are returned as <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> instances.
            </para>
            <para>In the normal case a the listener is initialised with a 
            <see cref="T:System.Guid"/> holding the Service Class Id on which it is 
            to accept connections, the listener will automatically create a SDP 
            Service Record containg that Service Class Id and the port number
            (L2CAP Protocol Service Multiplexer) that it has started listening on.
            The standard usage is thus as follows.
            </para>
            <code lang="VB.NET">
            Class MyConsts
              Shared ReadOnly MyServiceUuid As Guid _
                = New Guid("{00112233-4455-6677-8899-aabbccddeeff}")
            End Class
            
              ...
              Dim lsnr As New L2CapListener(MyConsts.MyServiceUuid)
              lsnr.Start()
              ' Now accept new connections, perhaps using the thread pool to handle each
              Dim conn As New L2CapClient = lsnr.AcceptClient()
              Dim peerStream As Stream = conn.GetStream()
              ...
            </code>
            <para>One can also pass the L2CapListener a Service Name, or
            a custom Service Record (Service Discovery Protocol record).
            To create a custom Service Record use 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>.
            </para>
            <para>There are overloads of the constructor which take a 
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> parameter instead of a 
            <see cref="T:System.Guid"/> as the Service Class Id, the Class Id
            value should be specified in that case in the endpoint.
            If the port value is specified in the endpoint, then the listener will 
            attempt to bind to that L2CAP PSM locally.  The address in the endpoint is 
            largely ignored as no current stack supports more than one local radio.
            </para>
            <para>The L2CAP protocol accepts only certain PSM values.  The value is
            a 16-bit integer, and the low byte must be odd and the high byte must
            be even. So e.g. 0x0001 is valid, but 0x0002 and 0x0101 are invalid.
            The range below 0x1001 is reserved for standards allocations.
            See the L2CAP Specification for more information, L2CAP section 4.2
            (and SDP section 5.1.5) in the version 2.1 specification.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class
            that listens on the specified service identifier.
            </summary>
            -
            <param name="service">The Bluetooth service to listen on.
            Either one of the values on <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>,
            or your custom UUID stored in a <see cref="T:System.Guid"/>.
            See the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> documentation for more information 
            on the usage of this argument.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> class
            with the specified local endpoint.
            </summary>
            -
            <remarks>
            <para>The simpler constructor <see cref="M:InTheHand.Net.Sockets.L2CapListener.#ctor(System.Guid)"/>
            taking just a <see cref="T:System.Guid">System.Guid</see> is used 
            in most cases instead of this one.
            </para>
            </remarks>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            Either one of the values on <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>,
            or your custom UUID stored in a <see cref="T:System.Guid"/>.
            See the <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> documentation for more information 
            on the usage of this argument.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum
            number of pending connection.
            </summary>
            -
            <param name="backlog">The maximum length of the pending connections
            queue.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Stop">
            <summary>
            Closes the listener.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.BeginAcceptClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An AsyncCallback delegate that references
            the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object containing information 
            about the accept operation. This object is passed to the callback
            delegate when the operation is complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.EndAcceptClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates
            a new <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> to handle remote host communication.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned
            by a call to the <see cref="M:InTheHand.Net.Sockets.L2CapListener.BeginAcceptClient(System.AsyncCallback,System.Object)"/> method.
            </param>
            -
            <returns>A <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.AcceptClient">
            <summary>
            Accepts a pending connection request.
            </summary>
            -
            <remarks>AcceptClient is a blocking method that returns a
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Sockets.L2CapListener.Pending"/> method to determine if connection
            requests are available in the incoming connection queue if you want
            to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.L2CapClient.GetStream"/> method to obtain
            the underlying <see cref="T:System.IO.Stream"/> of the returned
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            The <see cref="T:System.IO.Stream"/> will provide you with methods for
            sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>, be sure
            to call its <see cref="M:InTheHand.Net.Sockets.L2CapClient.Close"/> method.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> used to send and receive data.</returns>
            -
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            -
            <returns>true if there is a connection pending; otherwise, false.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            -
            <value>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            that the listener is using for communications.
            </value>
            -
            <remarks>
            <para>The <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> 
            property of the endpoint will contain the port number (L2CAP PSM) 
            that the listener is listening on.
            On some platforms, the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            is similarly set, or is <see cref="F:InTheHand.Net.BluetoothAddress.None">BluetoothAddress.None</see> 
            if not known.
            The endpoint&#x2019;s <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is never set.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            -
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.L2CapListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDADeviceInfo">
            <summary>
            Provides information about remote devices connected by infrared communications.
            </summary>
            <seealso cref="T:System.Net.Sockets.IrDADeviceInfo"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDADeviceInfo.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDADeviceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceAddress">
            <summary>
            Returns the address of the remote device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceID">
            <summary>
            Provided solely for compatibility with System.Net.IrDA - consider using <see cref="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceAddress"/> instead.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.CharacterSet">
            <summary>
            Gets the character set used by the server, such as ASCII.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDADeviceInfo.Hints">
            <summary>
            Gets the type of the device, such as a computer.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames">
            <summary>
            Specifies the media type information for an object.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Image">
            <summary>
            Specifies the type of image data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Gif">
            <summary>
            Specifies that the image data is in Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Jpg">
            <summary>
            Specifies that the image data is in Joint Photographic Experts Group (JPEG) format.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Text">
            <summary>
            Specifies the type of text data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Html">
            <summary>
            Specifies that the data is in HTML format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Plain">
            <summary>
            Specifies that the data is in plain text format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vCalendar">
            <summary>
            Specifies that the data is in vCalendar format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vCard">
            <summary>
            Specifies that the data is in vCard format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vMessage">
            <summary>
            Specifies that the data is in vMsg format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.vNote">
            <summary>
            Specifies that the data is in vNote format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Xml">
            <summary>
            Specifies that the data is in XML format.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange">
            <summary>
            Specifies the type of Object Exchange specific data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.Capabilities">
            <summary>
            Used to retrieve supported object types.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.FolderListing">
            <summary>
            Used to retrieve folder listing with OBEX FTP.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.ObjectExchange.ObjectProfile">
            <summary>
            Used to retrieve an object profile.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothPublicFactory">
            <summary>
            Provides the means to create Bluetooth classes on the one selected Bluetooth
            stack where multiple are loaded in the same process.
            </summary>
            -
            <remarks>when 
            <para>When calling <c>new BluetoothClient()</c>, <c>new BluetoothListener()</c>,
            etc when multiple Bluetooth stacks are loaded at the same time then the
            instance is created on the primary stack.  This class allows the application
            to select which stack the instance is created on.
            Access this class via property
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.StackFactory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothClient">
            <overloads>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            class, using the respective stack and/or radio.
            </overloads>
            -
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            class, using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothClient(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class,
            with the specified local endpoint and
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.#ctor(InTheHand.Net.BluetoothEndPoint)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid)">
            <overloads>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class, using the respective stack and/or radio.
            </overloads>
            -
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id, local device address and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and raw Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            <param name="channelOffset">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id, local device address and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localAddress">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothListener(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/>
            class,
            with the specified Service Class Id and local device address as a
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> and Service Record
            using the respective stack and/or radio.
            </summary>
            -
            <param name="localEP">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            <param name="sdpRecord">See <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateBluetoothDeviceInfo(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <param name="addr">See <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)"/>.
            </param>
            -
            <returns>The new instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexWebRequest(System.Uri)">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.ObexWebRequest"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexWebRequest"/>.
            </returns>
            -
            <param name="requestUri">See <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexWebRequest(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this <see cref="T:InTheHand.Net.ObexWebRequest"/> class,
            given a scheme, a Bluetooth Device Address, and a remote path name; 
            using the respective stack and/or radio.
            </summary>
            -
            <param name="scheme">The Uri scheme. One of 
            <c>obex</c>, <c>obex-push</c>, <c>obex-ftp</c>, or <c>obex-sync</c>.
            </param>
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexWebRequest"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothPublicFactory.CreateObexListener">
            <summary>
            Initialise a new instance of the <see cref="T:InTheHand.Net.ObexListener"/> class,
            using the respective stack and/or radio.
            </summary>
            -
            <returns>The new instance of <see cref="T:InTheHand.Net.ObexListener"/>.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothPublicFactory.BluetoothSecurity">
            <summary>
            Gets the <see cref="T:InTheHand.Net.Bluetooth.BluetoothSecurity"/>
            instance for the respective stack and/or radio.
            </summary>
            -
            <value>A <see cref="T:InTheHand.Net.Bluetooth.BluetoothSecurity"/>
            as an <see cref="T:InTheHand.Net.Bluetooth.Factory.IBluetoothSecurity"/>
            </value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity">
            <summary>
            Handles security between bluetooth devices.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            This function stores the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <param name="device">Address of remote device.</param>
            <param name="pin">Pin, alphanumeric string of between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetPIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;Stores the pin for the Bluetooth device identified in pba.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller. The PIN is persisted in the registry until
            BthRevokePIN is called.
            </para>
            <para>&#x201C;While the PIN is stored, it is supplied automatically
            after the PIN request is issued by the authentication mechanism, so the
            user will not be prompted for it. Typically, for UI-based devices, you
            would set the PIN for the duration of authentication, and then revoke
            it after authentication is complete.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
            </para>
            </remarks>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RevokePin(InTheHand.Net.BluetoothAddress)">
            <summary>
            This function revokes the personal identification number (PIN) for the Bluetooth device.
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthRevokePIN</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;When the PIN is revoked, it is removed from registry.
            The active connection to the device is not necessary, nor is the presence
            of the Bluetooth controller.&#x201D;
            </para>
            <para>On Windows CE platforms this removes any pending BluetoothWin32Authentication object but does not remove the PIN for an already authenticated device.
            Use RemoveDevice to ensure a pairing is completely removed.</para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <param name="device">The remote device.</param>
            <returns>True on success, else False.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Intiates pairing for a remote device.
            </summary>
            <param name="device">Remote device with which to pair.</param>
            <param name="pin">Chosen PIN code, must be between 1 and 16 ASCII characters.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthPairRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;BthPairRequest passes the parameters to the <c>BthSetPIN</c>
            function and creates an ACL connection. Once the connection is established,
            it calls the <c>BthAuthenticate</c> function to authenticate the device.&#x201D;
            </para>
            <para>On Windows XP/Vista platforms this calls <c>BluetoothAuthenticateDevice</c>,
            if the pin argument is set to null a Wizard is displayed to accept a PIN from the user,
            otherwise the function executes in transparent mode.
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.SetPin(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.PairRequest(InTheHand.Net.BluetoothAddress,InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements)">
            <summary>
            Intiates pairing for a remote device
            with SSP if it is available.
            </summary>
            -
            <param name="device">Remote device with which to pair.</param>
            <param name="authenticationRequirement">
            Note: not supported by all platforms.
            </param>
            -
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the pairing with the specified device
            </summary>
            -
            <param name="device">Remote device with which to remove pairing.</param>
            -
            <returns>TRUE if device was successfully removed, else FALSE.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.SetLinkKey(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <param name="device"></param>
            <param name="linkkey"></param>
            <remarks><para>On Windows CE platforms this calls <c>BthSetLinkKey</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;The link key is persisted in registry until <c>BthRevokeLinkKey</c>
            is called.
            </para>
            <para>&#x201C;Typically, the Bluetooth stack manages link keys automatically,
            for example, it stores them when they are created. This function is useful
            primarily for backup purposes.
            </para>
            <para>&#x201C;While link key is stored, it will be automatically supplied
            once the link key request is issued by the authentication mechanism. If
            the link key is incorrect, the renegotiation that involves the PIN is
            initiated by the Bluetooth adapter, and the PIN code may be requested
            from the user.
            </para>
            <para>&#x201C;The link key length is 16 bytes. You cannot create link
            keys; they are generated by the Bluetooth hardware.&#x201D;
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.GetPinRequest">
            <summary>
            Retrieves the address of the Bluetooth peer device authentication that requires the PIN code.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <remarks><para>On Windows CE platforms this calls <c>BthGetPINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>“There can be multiple requests outstanding. After the event
            that is provided by the UI handler is signaled, the UI handler must call
            this function multiple times until the call fails.”
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
            <returns><see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote device, or null if there is no outstanding PIN request.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothSecurity.RefusePinRequest(InTheHand.Net.BluetoothAddress)">
            <summary>
            Refuses an outstanding PIN request.
            <para><b>Not supported on Windows XP</b></para>
            </summary>
            <param name="device">Address of the requesting device.</param>
            <remarks><para>On Windows CE platforms this calls <c>BthRefusePINRequest</c>,
            its MSDN remarks say:
            </para>
            <para>&#x201C;This function refuses an outstanding PIN request that is
            retrieved by <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest()"/>
            function.&#x201D;
            </para>
            <para>See also 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.GetPinRequest"/>
            and <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.AnswerPinRequest(InTheHand.Net.BluetoothAddress,System.String)"/>
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Factory.IBluetoothFactoryFactory">
            <exclude/>
            <summary>
            Defines a class that provides Bluetooth Factory initialisation but returns
            multiple factories.
            </summary>
            -
            <remarks>
            <para>In most cases configuration is provided so that
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/> loads one or more
            classes each derived from <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/>.
            There the instance is the factory.  This interface allows a class to be 
            loaded by <see cref="T:InTheHand.Net.Bluetooth.BluetoothFactory"/> but 
            instead <strong>returns</strong> a list of factory instances.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Factory.IBluetoothFactoryFactory.GetFactories(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Get the list of factories.
            </summary>
            <param name="errors">A list of exceptions, to which any errors in 
            attempting to create the factories are added.
            </param>
            <returns>A list of successfully created factories.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsSDKInitialized">
            <summary>
            The Btsdk_IsSDKInitialized function indicates whether a successful
            call to Btsdk_Init is made.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsServerConnected">
            <summary>
            The Btsdk_IsServerConnected function checks whether client
            application can call BlueSoleil Server APIs.
            </summary>
            <returns>
            When this fuction returns
            <see langword="true"/>, client application can call APIs normally, versa versit.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_SetStatusInfoFlag(System.UInt16)">
            <summary>
            The Btsdk_SetStatusInfoFlag function is used to set the status
            changing callback types which the user wants to receive.
            </summary>
            -
            <remarks>
            usMsgType can be one of the following value or their combination:
            <list type="definition">
            <item><term>BTSDK_NTSERVICE_STATUS_FLAG</term>
            <description>The status change of BlueSoleil server
            event or OS message event.</description>
            </item>
            <item><term>BTSDK_BLUETOOTH_STATUS_FLAG</term>
            <description>Message event of the change of Bluetooth</description>
            status.
            </item>
            <item><term>BTSDK_REFRESH_STATUS_FLAG</term>
            <description>Refresh event.</description>
            </item>
            </list>
            </remarks>
            -
            <param name="usMsgType">See remarks.</param>
            -
            <returns>BTSDK_OK for success, other for error code.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_IsBluetoothReady">
            <summary>
            The Btsdk_IsBluetoothReady function checks whether the local
            Bluetooth device is working.
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_UpdateRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            Gets the current user-friendly name of the specified remote device.
            </summary>
            -
            <remarks>
            Before calling Btsdk_UpdateRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_StartBluetooth.
            The user-friendly device name is a UTF-8 character string. The device name acquired by this
            command is stored automatically in the device database.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteRSSI(System.UInt32,System.SByte@)">
            <summary>
            "gets the RSSI value of the specified remote device."
            </summary>
            -
            <remarks>
            <para>
            </para>
            <para>"a connection between local device and the specified
            remote device must be created first."
            </para>
            </remarks>
            -
            <param name="device_handle">hDev
            </param>
            <param name="prssi">"Range: -128 to 127 (dB)."
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteLinkQuality(System.UInt32,System.UInt16@)">
            <summary>
            "gets the current link quality value of the connection between local
            device and the specified remote device."
            </summary>
            -
            <remarks>"The higher the value, the better the link quality is."
            </remarks>
            -
            <returns>"Range: 0 to 0xFF."
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.IBluesoleilApi.Btsdk_GetRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            "Gets the user-friendly name of the specified remote device from the device database."
            </summary>
            -
            <remarks>
            "Before calling Btsdk_GetRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_Init.
            The user-friendly device name is a UTF-8 character string. The Btsdk_GetRemoteDeviceNamefunction returns =BTSDK_OPERATION_FAILURE immediately if the device name doesn’t
            exist in the database. In this case, the application shall call Btsdk_UpdateRemoteDeviceName
            to acquire the name information directly from the remote device.
            BlueSoleil will automatically update the device name when the local device connects to the
            specified remote device.
            </remarks>
        </member>
        <member name="M:Utils.Process2.GetProcessesByName(System.String)">
            <summary>
            NETCF Version of: Creates an array of new Process components and associates them with all the process resources on the local computer that share the specified process name.
            </summary>
            -
            <param name="processName">e.g. "BTExplorer"
            </param>
            -
            <returns>An array of type <see cref="T:System.Diagnostics.Process"/>
            that represents the process resources running the specified application or file.
            </returns>
        </member>
        <member name="T:InTheHand.Net.ObexTransport">
            <summary>
            Supported network transports for Object Exchange.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.IrDA">
            <summary>
            Infrared (IrDA)
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.Bluetooth">
            <summary>
            Bluetooth
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexTransport.Tcp">
            <summary>
            TCP/IP
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.SocketClientAdapter">
            <summary>
            An adapter that provides a <see cref="T:System.Net.Sockets.Socket">System.Net.Sockets.Socket</see>-like
            interface to <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> etc.
            </summary>
            -
            <remarks>
            <para>Required as  on Widcomm/Broadcom <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            does not support getting a <see cref="T:System.Net.Sockets.Socket"/> from
            the <see cref="T:InTheHand.Net.Sockets.BluetoothClient.Client"/> property.
            Motivated by upgrading of <see cref="T:InTheHand.Net.ObexListener"/> to
            be usable on Widcomm.
            </para>
            <para>Also adapts <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>, and
            <see cref="T:System.Net.Sockets.TcpClient"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.SocketAdapter">
            <summary>
            Provide a <see cref="T:System.Net.Sockets.Socket">System.Net.Sockets.Socket</see>-like
            interace to another connection type e.g. a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            </summary>
            -
            <remarks>
            <para>See class <see cref="T:InTheHand.Net.Sockets.SocketClientAdapter"/>
            for an implementation that adapts <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            etc to the <see cref="T:System.Net.Sockets.Socket">Socket</see>-like interface.
            That is required as on Widcomm/Broadcom <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>
            does not support getting a <see cref="T:System.Net.Sockets.Socket"/> from
            the <see cref="T:InTheHand.Net.Sockets.BluetoothClient.Client"/> property.
            Motivated by upgrading of <see cref="T:InTheHand.Net.ObexListener"/> to
            be usable on Widcomm.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordUtilities">
            <summary>
            Utilities method working on SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>s, for instance to
            produce a 'dump' of the record's contents.
            </summary>
            -
            <remarks>
            This class produces output like the following:
            <code lang="none">
            AttrId: 0x0000 -- ServiceRecordHandle
            UInt32: 0x0
            
            AttrId: 0x0001 -- ServiceClassIdList
            ElementSequence
                Uuid16: 0x1000 -- ServiceDiscoveryServer
            
            AttrId: 0x0004 -- ProtocolDescriptorList
            ElementSequence
                ElementSequence
                    Uuid16: 0x100 -- L2CapProtocol
                    UInt16: 0x1
                ElementSequence
                    Uuid16: 0x1 -- SdpProtocol
            ( ( L2Cap, PSM=Sdp ), ( Sdp ) )
            
            AttrId: 0x0005 -- BrowseGroupList
            ElementSequence
                Uuid16: 0x1002 -- PublicBrowseGroup
            
            AttrId: 0x0006 -- LanguageBaseAttributeIdList
            ElementSequence
                UInt16: 0x656E
                UInt16: 0x6A
                UInt16: 0x100
            
            AttrId: 0x0100 -- ServiceName
            TextString: [en] 'Service Discovery'
            
            AttrId: 0x0101 -- ServiceDescription
            TextString: [en] 'Publishes services to remote devices'
            
            AttrId: 0x0102 -- ProviderName
            TextString: [en] 'Microsoft'
            
            AttrId: 0x0200 -- VersionNumberList
            ElementSequence
                UInt16: 0x100
            
            AttrId: 0x0201 -- ServiceDatabaseState
            UInt32: 0x1
            </code>
            The Service Class Id names and Attribute Id names are looked up using 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)"/>/etc and
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/>
            respectively.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.ServiceRecord)">
            <overloads>
            Produces a raw 'dump' of the given record, not including attribute names etc.
            </overloads>
            -
            <summary>
            Gets a string containing a raw 'dump' of the given record, not including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Produce a raw 'dump' of the given record, not including attribute names etc, to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])">
            <overloads>
            Produces a 'dump' of the given record, including attribute names etc.
            </overloads>
            --
            <summary>
            Gets a <see cref="T:System.String"/> containing a 'dump' of the given record, including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/> 
            overload for more information.
            </param>
            -
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])">
            <summary>
            Produce a 'dump' of the given record, including attribute names etc to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            -
            <remarks>
            <para>The system has built-in a set of mappings from Service Class to 
            its Attribute IDs. This is supplied by the 
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class,
            and contains the Attribute IDs defined in the base SDP specification as 
            well as in Bluetooth Profiles specification e.g. ObjectPushProfile, Headset,
            Panu, etc.
            If however the record being decoded is a custom one then a set of extra 
            Attribute Id definitions can be supplied in the 
            <paramref name="attributeIdEnumDefiningTypes"/> parameter.
            The Attribute IDs for a particular Service Class 
            should be defined in a static class and the set of such classes should 
            be passed as their <see cref="T:System.Type"/> object. e.g.
            <code lang="C#">
            static class FooAttributeId
            {
                public const ServiceAttributeId BarName = (ServiceAttributeId)0x0300;
            }
            
            &#x2026;
                ServiceRecordUtilities.Dump(writer, myRecord, typeof(FooAttributeId));
            &#x2026;
            </code>
            </para>
            </remarks>
            -
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            </param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.GuidToHackProtocolId(System.Guid,System.String@)">
            <summary>
            Attempt to get the name of the protocol,
            and optionally it's enum id if we handle it specially.
            </summary>
            -
            <param name="protocolGuid">The input.
            </param>
            <param name="protoStr">The protocol's name if known, or its
            Guid.ToString if not.
            We handle some explicitly, and otherwise we see if there's a
            matching value in BluetoothService that has its name suffixed "Protocol".
            </param>
            -
            <returns>The id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordUtilities.HackProtocolId"/>.
            We handle some explicitly,
            otherwise we see if its a UUID16 and convert it automatically,
            finally if neither we return <c>zero</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements">
            <summary>
            The AUTHENTICATION_REQUIREMENTS enumeration specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequired">
            <summary>
            Protection against a "Man in the Middle" attack is not required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequired">
            <summary>
            Protection against a "Man in the Middle" attack is required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotDefined">
            <summary>
            Protection against "Man in the Middle" attack is not defined.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtIf.CheckDependencies(System.Exception)">
            <summary>
            Check whether all the of dependencies are correct.
            </summary>
            -
            <param name="wrapException">The original exception we got on trying
            to load Widcomm.  Or <c>null</c> if Widcomm loaded successfully and
            we're just doing a check of the dependencies.
            </param>
            -
            <returns>Does not return if <paramref name="wrapException"/> is non-null,
            instead will throw it, or a more explanatory exception (with it as
            an inner exception).
            If <paramref name="wrapException"/> is null,
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtIf.ReportNeedNeedNativeDllUpgrade(System.Exception,System.Boolean)">
            <summary>
            ReportNeedNeedNativeDllUpgrade, call from pair of catch:
            EntryPointNotFoundException and MissingMethodException.
            </summary>
            <param name="ex">The exception.</param>
            <param name="mayAssert">Whether we may put up an (Debug.)Assert dialog box.
            </param>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.CONNECT_ERR">
            <summary>
            Could not connect to remote device 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.CONNECT_REJ">
            <summary>
            Remote device rejected the connection 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.SECURITY">
            <summary>
            Security failed 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.BAD_RECORD">
            <summary>
            Remote Service Record Error 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.DISCOVERY_RESULT.OTHER_ERROR">
            <summary>
            Other error
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.SUCCESS">
            <summary>
            success response
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.EOF">
            <summary>
            no more devices found
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.ERROR">
            <summary>
            can not find exsiting entry for bda provided as input
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO_RETURN_CODE.MEM_ERROR">
            <summary>
            out of memory
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS">
            <summary>
            Used by OnStackChanges virtual method.
            </summary>
            <remarks>
            <para>1000-WCE-PG100-RCD.pdf (03/20/06) says:
            "... no longer used: DEVST_UP and DEVST_ERROR."
            and:
            "Values defined in BtIfClasses.h are:
            <code lang="none">
            • DEVST_DOWN — The stack is down and no longer available.
            • DEVST_UNLOADED — The stack is down, but should be available again after DEVST_RELOADED.
            • DEVST_RELOADED — The stack has been successfully reloaded."
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Down">
            <summary>
            Device is present, but down [Seen (on BTW)]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Up">
            <summary>
            Device is present and UP [Doc'd as obsolete, but I see it (on BTW)]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Error">
            <summary>
            Device is in error (maybe being removed) [Doc'd as obsolete]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Unloaded">
            <summary>
            Stack is being unloaded
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.STACK_STATUS.Reloaded">
            <summary>
            Stack reloaded after being unloaded
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CreateFromStoredRemoteDeviceInfo(InTheHand.Net.Bluetooth.Widcomm.REM_DEV_INFO,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used when loading a stack stored/remembered/maybe-paired device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CreateFromHandleDeviceResponded(System.Byte[],System.Byte[],System.Byte[],System.Boolean,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Used when a device is discovered during Inquiry.
            </summary>
            -
            <remarks>
            <para>When the result of Inquiry and get-stack-stored-devices are merged,
            the remembered/authenticated flags may get set then (with <see cref="M:SetAuthenticated"/>).
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.CheckAndSetIfPaired(InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo,InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothFactoryBase)">
            <summary>
            Called after reading the device from the Registry, to find if it is paired.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothDeviceInfo.Merge(InTheHand.Net.Bluetooth.Factory.IBluetoothDeviceInfo)">
            <summary>
            For use when the results of Inquiry and get-stack-stored-devices are merged.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB">
            <summary>
            
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB.ToByteArray">
            <summary>
            Internal bytes
            </summary>
            <returns></returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.BTHNS_BLOB.Length">
            <summary>
            Size of the structure.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.so_RFCOMM_CONNINFO">
            <summary>
            Use with struct rfcomm_conninfo{hci_handle, dev_class}.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.BDADDR_ANY">
            
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.StackConsts.SdpRecordRegisterFlags">
            <summary>
            Values of the flags parameter to sdp_record_register
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.StackConsts.SdpConnectFlags">
            <summary>
            Values of the flags parameter to sdp_connect
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.sdp_attrreq_type_t.SDP_ATTR_REQ_INDIVIDUAL">
            <summary>
            Attributes are specified as individual elements
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueZ.StackConsts.sdp_attrreq_type_t.SDP_ATTR_REQ_RANGE">
            <summary>
            Attributes are specified as a range
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BlueSoleil.SerialPortNetworkStream.Connected">
            <summary>
            For FooBarClient.Connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.NO_SERVICE">
            <summary>
            &#x201C;No service record with the specified search pattern is found on the remote device.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.SERVICE_RECORD_NOT_EXIST">
            <summary>
            &#x201C;The specified service record does not exist on the remote device..&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.BtSdkError.PAGE_TIMEOUT">
            <summary>
            &#x201C;HCI error &#x201C;Page Timeout (0X04)&#x201D; is received.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebRequestCreate">
            <summary>
            Used to create a new web request for obex uri scheme
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexStatusCode">
            <summary>
            Specifies the status codes returned for an Object Exchange (OBEX) operation.
            </summary>
            <remarks>OBEX codes are directly related to their HTTP equivalents - see <see cref="T:System.Net.HttpStatusCode"/>.</remarks>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Final">
            <summary>
            Applied to another code to indicate this is the only response or final response in a series.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Continue">
            <summary>
            Equivalent to HTTP status 100.
            Continue indicates that the client can continue with its request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.OK">
            <summary>
            Equivalent to HTTP status 200.
            OK indicates that the request succeeded and that the requested information is in the response.
            This is the most common status code to receive.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Created">
            <summary>
            Equivalent to HTTP status 201.
            Created indicates that the request resulted in a new resource created before the response was sent. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Accepted">
            <summary>
            Equivalent to HTTP status 202.
            Accepted indicates that the request has been accepted for further processing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NonAuthorativeInformation">
            <summary>
            Equivalent to HTTP status 203.
            NonAuthoritativeInformation indicates that the returned metainformation is from a cached copy instead of the origin server and therefore may be incorrect.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NoContent">
            <summary>
            Equivalent to HTTP status 204.
            NoContent indicates that the request has been successfully processed and that the response is intentionally blank.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ResetContent">
            <summary>
            Equivalent to HTTP status 205.
            ResetContent indicates that the client should reset (not reload) the current resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PartialContent">
            <summary>
            Equivalent to HTTP status 206.
            PartialContent indicates that the response is a partial response as requested by a GET request that includes a byte range.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MultipleChoices">
            <summary>
            Equivalent to HTTP status 300.
            MultipleChoices indicates that the requested information has multiple representations.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MovedPermanently">
            <summary>
            Equivalent to HTTP status 301.
            MovedPermanently indicates that the requested information has been moved to the URI specified in the Location header.
            The default action when this status is received is to follow the Location header associated with the response.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MovedTemporarily">
            <summary>
            Equivalent to HTTP status 302.
            Redirect indicates that the requested information is located at the URI specified in the Location header.
            The default action when this status is received is to follow the Location header associated with the response.
            When the original request method was POST, the redirected request will use the GET method.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.SeeOther">
            <summary>
            Equivalent to HTTP status 303.
            SeeOther automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotModified">
            <summary>
            Equivalent to HTTP status 304.
            NotModified indicates that the client's cached copy is up to date.
            The contents of the resource are not transferred.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.UseProxy">
            <summary>
            Equivalent to HTTP status 305.
            UseProxy indicates that the request should use the proxy server at the URI specified in the Location header.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.BadRequest">
             <summary>
             Equivalent to HTTP status 400.
             BadRequest indicates that the request could not be understood by the server. BadRequest is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code. 
            
             <see cref="T:InTheHand.Net.ObexWebRequest"/> reports errors through 
             <see cref="P:InTheHand.Net.ObexWebResponse.StatusCode">ObexWebResponse.StatusCode</see>,
             this status code is overloaded by it to report failure to connect to the server.
             </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Unauthorized">
            <summary>
            Equivalent to HTTP status 401.
            Unauthorized indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PaymentRequired">
            <summary>
            Equivalent to HTTP status 402.
            PaymentRequired is reserved for future use.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Forbidden">
            <summary>
            Equivalent to HTTP status 403.
            Forbidden indicates that the server refuses to fulfill the request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotFound">
            <summary>
            Equivalent to HTTP status 404.
            NotFound indicates that the requested resource does not exist on the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to HTTP status 405.
            MethodNotAllowed indicates that the request method (POST or GET) is not allowed on the requested resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotAcceptable">
            <summary>
            Equivalent to HTTP status 406.
            NotAcceptable indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to HTTP status 407.
            ProxyAuthenticationRequired indicates that the requested proxy requires authentication.
            The Proxy-authenticate header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestTimeout">
            <summary>
            Equivalent to HTTP status 408.
            RequestTimeout indicates that the client did not send a request within the time the server was expecting the request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Conflict">
            <summary>
            Equivalent to HTTP status 409.
            Conflict indicates that the request could not be carried out because of a conflict on the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.Gone">
            <summary>
            Equivalent to HTTP status 410.
            Gone indicates that the requested resource is no longer available.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.LengthRequired">
            <summary>
            Equivalent to HTTP status 411.
            LengthRequired indicates that the required Content-length header is missing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.PreconditionFailed">
            <summary>
            Equivalent to HTTP status 412.
            PreconditionFailed indicates that a condition set for this request failed, and the request cannot be carried out.
            Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestedEntityTooLarge">
            <summary>
            Equivalent to HTTP status 413.
            RequestEntityTooLarge indicates that the request is too large for the server to process.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.RequestedUrlTooLarge">
            <summary>
            Equivalent to HTTP status 414.
            RequestUriTooLong indicates that the URI is too long.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to HTTP status 415.
            UnsupportedMediaType indicates that the request is an unsupported type.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.InternalServerError">
            <summary>
            Equivalent to HTTP status 500.
            InternalServerError indicates that a generic error has occurred on the server.
            
            <see cref="T:InTheHand.Net.ObexWebRequest"/> reports errors through 
            <see cref="P:InTheHand.Net.ObexWebResponse.StatusCode">ObexWebResponse.StatusCode</see>,
            this status code is used by it to report failure to send the object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.NotImplemented">
            <summary>
            Equivalent to HTTP status 501.
            NotImplemented indicates that the server does not support the requested function.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.BadGateway">
            <summary>
            Equivalent to HTTP status 502.
            BadGateway indicates that an intermediate proxy server received a bad response from another proxy or the origin server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to HTTP status 503.
            ServiceUnavailable indicates that the server is temporarily unavailable, usually due to high load or maintenance.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.GatewayTimeout">
            <summary>
            Equivalent to HTTP status 504.
            GatewayTimeout indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to HTTP status 505.
            HttpVersionNotSupported indicates that the requested HTTP version is not supported by the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.DatabaseFull">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexStatusCode.DatabaseLocked">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAClient">
            <summary>
            Makes connections to services on peer IrDA devices.
            </summary>
            -
            <remarks>
            <para>Makes connections to services on peer IrDA devices.  It allows 
            discovery of all devices in range, then a connection can be made to 
            the required service on the chosen peer.  Or, given just the 
            service name a connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range—as is often the case.</para>
            <para>It can be used with both the full and Compact frameworks, and can 
            be used as a replacement for the latter's built-in version simply by 
            changing the referenced namespace and assembly.
            It also has features extra 
            to those in the CF's version.  For instance, following the 
            pattern of <see cref="T:System.Net.Sockets.TcpClient"/> in framework 
            version 2, it provides access to the underlying 
            <see cref="T:System.Net.Sockets.Socket"/> via a <c>Client</c> 
            property.  This is particularly useful as it allows setting socket 
            options, for instance IrCOMM Cooked mode with option <see 
            cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode"/>.
            </para>
            <para>There a number of well-known services, a few are listed here.
            <list type="bullet">
            <listheader><term>Service description</term>
                <description>Service Name, Protocol type</description></listheader>
            <item><term>OBEX file transfer</term>
                <description>OBEX:IrXfer, (TinyTP)</description></item>
            <item><term>OBEX general</term>
                <description>OBEX, (TinyTP)</description></item>
            <item><term>Printing</term>
                <description>IrLPT, IrLMP mode</description></item>
            <item><term>IrCOMM e.g. to modems</term>
                <description>IrDA:IrCOMM, IrCOMM 9-Wire/Cooked mode</description></item>
            </list>
            The modes required by the last two are set by socket option, as noted 
            for IrCOMM above.
            </para>
            <para>
            Of course the library also includes specific OBEX protocol support, both 
            client and server, see <see cref="T:InTheHand.Net.ObexWebRequest"/> etc.
            </para>
            </remarks>
            -
            <example>Example code to connect to a IrCOMM service would be as 
            follows.
            <code lang="VB.NET">
            Public Shared Sub Main()
              Dim cli As New IrDAClient
              ' Set IrCOMM Cooked/9-wire mode.
              cli.Client.SetSocketOption(IrDASocketOptionLevel.IrLmp, _
                IrDASocketOptionName.NineWireMode, _
                1)  ' equivalent to 'True'
              ' Connect
              cli.Connect("IrDA:IrCOMM")
              ' Connected, now send and receive e.g. by using the 
              ' NetworkStream returned by cli.GetStream
              ...
            End Sub
            </code>
            </example>
            -
            <seealso cref="N:InTheHand.Net.Sockets"/>
            <seealso cref="T:System.Net.Sockets.IrDAClient"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> class,
            and optionally connects to a peer device.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> class.
            </summary>
            <remarks>
            <para>
            It then allows discovery of all devices in range using <see cref="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices"/>, then a 
            connection can be made to the  required service on the chosen peer using <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            Or, given just the  service name a connection will be made to an arbitrary 
            peer, using <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/>.  This is 
            most useful when it is expected that there will be only one device in 
            range — as is often the case.</para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> 
            class and connects to the specified service name.
            </summary>
            -
            <remarks>
            <para>This is 
            equivalent to calling the default constructor followed by 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/>.      
            </para>
            <para>
            As noted the connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range &#x2014; as is often the case.  If a connection is to be made to
            a particular remote peer, then use the 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.#ctor(InTheHand.Net.IrDAEndPoint)"/>
            overload.
            </para>
            <para>
            Infrared connections are made by specifying a Service Name, which can 
            be any value provided the participating devices refer the same name.
            </para>
            <para>
            See <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> 
            for the errors that can occur.
            </para>
            </remarks>
            -
            <param name="service">
            A <see cref="T:System.String"/> containing the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.#ctor(InTheHand.Net.IrDAEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> 
            class and connects to the specified endpoint.
            </summary>
            <remarks>
            <para>
            This is 
            equivalent to calling the default constructor followed by 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            </para>
            <para>
            The endpoint specifies both the peer device and service name 
            to connect to.  If only one device is expected to be in range, or 
            an arbitrary peer device is suitable, then one can use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.#ctor(System.String)"/> instead.
            </para>
            </remarks>
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices">
            <summary>
            Obtains information about available devices.
            </summary>
            -
            <remarks>
            <para>Returns a maximum of 8 devices, for more flexibility use the other overloads.</para>
            </remarks>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices(System.Int32)">
            <summary>
            Obtains information about a specified number of devices.
            </summary>
            -
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.DiscoverDevices(System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Obtains information about available devices using a socket.
            </summary>
            -
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            <param name="irdaSocket">A <see cref="T:System.Net.Sockets.Socket"/>
            to be uses to run the discovery process.
            It should have been created for the IrDA protocol</param>
            -
            <returns>The discovered devices as an array of <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.ParseDeviceList(System.Byte[])">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of the peer device using the specified socket.
            </summary>
            <param name="irdaSocket">A connected IrDA <c>Socket</c>.</param>
            <returns>The name of the remote device.</returns>
            -
            <remarks>
            This finds the name of the device to which the socket is connection, 
            an exception will occur if the socket is not connected.
            </remarks>
            -
            <exception cref="T:System.ArgumentNullException">
            <c>s</c> is null (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The remote device is not present in the list of discovered devices.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The socket is not connected.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)">
            <overloads>
            Forms a connection to the specified peer service.
            </overloads>
            --
            <summary>
            Forms a connection to the specified endpoint.
            </summary>
            <remarks>
            <para>
            The endpoint specifies both the peer device and service name 
            to connect to.  If only one device is expected to be in range, or 
            an arbitrary peer device is suitable, then one can use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> instead.
            </para>
            </remarks>
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)">
            <summary>
            Forms a connection to the specified service on an arbitrary peer.
            </summary>
            <remarks>
            As noted the connection will be made to an arbitrary peer.  This is 
            most useful when it is expected that there will be only one device in 
            range &#x2014; as is often the case.  If a connection is to be made to
            a particular remote peer, then use 
            <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/>.
            </remarks>
            <param name="service">The Service Name to connect to eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to a 
            specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.</param>
            -
            <exception cref="T:System.InvalidOperationException">
            No peer IrDA device was found.  The exception has message &#x201C;No device&#x201D;.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            A connection could not be formed.  See the exception message or 
            <see cref="P:System.Net.Sockets.SocketException.SocketErrorCode"/> 
            (or <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> on NETCF) 
            for what error occurred.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(InTheHand.Net.IrDAEndPoint,System.AsyncCallback,System.Object)">
            <overloads>
            Begins an asynchronous request for a remote host connection.
            </overloads>
            -
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by an endpoint. 
            </summary>
            -
            <param name="remoteEP">
            An <see cref="T:InTheHand.Net.IrDAEndPoint"/> initialised with the address of the peer
            device and the service name to connect to.
            </param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a service name (string). 
            </summary>
            -
            <param name="service">The service name of the remote host.</param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
            -
            <remarks>
            <para>
            See <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(System.String)"/> 
            for the errors that can occur.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned
            by a call to <see cref="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(InTheHand.Net.IrDAEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:InTheHand.Net.Sockets.IrDAClient.BeginConnect(System.String,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and the underlying connection.
            </summary>
            -
            <remarks>The two XxxxxClient classes produced by Microsoft (TcpClient, 
            and IrDAClient in the NETCF) have various documented behaviours and various
            actual behaviours for close/dispose/finalize on the various platforms. :-(
            The current TcpClient implementation is that 
            Close/Dispose closes the connection by closing the underlying socket and/or
            NetworkStream, and finalization doesn't close either.  This is the behaviour
            we use for the here (for <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>,
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>).  (The documentation in MSDN for 
            <see cref="T:System.Net.Sockets.TcpClient"/> is still wrong by-the-way,
            see <see href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=158480">
            Microsoft feedback #158480</see>).
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.GetStream">
            <summary>
            Returns the <see cref="T:System.Net.Sockets.NetworkStream"/> used to send and receive data.
            </summary>
            -
            <returns>The underlying <c>NetworkStream</c>.</returns>
            -
            <remarks>
            <para>
            <c>GetStream</c> returns a <c>NetworkStream</c> 
            that you can use to send and receive data. The <c>NetworkStream</c> class 
            inherits from the <see cref="T:System.IO.Stream"/> class, which provides a 
            rich collection of methods and properties used to facilitate network communications.
            </para>
            <para>You must call the <see cref="M:InTheHand.Net.Sockets.IrDAClient.Connect(InTheHand.Net.IrDAEndPoint)"/> 
            method, or one of its overloads, first, or 
            the <c>GetStream</c> method will throw an <c>InvalidOperationException</c>.
            After you have obtained the <c>NetworkStream</c>, call the 
            <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/>
            method to send data to the remote host.
            Call the <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> 
            method to receive data arriving from the remote host.
            Both of these methods block until the specified operation is performed.
            You can avoid blocking on a read operation by checking the 
            <see cref="P:System.Net.Sockets.NetworkStream.DataAvailable"/> property.
            A <c>true</c> value means that data has arrived from the remote host and
            is available for reading. In this case, <c>Read</c> is 
            guaranteed to complete immediately.
            If the remote host has shutdown its connection, <c>Read</c> will 
            immediately return with zero bytes.
            </para>
            <note>
            Closing the <c>NetworkStream</c> closes the connection.  
            Similarly Closing, Disposing, or the finalization of the <c>IrDAClient</c> 
            Disposes the <c>NetworkStream</c>.
            This is new behaviour post 2.0.60828.0.
            <!-- [dodgy?]TcpClient documentation:
            You must close the NetworkStream when you are through sending and
            receiving data. Closing TcpClient does not release the NetworkStream.-->
            </note>
            <note>
            If you receive a SocketException, use SocketException.ErrorCode to obtain
            the specific error code. After you have obtained this code, you can refer
            to the Windows Sockets version 2 API error code documentation in MSDN
            for a detailed description of the error.
            </note>
            </remarks>
            -
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> is not connected to a remote host.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <c>IrDAClient</c> has been closed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.IrDAClient.Close"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made. 
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Available">
            <summary>
            The number of bytes of data received from the network and available to be read.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <remarks>
            This is particularly useful as it allows setting socket 
            options, for instance IrCOMM Cooked mode, ie
            <see cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode"/>.
            </remarks>
            <example>Example code to connect to a IrCOMM service would be as 
            follows, note the use of the Client property.
            <code lang="VB.NET">
            Public Shared Sub Main()
               Dim cli As New IrDAClient
               ' Set IrCOMM Cooked/9-wire mode.
               cli.Client.SetSocketOption( _
                 IrDASocketOptionLevel.IrLmp, _
                 IrDASocketOptionName.NineWireMode, _
                 1)  ' representing true
               ' Connect
               cli.Connect("IrDA:IrCOMM")
               ' Connected, now send and receive e.g. by using the 
               ' NetworkStream returned by cli.GetStream
               ...
            End Sub
            </code>
            </example>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> for an <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> is connected to a remote host.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAClient.RemoteMachineName">
            <summary>
            Gets the name of the peer device participating in the communication.
            </summary>
            -
            <remarks>
            This finds the name of the device to which the client is connection, 
            an exception will occur if the socket is not connected.
            </remarks>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the remote device is not found in the discovery cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The socket is not connected.
            </exception>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothClient">
            <summary>
            Provides client connections for Bluetooth RFCOMM network services.
            </summary>
            <remarks>
            <note>This class currently only supports devices which use the Microsoft 
            and Widcomm Bluetooth stacks, devices which use the other stacks will 
            not work.
            </note>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>When connecting
            normally an endpoint with an Address and a Service Class Id 
            is specified, then the system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            If instead a port value is provided in the endpoint then the SDP 
            lookup will be skipped and  the system will connect to the specified 
            port directly.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>
            this class always uses RFCOMM, instead the Service Class Id of the 
            particular service to which you want to connect must be specified,
            perhaps
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort">BluetoothService.SerialPort</see>,
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush">BluetoothService.ObexObjectPush</see>,
            or the unique UUID/<see cref="T:System.Guid"/> that you are using in
            your custom server application.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class and binds it to the specified local endpoint.
            </summary>
            <param name="localEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> to which you bind the Bluetooth Socket.
            Only necessary on multi-radio system where you want to select the local radio to use.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices">
            <summary>
            Discovers accessible Bluetooth devices, both remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(255, true, true, true)
            </para>
            </remarks>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32)">
            <summary>
            Discovers accessible Bluetooth devices, both remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(maxDevices, true, true, true)
            </para>
            </remarks>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices, optionally remembered and in-range,
            and returns their names and addresses.
            </summary>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices, optionally remembered and in-range or just in-range,
            and returns their names and addresses.
            </summary>
            -
            <remarks>
            <para>The <paramref name="discoverableOnly"/> parameter is not supported 
            on the Microsoft stack on WinXP as the stack there returns the remembered and Device-Inquiry-results already 
            merged, it is however supported on Windows 7.
            It is supported on WM/CE and on Widcomm (both platforms).
            Note when that flag is set the other related flag values are ignored.
            </para>
            <para>To remove devices from the list of remembered/authenticated
            devices use <see cref="M:InTheHand.Net.Bluetooth.BluetoothSecurity.RemoveDevice(InTheHand.Net.BluetoothAddress)">BluetoothSecurity.RemoveDevice</see>
            </para>
            </remarks>
            -
            <param name="maxDevices">The number of in-range devices to find before the inquiry may be stopped early.
            The result can contain more than this number of devices.
            </param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            <param name="discoverableOnly">True to return only the devices that 
            are in range, and in discoverable mode.  See the remarks section.</param>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevicesInRange">
            <summary>
            Discovers Bluetooth devices that are in range and are in &#x2018;discoverable mode&#x2019;
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"
            />(255, false, false, false, true)
            </para>
            </remarks>
            -
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginDiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            An asynchronous version of <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            -
            <param name="maxDevices">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="authenticated">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="remembered">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="unknown">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="discoverableOnly">See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </param>
            <param name="callback">An optional asynchronous callback, to be called 
            when the discovery is complete.
            </param>
            <param name="state">A user-provided object that distinguishes this 
            particular asynchronous discovery request from other requests.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous discovery, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.EndDiscoverDevices(System.IAsyncResult)">
            <summary>
            Ends an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned
            by <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginDiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)"/>.
            </param>
            -
            <returns>See <see cref="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects a client to a specified endpoint.
            </summary>
            -
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the server on the remote device.</param>
            -
            <remarks>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>Normally an endpoint with an Address and a Service Class Id 
            is specified, then the system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            If instead a port value is provided in the endpoint then the SDP 
            lookup will be skipped and  the system will connect to the specified 
            port directly.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothClient">class</see> remarks for more information.
            </para> 
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified Bluetooth address and service identifier. 
            </summary>
            -
            <remarks>
            <!--This para is in both the class remarks and in Connect(BtEndPoint)-->
            <para>The system will automatically lookup the SDP 
            record on the remote device for that service class and connect to 
            the port number (RFCOMM Channel Number) specified there.
            </para>
            <para>Note: Do not attempt to connect with service
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">BluetoothService.RFCommProtocol</see>.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothClient">class</see> remarks for more information.
            </para> 
            </remarks>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote host.
            </param>
            <param name="service">The Service Class Id of the service on the remote host.
            The standard Bluetooth Service Classes are provided on class 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a <see cref="T:InTheHand.Net.BluetoothAddress"/> and a service identifier (Guid). 
            </summary>
            -
            <remarks>
            <para>See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            method for information on the usage of the values in the endpoint.
            </para>
            </remarks>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/> of the remote host.
            </param>
            <param name="service">The Service Class Id of the service on the remote host.
            The standard Bluetooth Service Classes are provided on class 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that 
            references the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object that contains information 
            about the connect operation. This object is passed to the <paramref name="requestCallback"/> 
            delegate when the operation is complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote server is specified by a <see cref="T:InTheHand.Net.BluetoothEndPoint"/>. 
            </summary>
            -
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that 
            represents the server on the remote device.
            See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for information on the usage of the values in the endpoint.
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that 
            references the method to invoke when the operation is complete.
            </param>
            <param name="state">A user-defined object that contains information 
            about the connect operation. This object is passed to the <paramref name="requestCallback"/> 
            delegate when the operation is complete.
            </param>
            -
            <remarks>
            <para>See the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for information on the usage of the values in the endpoint.
            </para>
            </remarks>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous connect, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned by a call to 
            <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <remarks>The two XxxxxClient classes produced by Microsoft (TcpClient, 
            and IrDAClient in the NETCF) have had various documented behaviours and various
            actual behaviours for close/dispose/finalize on the various platforms. :-(
            The current TcpClient implementation on is that 
            Close/Dispose closes the connection by closing the underlying socket and/or
            NetworkStream, and finalization doesn't close either.  This is the behaviour
            we use for the here (for <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>,
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>).  (The documentation in MSDN for 
            <see cref="T:System.Net.Sockets.TcpClient"/> is still wrong by-the-way,
            see <see href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=158480">
            Microsoft feedback #158480</see>).
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetStream">
            <summary>
            Gets the underlying stream of data.
            </summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"/>.</returns>
            <remarks><see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> returns a <see cref="T:System.Net.Sockets.NetworkStream"/> that you can use to send and receive data.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> class inherits from the <see cref="T:System.IO.Stream"/> class, which provides a rich collection of methods and properties used to facilitate network communications.
            <para>You must call the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)"/> / <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            method first, or the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method will throw an <see cref="T:System.InvalidOperationException"/>.
            After you have obtained the <see cref="T:System.Net.Sockets.NetworkStream"/>, call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/> method to send data to the remote host.
            Call the <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> method to receive data arriving from the remote host.
            Both of these methods block until the specified operation is performed.
            You can avoid blocking on a read operation by checking the <see cref="P:System.Net.Sockets.NetworkStream.DataAvailable"/> property.
            A true value means that data has arrived from the remote host and is available for reading.
            In this case, <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> is guaranteed to complete immediately.
            If the remote host has shutdown its connection, <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> will immediately return with zero bytes.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is not connected to a remote host.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(System.String)">
            <summary>
            Sets the PIN associated with the remote device.
            </summary>
            <param name="pin">PIN which must be composed of 1 to 16 ASCII characters.</param>
            <remarks>
            <para>Is not supported on all platforms.
            For instance see the Widcomm documentation 
            </para>
            <para>Assigning null (Nothing in VB) or an empty String will revoke the PIN.
            </para>
            <para>In version 2.3 could only be called when connected.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>
            <para>Is not supported on all platforms.
            For instance see the Widcomm documentation 
            </para>
            <para>Assigning null (Nothing in VB) or an empty String will revoke the PIN.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetRemoteMachineName(InTheHand.Net.BluetoothAddress)">
            <summary>
            Gets the name of the specified remote device.
            </summary>
            <param name="a">Address of remote device.</param>
            <returns>Friendly name of specified device.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of a device by a specified socket.
            </summary>
            <param name="s"> A <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <returns>Returns a string value of the computer or device name.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.InquiryAccessCode">
            <summary>
            Get or set the Device Discovery Inquiry Access Code.
            </summary>
            -
            <remarks>
            <para>This is supported only the Microsoft stack on WindowsMobile/etc.
            It is not supported on any other platforms.
            </para>
            <para>The default value is
            <see cref="F:InTheHand.Net.BluetoothAddress.Giac">GIAC</see> (0x9E8B33).
            See also constant 
            <see cref="F:InTheHand.Net.BluetoothAddress.Liac">LIAC</see> (0x9E8B00).
            The valid range is 0x9E8B00 through 0x9E8B3f.
            </para>
            </remarks>
            -
            <value>An <see cref="T:System.Int32"/> containing the Access Code
            to be used for Inquiry.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.InquiryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>On Windows CE the actual value used is expressed in units of 1.28 seconds, so will be the nearest match for the value supplied.
            The default value is 10 seconds. The maximum is 60 seconds.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data received from the network and available to be read.</value>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            -
            <value>The underlying network <see cref="T:System.Net.Sockets.Socket"/>.</value>
            -
            <remarks>
            <note>The property is only supported on Microsoft Bluetooth stack platforms.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"/> for a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is connected to a remote host.
            </summary>
            <value>true if the <see cref="P:InTheHand.Net.Sockets.BluetoothClient.Client"/> socket was connected to a remote resource as of the most recent operation; otherwise, false.</value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LingerState">
            <summary>
            Gets or sets a value that specifies whether the client will delay closing 
            in an attempt to send all pending data.
            </summary>
            -
            <remarks>
            <para>See <see cref="P:System.Net.Sockets.Socket.LingerState">Socket.LingerState</see>.
            </para>
            <para>In Widcomm, linger <c>false</c> (disabled) is not supported.
            </para>
            </remarks>
            -
            <value>A <see cref="T:System.Net.Sockets.LingerOption"/> that specifies 
            how to linger while closing a socket.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LinkKey">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.LinkPolicy">
            <summary>
            Returns the Link Policy of the current connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.RemoteEndPoint">
            <summary>
            Get the remote endpoint.
            </summary>
            -
            <value>
            The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> with which the 
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> is communicating.
            </value>
            -
            <remarks>
            <para>Note it can't be guaranteed that the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            and <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> parts
            of the returned endpoint are valid; and this will affect the
            <see cref="M:InTheHand.Net.BluetoothEndPoint.ToString"/> output.
            In particular, on MSFT, the <see cref="P:InTheHand.Net.Sockets.BluetoothClient.RemoteEndPoint"/>
            for a client connection seems to have no <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/>
            and a garbage <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>,
            so we would display garbage there in <see cref="M:InTheHand.Net.BluetoothEndPoint.ToString"/>.
            An in-bound/server connection however does have a valid Port.
            (There the endpoints are returned from the native socket).
            On the other hand on Widcomm, Bluetopia and on BlueSoleil the
            opposite is the case: for a client the Port is known but it isn't
            for a server, and the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is blank in both cases.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothClient.LiveDiscoveryCallback">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.IrDA.IrDAAttributeType">
            <summary>
            Defines the type of an IAS attribute.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.Integer">
            <summary>
            Identifies an integer attribute value.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.OctetSequence">
            <summary>
            Identifies a binary, or octet, attribute value.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAAttributeType.String">
            <summary>
            Identifies a string attribute value.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder">
            <summary>
            Provides a simple way to build a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>, 
            including ServiceClassIds and ServiceNames attributes etc.
            </summary>
            -
            <remarks>
            <para>The service&#x2019;s Class Id can be set with the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Guid)"/>/<see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt16)"/>/etc
            methods, the protocol stack set with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property (default RFCOMM), and the Service Name set with the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceName"/>
            property.  Other properties and methods exist for controlling the more advanced 
            attributes.
            </para>
            <para>Adding the standard text-string attributes (ServiceName etc) is normally quite
            difficult due to the very baroque manner of specifying these strings&#x2019; character 
            encoding and natural language.  The builder handles all the complexity internally; 
            the strings are written in UTF-8 encoding and marked as 'English' language.
            </para>
            </remarks>
            -
            <example>
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.AddServiceClass(BluetoothService.SerialPort);
            bldr.ServiceName = "Alan's SPP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.ProtocolType = BluetoothProtocolDescriptorType.GeneralObex;
            bldr.AddServiceClass(BluetoothService.ObexFileTransfer);
            bldr.ServiceName = "Alan's FTP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.#ctor">
            <summary>
            Create a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ReportIfDuplicates(System.Collections.Generic.List{InTheHand.Net.Bluetooth.ServiceAttribute},System.Boolean)">
            <param name="list">The list to check for duplicates.
            </param>
            <param name="storedList"><c>true</c> if checking a previously stored list 
            of attributes, and <c>false</c> if checking a immediate addition of an 
            attribute. Thus throws <c>InvalidOperationException</c> and 
            <c>ArgumentException</c> respectively.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Guid)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid128">A <see cref="T:System.Guid"/> containing a 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt16)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16">A <see cref="T:System.UInt16"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid32">A <see cref="T:System.UInt32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Int32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16or32">A <see cref="T:System.Int32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddBluetoothProfileDescriptor(System.Guid,System.Byte,System.Byte)">
            <summary>
            Add a <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList"/> 
            element.
            </summary>
            -
            <param name="classId">The Service Class Id of the Bluetooth profile, 
            as a <see cref="T:System.Guid"/>
            </param>
            <param name="majorVersion">The major version number, as a <see cref="T:System.Byte"/>.
            </param>
            <param name="minorVersion">The minor version number, as a <see cref="T:System.Byte"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(System.Collections.Generic.IEnumerable{InTheHand.Net.Bluetooth.ServiceAttribute})">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(System.Collections.IEnumerable)">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.IEnumerable"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttributes(InTheHand.Net.Bluetooth.ServiceAttribute[])">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an array of 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.ServiceAttribute)">
            <overloads>
            Add a custom attribute.
            </overloads>
            -
            <summary>
            Add a custom attribute from a given <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            </summary>
            -
            <param name="serviceAttribute">An attribute as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instance.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddCustomAttribute(System.UInt16,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.FromJsr82ServerUri(System.String)">
             <summary>
             Converts a Java JSR 82 Bluetooth server URL into a 
             <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> instance.
             </summary>
             -
             <remarks>
             <note type="caution">The <c>authenticate</c> and <c>encrypt</c> and any 
             related parameters are completely disregarded.  When using with 
             <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> you must take 
             care to set the required security requirements on it directly.
             </note>
             This method is intended to read the Service Record (SDP) related items only; 
             in particular the Service Class ID UUID and Service Name parameters.
             It supports only the <c>btspp</c> and <c>btObex</c> schemes and only for
             server-side use only.  For instance
            <code lang="none">btspp://localhost:3B9FA89520078C303355AAA694238F08;name=FooBar</code>
             and
            <code lang="none">btgoep://localhost:3B9FA89520078C303355AAA694238F08</code>
             There is no suppport for e.g.
            <code lang="none">btl2cap://localhost:3B9FA89520078C303355AAA694238F08;name=Aserv</code>
             as the library supports only RFCOMM connections currently.
             </remarks>
             -
             <param name="url">A server-side JSR 82 URL in one of the supported forms.
             </param>
             -
             <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> 
             initialised with the supported components of the supplied JSR 82 URL.
             </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceRecord">
            <summary>
            Gets the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance 
            constructed by the specified <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> instance.
            </summary>
            -
            <value>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> that contains 
            the URI constructed by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> .
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> 
            created by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> properties is invalid.
            For instance, if duplicates attributes are disallowed but duplicates are 
            present.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProviderName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceDescription">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType">
            <summary>
            Get or set which type of element will be added for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <value>An instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType"/> 
            enumeration.
            </value>
            -
            <remarks><para>Supported type are the following:
            </para>
            <list type="bullet">
            <item><term>None</term>
            <description>No PDL attribute will be added.</description>
            </item>
            <item><term>Rfcomm</term>
            <description>A standard RFCOMM element will be added.</description>
            </item>
            <item><term>Goep</term>
            <description>A standard GOEP (OBEX) element will be added.</description>
            </item>
            </list>
            <para>The default is <see cref="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.Rfcomm"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceRecord">
            <summary>
            Holds an SDP service record.
            </summary>
            -
            <remarks>
            <para>A Service Record is the top-level container in the Service Discovery
            protocol/database.  It contains a list of Service Attributes each identified 
            by a numerical identifier (its <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>),
            and with its data held in a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> has methods to access the
            various types of data it contains.
            </para>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc. The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            <para><see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> provides the normal 
            collection-type methods properties e.g. 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Count"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Item(System.Int32)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetEnumerator"/>.  So, to 
            access a particular attribute&#x2019;s content get the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> using one of those methods 
            and then read the data from the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>. 
            See the example below.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>The SDP specification defines the content of <c>TextString</c> element
            type very loosely and they are thus very difficult to handle when reading 
            from a record.
            The encoding of the string content is
            not set in the specification, and thus implementors are free to use any 
            encoding they fancy, for instance ASCII, UTF-8, 
            UTF-16, Windows-1252, etc &#x2014; all of which have been seen in record 
            from real devices.  It would have been much more sensible to mandate UTF-8 
            as the other part of the Bluetooth protocol suite do e.g. the PIN is always
            stored as a UTF-8 encoded string.
            </para>
            <para>Not only that but some of the attributes defined in the SDP specification
            can be included in more than one &#x2018;natural language&#x2019; version,
            and the definition of the language and the string&#x2019;s encoding
            is not included in the element, but is 
            instead defined in a separate element and the ID of the string attribute
            modified.  Yikes!
            </para>
            <para>  This makes it near impossible to decode the bytes in
            a string element at parse time and create the string object then.  Therefore
            the parser creates an element containing the raw bytes from the string which
            hopefully the user will know how to decode, passing the required encoding 
            information to one of methods on the element i.e.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            which takes a multi-language-base item from the same record (see e.g.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>),
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
            which takes a .NET <see cref="T:System.Text.Encoding"/> object,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/>,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            on the record which again takes a multi-language-base item.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>A Service Record can be created from the source byte array by using the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
            method or the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            on <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>.  A record
            can also be created from a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            passed to the constructor 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceAttribute})"/>.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>From the SDP specification:
            </para>
            <list type="bullet">
            <item><term>2.2 ServiceRecord </term><description>&#x201C;&#x2026;
            a list of service attributes.&#x201D;</description></item>
            <item><term>2.3 ServiceAttribute</term><description>&#x201C;&#x2026;
            two components: an attribute id and an attribute value.&#x201D;</description></item>
            <item><term>2.4 Attribute ID</term><description>&#x201C;&#x2026;
            a 16-bit unsigned integer&#x201D;,
            &#x201C;&#x2026;represented as a data element.&#x201D;</description></item>
            <item><term>2.5 Attribute Value</term><description>&#x201C;&#x2026;
            a variable length field whose meaning is determined by the attribute ID&#x2026;&#x201D;,
            &#x201C;&#x2026;represented by a data element.&#x201D;</description></item>
            <item><term>3.1 Data Element</term><description>&#x201C;&#x2026;
            a typed data representation.
            It consists of two fields: a header field and a data field.
            The header field, in turn, is composed of two parts: a type descriptor and a size descriptor.
            &#x201D;</description></item>
            <item><term>3.2 Data Element Type Descriptor </term><description>&#x201C;&#x2026;
            a 5-bit type descriptor.&#x201D;</description></item>
            <item><term>3.3 Data Element Size Descriptor </term><description>&#x201C;&#x2026;
            The data element size descriptor is represented as a
            3-bit size index followed by 0, 8, 16, or 32 bits.&#x201D;</description></item>
            </list>
            </remarks>
            -
            <example>
            <code lang="C#">
            ServiceRecord record = ...
            ServiceAttribute attr = record.GetAttributeById(UniversalAttributeId.ServiceRecordHandle);
            ServiceElement element = attr.Value;
            if(element.ElementType != ElementType.UInt32) {
              throw new FooException("Invalid record content for ServiceRecordHandle");
            }
            UInt32 handle = (UInt32)element.Value;
            </code>
            or
            <code lang="VB.NET">
            Dim bppRecord As ServiceRecord = ...
            Dim attr As ServiceAttribute = bppRecord.GetAttributeById(BasicPrintingProfileAttributeId.PrinterName)
            Dim element As ServiceElement = attr.Value;
            ' Spec say it is in UTF-8
            Dim printerName As String = element.GetValueAsStringUtf8()
            </code>
            </example>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgNotSeq">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgNoAttributeWithId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceRecord.ErrorMsgListContainsNotAttribute">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            containing no <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceAttribute})">
            <overloads>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(InTheHand.Net.Bluetooth.ServiceAttribute[])">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an array of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> by parsing
            the given array of <see cref="T:System.Byte"/>.
            </summary>
            -
            <remarks>This uses the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>
            with its default settings.
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.  In particular for the errors that can result, two
            of which are listed here.
            </remarks>
            -
            <param name="recordBytes">A byte array containing the encoded Service Record.
            </param>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeByIndex(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Determines whether a service attribute with the specified ID, 
            and optional natural language, is in the List.
            </overloads>
            -
            <summary>
            Determines whether a service attribute with the specified ID is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Returns the attribute with the given ID.
            </overloads>
            -
            <summary>
            Returns the attribute with the given ID.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Determines whether a TextString service attribute with the specified ID 
            and natural language 
            is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Returns the attribute with the given ID and natural language.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID and language.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id with the given language base in the record.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateLanguageBasedAttributeId(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Create the attribute id resulting for adding the language base attribute id.
            </summary>
            -
            <returns>The result <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</returns>
            -
            <exception cref="T:System.OverflowException">
            <paramref name="baseId"/> added to the <paramref name="id"/>
            would create an id that cannot be represented as an Attribute Id.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the specified natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, given 
            the Language attribute it should use it to find and decode the string.
            If the primary Language attribute is to be used, then use the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/> 
            method that takes only the id parameter.
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            LanguageBaseItem primaryLang = record.GetPrimaryLanguageBaseItem();
            if (primaryLang == null) {
              Console.WriteLine("Primary multi-language not present, would have to guess the string's encoding.");
              return;
            }
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName, primaryLang);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the primary natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, it will 
            find the primary Language attribute and use it to find and decode the string.
            And if there is no primary Language attribute, which is the case in many 
            of the records one sees on mobile phones, it will attempt the operation 
            assuming the string is encoded in UTF-8 (or ASCII).
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetLanguageBaseList">
            <summary>
            Gets the list of LanguageBaseAttributeId items in the service record.
            </summary>
            -
            <remarks>
            See also <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>.
            </remarks>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            An array of length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem">
            <summary>
            Gets the primary LanguageBaseAttributeId item in the service record.
            </summary>
            -
            <remarks>
            For instance, can be used with methods 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            etc.  See example code in the first.
            </remarks>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>, or null
            if the service record contains no such attribute, or 
            no primary language item (one with Base Id 0x0100) is included.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetLanguageBaseList"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            of type <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </returns>
            -
            <example>
            In C#:
            <code lang="C#">
            foreach (ServiceAttribute curAttr in record) {
               if (curAttr.Id == UniversalAttributeId.ProtocolDescriptorList) {
               ...
            }
            </code>
            In Visual Basic:
            <code lang="VB.NET">
            For Each curAttr As ServiceAttribute In record
               If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
               ...
            Next
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray">
            <summary>
            Return the byte array representing the service record.
            </summary>
            -
            <remarks>The byte array content is created dynamically from the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance using
            the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/> class.
            </remarks>
            -
            <returns>The result as an array of <see cref="T:System.Byte"/>.
            </returns>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.ServiceRecord.SourceBytes"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.Count">
            <summary>
            Gets the count of attributes in the record.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.</returns>
            -
            <exception cref="T:System.Exception">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.AttributeIds">
            <summary>
            Get a list of the numerical IDs of the Attributes in the record 
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.
            </summary>
            -
            <remarks>
            This method will likely be only rarely used: instead 
            one would generally want either to read a specific attribute using 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            or read every attribute by using 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>'s
            <c>IEnumerable</c> ability e.g.
            <code lang="VB.NET">
               For Each curAttr As ServiceAttribute In record
                  If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
                  ...
               Next
            </code>
            <para>Note, for NETCFv1 this returns an instance of the non-Generic list 
            <see cref="T:System.Collections.IList"/>.
            </para>
            </remarks>
            -
            (Provide a pure example since NDocs makes big mess of displaying Generic types).
            <example>
            In C#:
            <code lang="C#">
              IList&lt;ServiceAttributeId&gt; ids = record.GetAttributeIds();
            </code>
            In VB.NET:
            <code lang="VB.NET">
              Dim ids As IList(Of ServiceAttributeId) = record.GetAttributeIds()
            </code>
            Or without Generics in .NET 1.1 (NETCFv1) in VB.NET:
            <code lang="VB.NET">
              Dim ids As IList = record.GetAttributeIds()
            </code>
            </example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceRecord.SourceBytes">
            <summary>
            Get the raw byte array from which the record was parsed.
            </summary>
            -
            <remarks>
            <para>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> can be created either by manually building new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s holding new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>s, or it can be created
            by <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> parsing an array
            of bytes read from another machine by e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>.
            In that case this method returns that source byte array.
            </para>
            <para>To creates a Service Record byte array from the contained
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s use
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray"/> or <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/>.
            </para>
            </remarks>
            -
            <value>
            An array of <see cref="T:System.Byte"/>, or <see langword="null"/> if
            the record was not created by parsing a raw record.
            </value>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.ToByteArray"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceAttributeId">
            <summary>
            A Service Attribute Id identifies each attribute within an SDP service record.
            </summary>
            -
            <remarks>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc, see namespace <see cref="N:InTheHand.Net.Bluetooth.AttributeIds"/>.
            The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIdLookup">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.  Implementing <see cref="T:System.Enum"/>-like
            behaviour.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Type[])">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Type[],InTheHand.Net.Bluetooth.LanguageBaseItem[],InTheHand.Net.Bluetooth.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            <param name="langBaseList">
            The list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> applying 
            to the current record.  They are used when an attribute is marked as a
            multi-language one and thus need the base offset removed from the specified
            numerical value.
            </param>
            <param name="applicableLangBase">
            The applicable <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> if the 
            matched attribute is a multi-language one.  <see langword="null"/> 
            (<see langword="Nothing"/> in Visual Basic), if no attribute was matched
            or it was not a multi-language one.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIdLookup._GetNameIfMatchesMultiLang(InTheHand.Net.Bluetooth.ServiceAttributeId,System.Reflection.FieldInfo,InTheHand.Net.Bluetooth.LanguageBaseItem[],InTheHand.Net.Bluetooth.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute">
            <summary>
            Indicates that the field to which it is applied represents an SDP Attribute 
            that can exist in multiple language instances and thus has a language base 
            offset applied to its numerical ID when added to a record.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute"/>
            class. 
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs">
            <summary>
            Provides data for an authentication event.
            </summary>
            -
            <remarks>
            <para>For usage information, see the class documentation at
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> it includes
            an example, 
            also see the documentation on each of this class&#x2019;s properties.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.SixDigitsFormatString">
            <summary>
            A format string to display the Passkey or comparison Number as six decimal digits.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ErrorMessageSendingAnotherPinIsDisallowed_">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.#ctor">
            <summary>
            Initialize an instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.#ctor(InTheHand.Net.Sockets.BluetoothDeviceInfo)">
            <summary>
            Initialize an instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
            </summary>
            -
            <param name="device">The device information to store in the event args.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ConfirmOob(System.Byte[],System.Byte[])">
            <summary>
            Creates a positive response to the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand"/>
            pairing event also providing optional security values.
            </summary>
            -
            <param name="c">An byte array of length 16 bytes, or null.
            A 128-bit cryptographic key used for two-way authentication.
            </param>
            <param name="r">An byte array of length 16 bytes, or null.
            A randomly generated number used for one-way authentication.
            If this number is not provided by the device initiating the OOB
            session, this value is 0.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Device">
            <summary>
            Gets the device requiring an authentication response as a
            <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationRequirements">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements"/>
            enumeration value that specifies the 'Man in the Middle' protection
            required for authentication.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.IoCapability">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothIoCapability"/>
            enumeration value that defines the input/output capabilities of the
            Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationMethod">
            <summary>
            Gets a <see cref="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod"/>
            enumeration value that defines the authentication method utilized
            by the Bluetooth device.
            </summary>
            -
            <remarks>
            <para>The method to be used depends on the
            and the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.IoCapability"/> on both machines.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.JustWorksNumericComparison">
            <summary>
            Gets whether the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
            method is of subtype "JustWorks".
            </summary>
            -
            <remarks>
            <para>Gets whether the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
            method is of subtype "JustWorks".
            </para>
            <para>If true then a simple Yes/No answer from the user is adequate,
            Or if false then the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>.
            value should be displayed to the user(s) so that he/she/they can
            verify that the values displayed on both devices are the same.
            Is null if 
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationRequirements"/>
            is not 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey">
            <summary>
            Get the Numeric or Passcode value being used by the 
            SSP pairing event.
            </summary>
            -
            <value>Is a six digit number from 000000 to 999999,
            or <see langword="null"/> if not present.
            </value>
            -
            <remarks>
            <para>Will be present in the
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>,
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.JustWorksNumericComparison"/>,
            and <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.PasskeyNotification"/>
            authentication methods only.
            </para>
            <para>Is a six digit number from 000000 to 999999.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskeyAsString">
            <summary>
            Gets the <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            formatted in its correct six decimal digits format.
            </summary>
            -
            <value>A <see cref="T:System.String"/> representing
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            formatted in its six decimal digits format,
            or <see langword="null"/> if 
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>
            is <see langword="null"/>.
            </value>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Pin">
            <summary>
            Gets or sets the PIN string to be used to authenticate the specified device.
            </summary>
            -
            <remarks>
            <para>Is only used in the 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy"/>
            pairing method.
            </para>
            <para>On an authentication event, a PIN response is sent if the value 
            returned from the handler is not <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Confirm">
            <summary>
            Get or set whether we will respond positively, negatively or
            ignore the SSP pairing event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ResponseNumberOrPasskey">
            <summary>
            Get or set what Numeric or Passcode value or whether no value
            will be used in responding to the SSP pairing event.
            </summary>
            -
            <remarks>
            <para>Is a number from 000000 to 999999, or null if not to be included
            in the response.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult">
            <summary>
            Gets or sets whether the callback is called again after the PIN response
            is sent.
            </summary>
            -
            <remarks><para>This is useful to see the error code returned by sending
            the PIN response. It can thus also be used to see the successful result 
            of sending the PIN response.  See the documentation on the 
            <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AttemptNumber">
            <summary>
            Gets how many attempts at sending a PIN have been tried.
            </summary>
            <remarks>
            When there&#x2019;s a new PIN request, the first time the callback is
            called this property will have value zero.  If the PIN is rejected and
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/>
            was set, then the callback will be recalled and this property will have
            value one, etc.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode">
            <summary>
            The Windows error code returned by the last PIN response attempt.
            </summary>
            -
            <remarks><para>A bad PIN/passcode value appears to result in a error code
            with value 1244, which is <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorNotAuthenticated"/>.
            </para>
            <para>If one tries to respond to that failure with another passcode,
            then error 1167 <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected"/>
            results.  So it seems that only one attempt is possible.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCodeAsUnsigned">
            <summary>
            The Windows error code returned by the last PIN response attempt,
            as an unsigned value.
            </summary>
            -
            <remarks>See <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CannotSendAnotherResponse">
            <summary>
            Gets whether it is not possible to send another PIN response.
            </summary>
            <remarks><para>For instance, in testing it appears that after one response
            the device becomes non-contactable, any PIN response returning error code
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected"/>.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothSocketOptionName">
            <summary>
            Defines <see cref="T:System.Net.Sockets.Socket"/> configuration option names for the <see cref="T:System.Net.Sockets.Socket"/> class.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.Authenticate">
            <summary>
            On connected socket, triggers authentication.
            On not connected socket, forces authentication on connection.
            For incoming connection this means that connection is rejected if authentication cannot be performed.
            </summary>
            <remarks>The optval and optlen parameters are ignored; however, Winsock implementation on Windows CE requires optlen to be at least 4 and optval to point to at least an integer datum.</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPAuthenticate">
            <summary>
            Toggles authentication under Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;(ULONG)TRUE/FALSE</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.Encrypt">
            <summary>
            On a connected socket, this command turns encryption on or off.
            On an unconnected socket, this forces encryption to be on or off on connection.
            For an incoming connection, this means that the connection is rejected if the encryption cannot be turned on.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetPin">
            <summary>
            This sets or revokes PIN code to use with a connection or socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetLink">
            <summary>
            This sets or revokes link key to use with a connection or peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLink">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtu">
            <summary>
            Get or set the default MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtu">
            <summary>
            This sets default MTU (maximum transmission unit) for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtu">
            <summary>
            Returns MTU (maximum transmission unit).
            For connected socket, this is negotiated value, for server (accepting) socket it is MTU proposed for negotiation on connection request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtuMaximum">
            <summary>
            Get or set the maximum MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;max. mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtuMaximum">
            <summary>
            This sets maximum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtuMaximum">
            <summary>
            Returns maximum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.XPMtuMinimum">
            <summary>
            Get or set the minimum MTU on Windows XP.
            </summary>
            <remarks>optlen=sizeof(ULONG), optval = &amp;min. mtu</remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetMtuMinimum">
            <summary>
            This sets minimum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMtuMinimum">
            <summary>
            Returns minimum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetXOnLimit">
            <summary>
            This sets XON limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetXOnLimit">
            <summary>
            Returns XON limit for a connection.
            XON limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification version 1.1).
            When amount of incoming data received, but not read by an application for a given connection grows past this limit, a flow control command is sent to the peer requiring suspension of transmission.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetXOffLimit">
            <summary>
            This sets XOFF limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetXOffLimit">
            <summary>
            Returns XOFF limit for a connection.
            XOFF limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification 1.1).
            If flow has been suspended because of buffer run-up, when amount of incoming data received, but not read by an application for a given connection falls below this limit, a flow control command is sent to the peer allowing continuation of transmission.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetSendBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetSendBuffer">
            <summary>
             Returns maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetReceiveBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetReceiveBuffer">
            <summary>
            Returns maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetV24Break">
            <summary>
            Retrieves last v24 and break signals set through MSC command from peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetRls">
            <summary>
            Retrieves last line status signals set through RLS command from peer device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SendMsc">
            <summary>
            Sends MSC command. V24 and breaks are as specified in RFCOMM Specification.
            Only modem signals and breaks can be controlled, RFCOMM reserved fields such as flow control are ignored and should be set to 0.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SendRls">
            <summary>
            Sends RLS command.
            Argument is as specified in RFCOMM Specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetFlowType">
            <summary>
            Gets flow control type on the connected socket.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetPageTimeout">
            <summary>
            Sets the page timeout for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetPageTimeout">
            <summary>
            Gets the current page timeout.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetScan">
            <summary>
            Sets the scan mode for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetScan">
            <summary>
            Gets the current scan mode.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetCod">
            <summary>
            Sets the class of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetCod">
            <summary>
            Retrieve the Class of Device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLocalVersion">
            <summary>
            Get the version information from the Bluetooth adapter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetRemoteVersion">
            <summary>
            Get the version of the remote adapter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetAuthenticationEnabled">
            <summary>
            Retrieves the authentication settings.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetAuthenticationEnabled">
            <summary>
            Sets the authentication policy of the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ReadRemoteName">
            <summary>
            Reads the remote name of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetLinkPolicy">
            <summary>
            Retrieves the link policy of the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.SetLinkPolicy">
            <summary>
            Sets the link policy for an existing baseband connection.
            The socket must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterHoldMode">
            <summary>
            Places the ACL connection to the specified peer device in HOLD mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterSniffMode">
            <summary>
            Places the ACL connection to the specified peer device in SNIFF mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ExitSniffMode">
            <summary>
            Forces the ACL connection to the peer device to leave SNIFF mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.EnterParkMode">
            <summary>
            Places the ACL connection to the peer device in PARK mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.ExitParkMode">
            <summary>
            Forces the ACL connection to the peer device to leave PARK mode.
            The device must be connected.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothSocketOptionName.GetMode">
            <summary>
            Gets the current mode of the connection.
            The mode can either be sniff, park, or hold. The socket must be connected.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.RemoveService(System.IntPtr,System.Byte[])">
            <exclude/>
            <summary>
            Remove a SDP record as added by <see cref="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.SetService(System.Byte[],InTheHand.Net.Bluetooth.ServiceClass)"/>.
            </summary>
            <param name="handle">The handle.
            </param>
            <param name="sdpRecord">The raw record, presumably not actually used by the stack.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.SetService(System.Byte[],InTheHand.Net.Bluetooth.ServiceClass)">
            <exclude/>
            <summary>
            Add a SDP record.
            </summary>
            -
            <param name="sdpRecord">An array of <see cref="T:System.Byte"/>
            containing the complete SDP record.
            </param>
            <param name="cod">A <see cref="T:InTheHand.Net.Bluetooth.ServiceClass"/>
            containing any bits to set in the devices Class of Device value.
            </param>
            -
            <returns>A handle representing the record, pass to 
            <see cref="M:InTheHand.Net.Bluetooth.Msft.MicrosoftSdpService.RemoveService(System.IntPtr,System.Byte[])"/> to remote the record.
            </returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.SelectBluetoothDeviceForm">
            <summary>
            Managed code dialog for Windows CE systems.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.SelectBluetoothDeviceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexWebRequest">
            <summary>
            Provides an OBEX implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            -
            <remarks>
            <para>If you want to transfer an file or other object using the standard 
            service as used by Windows' Wireless Link / Bluetooth File Transfer Wizard, 
            Palm's Beam, Nokia's Send via Infrared, then use the OBEX protocol.  
            </para>
            <para>The PUT operation is supported, and there is new support for GET,
            (see the documentation at the <see cref="P:InTheHand.Net.ObexWebRequest.Method"/>
            property).
            Changing folders is not supported, nor is getting a folder listing.
            </para>
            <para>In the previous version there were some issue with handling file names 
            that include non-English characters, and connections 
            to some device types failed.  Also if the connection to the peer was lost
            then the request could hang reading forever.  See the release note and bugs
            database for more information.
            </para>
            </remarks>
            -
            <example>
            For Bluetooth one can use code like the following to send a file:
            (Note a failure is signalled by an exception).
            <code lang="VB.NET">
            Dim addr As BluetoothAddress = BluetoothAddress.Parse("002233445566")
            Dim path As String = "HelloWorld.txt"
            '
            Dim req As New ObexWebRequest(addr, path)
            req.ReadFile("Hello World.txt")
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            That constructor isn't available for other transports (TCP/IP, IrDA)
            so one has to create a Uri to provide the scheme, address, and path
            parameters.  Thus use code like the following to send a file.
            <code lang="VB.NET">
            ' The host part of the URI is the device address, e.g. IrDAAddress.ToString(),
            ' and the file part is the OBEX object name.
            Dim addr As BluetoothAddress = ...
            Dim addrStr As String = addr.ToString("N")
            Dim uri As New Uri("obex://" &amp; addrStr &amp; "/HelloWorld.txt")
            '
            Dim req As New ObexWebRequest(uri)
            req.ReadFile("Hello World.txt")
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            Or, to send locally generated content use something like the following.
            <code lang="VB.NET">
            Dim addr As BluetoothAddress = ...
            Dim path As String = "HelloWorld2.txt"
            '
            Dim req As New ObexWebRequest(addr, path)
            Using content As Stream = req.GetRequestStream()
               ' Using a StreamWriter to write text to the stream...
               Using wtr As New StreamWriter(content)
                  wtr.WriteLine("Hello World GetRequestStream")
                  wtr.WriteLine("Hello World GetRequestStream 2")
                  wtr.Flush()
                  ' Set the Length header value
                  req.ContentLength = content.Length
               End Using
               ' In this case closing the StreamWriter also closed the Stream, but ...
            End Using
            Dim rsp As ObexWebResponse = CType(req.GetResponse(),ObexWebResponse) 
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            </code>
            See also the ObexPushApplication and ObexPushVB sample programs.
            </example>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)">
            <overloads>
            Create a new Obex request with the specified <see cref="T:System.Uri"/>.
            </overloads>
            -
            <summary>
            Create a new Obex request with the specified <see cref="T:System.Uri"/>.
            </summary>
            <param name="requestUri">e.g. "obex://112233445566/HelloWorld.txt"</param>
            <remarks>Uri must use one of the following schemes - obex, obex-push, obex-ftp, obex-sync.
            The host name must be the device address in short hex, or dotted hex notation - not the default representation using the colon separator</remarks>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri,System.IO.Stream)">
            <summary>
            [Advanced usage]
            Create a new Obex request with the specified <see cref="T:System.Uri"/> 
            and the open <see cref="T:System.IO.Stream"/> connection to an OBEX server.
            </summary>
            -
            <param name="requestUri">[Advanced usage]
            A url of the form 
            &#x201C;<i>scheme</i><c>:///</c><i>filename</i>&#x201D;, 
            &#x201C;e.g. <c>obex:///foo.txt</c>&#x201D;.
            That is the host part is blank, 
            and the scheme and filename parts set as for the other constructor 
            <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.Uri)"/>
            </param>
            <param name="stream">An instance of <see cref="T:System.IO.Stream"/>
            already connected to an OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this class given a scheme, 
            a Bluetooth Device Address, and a remote path name.
            </summary>
            -
            <param name="scheme">The Uri scheme. One of 
            <c>obex</c>, <c>obex-push</c>, <c>obex-ftp</c>, or <c>obex-sync</c>.
            </param>
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.#ctor(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Initialize an instance of this class given 
            a Bluetooth Device Address, and a remote path name.
            </summary>
            -
            <remarks>
            <para>This is equivalent to calling
            <see cref="M:InTheHand.Net.ObexWebRequest.#ctor(System.String,InTheHand.Net.BluetoothAddress,System.String)">
            ObexWebRequest(String scheme, BluetoothAddress target, String path)
            </see>
            with scheme &#x201C;<c>obex</c>&#x201D;.
            </para>
            </remarks>
            -
            <param name="target">The Bluetooth Device Address of the OBEX server.
            </param>
            <param name="path">The path on the OBEX server.
            </param>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> object to use to write request data.
            </summary>
            -
            <returns>A <see cref="T:System.IO.Stream"/> to use to write request data.</returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.ReadFile(System.String)">
            <summary>
            Reads the contents of the specified file to the request stream.
            </summary>
            <param name="fileName">The filename (including the path) from which to read.</param>
            <remarks>Provides an easy equivalent to manually writing the file contents to the request stream.</remarks>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.GetResponse">
            <summary>
            Returns the OBEX server response.
            </summary>
            -
            <returns>An <see cref="T:InTheHand.Net.ObexWebResponse"/>.</returns>
            -
            <exception cref="T:System.Net.WebException">
            An error occurred, with the error that occured being stored in the 
            <see cref="P:System.Exception.InnerException"/> property.  If the error 
            occurred in the connect phase then the <see cref="P:System.Net.WebException.Status"/>
            property will have value <see cref="F:System.Net.WebExceptionStatus.ConnectFailure"/>,
            and in the operation phase on the desktop CLR it will have value
            <see cref="F:System.Net.WebExceptionStatus.UnknownError"/>
            </exception>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.StreamReadBlockMust(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            A wrapper for Stream.Read that blocks until the requested number of bytes
            have been read, and throw an exception if the stream is closed before that occurs.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.StreamReadBlock(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            A wrapper for Stream.Read that blocks until the requested number of bytes
            have been read or the end of the Stream has been reached.
            Returns the number of bytes read.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins a request for a OBEX server response.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous operation, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.ObexWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Begins a request for a OBEX server response.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object that was obtained when the asynchronous operation was started.
            </param>
            -
            <returns>An <see cref="T:InTheHand.Net.ObexWebResponse"/>.</returns>
            -
            <exception cref="T:System.Net.WebException">
            An error occurred, with the error that occured being stored in the 
            <see cref="P:System.Exception.InnerException"/> property.  If the error 
            occurred in the connect phase then the <see cref="P:System.Net.WebException.Status"/>
            property will have value <see cref="F:System.Net.WebExceptionStatus.ConnectFailure"/>,
            and in the operation phase on the desktop CLR it will have value
            <see cref="F:System.Net.WebExceptionStatus.UnknownError"/>
            </exception>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Headers">
            <summary>
            Specifies a collection of the name/value pairs that make up the OBEX headers.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Method">
            <summary>
            Gets or sets the method for the request.
            </summary>
            <remarks>
            <para>For Object Exchange the method code is mapped to the equivalent HTTP style method.
            For example "PUT", "GET" etc. "PUT" is the default value.
            There is new support for GET as of version 2.5.
            </para>
            <para>To use GET change the <c>Method</c> to "<c>GET</c>" and you must also use
            scheme "<c>obex-ftp</c>" in the URL instead of the usual "<c>obex</c>"
            -- unless you know that the default OBEX server you are connecting
            supports GET.
            </para>
            <para>For a PUT sample see the <see cref="T:InTheHand.Net.ObexWebRequest">class</see>
            documentation.  For GET, see below.
            </para>
            
            <example>
            <code lang="VB.NET">
            ' The host part of the URI is the device address, e.g. IrDAAddress.ToString(),
            ' and the file part is the OBEX object name.
            Dim addr As String = "112233445566"
            Dim uri As New Uri("obex-ftp://" &amp; addr &amp; "/HelloWorld.txt")
            Dim req As New ObexWebRequest(uri)
            req.Method = "GET"
            Dim rsp As ObexWebResponse = CType(req.GetResponse(), ObexWebResponse)
            Console.WriteLine("Response Code: {0} (0x{0:X})", rsp.StatusCode)
            Using content As Stream = rsp.GetResponseStream()
               ' Using a StreamReader to read text from the stream...
               Using rdr As New StreamReader(content)
                  While True
                     Dim line As String = rdr.ReadLine()
                     If line Is Nothing Then Exit While
                     Console.WriteLine(line)
                  End While
               End Using
            End Using
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.ContentType">
            <summary>
            Gets or sets the value of the Type OBEX header.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.ContentLength">
            <summary>
            Gets or sets the Length OBEX header.
            </summary>
            <remarks>This property is mandatory, if not set no data will be sent.
            If you use the <see cref="M:InTheHand.Net.ObexWebRequest.ReadFile(System.String)"/> helper method this value is automatically populated with the size of the file that was read.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Proxy">
            <summary>
            Not Supported - do not use, this will throw an exception.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.Timeout">
            <summary>
            Gets or sets the time-out value for the <see cref="M:InTheHand.Net.ObexWebRequest.GetResponse"/> method.
            </summary>
            -
            <remarks>
            <para>In versions 3.2 and earlier this property was ignored on
            Windows Mobile.  It is now (untested!) supported there,
            but not with the Microsoft Bluetooth stack there as it doesn't
            support timeouts.
            A cunning solution is available let me know of your requirements...
            </para>
            </remarks>
            -
            <value>The number of milliseconds to wait before the request times out.
            The default is 50,000 milliseconds (50 seconds).
            A value of -1 or 0 represents no time-out.</value>
        </member>
        <member name="P:InTheHand.Net.ObexWebRequest.RequestUri">
            <summary>
            Gets the original Uniform Resource Identifier (URI) of the request. 
            </summary>
            <remarks>For an ObexPush request the URI will use the "obex://" prefix, followed by the numerical device id in hex format.
            The path section of the URI represents the remote filename of the pushed object. Subfolders are not supported. Some devices may only support specific object types e.g. V-Card.</remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothListener">
            <summary>
            Listens for connections from Bluetooth RFCOMM network clients.
            </summary>
            <remarks>
            <para>The <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class provides simple methods 
            that listen for and accept incoming connection requests.  New connections 
            are returned as <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> instances 
            (on Microsoft Bluetooth stack platforms alone a new <see cref="T:System.Net.Sockets.Socket"/> 
            instance can be returned for new connections).
            </para>
            <para>In the normal case a the listener is initialised with a 
            <see cref="T:System.Guid"/> holding the Service Class Id on which it is 
            to accept connections, the listener will automatically create a SDP 
            Service Record containg that Service Class Id and the port number
            (RFCOMM Service Channel Number) that it has started listening on.
            The standard usage is thus as follows.
            </para>
            <code lang="VB.NET">
            Class MyConsts
              Shared ReadOnly MyServiceUuid As Guid _
                = New Guid("{00112233-4455-6677-8899-aabbccddeeff}")
            End Class
            
              ...
              Dim lsnr As New BluetoothListener(MyConsts.MyServiceUuid)
              lsnr.Start()
              ' Now accept new connections, perhaps using the thread pool to handle each
              Dim conn As New BluetoothClient = lsnr.AcceptBluetoothClient()
              Dim peerStream As Stream = conn.GetStream()
              ...
            </code>
            <para>One can also pass the BluetoothListener a Service Name (v2.4), 
            a custom Service Record (Service Discovery Protocol record), and/or 
            set Class of Service bit(s). To create a custom Service Record use 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>.
            </para>
            <para>There are overloads of the constructor which take a 
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/> parameter instead of a 
            <see cref="T:System.Guid"/> as the Service Class Id, the Class Id
            value should be specified in that case in the endpoint.
            If the port value is specified in the endpoint, then the listener will 
            attempt to bind to that port locally.  The address in the endpoint is 
            largely ignored as no current stack supports more than one local radio.
            </para>
            <para>As of version 3.4 we catch an exception if it occurs on the new 
            port set-up and it is stored. That error will be returned to any subsequent 
            Accept; that is we assume that the error affects the listener completely 
            and so make no attempt to start a new port and all subsequent Accept 
            complete with the original error.
            </para>
            <para>In the Bluetopia case previously the 'one port at a time' error
            was unhandled and occurred on a background thread and therefore killed
            the application.  Now it is caught and returned to the next Accept.
            Even better the first Accept successfully returns back to the caller.
            So BluetoothListener is now usable to that extent: one connection can
            be accepted.  After that it needs to be discarded and a new server created.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier. 
            </summary>
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service on which to listen for incoming connection attempts.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array, e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            -
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            -
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localaddr">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents 
            the local endpoint to which to bind the listener.
            See the <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> documentation for more information 
            on the usage of this argument.
            </param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.BluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <remarks>
            <note>The method is only supported on Microsoft Bluetooth stack platforms.
            </note>
            </remarks>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
            -
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.EndAcceptBluetoothClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            -
            <remarks>
            <note>The method is only supported on Microsoft Bluetooth stack platforms.
            </note>
            <para>AcceptSocket is a blocking method that returns a <see cref="T:System.Net.Sockets.Socket"/> that you can use to send and receive data.
            If you want to avoid blocking, use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue.
            </para>
            <para>The <see cref="T:System.Net.Sockets.Socket"/> returned is initialized with the address and channel number of the remote device.
            You can use any of the Send and Receive methods available in the <see cref="T:System.Net.Sockets.Socket"/> class to communicate with the remote device.
            When you are finished using the <see cref="T:System.Net.Sockets.Socket"/>, be sure to call its <see cref="M:System.Net.Sockets.Socket.Close"/> method.
            If your application is relatively simple, consider using the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient"/> method rather than the AcceptSocket method.
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</para></remarks>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/> used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <remarks>AcceptTcpClient is a blocking method that returns a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method to obtain the underlying <see cref="T:System.Net.Sockets.NetworkStream"/> of the returned <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> will provide you with methods for sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, be sure to call its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/> method.
            If you want greater flexibility than a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> offers, consider using <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket"/>.</para></remarks>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> component.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothListener.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            -
            <value>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            that the listener is using for communications.
            </value>
            -
            <remarks>
            <para>The <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> 
            property of the endpoint will contain the port number (RFCOMM Channel 
            Number) that the listener is listening on.
            On some platforms, the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            is similarly set, or is <see cref="F:InTheHand.Net.BluetoothAddress.None"/> 
            if not known.  The endpoint&#x2019;s <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            is never set.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceClass">
            <summary>
            Get or set the Service Class flags that this service adds to the host 
            device&#x2019;s Class Of Device field.
            </summary>
            -
            <remarks>
            <para>The Class of Device value contains a Device part which describes 
            the primary service that the device provides, and a Service part which 
            is a set of flags indicating all the service types that the device supports, 
            e.g. <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Audio"/> etc.
            This property supports setting those flags; bits set in this value will be 
            <strong>added</strong> to the host device&#x2019;s CoD Service Class bits when the listener
            is active.  For Win32 see <see href="http://msdn.microsoft.com/en-us/library/aa362940(VS.85).aspx">MSDN &#x2014; BTH_SET_SERVICE Structure</see>
            </para>
            <para><note>Supported on Win32, but not supported on WindowsMobile/WinCE 
            as there's no native API for it.  The WindowCE section of MSDN mentions the
            Registry value <c>COD</c> at key <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Bluetooth\sys</c>. 
            However my (Jam) has value 0x920100 there but advertises a CoD of 0x100114, 
            so its not clear how the values relate to each other.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            -
            <value>The underlying network <see cref="T:System.Net.Sockets.Socket"/>.</value>
            -
            <remarks>
            <note>The property is only supported on Microsoft Bluetooth stack platforms.
            </note>
            <para><see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> creates a <see cref="T:System.Net.Sockets.Socket"/> to listen for incoming client connection requests.
            Classes deriving from <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> can use this property to get this <see cref="T:System.Net.Sockets.Socket"/>.
            Use the underlying <see cref="T:System.Net.Sockets.Socket"/> returned by the <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Server"/> property if you require access beyond that which <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> provides.
            </para>
            <para>Note <see cref="P:InTheHand.Net.Sockets.BluetoothListener.Server"/> property only returns the <see cref="T:System.Net.Sockets.Socket"/> used to listen for incoming client connection requests.
            Use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptSocket"/> method to accept a pending connection request and obtain a <see cref="T:System.Net.Sockets.Socket"/> for sending and receiving data.
            You can also use the <see cref="M:InTheHand.Net.Sockets.BluetoothListener.AcceptBluetoothClient"/> method to accept a pending connection request and obtain a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> for sending and receiving data.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.BluetoothListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothListener.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initializes an instance of the <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> class 
            for the device with the given address.
            </summary>
            -
            <param name="address">The <see cref="T:InTheHand.Net.BluetoothAddress"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh">
            <summary>
            Forces the system to refresh the device information.
            </summary>
            -
            <remarks>
            See <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName"/>
            for one reason why this method is necessary.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Update">
            <summary>
            Updates the device name used to display the device, affects the local computer cache.
            </summary>
            <remarks>On Windows CE this only affects devices which are already paired.</remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
             
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             <para>This overload is silent on error; the other overload raises an exception
             if required
             (<see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)"/>).
             </para>
             </remarks>
             -
             <exception cref="T:System.PlatformNotSupportedException">
             Thrown if this method is called on Windows CE platforms.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean,System.Boolean)">
             <summary>
             Enables or disables services for a Bluetooth device.
             </summary>
             <param name="service">The service GUID on the remote device.</param>
             <param name="state">Service state - TRUE to enable the service, FALSE to disable it.</param>
             <param name="throwOnError">Whether the method should raise an exception
             when 
             </param>
             <remarks>
             When called on Windows CE, the device will require a soft-reset to enabled the settings.
            <note>
             <para>The system maintains a mapping of service guids to supported drivers for
             Bluetooth-enabled devices. Enabling a service installs the corresponding
             device driver. Disabling a service removes the corresponding device driver.
             If a non-supported service is enabled, a driver will not be installed.
             </para>
             </note>
             </remarks>
             -
             <exception cref="T:System.ComponentModel.Win32Exception">The call failed.
             </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database.
            </summary>
            -
            <remarks>
            <para>
            For instance to see whether the device has an an Serial Port service
            search for UUID <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort"/>,
            or too find all the services that use RFCOMM use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol"/>,
            or all the services use 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol"/>.
            </para>
            <para>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </para>
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
            -
            <example>
            <code lang="VB.NET">
            Dim bdi As BluetoothDeviceInfo = ...
            Dim records As ServiceRecord() = bdi.GetServiceRecords(BluetoothService.RFCommProtocol)
            ' Dump each to console
            For Each curRecord As ServiceRecord In records
               ServiceRecordUtilities.Dump(Console.Out, curRecord)
            Next
            </code>
            </example>
            
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.BeginGetServiceRecords(System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="service">See <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>.
            </param>
            <param name="callback">An optional asynchronous callback, to be called 
            when the query is complete.
            </param>
            <param name="state">A user-provided object that distinguishes this 
            particular asynchronous Service Record lookup query from other requests.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous Service Record lookup query, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.EndGetServiceRecords(System.IAsyncResult)">
            <summary>
            Ends an asynchronous Service Record lookup query.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object that was obtained when the asynchronous operation was started.
            </param>
            -
            <returns>The parsed record as an 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecordsUnparsed(System.Guid)">
            <summary>
            Run an SDP query on the device&#x2019;s Service Discovery Database,
            returning the raw byte rather than a parsed record.
            </summary>
            -
            <remarks>
            If the device isn&#x2019;t accessible a <see cref="T:System.Net.Sockets.SocketException"/>
            with <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/>
            10108 (0x277C) occurs.
            </remarks>
            -
            <param name="service">The UUID to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>An array of array of <see cref="T:System.Byte"/>.</returns>
            -
            <exception cref="T:System.Net.Sockets.SocketException">
            The query failed.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetVersions">
            <summary>
            Gets the radio version and manufacturer information for the device.
            Needs a connection to the device.
            </summary>
            -
            <remarks>
            <para>Includes information such as the LMP versions, supported
            features and the manufacturer of the radio/Bluetooth Controller.
            </para>
            <para>If the device is not connected this information cannot be
            obtained; an error will occur if there is no connection.
            The values will be cached until <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/> is called.
            </para>
            <para>This feature is currently supported only on the
            Microsoft Bluetooth stack on both desktop Windows and Windows
            Mobile. However Windows XP does not provide this information.
            Implementation is possible on some of the other Bluetooth stacks
            and will depend on demand/support for the user community.
            </para>
            </remarks>
            -
            <exception cref="T:System.ComponentModel.Win32Exception">
            An error occurred, desktop Windows returns error code
            1167 ERROR_DEVICE_NOT_CONNECTED and Windows Mobile returns error code
            1168 ERROR_NOT_FOUND.
            Windows XP which does not support this functionality returns error code
            2 ERROR_FILE_NOT_FOUND.
            </exception>
            <exception cref="T:System.NotImplementedException">
            Not yet implemented.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This stack does not support getting this information.
            </exception>
            -
            <returns>The radio version etc information as a
            <see cref="T:InTheHand.Net.Bluetooth.RadioVersions"/> instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.ShowDialog">
            <summary>
            Displays information about the device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.Sockets.BluetoothDeviceInfo"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.IsAMsftInternalType(System.Object)">
            <summary>
            E.g. used internally by WPF.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceAddress">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName">
            <summary>
            Gets a name of a device.
            </summary>
            -
            <remarks>
            <para>Note, that due the way in which Bluetooth device discovery works,
            the existence and address of a device is known first, but a separate
            query has to be carried out to find whether the device also has a name.
            This means that if a device is discovered afresh then this property might
            return only a text version of the device&#x2019;s address and not its
            name, one can also see this in the Windows&#x2019; Bluetooth device dialogs
            where the device appears first with its address and the name is later
            updated.  To see the name, wait for some time and access this property again
            having called <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh"/>
            in the meantime.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">
            <summary>
            Returns the Class of Device of the remote device.
            </summary>
            -
            <remarks>
            <para>
            Some CE 4.2 devices such as original PPC2003 devices don't have the native 
            API on which this property depends &#x2014; it was added as part of a hotfix. 
            The property will always return zero in such a case.  On WM/CE we also 
            attempt to get the CoD value as part of the discovery process; this is 
            of course only works for devices in-range.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Rssi">
            <summary>
            Returns the signal strength for the Bluetooth connection with the peer device.
            <para><b>Supports only on some platforms.</b></para>
            </summary>
            -
            <value>Valid values for this property are -128 to 128.  It returns
            <see cref="F:System.Int32.MinValue">Int32.MinValue</see> on failure.
            </value>
            -
            <remarks>
            <para>Thus there are multiple reasons which this property can return
            the error value (i.e. <see cref="F:System.Int32.MinValue">Int32.MinValue</see>).
            </para>
            <list type="number">
            <item>On an unsupported platform, e.g. MSFT+Win32, or MSFT+CE/WM on an
            older version.  See below.
            </item>
            <item>The remote device is not turned-on or in range.  See below.
            </item>
            <item>On Widcomm, there is no connection to the remote device.  See below.
            </item>
            </list>
            
            <para>Platform support:</para>
            <list type="bullet">
            <item>Does <b>not</b> work on Win32 with the Microsoft Bluetooth stack.
            That platform provide no support for RSSI, please contact Microsoft
            to complain.
            </item>
            <item>Works on Windows Mobile 5.0, Windows Embedded CE 6.0, or later
            versions.
            </item>
            <item>Works on Widcomm, both platforms.
            We will <i>not</i> try to connect, see below.
            </item>
            </list>
            <para>
            </para>
            
            <para>Finally, to get an RSSI value Bluetooth requires an open
            connection to the peer device.
            On Widcomm we will <i>not</i> attempt to connect, so the caller must
            ensure that there's a connection --
            perhaps it could call <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            just before accessing this property.
            On CE/WM if there is no active connection, then we will attempt to
            create one.  This of course <i>can</i> be <i>slow</i>, and <i>will</i>
            be slow if the remote device is not in range.
            (Bluetooth 2.1 supports getting the RSSI value at discovery time which
            might provide the solution for many cases.  However only the MSFT+Win32
            stack specifically supports v2.1, and of course it doesn't support RSSI
            at all!)
            </para>
            <para>Note that the Bluetooth specification doesn't require that the
            radio hardware provides any great precision in its RSSI readings.
            The spec says for instance, in v2.1 Volume 2 Part E ("HCI") Section 7.5.4:
            &#x201C;Note: how accurate the dB values will be depends on the Bluetooth hardware.
            The only requirements for the hardware are that the Bluetooth device is able to
            tell whether the RSSI is inside, above or below the Golden Device Power Range.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.InstalledServices">
            <summary>
            Returns a list of services which are already installed for use on the calling machine.
            </summary>
            <remarks>
            <para>This property returns the services already configured for use. 
            Those are the ones that are checked in the &#x201C;Services&#x201D; tab
            of the device&#x2019;s property sheet in the Bluetooth Control panel.
            I presume the behaviour is similar on CE.
            </para>
            <para>Will only return available services for paired devices.
            </para>
            <para>It of course will also only returns standard system services which Windows understands.
            (On desktop Windows this method calls the OS function <c>BluetoothEnumerateInstalledServices</c>).
            </para>
            <para>To see all the services that a device advertises use the 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected.
            </summary>
            <remarks>Not supported under Windows CE and will always return false.</remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device. Not all remembered devices are authenticated.
            </summary>
            -
            <remarks>Now supported under Windows CE — will return the same as 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>.
            </remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded. All authenticated devices are remembered.
            </summary>
            <remarks>Is now supported on both CE and XP.</remarks>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected"/>
            <seealso cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered"/>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen">
            <summary>
            Date and Time this device was last seen by the system.
            </summary>
            -
            <remarks><para>Is set by the Inquiry (Device Discovery) process on
            the stacks where we handle Inquiry directly &#x2014; that is
            every platform except the Microsoft stack on Win32 (MSFT+Win32),
            so is supported under MSFT+WM, Widcomm, Bluetopia, etc, etc.
            </para>
            <para>This value is supported on Windows 7 with the Microsoft stack.
            It it not supported on earlier Win32 versions as the native 
            API has a bug.  The value provided is always simply the current 
            time, e.g. after a discovery for every device returned this value has 
            the time of the discovery operation.  Tracked by workitem 
            <see href="http://www.codeplex.com/32feet/WorkItem/View.aspx?WorkItemId=10280">10280</see>.
            </para>
            </remarks>
            -
            <value>
            An instance of <see cref="T:System.DateTime"/> containing the time in UTC,
            or <c>DateTime</c>.<see cref="F:System.DateTime.MinValue"/>
            if there's no value.
            </value>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastUsed">
            <summary>
            Date and Time this device was last used by the system.
            </summary>
            -
            <remarks>
            <para>Not supported on most stacks: Widcomm, Bluetopia, MSFT+WM 
            and will return <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see>
            </para>
            <para>Is supported on Windows 7 with the Microsoft stack.  Is not
            supported on earlier Win32 versions &#x2014; there it just always
            returns the current time, see <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen"/>.
            </para>
            </remarks>
            -
            <value>
            An instance of <see cref="T:System.DateTime"/> containing the time in UTC,
            or <c>DateTime</c>.<see cref="F:System.DateTime.MinValue"/> 
            if there's no value.
            </value>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DeviceClass">
            <summary>
            Class of Device flags as assigned in the Bluetooth specifications.
            </summary>
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">ClassOfDevice.Device</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous">
            <summary>
            Miscellaneous &#x2014; 
            [Ref #2: Used where a more specific Major Device Class code
            is not suited (but only as specified in this document). Devices
            that do not have a major class code assigned can use the all-1 code
            (<see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized"/>)
            until 'classified']
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Computer">
            <summary>
            Major class: Computer (desktop,notebook, PDA, organizers, .... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.DesktopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Desktop workstation.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.ServerComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Server-class computer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.LaptopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Laptop.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.HandheldComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Handheld PC/PDA (clam shell).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.PdaComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Palm sized PC/PDA.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WearableComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Wearable computer (Watch sized).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Phone">
            <summary>
            Major class: Phone (cellular, cordless, payphone, modem, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CellPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cellular.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CordlessPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cordlss.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.SmartPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Smart phone.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WiredPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Wired modem or voice gateway.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.IsdnAccess">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Common ISDN Access.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AccessPointAvailable">
            <summary>
            Major class: LAN /Network Access point.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AudioVideoUnclassified">
            <summary>
            Major class: Audio/Video (headset,speaker,stereo, video display, vcr.....
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Peripheral">
            <summary>
            Major class: Peripheral (mouse, joystick, keyboards, ..... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Imaging">
            <summary>
            Major class: Imaging (printing, scanner, camera, display, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Wearable">
            <summary>
            Major class: Wearable.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Toy">
            <summary>
            Major class: Toy.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Medical">
            <summary>
            Major class: Medical.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized">
            <summary>
            Uncategorized, specific device code not specified
            &#x2014; see <see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DeviceClass_Masks">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId">
            <summary>
            Service Attribute IDs defined by the OBEX related specifications,
            i.e. Object Push and Synchronization Profiles specifications.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.GoepL2capPsm">
            <summary>
            GOEP L2Cap PSM
            </summary>
            <remarks>
            New in GOEP v2.0 but not numbered there.
            New in OPP v1.2, FTP v1.2, and BIP v1.1.
            <para>[<c>UInt16</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedDataStoresList">
            <summary>
            Supported Data Stores List (Synchronization Profile)
            </summary>
            <remarks>
            Synchronization Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>Phonebook</description></item>
            <item><term>0x03</term><description>Calendar</description></item>
            <item><term>0x05</term><description>Notes</description></item>
            <item><term>0x06</term><description>Message</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFormatsList">
            <summary>
            Supported Formats List (Object Push Profile)
            </summary>
            <remarks>
            Object Push Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>vCard 2.1</description></item>
            <item><term>0x02</term><description>vCard 3.0</description></item>
            <item><term>0x03</term><description>vCard 2.1</description></item>
            <item><term>0x04</term><description>vCal 1.0</description></item>
            <item><term>0x05</term><description>vNote</description></item>
            <item><term>0x06</term><description>vMessage</description></item>
            <item><term>0xFF</term><description>any type of object</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedCapabilities">
            <summary>
            Supported Capabilities (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>Generic imaging</description></item>
            <item><term>Bit 1</term><description>Capturing</description></item>
            <item><term>Bit 2</term><description>Printing</description></item>
            <item><term>Bit 3</term><description>Displaying</description></item>
            <item><term>Bit 4..7</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFeatures">
            <summary>
            Supported Features (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt16</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>ImagePush</description></item>
            <item><term>Bit 1</term><description>ImagePush-Store</description></item>
            <item><term>Bit 2</term><description>ImagePush-Print</description></item>
            <item><term>Bit 3</term><description>ImagePush-Display</description></item>
            <item><term>Bit 4</term><description>ImagePull</description></item>
            <item><term>Bit 5</term><description>AdvancedImagePrinting</description></item>
            <item><term>Bit 6</term><description>AutomaticArchive</description></item>
            <item><term>Bit 7</term><description>RemoteCamera</description></item>
            <item><term>Bit 8</term><description>RemoteDisplay</description></item>
            <item><term>Bit 9..15</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFunctions">
            <summary>
            Supported Functions (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt32</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>GetCapabilities</description></item>
            <item><term>Bit 1</term><description>PutImage</description></item>
            <item><term>Bit 2</term><description>PutLinkedAttachment</description></item>
            <item><term>Bit 3</term><description>PutLinkedThumbnail</description></item>
            <item><term>Bit 4</term><description>RemoteDisplay</description></item>
            <item><term>Bit 5</term><description>GetImagesList</description></item>
            <item><term>Bit 6</term><description>GetImageProperties</description></item>
            <item><term>Bit 7</term><description>GetImage</description></item>
            <item><term>Bit 8</term><description>GetLinkedThumbnail</description></item>
            <item><term>Bit 9</term><description>GetLinkedAttachment</description></item>
            <item><term>Bit 10</term><description>DeleteImage</description></item>
            <item><term>Bit 11</term><description>StartPrint</description></item>
            <item><term>Bit 12</term><description>Reserved</description></item>
            <item><term>Bit 13</term><description>StartArchive</description></item>
            <item><term>Bit 14</term><description>GetMonitoringImage</description></item>
            <item><term>Bit 16</term><description>GetStatus</description></item>
            <item><term>Bit 15, 17..31</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.TotalImagingDataCapacity">
            <summary>
            Total Imaging Data Capacity (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt64</c>]</para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Basic Printing Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DocumentFormatsSupported">
            <summary>
            Document Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.CharacterRepertoiresSupported">
            <summary>
            Character Repertoires Supported
            </summary>
            <remarks>[<c>UInt128</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.XhtmlPrintImageFormatsSupported">
            <summary>
            XHTML-Print Image Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ColorSupported">
            <summary>
            Color Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.Model1284Id">
            <summary>
            1284ID
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterName">
            <summary>
            Printer Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterLocation">
            <summary>
            Printer Location
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DuplexSupported">
            <summary>
            Duplex Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MediaTypesSupported">
            <summary>
            Media Types Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaWidth">
            <summary>
            MaxMediaWidth
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaLength">
            <summary>
            MaxMediaLength
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.EnhancedLayoutSupported">
            <summary>
            Enhanced Layout Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.RuiFormatsSupported">
            <summary>
            RUI Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingRuiSupported">
            <summary>
            Reference Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingRuiSupported">
            <summary>
            Direct Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingTopUrl">
            <summary>
            Reference Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingTopUrl">
            <summary>
            Direct Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterAdminRuiTopUrl">
            <summary>
            Printer Admin RUI Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DeviceName">
            <summary>
            Device Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Personal Area Networking Profile specification.
            </summary>PersonalAreaNetworkingProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.SecurityDescription">
            <summary>
            Security Description
            </summary>
            <remarks>&#x201C;Security Description&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.NetAccessType">
            <summary>
            NetAccessType
            </summary>
            <remarks>&#x201C;Type of Network Access Available&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.MaxNetAccessRate">
            <summary>
            MaxNetAccessRate
            </summary>
            <remarks>&#x201C;Maximum possible Network Access Data Rate&#x201D; [<c>UInt32</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv4Subnet">
            <summary>
            IPv4Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv6Subnet">
            <summary>
            IPv6Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Headset Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId.RemoteAudioVolumeControl">
            <summary>
            Remote audio volume control
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Hand-Free Profile specification.
            </summary>HandFreeProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.Network">
            <summary>
            Network
            </summary>
            <remarks>
            <para>&#x201C;The "Network" attribute states, if the AG has the capability 
            to reject incoming calls[4]. This attribute is not encoded as a data element 
            sequence; it is simply an 8-bit unsigned integer. The information given 
            in the “Network” attribute shall be the same as the information given 
            in Bit 5 of the unsolicited result code +BRSF (see Section 4.24.3). An 
            attribute value of 0x00 is translated to a bit value of 0; an attribute 
            value of 0x01 is translated to a bit value of 1.&#x201D;
            </para>
            [<c>UInt8</c>]
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.SupportedFeatures">
            <summary>
            SupportedFeatures
            </summary>
            <remarks>
            <para>&#x201C;The attribute &#x201C;SupportedFeatures&#x201D; states the features 
            supported in each device. &#x2026;
            The set of features supported in each case is bit-wise defined in this 
            attribute on a yes/no basis. The mapping between the features and their 
            corresponding bits within the attribute is listed below in for the HF 
            and in for the AG. &#x2026;
            <code lang="none">
            Bit     Feature                                                     Default in HF
            (0=LSB)
            0       EC and/or NR function (yes/no, 1 = yes, 0 = no)             0
            1       Call waiting and three way calling(yes/no, 1 = yes, 0 = no) 0
            2       CLI presentation capability (yes/no, 1 = yes, 0 = no)       0
            3       Voice recognition activation (yes/no, 1= yes, 0 = no)       0
            4       Remote volume control (yes/no, 1 = yes, 0 = no)             0
            </code>
            <para>Table 5.2 “SupportedFeatures” attribute bit mapping for the HF</para>
            <code lang="none">
            Bit     Feature                                             Default in AG
            (0=LSB)
            0       Three-way calling (yes/no, 1 = yes, 0 = no)         1
            1       EC and/or NR function (yes/no, 1 = yes, 0 = no)     0
            2       Voice recognition function (yes/no, 1 = yes, 0 = no)    0
            3       In-band ring tone capability (yes/no, 1 = yes, 0 = no)  1
            4       Attach a phone number to a voice tag (yes/no, 1 = yes, 0 = no)  0
            </code>
            Table 5.4 “SupportedFeatures” attribute bit mapping for the AG&#x201D;
            </para>
            [<c>UInt16</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId">
            <summary>
            Service Attribute IDs defined by the Health Device Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.SupportFeaturesList">
            <summary>
            SupportFeaturesList
            </summary>
            -
            <remarks>
            <para>"This is a sequence for which each element is a sequence that
            describes a single application data end-point on the device. The
            Supported Features attribute (MDEP List) provides an indication of
            the data types that an MDEP supports.",
            "...each description is itself a sequence of three or more elements."
            </para>
            <c>[Sequence]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.DataExchangeSpecification">
            <summary>
            DataExchangeSpecification
            </summary>
            -
            <remarks>
            <para>"This attribute is a one-byte reference, with the value taken
            from the Bluetooth Assigned Numbers [3] to identify the Data Exchange
            Protocol used (e.g. ISO/IEEE 11073-20601 specification)."
            e.g. value 0x01 is ISO/IEEE 11073-20601, "Health informatics - Personal
            health device communication - Application profile - Optimized exchange
            protocol"
            </para>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.McapSupportedProcedures">
            <summary>
            MCAP Supported Procedures
            </summary>
            -
            <remarks>
            <para>"This attribute is a one byte bit-mask that indicates the MCAP
            procedures that are supported by this HDP service."
            </para>
            <code lang="none">
            0x02  Supports Reconnect Initiation 3
            0x04  Supports Reconnect Acceptance 4
            0x08  Supports Clock Synchronization Protocol (includes support for at least Sync-Slave Role)
            0x10  Supports Sync-Master Role
            </code>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.ObexListenerContext">
            <summary>
            Provides access to the request and response objects used by the <see cref="T:InTheHand.Net.ObexListener"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerContext.Request">
            <summary>
            Gets the <see cref="T:InTheHand.Net.ObexListenerRequest"/> that represents a client's request for a resource
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothProtocolType">
            <summary>
            Specifies additional protocols that the <see cref="T:System.Net.Sockets.Socket"/> class supports.
            </summary>
            <remarks>
            <para>These constants are defined by the Bluetooth SIG - <see href="https://www.bluetooth.org/Technical/AssignedNumbers/service_discovery.htm"/>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.Sdp">
            <summary>
            Service Discovery Protocol (bt-sdp)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.RFComm">
            <summary>
            Bluetooth RFComm protocol (bt-rfcomm)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.L2Cap">
            <summary>
            Logical Link Control and Adaptation Protocol (bt-l2cap)
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDASocketOptionName">
            <summary>
            Socket option constants to set IrDA specific connection modes, and 
            get/set IrDA specific features.
            </summary>
            <remarks>
            Socket option constants to set IrDA specific connection modes, and 
            get/set IrDA specific features: 
            for instance to set IrLMP mode, or get the maximum send size.  Pass 
            to <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])"/>/etc and
            <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])"/>/etc,  
            along with optionLevel <c>IrDASocketOptionLevel.</c><see 
            cref="F:InTheHand.Net.Sockets.IrDASocketOptionLevel.IrLmp"/>; 
            see the examples below.
            <para><b>New in v1.5.51015</b></para>
            </remarks>
            <example><para>For instance, where <c>cli</c> is an instance of 
            <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>.</para>
            In VB.NET, to set IrLMP mode (<c>IrLptMode</c>).
            <code lang="VB.NET">
            cli.Client.SetSocketOption(IrDASocketOptionLevel.Irlmp,  _
               IrDASocketOptionName.IrLptMode, _
               1) 'representing true; can use True itself in FXv2.
            </code>
            In C#, to retrieve the maximum send size.
            <code lang="C#">
            int maxSendSize = (int)cli.Client.GetSocketOption(
               IrDASocketOptionLevel.Irlmp,
               IrDASocketOptionName.SendPduLength);
            </code>
            </example>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.EnumDevice">
            <summary>
            Gets the list of discovered devices.  
            Is used internally by <c>IrDAClient.DiscoverDevices</c>.  
            </summary>
            <remarks>
            In native terms takes a <c>DEVICE_LIST</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IasSet">
            <summary>
            Sets an entry in the local IAS (Information Access Service) database.
            </summary>
            <remarks>
            In native terms takes a <c>IAS_SET</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IasQuery">
            <summary>
            Queries an entry in the peer's IAS (Information Access Service) database.
            </summary>
            <remarks>
            In native terms takes a <c>IAS_QUERY</c> struct.
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.SendPduLength">
            <summary>
            Retrieve the maximum send size when using IrLMP directly 
            (<see cref="F:InTheHand.Net.Sockets.IrDASocketOptionName.IrLptMode"/>).  
            IrLMP requires sent data to fit in one frame.
            </summary>
            <remarks>
            <c>Integer</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.ExclusiveMode">
            <summary>
            Restricts the link to one application-level (IrLMP) connection; 
            for use when low latency is required.
            Returns an error on all tested platforms.
            </summary>
            <remarks>
            Returns an error on all tested platforms.  <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.IrLptMode">
            <summary>
            Sets IrLMP mode, disabling TinyTP.  Used for instance when 
            printing with IrLPT.
            </summary>
            <remarks>
            On Windows NT platforms at least, is ignored on server-side sockets.
            <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.NineWireMode">
            <summary>
            Sets IrCOMM 9-Wire/Cooked mode.  Used for instance when connecting 
            to the modem in a mobile phone (service name <c>IrDA:IrCOMM</c>).  
            </summary>
            <remarks>
            In operation, received IrCOMM control information is discarded and 
            null information is sent.
            <c>Boolean</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionName.SharpMode">
            <summary>
            Reportedly sets non-IrDA Sharp ASK mode on the Windows CE 
            platform.  Presence unverified.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceElement">
             <summary>
             Holds an SDP data element.
             </summary>
             -
             <remarks>
             <para>A Service Element hold the data in a SDP Service Record.  It can 
             hold various types of data, being like the &#x2018;variant&#x2019; type in some
             environments.  Each <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> in
             a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> holds its content in a
             Service Element.
             </para>
             <para>The types currently defined in the Service Discovery specification
             include unsigned and signed integers 
             of various sizes (8-bit, 16-bit etc), UUIDs in the full 128-bit form or
             in the 16 and 32-bit forms, TextString, Url etc.  An element can itself
             also contain a list of element, either as a &#x2018;sequence&#x2019; or an
             &#x2018;alternative&#x2019;, and thus an attribute can contain a tree of values,
             e.g. as used by the 
             <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             attribute.
             </para>
             <para>The type that an element is holding can be accessed with the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementTypeDescriptor"/> and 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementType"/> properties which
             are of type <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and
             <see cref="T:InTheHand.Net.Bluetooth.ElementType"/> respectively, the former being 
             the &#x2018;major&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.UnsignedInteger"/>, and
             the latter the &#x2018;minor&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt16"/>.
             </para>
             <para>The element's value can be accessed in various ways, either directly 
             in its internal form through its <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
             property.  It has return type <see cref="T:System.Object"/> so the value 
             will have to be cast before use, see the <c>UInt16</c> example below.  There
             are also a number of type-specific methods, e.g. 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/>,
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             etc.  Each will throw an <see cref="T:System.InvalidOperationException"/>
             if the element is not of a suitable type.  The complete set is:</para>
             <list type="table">
             <listheader><term><see cref="T:InTheHand.Net.Bluetooth.ElementType"/></term>
             <description>Access method, or .NET Type for direct access</description>
             </listheader>
             <item><term><c>Nil</c></term>
             <description><see langword="null"/></description></item>
             
             <item><term><c>Uint8</c></term><description><see cref="T:System.Byte"/></description></item>
             <item><term><c>Uint16</c></term><description><see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uint32</c></term><description><see cref="T:System.UInt32"/></description></item>
             <item><term><c>Uint64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Uint128</c></term><description>Currently unsupported.</description></item>
             
             <item><term><c>Int8</c></term><description><see cref="T:System.SByte"/></description></item>
             <item><term><c>Int16</c></term><description><see cref="T:System.Int16"/></description></item>
             <item><term><c>Int32</c></term><description><see cref="T:System.Int32"/></description></item>
             <item><term><c>Int64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Int128</c></term><description>Currently unsupported.</description></item>
            
             <item><term><c>Uuid16</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid32</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid128</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/></description></item>
             
             <item><term><c>TextString</c></term><description>With 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/> etc.
             The underlying value can be an array of bytes, or as a <see cref="T:System.String"/>
             the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> will set an
             array of bytes, whereas a manually created record will likely contain a
             <see cref="T:System.String"/>.
             </description></item>
             
             <item><term><c>Boolean</c></term><description><see cref="T:System.Boolean"/></description></item>
             
             <item><term><c>ElementSequence</c></term><description>With
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/> or
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>
             </description></item>
             <item><term><c>ElementSequence</c></term><description>-"-</description></item>
            
             <item><term><c>Url</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>,
             can be stored interally as <see cref="T:System.Uri"/> or as an array of bytes
             </description></item>
             </list>
             
             <para>Note that there are no access 
             methods for the numeric type for instance so the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property will have
             to be used e.g.
             <code lang="C#">
             // ElementType is UInt16
             ushort x = (ushort)element.Value;
             </code>
             or
             <code lang="C#">
             // ElementType is UInt16
             Dim x As UShort = CUShort(element.Value);
             </code>
             </para>
             <para>Additional type-specific methods can be added as required, in fact the 
             full set of 19+ could be added, it just requires implementation and test&#x2026;
             </para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotUuidType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotTextStringType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotUrlType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgNotSeqAltType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgSeqAltTypeNeedElementArray">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgFmtCreateNumericalGivenNonNumber">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceElement.ErrorMsgListContainsNotElement">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)">
             <overloads>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </overloads>
             -
             <summary>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </summary>
             -
             <remarks>
             <para>The type of the object passed in the <paramref name="value"/> parameter
             <strong>must</strong> suit the type of the element.  For instance if the element type is 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> then the object
             passed in must be a <see cref="T:System.Byte"/>, if the element type is
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.TextString"/> then the object
             must either be a <see cref="T:System.String"/> or the string encoded as 
             an array of <see cref="T:System.Byte"/>, 
             and if the element type is <see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid16"/>
             then the object passed in must be a <see cref="T:System.UInt16"/>,
             etc.
             For the full list of types see the class level documentation 
             (<see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>).
             </para>
             <para>For numerical element types the 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
             factory method will accept any integer type and attempt to convert it to the 
             required type before creating the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>,
             for example for element type <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> 
             it will accept an <see cref="T:System.Int32"/> parameter and convert
             it to a <see cref="T:System.Byte"/> internally.
             </para>
             </remarks>
             -
             <param name="type">The type of the element as an ElementType.
             </param>
             <param name="value">The value for the new element,
             <strong>must</strong> suit the type of the element.
             See the remarks for more information.
             </param>
             -
             <example>
             <code lang="C#">
             ServiceElement e
             e = new ServiceElement(ElementType.TextString, "Hello world");
             e = new ServiceElement(ElementType.TextString, new byte[] { (byte)'h', (byte)'i', });
             e = new ServiceElement(ElementType.Uuid16, (UInt16)0x1101);
            
            
             int i = 10;
             int j = -1;
             
             // Error, Int32 not suitable for element type UInt8.
             ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
             
             // Success, Byte value 10 stored.
             ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
             
             // Error, -1 not in range of type Byte.
             ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceElement})">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,InTheHand.Net.Bluetooth.ServiceElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementTypeDescriptor,InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Obsolete, use <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/> instead.
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)">
            <summary>
            Create an instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            but internally converting the numeric value to the required type.
            </summary>
            -
            <remarks>
            <para>As noted in the constructor documentation 
            (<see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>)
            the type of the value supplied <strong>must</strong> exactly match the element's natural type,
            the contructor will return an error if that is not the case. This method 
            will instead attempt to convert the value to the required type.  It uses 
            the <see cref="T:System.IConvertible"/> interface to do the conversion, for
            instance if the element type is <c>Uint16</c> then it will cast the input value
            to <see cref="T:System.IConvertible"/> and call 
            <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/> on it.
            If the value is not convertible to the element type then an 
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown see below.
            </para>
            <para>For instance, passing in an C# <c>int</c> / Visual Basic <c>Integer</c>
            to the constructor will fail for element types <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/>
            etc, however by using this method it will succeed if the value is in the
            correct range.
            For example
            <code lang="C#">
            int i = 10;
            int j = -1;
            
            // Error, Int32 not suitable for element type UInt8.
            ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
            
            // Success, Byte value 10 stored.
            ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
            
            // Error, -1 not in range of type Byte.
            ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
            </code>
            The last example failing with:
            <code lang="none">
            System.ArgumentOutOfRangeException: Value '-1'  of type 'System.Int32' not valid for element type UInt16.
             ---> System.OverflowException: Value was either too large or too small for a UInt16.
               at System.Convert.ToUInt16(Int32 value)
               at System.Int32.System.IConvertible.ToUInt16(IFormatProvider provider)
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               --- End of inner exception stack trace ---
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               at InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(ElementType elementType, Object value)
               at MiscFeatureTestCs.Main(String[] args)
            </code>
            </para>
            </remarks>
            -
            <param name="elementType">The type of the element as an ElementType.
            Should be one of the <c>UnsignedInteger</c>/<c>TwosComplementInteger</c> types.
            </param>
            <param name="value">The value for the new element,
            should be a numerical type.
            </param>
            -
            <returns>The new element.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            The <paramref name="elementType"/> is not a numerical type.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value wasn&#x2019;t convertible to the required type, e.g. if -1 is
            passed for element type UInt8, as shown above.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList">
            <summary>
            Gets the value as a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an list.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray">
            <summary>
            Gets the value as a array of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an array.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri">
            <summary>
            Gets the value as a <see cref="T:System.Uri"/>.
            </summary>
            -
            <returns>The Url value as a <see cref="T:System.Uri"/>.
            </returns>
            -
            <remarks>
            <para>It turns out that we can't trust vendors to add only valid
            URLs to their records, for instance the iPhone has an attribute
            with value "www.apple.com" which isn't a URL as it has no scheme
            part (http://) etc.
            </para>
            <para>Thus a Url value in an element can be stored in a number of
            formats.  If created by the parser then it will be stored as a 
            <see cref="T:System.String"/> or as an array of
            <see cref="T:System.Byte"/> if property
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation">ServiceRecordParser.LazyUrlCreation</see>
            is set.  If created locally it can be those types or also 
            <see cref="T:System.Uri"/> .
            </para>
            <para>This method will try to convert from those formats to <see cref="T:System.Uri"/>.
            If the URL is invalid e.g. has bad characters or is missing the scheme
            part etc then an error will occur.  One can instead access the
            element's <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
            property and expect one of the three types.  When created by the 
            parser it will be of type <see cref="T:System.String"/> unless 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation"/>
            is set.
            </para>
            </remarks>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Url"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid">
            <summary>
            Gets the value as a <see cref="T:System.Guid"/>.
            </summary>
            -
            <returns>The UUID value as a <see cref="T:System.Guid"/>.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid128"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            where it is encoded using the given encoding form.
            </summary>
            -
            <param name="encoding">The <see cref="T:System.Text.Encoding"/>
            object to be used to decode the string value
            if it has been read as a raw byte array.
            </param>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.LanguageBaseItem)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as specified by the given IETF Charset identifer.
            </summary>
            -
            <remarks>
            Note that a strict decoding of the string is carried out 
            (except on the NETCF where it is not supported). 
            Thus if the value is not in the specified encoding, or has been
            encoded incorrectly, then an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as UTF-8.
            </summary>
            -
            <remarks>
            Note: a strict decoding is used.
            Thus if the value is not in UTF-8 encoding or has been
            encoded incorrectly an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            On NETCF, an <see cref="T:System.ArgumentException"/> is thrown; not that
            <see cref="T:System.ArgumentException"/> is the base class of the
            <see cref="T:System.Text.DecoderFallbackException"/> exception.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.ElementType">
            <summary>
            Gets the type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.ElementTypeDescriptor">
            <summary>
            Gets the SDP Element Type Descriptor of the element
            as an <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceElement.Value">
            <summary>
            Gets the value of the element as the .NET type it is stored as.
            </summary>
            <remarks>
            In most cases the type-specific property should be used instead, e.g 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, etc.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList">
            <summary>
            Gets a list of enum-like classes containing SDP Service Attribute Id definitions 
            for a particular Service Class.
            </summary>
            -
            <remarks>
            See method 
            <see cref="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Get a list of enum-like classes containing Service Attribute Id definitions 
            for the type of the Service Class contained in the given Service Record.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            whose <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            element will be retrieved, and its Service Class Id will used
            for the lookup.
            </param>
            -
            <returns>
            An array of <see cref="T:System.Type"/> each of which is a enum-like class 
            which defines the set of Service Attribute IDs used by a particular 
            Service Class e.g. ObjectPushProfile.
            An empty array will be returned if none of the Service Classes
            are known, or the record contains no 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute, or it is invalid.
            <note>Currently only the first Service Class Id is looked-up.</note>
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="record"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class contained in the given 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            (type <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>) data element.
            </summary>
            -
            <param name="idElement">A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            of 'UUID' type containing the Service Class to search for.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown or the element is not of <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>
            type.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="idElement"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(System.Guid)">
            <overloads>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified.
            </overloads>
            -
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified by UUID.
            </summary>
            -
            <param name="uuid">The Service Class to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LanguageBaseItem">
            <summary>
            Represents a member of the SDP 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>,
            Attribute
            which provides for multi-language strings in a record.
            </summary>
            <remarks>
            &#x201C;The 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute is a list in which each 
            member contains a language identifier, a character encoding identifier, and 
            a base attribute ID for each of the natural languages used in the service 
            record.&#x201D;
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.PrimaryLanguageBaseAttributeId">
            <summary>
            The primary language is specified to have base attribute ID 0x0100.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.Utf8EncodingId">
            <summary>
            The Id for the UTF-8 encoding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotU16">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseBaseInvalid">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangBaseListParseNotInThrees">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgFormatUnrecognizedEncodingId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LanguageBaseItem.ErrorMsgLangMustAsciiTwoChars">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <overloads>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </overloads>
            -
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.Int16,System.Int16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.String,System.UInt16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.#ctor(System.String,System.Int16,InTheHand.Net.Bluetooth.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.ParseListFromElementSequence(InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Gets the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            items in the service record.
            </summary>
            -
            <param name="elementSequence">
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            data from the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute.
            </param>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.  
            An array length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            <paramref name="elementSequence"/> is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
            The element sequence contains incorrectly formatted or invalid content,
            for example it contains the wrong element data types, or doesn't contain
            the elements in groups of three as required.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.CreateElementSequenceFromList(InTheHand.Net.Bluetooth.LanguageBaseItem[])">
            <summary>
            Create a data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute
            from the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            </summary>
            -
            <param name="list">
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </param>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            element, to be added to a generally the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.CreateEnglishUtf8PrimaryLanguageItem">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance
            for a primary language of English and a string encoding of UTF-8.
            </summary>
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.GetEncoding">
            <summary>
            Gets an <see cref="T:System.Text.Encoding"/> appropriate for this language base item.
            </summary>
            -
            <returns>The <see cref="T:System.Text.Encoding"/>
            appropriate for this language base item.
            </returns>
            -
            <remarks>
            <para>We support the following set of mappings from encoding id to .NET
            Encoding name.
            <list type="table">
            <listheader><term>Id</term><description>Encoding</description></listheader>
            <item><term>3</term><description>us-ascii</description></item>
            <item><term>4</term><description>iso-8859-1</description></item>
            <item><term>5</term><description>iso-8859-2</description></item>
            <item><term>6</term><description>iso-8859-3</description></item>
            <item><term>7</term><description>iso-8859-4</description></item>
            <item><term>8</term><description>iso-8859-5</description></item>
            <item><term>9</term><description>iso-8859-6</description></item>
            <item><term>10</term><description>iso-8859-7</description></item>
            <item><term>11</term><description>iso-8859-8</description></item>
            <item><term>12</term><description>iso-8859-9</description></item>
            <item><term>13</term><description>iso-8859-10</description></item>
            <item><term>106 (0x006a)</term><description>UTF-8</description></item>
            <item><term>109</term><description>iso-8859-13</description></item>
            <item><term>110</term><description>iso-8859-14</description></item>
            <item><term>111</term><description>iso-8859-15</description></item>
            <item><term>112</term><description>iso-8859-16</description></item>
            <item><term>1013 (0x03f5)</term><description>unicodeFFFE (UTF-16BE)</description></item>
            <item><term>1014</term><description>utf-16 (UTF-16LE)</description></item>
            <item><term>1015</term><description>utf-16 (UTF-16, we assume UTF16-LE)</description></item>
            <item><term>2252 to 2258 (0x08cc to 0x08d2)</term><description>windows-1252 to Windows-1258</description></item>
            </list>
            Note that not all platforms support all these Encodings, for instance on
            my Windows XP SP2 box iso-8859-10/-14/-16 are not supported.  On NETCF on
            Windows Mobile 5 only five of the ISO-8859 encodings are supported.
            Regardless I've seen no SDP records that use ISO-8859 encodings so this is 
            not a problem, most records actually use UTF-8.
            </para>
            </remarks>
            -
            <exception cref="T:System.NotSupportedException">
            The IETF encoding id for this language base item is currently unknown.
            If valid, add it to the <c>s_IetfCharsetIdToDotNetEncodingNameTable</c> table, 
            providing a mapping to its Windows code page name.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.LanguageBaseItem.TestAllDefinedEncodingMappingRows(System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguage">
            <summary>
            Gets the value of the Natural Language field of the entry.
            </summary>
            <example>Some example value may be "en", and "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguageAsUInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.NaturalLanguageAsInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.AttributeIdBase">
            <summary>
            Gets the base Attribute Id for this language.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId">
            <summary>
            Get the IETF Charset identifier for this language.
            </summary>
            -
            <remarks>
            <para>Example values are 3 for US-ASCII and 106 for UTF-8.
            See the full list at <see href="http://www.iana.org/assignments/character-sets"/>
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingIdAsInt16"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingIdAsInt16">
            <summary>
            Get the IETF Charset identifier for this language, as an Int16.
            </summary>
            -
            <remarks>
            <para>
            See <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>.
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceClass">
            <summary>
            Class of Service flags as assigned in the Bluetooth specifications.
            </summary>
            -
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">ClassOfDevice.Service</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="http://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.None">
            <summary>
            No service class bits set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Capturing">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Rendering">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Positioning">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.LimitedDiscoverableMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.RadioMode">
            <summary>
            Determine all the possible modes of operation of the Bluetooth radio.
            </summary>
            -
            <remarks>See <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">BluetoothRadio.Mode</see>
            for what is supported on what platforms.  For instance setting the mode
            is not supported on Widcomm+Win32.  On Widcomm WM/CE setting <c>PowerOff</c>
            actually sets 'CONNECT_ALLOW_NONE', and not actually disabled/off.
            Also when the stack is disabled, setting connectable/discoverable 
            does not manage to turn the radio on.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">BluetoothRadio.Mode</seealso>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.PowerOff">
            <summary>
            Bluetooth is disabled on the device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.Connectable">
            <summary>
            Bluetooth is connectable but your device cannot be discovered by other devices.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.RadioMode.Discoverable">
            <summary>
            Bluetooth is activated and fully discoverable.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueZ.Structs.rfcomm_conninfo">
            <summary>
            Use with so_RFCOMM_CONNINFO.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Human Interface Device (HID) Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceReleaseNumber">
            <summary>
            HIDDeviceReleaseNumber
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;A numeric expression identifying the device release number in Binary-Coded 
            Decimal. This is a vendor-assigned field, which defines the version of 
            the product identified by the Bluetooth Device Identification [13] VendorID 
            and ProductID attributes. This attribute is intended to differentiate 
            between versions of products with identical VendorIDs and ProductIDs. 
            The value of the field is 0xJJMN for version JJ.M.N (JJ – major version 
            number, M – minor version number, N – sub-minor version number). &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ParserVersion">
            <summary>
            HIDParserVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each version of a profile is assigned a 16-bit unsigned integer version
            number of the base HID Specification [4] that the device was designed to. The value
            of the field is 0xJJMN for version JJ.M.N &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceSubclass">
            <summary>
            HIDDeviceSubclass
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDDeviceSubclass attribute is an 8-bit integer, which
            identifies the type of device (keyboard, mouse, joystick, gamepad,
            remote control, sensing device, etc.). Keyboards and mice are required
            to support boot mode operation. In boot mode, a device presents a fixed
            report, thus negating the requirement for a HID parser.
            <para></para>The Attribute value is identical to the low-order 8 bits
            of the Class of Device/Service (CoD) field in the FHS packet, where
            bits 7-2 contain the 6 bit Minor Device Class value (defined in Section
            1.2 of the Bluetooth Assigned Numbers document [8]) and bits 1-0 are
            set to zero.  &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.CountryCode">
            <summary>
            HIDCountryCode
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDCountryCode attribute is an 8-bit integer, which identifies
            which country the hardware is localized for. Most hardware is not localized
            and thus this value would be zero (0).&#x2026; 
            </para><para>The valid country codes are listed in the HID Specification
            [4].&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.VirtualCable">
            <summary>
            HIDVirtualCable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDVirtualCable attribute is a boolean value, which indicates
            whether the device supports virtual connections as described in Section
            Virtual Cables and Connection Re-Establishment. Devices that have this
            attribute True indicate that the device supports 1:1 bonding with a host,
            and the device expects to automatically reconnect if the connection is
            dropped for any unknown reason.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ReconnectInitiate">
            <summary>
            HIDReconnectInitiate
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDReconnectInitiate attribute is a boolean value, which
            indicates whether the device initiates the reconnection process or
            expects the host to. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DescriptorList">
            <summary>
            HIDDescriptorList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDDescriptorList Data Element Sequence performs the function of the
            HID Descriptor that is defined in Section 6.2 of the HID Specification [4]. The
            HIDDescriptorList identifies the descriptors associated with the device. &#x2026;
            </para><para>The HIDDescriptorList is a Data Element Sequence that consists of
            one or more HIDDescriptors. A HIDDescriptor is a data element sequence containing, 
            minimally, a pair of elements. For compatibility with future versions of the HID
            profile, addition elements found in a HIDDescriptor shall be ignored. &#x2026;
                   &#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.LangIdBaseList">
            <summary>
            HIDLANGIDBaseList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDLANGIDBaseList is a Data Element Sequence that consists of one or
            more HIDLANGIDBases. A HIDLANGIDBase is a data element sequence containing, minimally, 
            two elements for each of the languages used in the service record: a language identifier
            (LANGID) and a base attribute ID. For compatibility with future versions of the
            HID profile, additional elements found in a HIDLANGIDBase shall be ignored.
            </para><para>The first element, called the HIDLANGID, contains an identifier representing
            the natural language ID. The language is encoded according to the “Universal Serial
            Bus Language Identifiers (LANGIDs)” Specification [9].
            </para><para>The second element, called the HIDLanguageBase, contains an attribute
            ID that serves as the base attribute ID for the natural language in the service
            record. Different service records within a server may use different base attribute
            ID values for the same language. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SdpDisable">
            <summary>
            HIDSDPDisable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDSDPDisable attribute is a boolean value, which indicates whether
            connection to the SDP channel and Control or Interrupt channels are mutually exclusive.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BatteryPower">
            <summary>
            HIDBatteryPower
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDBatteryPower attribute is a boolean value, which indicates whether
            the device is battery powered (and requires careful power management) or has some
            other source of power that requires minimal management. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.RemoteWake">
            <summary>
            HIDRemoteWake
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDRemoteWake attribute is a boolean value, which indicates whether
            the device considers itself remote wake up-capable. When a system enters a suspend
            (or standby) state, this flag shall be used to determine whether the host includes
            this device in the set of devices that can wake it up. A mouse or keyboard are
            typical examples of Remote Wake up devices.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BootDevice">
            <summary>
            HIDBootDevice
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDBootDevice is an 8-bit Boolean value that when True indicates whether
            the device supports boot protocol mode and by inference the Set_Protocol and Get_Protocol
            commands. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SupervisionTimeout">
            <summary>
            HIDSupervisionTimeout
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDSupervisionTimeout is a 16-bit value which indicates the device
            vendor’s recommended baseband Link Supervision Timeout value in slots. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.NormallyConnectable">
            <summary>
            HIDNormallyConnectable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDNormallyConnectable is an optional Boolean attribute that specifies
            whether a HID is normally in Page Scan mode (when no connection is active) or not.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ProfileVersion">
            <summary>
            HIDProfileVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each device designed to this specification shall include a 16-bit unsigned
            integer version number of the Bluetooth HID Specification (this document) that
            the device was designed to. The value of the field is 0xJJMN for version JJ.M.N
            (JJ – major version number, M – minor version number, N – sub-minor version number);
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAListener">
            <summary>
            Places a socket in a listening state to monitor infrared connections from a specified service or network address.
            </summary>
            <remarks>This class monitors a service by specifying a service name or a network address.
            The listener does not listen until you call one of the <see cref="M:InTheHand.Net.Sockets.IrDAListener.Start"/>
            methods.</remarks>
            <seealso cref="T:System.Net.Sockets.IrDAListener"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.#ctor(InTheHand.Net.IrDAEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> class.
            </summary>
            <param name="ep">The network address to monitor for making a connection.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> class.
            </summary>
            <param name="service">The name of the service to listen for.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            <returns>A socket.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.AcceptIrDAClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <returns>An <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> object.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            -
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptIrDAClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            -
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the 
            asynchronous accept, which could still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.EndAcceptIrDAClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Sockets.IrDAListener.BeginAcceptIrDAClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>An <see cref="T:InTheHand.Net.Sockets.IrDAClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.IrDAListener.Pending">
            <summary>
            Determines if a connection is pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.Active">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Net.Sockets.IrDAListener"/> is actively listening for client connections.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.IrDAListener.LocalEndpoint">
            <summary>
            Gets an <see cref="T:InTheHand.Net.IrDAEndPoint"/> representing the local device.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType">
            <summary>
            Configures what type of element will be added by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>
            for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <remarks><para>Used with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.None">
            <summary>
            No PDL attribute will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.L2Cap">
            <summary>
            A standard L2CAP element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.Rfcomm">
            <summary>
            A standard RFCOMM element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.GeneralObex">
            <summary>
            A standard GOEP (OBEX) element will be added.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ClassOfDevice">
            <summary>
            Describes the device and service capabilities of a device.
            </summary>
            -
            <remarks>
            <para>Is returned by the properties
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">BluetoothDeviceInfo.ClassOfDevice</see>
            and
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.ClassOfDevice">BluetoothRadio.ClassOfDevice</see>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(System.UInt32)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <remarks>
            <para>An example raw value is 0x00020104, which stands for
            device: DesktopComputer, service: Network.
            </para>
            </remarks>
            -
            <param name="cod">A <see cref="T:System.UInt32"/> containing the
            raw Class of Device value.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(InTheHand.Net.Bluetooth.DeviceClass,InTheHand.Net.Bluetooth.ServiceClass)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <param name="device">A <see cref="T:InTheHand.Net.Bluetooth.DeviceClass"/>
            value.
            </param>
            <param name="service">A <see cref="T:InTheHand.Net.Bluetooth.ServiceClass"/>
            value.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.ToString">
            <summary>
            Returns the numerical value represented in a hexadecimal.
            </summary>
            -
            <returns>A <see cref="T:System.String"/> containing
            the numerical value represented in a hexadecimal
            e.g. "720104", "5A020C".
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            object.
            </summary>
            <param name="obj">An object
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="obj"/> is an instance of <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            and equals the value of this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(InTheHand.Net.Bluetooth.ClassOfDevice)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/> value.
            </summary>
            <param name="other">An <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="other"/>
            has the same value as this instance; otherwise, false.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">
            <summary>
            Returns the device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.MajorDevice">
            <summary>
            Returns the major device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">
            <summary>
            Returns supported service types.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value">
            <summary>
            Gets the numerical value.
            </summary>
            <seealso cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.ValueAsInt32"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.ValueAsInt32">
            <summary>
            Gets the numerical value, suitable for CLS Compliance.
            </summary>
            <seealso cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioEventArgs">
            <summary>
            The base class for classes containing Radio In- and Out-of-Range events.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioEventArgs.Device">
            <summary>
            Gets the device to which the event applies.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs">
            <summary>
            The data for Radio Out-of-Range event.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32RadioOutOfRangeEventArgs.ToString">
            <summary>
            Gets a string representation of the event.
            </summary>
            <returns>A string (e.g. contains the device address and name).</returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs">
            <summary>
            The data for Radio Out-of-Range event.
            </summary>
            -
            <remarks>
            <para>Supported only by the Microsoft stack on desktop Windows.
            </para>
            <para>Produced by class <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Events"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.ToString">
            <summary>
            Gets a string representation of the event.
            </summary>
            <returns>A string (e.g. contains the device address, name and the current and previous flags).</returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.CurrentState">
            <summary>
            The current state of the device according to the Bluetooth stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.PreviousState">
            <summary>
            The previous state of the device according to the Bluetooth stack.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.GainedStates">
            <summary>
            The flags that are set in the current state
            and weren't in the previous state (calculated).
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothWin32RadioInRangeEventArgs.LostStates">
            <summary>
            The flags that are not set in the current state
            but were in the previous state (calculated).
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothService">
            <summary>
            Standard Bluetooth Profile identifiers.
            </summary>
            -
            <remarks>
            <para>See the list at <see href="http://www.bluetooth.com/Specification%20Documents/AssignedNumbersServiceDiscovery.pdf"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Empty">
            <summary>
            Represents an empty service Guid.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BluetoothBase">
            <summary>
            Represents the base Guid from which all standard Bluetooth profiles are derived - not used for connections.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SdpProtocol">
            <summary>
            [0x0001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdpProtocol">
            <summary>
            [0x0002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.RFCommProtocol">
            <summary>
            [0x0003]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcpProtocol">
            <summary>
            [0x0004]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcsBinProtocol">
            <summary>
            [0x0005]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.TcsAtProtocol">
            <summary>
            [0x0006]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AttProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IPProtocol">
            <summary>
            [0x0009]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.FtpProtocol">
            <summary>
            [0x000A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HttpProtocol">
            <summary>
            [0x000C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.WspProtocol">
            <summary>
            [0x000E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BnepProtocol">
            <summary>
            [0x000F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UpnpProtocol">
            <summary>
            [0x0010]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HidpProtocol">
            <summary>
            [0x0011]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyControlChannelProtocol">
            <summary>
            [0x0012]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyDataChannelProtocol">
            <summary>
            [0x0014]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyNotificationProtocol">
            <summary>
            [0x0016]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AvctpProtocol">
            <summary>
            [0x0017]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AvdtpProtocol">
            <summary>
            [0x0019]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CmtpProtocol">
            <summary>
            [0x001B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiCPlaneProtocol">
            <summary>
            [0x001D] ?????
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.McapControlChannelProtocol">
            <summary>
            [0x001E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.McapDataChannelProtocol">
            <summary>
            [0x001F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.L2CapProtocol">
            <summary>
            [0x0100]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ServiceDiscoveryServer">
            <summary>
            [0x1000]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BrowseGroupDescriptor">
            <summary>
            [0x1001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PublicBrowseGroup">
            <summary>
            [0x1002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort">
            <summary>
            Provides a basic Serial emulation connect over Bluetooth. [0x1101]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.LanAccessUsingPpp">
            <summary>
            Used to establish PPP connections over RFComm channels. [0x1102]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DialupNetworking">
            <summary>
            [0x1103]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync">
            <summary>
            [0x1104]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush">
            <summary>
            Used for sending binary objects between devices.[0x1105]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexFileTransfer">
            <summary>
            OBEX version of an FTP server [0x1106]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSyncCommand">
            <summary>
            [0x1107]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Headset">
            <summary>
            HSP (Headset Profile) — Supports Bluetooth headset devices.[0x1108]
            See also 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CordlessTelephony">
            <summary>
            [0x1109]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSource">
            <summary>
            [0x110A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSink">
            <summary>
            [0x110B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlTarget">
            <summary>
            [0x110C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AdvancedAudioDistribution">
            <summary>
            [0x110D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControl">
            <summary>
            [0x110E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlController">
            <summary>
            [0x110F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Intercom">
            <summary>
            [0x1110]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Fax">
            <summary>
            [0x1111]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway">
            <summary>
            [0x1112]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Wap">
            <summary>
            [0x1113]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.WapClient">
            <summary>
            [0x1114]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Panu">
            <summary>
            [0x1115]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Nap">
            <summary>
            [0x1116]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GN">
            <summary>
            [0x1117]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrinting">
            <summary>
            [0x1118]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReferencePrinting">
            <summary>
            [0x1119]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging">
            <summary>
            [0x111A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder">
            <summary>
            [0x111B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive">
            <summary>
            [0x111C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects">
            <summary>
            [0x111D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Handsfree">
            <summary>
            Supports hands free kits such as a car kits which provide audio and more advanced call control than the Headset profile. [0x111E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HandsfreeAudioGateway">
            <summary>
            [0x111F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrintingReferenceObjects">
            <summary>
            [0x1120]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReflectedUI">
            <summary>
            [0x1121]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BasicPrinting">
            <summary>
            Used for printing simple text, HTML, vCard objects and similar. [0x1122]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PrintingStatus">
            <summary>
             [0x1123]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HumanInterfaceDevice">
            <summary>
            Supports human interface devices such as keyboards and mice. [0x1124]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacement">
            <summary>
             [0x1125]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementPrint">
            <summary>
             [0x1126]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementScan">
            <summary>
             [0x1127]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CommonIsdnAccess">
            <summary>
            Common_ISDN_Access [0x1128]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoConferencingGW">
            <summary>
             [0x1129]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiMT">
            <summary>
            UDI_MT [0x112A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiTA">
            <summary>
            UDI_TA [0x112B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioVideo">
            <summary>
             [0x112C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SimAccess">
            <summary>
            SIM_Access [0x112D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPce">
            <summary>
            Phonebook Access - PCE [0x112E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPse">
            <summary>
            Phonebook Access - PSE [0x112F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccess">
            <summary>
            Phonebook Access [0x1130]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset">
            <summary>
            Headset [0x1131]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessServer">
            <summary>
            Message Access Server [0x1132]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageNotificationServer">
            <summary>
            Message Notification Server [0x1133]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessProfile">
            <summary>
            Message Access Profile [0x1134]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation">
            <summary>
            Bluetooth Device Identification. [0x1200]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericNetworking">
            <summary>
             [0x1201]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericFileTransfer">
            <summary>
             [0x1202]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericAudio">
            <summary>
             [0x1203]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericTelephony">
            <summary>
             [0x1204]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnp">
            <summary>
             [0x1205]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIP">
            <summary>
             [0x1206]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPPan">
            <summary>
            ESDP_UPNP_IP_PAN [0x1300]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPLap">
            <summary>
            ESDP_UPNP_IP_LAP [0x1301]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPL2Cap">
            <summary>
            ESDP_UPNP_L2CAP [0x1302]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSource">
            <summary>
            Video Distribution Profile - Source [0x1303]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSink">
            <summary>
            Video Distribution Profile - Sink [0x1304]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoDistribution">
            <summary>
            Video Distribution Profile [0x1305]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDevice">
            <summary>
            Health Device Profile (HDP) [0x1400]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSource">
            <summary>
            Health Device Profile (HDP) - Source [0x1401]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSink">
            <summary>
            Health Device Profile (HDP) - Sink [0x1402]
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid">
            The service class UUID as a <see cref="T:System.Guid"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit short UUID form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit short UUID form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.DeleteKnownDevice(InTheHand.Net.BluetoothAddress)">
            <summary>
            Remove the device by deleting it from the Registry.
            </summary>
            <param name="device">The device address.</param>
            <returns>Whether the device is deleted -- it is no longer a remembered device.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.GetExtendedError">
            <summary>
            Call CBtIf::GetExtendedError.
            </summary>
            -
            <remarks>
            <para>Is not currently used anywhere...
            </para>
            <para>Not supported on Widcomm WCE WM/WinCE, we (natively) return -1.
            </para>
            </remarks>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.Widcomm.WBtRc"/> value.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.IsRemoteDevicePresent(System.Byte[])">
            <summary>
            CBtIf::IsRemoteDevicePresent
            </summary>
            -
            <remarks>
            <note>"added BTW and SDK 5.0.1.1000"</note>
            <note>"added BTW-CE and SDK 1.7.1.2700"</note>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Widcomm.WidcommBtInterface.IsRemoteDeviceConnected(System.Byte[])">
            <summary>
            CBtIf::IsRemoteDeviceConnected
            </summary>
            -
            <remarks>
            <note>"added BTW 5.0.1.300, SDK 5.0"</note>
            <note>"added BTW-CE and SDK 1.7.1.2700"</note>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.BTHNS_RESULT">
            <summary>
            Bluetooth specific flags returned from WSALookupServiceNext 
            in WSAQUERYSET.dwOutputFlags in response to device inquiry.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_GENERAL_DISCOVERABLE">
            <summary>
            &#x201C;Sets the device into general discoverable mode. This is
            the default discoverable mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_LIMITED_DISCOVERABLE">
            <summary>
            &#x201C;Sets the device into limited discoverable mode. If this
            value is specified, BTSDK_GENERAL_DISCOVERABLE
            mode value is ignored by BlueSoleil.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_DISCOVERABLE">
            <summary>
            &#x201C;Makes the device discoverable. This is equivalent to
            BTSDK_GENERAL_DISCOVERABLE.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_CONNECTABLE">
            <summary>
            &#x201C;Makes the device connectable. This is the default
            connectable mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.DiscoveryMode.BTSDK_PAIRABLE">
            <summary>
            &#x201C;Makes the device pairable. This is the default pairable
            mode.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.CONN_IND">
            <summary>
            &#x201C;A remote device connects to a local service record.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.DISC_IND">
            <summary>
            &#x201C;The remote device disconnects the connection, or the
            connection is lost due to radio communication problems,
            e.g. the remote device is out of communication range.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.CONN_CFM">
            <summary>
            &#x201C;A local device connects to a remote service record.&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.ConnectionEventType.DISC_CFM">
            <summary>
            &#x201C;The local device disconnects the connection from remote
            service.&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.AttributeLookup">
            <summary>
            "Possible flags for member 'mask' in _BtSdkRemoteServiceAttrStru"
            </summary>
        </member>
        <member name="T:InTheHand.Net.IrDAEndPoint">
            <summary>
            Represents an end point for an infrared connection.
            </summary>
            <seealso cref="T:System.Net.IrDAEndPoint"/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAEndPoint"/> class.
            </summary>
            <param name="irdaDeviceID">The device identifier.</param>
            <param name="serviceName">The Service Name to connect to/listen on eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to
            / a server is to listen on 
            a specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.
            </param>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.#ctor(InTheHand.Net.IrDAAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAEndPoint"/> class.
            </summary>
            <param name="irdaDeviceAddress">The device address.</param>
            <param name="serviceName">The Service Name to connect to/listen on eg "<c>OBEX</c>".
            In the very uncommon case where a connection is to be made to
            / a server is to listen on 
            a specific LSAP-SEL (port number), then use 
            the form "<c>LSAP-SELn</c>", where n is an integer.
            </param>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Create(System.Net.SocketAddress)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.IrDAEndPoint"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.IrDAEndPoint"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAEndPoint.ToString">
            <summary>
            Returns the string representation of the IrDAEndPoint.
            </summary>
            <remarks>
            <para>
            The string is in format <c>&lt;DeviceAddress&gt;:&lt;ServiceName&gt;</c>
            </para>
            An example is:
            <code lang="none">"04E20304:OBEX"</code>
            </remarks>
            <returns>The string representation of the IrDAEndPoint.</returns>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.Address">
            <summary>
            Gets or sets an address for the device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.DeviceID">
            <summary>
            Gets or sets an identifier for the device.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The specified byte array is null (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified byte array is not four bytes long.
            </exception>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:InTheHand.Net.IrDAEndPoint.AddressFamily">
            <summary>
            Gets the address family to which the endpoint belongs.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LinkPolicy">
            <summary>
            Flags to describe Link Policy.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Disabled">
            <summary>
            Disables all LAN Manager (LM) modes. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.MasterSlave">
            <summary>
            Enables the master slave switch.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Hold">
            <summary>
            Enables Hold mode.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Sniff">
            <summary>
            Enables Sniff Mode.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LinkPolicy.Park">
            <summary>
            Enables Park Mode.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication">
             <summary>
             Provides Bluetooth authentication services on desktop Windows.
             </summary>
             -
             <remarks>
             <note>This class is supported on desktop Windows and with the Microsoft
             stack only.
             </note>
             <para>This class can be used in one of two ways.  Firstly
             an instance can be created specifying one device that is being connected
             to and the PIN string to use for it.  (That form is used internally by
             <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to support
             its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.SetPin(System.String)"/> method).
             </para>
             <para>Secondly it can also be used a mode where a user supplied
             callback will be called when any device requires authentication,
             the callback includes a parameter of type 
             <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/>.
             Various authentication methods are available in Bluetooth version
             2.1 and later.  Which one is being used is indicated by the
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.AuthenticationMethod"/>
             property.
             If it is <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy"/>
             then the callback method should set the
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Pin"/>
             property.
             </para>
             <para>
             For the other authentication methods 
             e.g. <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison"/>
             or <see cref="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand"/>
             the callback method should use one or more of the other properties and
             methods e.g.
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.NumberOrPasskey"/>,
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.Confirm"/>,
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ResponseNumberOrPasskey"/>,
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.ConfirmOob(System.Byte[],System.Byte[])"/>
             etc.
             </para>
             <para>
             See the example below for a 'Legacy' method handler.
             The callback mode can be configured to do a callback after the 
             &#x2018;send PIN&#x2019; action, this allows one to see if it was successful 
             etc.  An example sequence where the PIN was <strong>incorrect</strong> is as follows.
             </para>
             <code lang="none">
            Authenticate one device -- with wrong passcode here the first two times.
            Passcode respectively: 'BAD-x', 'BAD-y', '9876'
            Making PC discoverable
            Hit Return to complete
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 0, Last error code 0
              Sending "BAD-x"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 1, Last error code 1244
              Sending "BAD-y"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 2, Last error code 1167
              Sending "9876"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 3, Last error code 1167
            etc
            </code>
             <para>
             That is we see the error code of <c>1244=NativeErrorNotAuthenticated</c>
             once, and then the peer device disappears (<c>1167=NativeErrorDeviceNotConnected</c>).
             I suppose that's a security feature -- its stops an attacker
             from trying again and again with different passcodes.
            
             Anyway the result of that is that is it <strong>not</strong> worth repeating 
             the callback after the device disappears.  The code now enforces this.  With 
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/> 
             set to <c>true</c>, if the result of the previous attempt was &#x2018;success&#x2019; 
             or &#x2018;device not connected&#x2019; then any new PIN set in the callback 
             won&#x2019;t be used and thus the callback won&#x2019;t be called again 
             for that authentication attempt.
             </para>
             <para>A successful authentication process can thus be detected by checking if
             <code>e.PreviousNativeErrorCode == NativeErrorSuccess &amp;&amp; e.AttemptNumber != 0</code>
             </para>
             <para>
             </para>
             <para>The instance will continue receiving authentication requests
             until it is disposed or garbage collected, so keep a reference to it
             whilst it should be active and call 
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
             when you&#x2019;re finished.
             </para>
             </remarks>
             -
             <example>
             If one wants to respond to PIN requests for one device with a known PIN then
             use the simple form which is initialized with an address and PIN.
             <code lang="C#">
             BluetoothWin32Authentication authenticator
                 = new BluetoothWin32Authentication(remoteEP.Address, m_pin);
             // when the peer is expected to require pairing, perhaps do some work.
             authenticator.Dispose();
             </code>
             
             If one wants to see the PIN request, perhaps to be able to check the type
             of the peer by its address then use the form here which requests callbacks.
             (Note that this code assumes that 'Legacy' PIN-based pairing is being
             used; setting the Pin property will presumably have no effect if the
             authentication method being used is one of the v2.1 SSP forms).
             <code lang="VB.NET">
             Using pairer As New BluetoothWin32Authentication(AddressOf Win32AuthCallbackHandler)
                 Console.WriteLine("Hit Return to stop authenticating")
                 Console.ReadLine()
             End Using
             ...
             
             Sub Win32AuthCallbackHandler(ByVal sender As Object, ByVal e As InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)
                ' Note we assume here that 'Legacy' pairing is being used,
                ' and thus we only set the Pin property!
                Dim address As String = e.Device.DeviceAddress.ToString()
                Console.WriteLine("Received an authentication request from address " + address)
                
                ' compare the first 8 hex numbers, this is just a special case because in the
                ' used scenario the model of the devices can be identified by the first 8 hex
                ' numbers, the last 4 numbers being the device specific part.
                If address.Substring(0, 8).Equals("0099880D") OrElse _
                        address.Substring(0, 8).Equals("0099880E") Then
                    ' send authentication response
                    e.Pin = "5276"
                ElseIf (address.Substring(0, 8).Equals("00997788")) Then
                    ' send authentication response
                    e.Pin = "ásdfghjkl"
                End If
             End Sub
             </code>
             </example>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorSuccess">
            <summary>
            Windows&#x2019; ERROR_SUCCESS
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorNotAuthenticated">
            <summary>
            Windows&#x2019; ERROR_NOT_AUTHENTICATED
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.NativeErrorDeviceNotConnected">
            <summary>
            Windows&#x2019; ERROR_DEVICE_NOT_CONNECTED
            </summary>
            <remarks><see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.PreviousNativeErrorCode"/>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.#ctor(InTheHand.Net.BluetoothAddress,System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class.
            </overloads>
            -
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class,
            to respond to a specific address with a specific PIN string.
            </summary>
            -
            <remarks>
            <para>The instance will continue receiving authentication requests
            until it is disposed or garbage collected, so keep a reference to it
            whilst it should be active, and call 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
            when you&#x2019;re finished.
            </para>
            </remarks>
            -
            <param name="remoteAddress">The address of the device to authenticate,
            as a <see cref="T:InTheHand.Net.BluetoothAddress"/>.
            </param>
            <param name="pin">The PIN string to use for authentication, as a
            <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.#ctor(System.EventHandler{InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs})">
             <summary>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/> class,
             to call a specified handler when any device requires authentication.
             </summary>
             -
             <remarks>
             <para>See the example below.
             </para>
             <para>The callback mode can be configured to do a callback after the 
             &#x2018;send PIN&#x2019;action, this allows one to see if it was successful 
             etc.  An example sequence where the PIN was <strong>incorrect</strong> is as follows.
             </para>
             <code lang="none">
            Authenticate one device -- with wrong passcode here the first two times.
            Passcode respectively: 'BAD-x', 'BAD-y', '9876'
            Making PC discoverable
            Hit Return to complete
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 0, Last error code 0
              Sending "BAD-x"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 1, Last error code 1244
              Sending "BAD-y"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 2, Last error code 1167
              Sending "9876"
            Authenticating 0017E464CF1E wm_alan1
              Attempt# 3, Last error code 1167
            etc
            </code>
             <para>
             That is we see the error code of <c>1244=NativeErrorNotAuthenticated</c>
             once, and then the peer device disappears (<c>1167=NativeErrorDeviceNotConnected</c>).
             I suppose that's a security feature -- its stops an attacker
             from trying again and again with different passcodes.
            
             Anyway the result of that is that is it <strong>not</strong> worth repeating 
             the callback after the device disappears.  The code now enforces this.  With 
             <see cref="P:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs.CallbackWithResult"/> 
             set to <c>true</c>, if the result of the previous attempt was &#x2018;success&#x2019; 
             or &#x2018;device not connected&#x2019; then any new PIN set in the callback 
             won&#x2019;t be used and thus the callback won&#x2019;t be called again 
             for that authentication attempt.
             </para>
             <para>A successful authentication process can thus be detected by setting
             <c>CallbackWithResult=true</c> and checking in the callback if
             <code>  e.PreviousNativeErrorCode == NativeErrorSuccess &amp;&amp; e.AttemptNumber != 0</code>
             </para>
             <para>
             </para>
             <para>The instance will continue receiving authentication requests
             until it is disposed or garbage collected, so keep a reference to it
             whilst it should be active, and call 
             <see cref="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose"/>
             when you&#x2019;re finished.
             </para>
             </remarks>
             -
             <param name="handler">A reference to a handler function that can respond
             to authentication requests.
             </param>
             -
             <example>
             <code lang="VB.NET">
             Using pairer As New BluetoothWin32Authentication(AddressOf Win32AuthCallbackHandler)
                 Console.WriteLine("Hit Return to stop authenticating")
                 Console.ReadLine()
             End Using
             ...
             
             Sub Win32AuthCallbackHandler(ByVal sender As Object, ByVal e As InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)
                Dim address As String = e.Device.DeviceAddress.ToString()
                Console.WriteLine("Received an authentication request from address " + address)
                
                ' compare the first 8 hex numbers, this is just a special case because in the
                ' used scenario the model of the devices can be identified by the first 8 hex
                ' numbers, the last 4 numbers being the device specific part.
                If address.Substring(0, 8).Equals("0099880D") OrElse _
                        address.Substring(0, 8).Equals("0099880E") Then
                    ' send authentication response
                    e.Pin = "5276"
                ElseIf (address.Substring(0, 8).Equals("00997788")) Then
                    ' send authentication response
                    e.Pin = "ásdfghjkl"
                End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.OnAuthentication(InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs)">
            <summary>
            Calls the authentication callback handler.
            </summary>
            -
            <param name="e">An instance of <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32AuthenticationEventArgs"/> 
            containing the details of the authentication callback.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose">
            <summary>
            Release the unmanaged resources used by the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothWin32Authentication.Dispose(System.Boolean)">
            <summary>
            Release the unmanaged resources used by the <see cref="T:InTheHand.Net.Bluetooth.BluetoothWin32Authentication"/>,
            and optionally disposes of the managed resources.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod">
            <summary>
            The BluetoothAuthenticationMethod enumeration defines the supported
            authentication types during device pairing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy">
            <summary>
            The Bluetooth device supports authentication via a PIN.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand">
            <summary>
            The Bluetooth device supports authentication via out-of-band data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison">
            <summary>
            The Bluetooth device supports authentication via numeric comparison.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.PasskeyNotification">
            <summary>
            The Bluetooth device supports authentication via passkey notification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Passkey">
            <summary>
            The Bluetooth device supports authentication via passkey.
            </summary>
        </member>
        <member name="T:InTheHand.Net.ObexMethod">
            <summary>
            Methods which can be carried out in an Object Exchange transaction.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Put">
            <summary>
            Sends an object to a receiving device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Get">
            <summary>
            Requests a file from the remote device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Connect">
            <summary>
            Negotiate an Object Exchange connection with a remote device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.Disconnect">
            <summary>
            Disconnect an existing Object Exchange session.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.PutFinal">
            <summary>
            Sends the last packet of an object to a receiving device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.ObexMethod.SetPath">
            <summary>
            Change remote path on an Object Exchange server.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.L2CapClient">
            <summary>
            Provides client connections to a remote Bluetooth L2CAP service.
            </summary>
            -
            <remarks>
            <para>For RFCOMM connections use <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            </para>
            <para>The normal usage is o create an instance, connect with 
            <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>,
            and if successful one then calls <see cref="M:InTheHand.Net.Sockets.L2CapClient.GetStream"/>
            to send and receive data.
            </para>
            <para>See the <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            method for more information
            on specifying the remote service to connect to.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.#ctor">
            <summary>
            Creates a new instance of <see cref="T:InTheHand.Net.Sockets.L2CapClient"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Close">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.L2CapClient.Dispose"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.L2CapClient.Close"/>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects to a remote Bluetooth L2CAP service
            using the specified remote endpoint.
            </summary>
            -
            <remarks>
            <para>The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> must
            have the <see cref="P:InTheHand.Net.BluetoothEndPoint.Address"/>
            set, and either the <see cref="P:InTheHand.Net.BluetoothEndPoint.Service"/>
            or <see cref="P:InTheHand.Net.BluetoothEndPoint.Port"/> properties
            set.
            The port is the L2CAP PSM number, and if set a connection will be
            made to that PSM and the Service Class Id ignored.
            Note that only certain PSM values are valid.  See 
            <see cref="T:InTheHand.Net.Sockets.L2CapListener"/> for more
            information.
            </para>
            </remarks>
            -
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to which you intend to connect. See the remarks for usage.
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            </summary>
            -
            <remarks>
            <para>See 
            <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>
            for more information.
            </para>
            </remarks>
            -
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/>
            to which you intend to connect.
            See 
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.Connect(InTheHand.Net.BluetoothEndPoint)"/>,
            for more information.
            </param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/>
            delegate that references the method to invoke when the operation is
            complete.
            </param>
            <param name="state">A user-defined object that contains information
            about the connect operation. This object is passed to the
            <paramref name="requestCallback"/> delegate when the operation is
            complete.
            </param>
            -
            <returns>An <see cref="T:System.IAsyncResult"/> object that
            references the asynchronous connection,
            which may still be pending.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            -
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/>
            object returned by a call to 
            or <see cref="M:InTheHand.Net.Sockets.L2CapClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>,
            </param>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.GetStream">
            <summary>
            Returns the <see cref="T:System.IO.Stream"/> used to send and
            receive data.
            </summary>
            -
            <remarks>
            <para>Note it is NOT a <see cref="T:System.Net.Sockets.NetworkStream"/>.
            That type handles SOCK_STREAM connections, whereas L2CAP uses
            SOCK_SEQPACKET.
            Different Stream subclasses may be returned by different platforms.
            </para>
            </remarks>
            -
            <returns>The <see cref="T:System.IO.Stream"/> used to send and
            receive data.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.L2CapClient.GetMtu">
            <summary>
            Get the MTU................
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:InTheHand.Net.Sockets.L2CapClient.RemoteEndPoint">
            <summary>
            Get the remote endpoint.
            </summary>
            -
            <value>
            The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> with which the 
            <see cref="T:InTheHand.Net.Sockets.L2CapClient"/> is communicating.
            </value>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_UpdateRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            Gets the current user-friendly name of the specified remote device.
            </summary>
            -
            <remarks>
            Before calling Btsdk_UpdateRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_StartBluetooth.
            The user-friendly device name is a UTF-8 character string. The device name acquired by this
            command is stored automatically in the device database.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_GetRemoteLinkQuality(System.UInt32,System.UInt16@)">
            <summary>
            "gets the current link quality value of the connection between local
            device and the specified remote device."
            </summary>
            -
            <remarks>"The higher the value, the better the link quality is."
            </remarks>
            -
            <returns>"Range: 0 to 0xFF."
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.NativeMethods.Btsdk_GetRemoteDeviceName(System.UInt32,System.Byte[],System.UInt16@)">
            <summary>
            "Gets the user-friendly name of the specified remote device from the device database."
            </summary>
            -
            <remarks>
            "Before calling Btsdk_GetRemoteDeviceName, the device database must be initialized by a
            previous successful call to Btsdk_Init.
            The user-friendly device name is a UTF-8 character string. The Btsdk_GetRemoteDeviceNamefunction returns =BTSDK_OPERATION_FAILURE immediately if the device name doesn’t
            exist in the database. In this case, the application shall call Btsdk_UpdateRemoteDeviceName
            to acquire the name information directly from the remote device.
            BlueSoleil will automatically update the device name when the local device connects to the
            specified remote device.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.ObexListenerRequest">
            <summary>
            Describes an incoming OBEX request to an <see cref="T:InTheHand.Net.ObexListener"/> object.
            </summary>
        </member>
        <member name="M:InTheHand.Net.ObexListenerRequest.WriteFile(System.String)">
            <summary>
            Writes the body of the request to the specified file path.
            </summary>
            <param name="fileName">The filename (including the path) to write to.</param>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ContentLength64">
            <summary>
            Gets the length of the body data included in the request.
            <para><b>New in v1.5.51015</b></para>
            </summary>
            <value>A long value that contains the value from the request's Length header.
            This value is -1 if the content length is not known.</value>
            <remarks>The Length header expresses the length, in bytes, of the body data that accompanies the request.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ContentType">
            <summary>
            Gets the MIME type of the body data included in the request.
            </summary>
            <value>A <see cref="T:System.String"/> that contains the text of the request's Type header.</value>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.Headers">
            <summary>
            Gets the collection of header name/value pairs sent in the request.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> that contains the OBEX headers included in the request.</value>
            <remarks>For a complete list of request headers, see the <see cref="T:InTheHand.Net.ObexHeader"/> enumeration.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.LocalEndPoint">
            <summary>
            Get the device address and service to which the request is directed.
            </summary>
            -
            <remarks>
            The <see cref="T:System.Net.EndPoint"/> instance returned will be of the 
            subtype that matches the address family that the <see cref="T:InTheHand.Net.ObexListener"/> 
            is listening on.  For instance if the listener was created with 
            <see cref="T:InTheHand.Net.ObexTransport"/>.<see cref="F:InTheHand.Net.ObexTransport.Bluetooth"/>
            then the <see cref="T:System.Net.EndPoint"/> will be of type
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>, and similarly for 
            <see cref="T:InTheHand.Net.IrDAEndPoint"/> and
            <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.ObexListenerRequest.RemoteEndPoint"/>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ObexMethod">
            <summary>
            Gets the method specified by the client.
            </summary>
            <remarks>Only PUT is supported in this version.</remarks>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the body data sent by the client.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.ProtocolVersion">
            <summary>
            Gets the OBEX version used by the requesting client
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.RawUrl">
            <summary>
            Gets the URL information (without the host and port) requested by the client.
            </summary>
            <value>A <see cref="T:System.String"/> that contains the raw URL for this request.</value>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.RemoteEndPoint">
            <summary>
            Gets the device address and service from which the request originated.
            </summary>
            -
            <remarks>
            The <see cref="T:System.Net.EndPoint"/> instance returned will be of the 
            subtype that matches the address family that the <see cref="T:InTheHand.Net.ObexListener"/> 
            is listening on.  For instance if the listener was created with 
            <see cref="T:InTheHand.Net.ObexTransport"/>.<see cref="F:InTheHand.Net.ObexTransport.Bluetooth"/>
            then the <see cref="T:System.Net.EndPoint"/> will be of type
            <see cref="T:InTheHand.Net.BluetoothEndPoint"/>, and similarly for 
            <see cref="T:InTheHand.Net.IrDAEndPoint"/> and
            <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
            -
            <example>
            C#
            <code lang="C#">
              ObexListener lsnr = new ObexListener(ObexTransport.Bluetooth)
              ... ...
              ObexListenerRequest olr = ...
              BluetoothEndPoint remoteEp = (BluetoothEndPoint)olr.RemoteEndPoint;
              BluetoothAddress remoteAddr = remoteEp.Address;
            </code>
            Visual Basic
            <code lang="VB.NET">
              Dim lsnr As New ObexListener(ObexTransport.IrDA)
              ... ...
              Dim olr As ObexListenerRequest = ...
              Dim remoteEp As IrDAEndPoint = CType(olr.RemoteEndPoint, IrDAEndPoint);
              Dim remoteAddr As IrDAAddress = remoteEp.Address;
            </code>
            </example>
            -
            <seealso cref="P:InTheHand.Net.ObexListenerRequest.LocalEndPoint"/>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.UserHostAddress">
            <summary>
            Gets the server address to which the request is directed.
            </summary>
        </member>
        <member name="P:InTheHand.Net.ObexListenerRequest.Url">
            <summary>
            Gets the <see cref="T:System.Uri"/> object requested by the client.
            </summary>
            <value>A <see cref="T:System.Uri"/> object that identifies the resource requested by the client.</value>
        </member>
        <member name="T:InTheHand.Net.AsyncResultCompletion">
            <summary>
            Used with
            <see cref="M:InTheHand.Net.AsyncResultNoResult.SetAsCompleted(System.Exception,InTheHand.Net.AsyncResultCompletion)">
            AsyncResultNoResult.SetAsCompleted</see> and 
            <see cref="M:InTheHand.Net.AsyncResult{TResult}.SetAsCompleted(TResult,AsyncResultNoResult.AsyncResultCompletion)">
            AsyncResult&lt;TResult&gt;.SetAsCompleted</see>.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.IsSync">
            <summary>
            Equivalent to <c>true</c> for the <see cref="T:System.Boolean"/>
            #x201C;completedSynchronously&#x201D; parameter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.IsAsync">
            <summary>
            Equivalent to <c>false</c> for the <see cref="T:System.Boolean"/>
            #x201C;completedSynchronously&#x201D; parameter.
            </summary>
        </member>
        <member name="F:InTheHand.Net.AsyncResultCompletion.MakeAsync">
            <summary>
            Forces the callback to run on a thread-pool thread.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDACharacterSet">
            <summary>
            Describes the character sets supported by the device.
            </summary>
            <remarks>The <see cref="T:InTheHand.Net.Sockets.IrDACharacterSet"/> enumeration describes the following character sets, which are used by the <see cref="T:InTheHand.Net.Sockets.IrDAClient"/> and <see cref="T:InTheHand.Net.Sockets.IrDADeviceInfo"/> classes.</remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDAClient"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ASCII">
            <summary>
            The ASCII character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin1">
            <summary>
            The western European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin2">
            <summary>
            The eastern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin3">
            <summary>
            The southern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin4">
            <summary>
            The northern European graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Cyrillic">
            <summary>
            The Cyrillic graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Arabic">
            <summary>
            The Arabic graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Greek">
            <summary>
            The Greek graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Hebrew">
            <summary>
            The Hebrew graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.ISO8859Latin5">
            <summary>
            The Turkish graphic character set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDACharacterSet.Unicode">
            <summary>
            The Unicode character set.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.LmpFeatures">
            <summary>
            Created from v2.1 specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.None">
            <summary>
            There are no supported features.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ThreeSlotPackets">
            <summary>
            [0]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ParkState">
            <summary>
            [8]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.CvsdSynchronousData">
            <summary>
            [16]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EnhancedDataRateAcl2MbpsMode">
            <summary>
            [25]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EV4Packets">
            <summary>
            [32]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EV5Packets">
            <summary>
            [33]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.AfhCapableSlave">
            <summary>
            [35]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.AfhClassificationSlave">
            <summary>
            [36]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.BrEdrNotSupported">
            <summary>
            [37] v4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.LeSupported_Controller">
            <summary>
            [38] v4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ThreeSlotEnhancedDataRateAclPackets">
            <summary>
            [39]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.FiveSlotEnhancedDataRateAclPackets">
            <summary>
            [40]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SniffSubrating">
            <summary>
            [41] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.PauseEncryption">
            <summary>
            [42] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ExtendedInquiryResponse">
            <summary>
            [48] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SimultaneousLeAndBrEdrToSameDeviceCapable_Controller">
            <summary>
            [49]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.SecureSimplePairing">
            <summary>
            [51] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EncapsulatedPdu">
            <summary>
            [52] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ErroneousDataReporting">
            <summary>
            [53] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.NonFlushablePacketBoundaryFlag">
            <summary>
            [54] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.LinkSupervisionTimeoutChangedEvent">
            <summary>
            [56] v2.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.InquiryTxPowerLevel">
            <summary>
            [57] v2.1
            (Changed name from 'InquiryResponseTxPowerLevel' in v2.1 
            to 'InquiryTxPowerLevel' in v3.0).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.EnhancedPowerControl">
            <summary>
            [58] v3.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.LmpFeatures.ExtendedFeatures">
            <summary>
            [63] Present since v2.0 at least.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.HardwareStatus">
            <summary>
            Specifies the current status of the Bluetooth hardware.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Unknown">
            <summary>
            Status cannot be determined.
            </summary>
            XXXX &#x201C;The stack is not present.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.NotPresent">
            <summary>
            Bluetooth radio not present.
            </summary>
            &#x201C;The adapter is not present.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Initializing">
            <summary>
            Bluetooth radio is in the process of starting up.
            </summary>
            &#x201C;The adapter might be installed.
            The stack is currently on the way up. Call again later.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Running">
            <summary>
            Bluetooth radio is active.
            </summary>
            &#x201C;The adapter is installed and the stack is running.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Shutdown">
            <summary>
            Bluetooth radio is in the process of shutting down.
            </summary>
            &#x201C;The adapter is installed, but the stack is not running.&#x201D; CE5
        </member>
        <member name="F:InTheHand.Net.Bluetooth.HardwareStatus.Error">
            <summary>
            Bluetooth radio is in an error state.
            </summary>
            &#x201C;The adapter might be installed.
            The stack is on the way down. Call again later.&#x201D; CE5
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE">
            <summary>
            "Define common return code for new SDK functions that would normally return BOOL"
            </summary>
            -
            <remarks>"Added BTW and SDK 5.0.1.1100".
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Success">
            <summary>
            "The call was successful"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Fail">
            <summary>
            "Unspecified failure"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.NotSupported">
            <summary>
            "The API is not supported on the platform BTW stack version"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Busy">
            <summary>
            "The API cannot complete at this time, but may be retried"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.InvalidParam">
            <summary>
            "One of the API parameters was invalid"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.ErrResources">
            <summary>
            "A necessary resource could not be obtained"
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.SDK_RETURN_CODE.Timeout">
            <summary>
            "The operation timed out before completion"
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.Structs.BtSdkRemoteServiceAttrStru.#ctor(InTheHand.Net.Bluetooth.BlueSoleil.StackConsts.AttributeLookup,System.UInt16,System.Byte[],System.IntPtr)">
            <summary>
            for Test.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BlueSoleil.Structs.BtSdkRmtSPPSvcExtAttrStru.#ctor(System.Byte)">
            <summary>
            for Test.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BlueSoleil.BlueSoleilSocketException">
            <summary>
            SocketException holding a BlueSoleil error code from the original error,
            which is added to the exception message.
            </summary>
            -
            <remarks>
            Will always be internal so just catch SocketException as for the other stacks.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.IrDAAddress">
            <summary>
            Represents an IrDA device address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAAddress"/> class with the specified address.
            </summary>
            <param name="address">Address as 4 byte array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="address"/> was null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="address"/> was not a 4 byte array.</exception>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.IrDAAddress"/> class with the specified address.
            </summary>
            <param name="address"><see cref="T:System.Int32"/> representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToInt32">
            <summary>
            Returns the IrDA address as an integer.
            </summary>
            -
            <returns>An <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToByteArray">
            <summary>
            Returns the internal byte array.
            </summary>
            -
            <returns>An array of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.TryParse(System.String,InTheHand.Net.IrDAAddress@)">
            <summary>
            Converts the string representation of an address to it's <see cref="T:InTheHand.Net.IrDAAddress"/> equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing an address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:InTheHand.Net.IrDAAddress"/> equivalent to the address contained in s, if the conversion succeeded, or null (Nothing in Visual Basic) if the conversion failed.
            The conversion fails if the s parameter is null or is not of the correct format.</param>
            <returns>true if s is a valid IrDA address; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.Parse(System.String)">
            <summary>
            Converts the string representation of an IrDA address to a new <see cref="T:InTheHand.Net.IrDAAddress"/> instance.
            </summary>
            <param name="irdaString">A string containing an address to convert.</param>
            <returns>New <see cref="T:InTheHand.Net.IrDAAddress"/> instance.</returns>
            <remarks>Address must be specified in hex format optionally separated by the colon or period character e.g. 00000000, 00:00:00:00 or 00.00.00.00.</remarks>
            <exception cref="T:System.ArgumentNullException">irdaString is null.</exception>
            <exception cref="T:System.FormatException">irdaString is not a valid IrDA address.</exception>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString">
            <summary>
            Converts the address to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "C" or "P". If format is null or the empty string (""), "N" is used.</param>
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.BluetoothAddress"/>.</returns>
            <remarks><list type="table">
            <listheader><term>Specifier</term><term>Format of Return Value </term></listheader>
            <item><term>N</term><term>8 digits: <para>XXXXXXXX</para></term></item>
            <item><term>C</term><term>8 digits separated by colons: <para>XX:XX:XX:XX</para></term></item>
            <item><term>P</term><term>8 digits separated by periods: <para>XX.XX.XX.XX</para></term></item>
            </list></remarks>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:InTheHand.Net.IrDAAddress"/> instances for equality.
            </summary>
            -
            <param name="obj">The <see cref="T:InTheHand.Net.IrDAAddress"/>
            to compare with the current instance.
            </param>
            -
            <returns><c>true</c> if <paramref name="obj"/>
            is a <see cref="T:InTheHand.Net.IrDAAddress"/> and equal to the current instance;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.op_Equality(InTheHand.Net.IrDAAddress,InTheHand.Net.IrDAAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.IrDAAddress"/> objects are equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the values of the two instance are equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.op_Inequality(InTheHand.Net.IrDAAddress,InTheHand.Net.IrDAAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.IrDAAddress"/> objects are not equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.IrDAAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the value of the two instance is different;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:InTheHand.Net.IrDAAddress.None">
            <summary>
            Provides a null IrDA address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.System#IComparable#CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.IrDAAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "C" or "P". If format is null or the empty string (""), "N" is used.</param>
            <param name="formatProvider">Ignored.</param>
            -
            <returns>A <see cref="T:System.String"/> representation of the value of this <see cref="T:InTheHand.Net.IrDAAddress"/>.</returns>
            -
            <remarks>See <see cref="M:InTheHand.Net.IrDAAddress.ToString(System.String)"/>
            for the possible format strings and their output.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDASocketOptionLevel">
            <summary>
            Defines additional IrDA socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> methods.
            </summary>
            <remarks>
            Use along with the socket options defined by 
            <see cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDASocketOptionLevel.IrLmp">
            <summary>
            The socket option level for use with IrDA sockets 
            along with the options defined in <see 
            cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </summary>
            <remarks>
            Use along with the socket options defined by 
            <see cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>.
            </remarks>
            <seealso cref="T:InTheHand.Net.Sockets.IrDASocketOptionName"/>
        </member>
        <member name="T:InTheHand.Net.Sockets.IrDAHints">
            <summary>
            Describes an enumeration of possible device types, such as Fax.
            </summary>
            <seealso cref="T:System.Net.Sockets.IrDAHints"/>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.None">
            <summary>
            Unspecified device type.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.PnP">
            <summary>
            A Plug and Play interface.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.PdaAndPalmtop">
            <summary>
            A Pocket PC or similar.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Computer">
            <summary>
            A personal computer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Printer">
            <summary>
            A printer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Modem">
            <summary>
            A modem.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Fax">
            <summary>
            A fax.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.LanAccess">
            <summary>
            A local area network access.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Extension">
            <summary>
            Contains extended hint bytes.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Telephony">
            <summary>
            A telephonic device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.FileServer">
            <summary>
            A personal computer file server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.IrCOMM">
            <summary>
            Device supports IrCOMM.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.IrDAHints.Obex">
            <summary>
            Device supports Object Exchange.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE">
            <summary>
            Define SPP connection states
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.CONNECTED">
            <summary>
            port now connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.DISCONNECTED">
            <summary>
            port now disconnected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.RFCOMM_CONNECTION_FAILED">
             <summary>
            rfcomm connction failed
             </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.PORT_IN_USE">
            <summary>
            Port in use, for SPPClient only [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.PORT_NOT_CONFIGURED">
            <summary>
            no port configured [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.SERVICE_NOT_FOUND">
            <summary>
            service not found [for SPP Client only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.ALLOC_SCN_FAILED">
            <summary>
            [for SPP Server Only]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE.SDP_FULL">
            <summary>
            [for SPP Server Only]
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE">
            <summary>
            Define SPP connection states
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE.CONNECTED">
            <summary>
            port now connected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_STATE_CODE__WCE.DISCONNECTED">
            <summary>
            port now disconnected
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE">
            <summary>
            Define return code for SPP Client functions
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.SUCCESS">
            <summary>
            Operation initiated without error
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NO_BT_SERVER">
            <summary>
            COM server could not be started
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.ALREADY_CONNECTED">
            <summary>
            attempt to connect before previous connection closed
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NOT_CONNECTED">
            <summary>
            attempt to close unopened connection
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NOT_ENOUGH_MEMORY">
            <summary>
            local processor could not allocate memory for open
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.INVALID_PARAMETER__CE_UE">
            <summary>
            One or more of function parameters are not valid
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.UNKNOWN_ERROR__CE_IP">
            <summary>
            Any condition other than the above
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.NO_EMPTY_PORT">
            <summary>
            no empty port
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE.LICENSE_ERROR">
            <summary>
            license error
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommSppClient.SPP_CLIENT_RETURN_CODE__WCE">
            <summary>
            Define return code for SPP Client functions
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener">
            <summary>
            Listens for connections from Bluetooth network clients.
            </summary>
            <remarks>The <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.
            You can use either a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> or a <see cref="T:System.Net.Sockets.Socket"/> to connect with a <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/></remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid)">
            <overloads>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier. 
            </summary>
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service on which to listen for incoming connection attempts.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array, e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <remarks>
            <para>
            An SDP record is published on successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>
            to advertise the server.
            A generic record is created, containing the essential <c>ServiceClassIdList</c>
            and <c>ProtocolDescriptorList</c> attributes.  The specified service identifier is
            inserted into the former, and the RFCOMM Channel number that the server is
            listening on is inserted into the latter.  See the Bluetooth SDP specification
            for details on the use and format of SDP records.
            </para><para>
            If a SDP record with more elements is required, then use
            one of the other constructors that takes an SDP record e.g. 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>,
            or when passing it as a byte array
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)"/>.
            The format of the generic record used here is shown there also.
            </para><para>
            Call the <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/> 
            method to begin listening for incoming connection attempts.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            <param name="channelOffset">
            The index in the <paramref name="sdpRecord"/> byte array where the RFCOMM Channel Number that the
            server is listening on is to be placed.
            However the supplied record is now parsed into an <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            instance, and the channel offset is not used.
            </param>
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Instead of passing a byte array containing a hand-built record,
            the record can also be built using the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            and <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> classes, and
            passed to the respective constuctor, e.g.
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </para>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.  The <paramref name="channelOffset"/> indicates the location
            of the respective byte in the <paramref name="sdpRecord"/> byte array.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code>
            // The asterisks note where the Service UUID and the Channel number are
            // to be filled in.
            byte[] record = new byte[] {
              //Element Sequence:
              0x35,0x27,
                //UInt16: 0x0001  -- ServiceClassIdList
                0x09,0x00,0x01,
                //Element Sequence:
                0x35,0x11,
                //  UUID128: 00000000-0000-0000-0000-000000000000 -- * Service UUID
                    0x1c,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                      0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
                //
                //UInt16: 0x0004  -- ProtocolDescriptorList
                0x09,0x00,0x04,
                //Element Sequence:
                0x35,0x0c,
                //  Element Sequence:
                    0x35,0x03,
                //      UUID16: 0x0100  -- L2CAP
                        0x19,0x01,0x00,
                //  Element Sequence:
                    0x35,0x05,
                //      UUID16: 0x0003  -- RFCOMM
                        0x19,0x00,0x03,
                //      UInt8: 0x00     -- * Channel Number
                        0x08,0x00
            };
            </code>
            For that record the <c>channelOffset</c> is 40.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            to listen on the specified service identifier, 
            publishing the specified SDP record.
            </summary>
            -
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish.</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothAddress,System.Guid,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            that listens for incoming connection attempts on the specified local Bluetooth address and service identifier,
            publishing the specified SDP record.
            </summary>
            -
            <param name="localAddress">A <see cref="T:InTheHand.Net.BluetoothAddress"/> that represents the local Bluetooth radio address.</param>
            <param name="service">The Bluetooth service to listen for.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothAddress,System.Guid)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Construct(InTheHand.Net.BluetoothEndPoint,InTheHand.Net.Bluetooth.ServiceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> class
            with the specified local endpoint,
            publishing the specified SDP record.
            </summary>
            <param name="localEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <param name="sdpRecord">Prepared SDP Record to publish</param>
            -
            <remarks>
            <note>
            The constructors taking the SDP record explicitly (as a byte array) should
            only be used if
            a specialized SDP record is required. For instance when using one of the
            standard profiles.  Otherwise use one of the other constructors 
            e.g. <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.#ctor(InTheHand.Net.BluetoothEndPoint)"/>
            which create a generic SDP Record from the specified service identifier.
            </note>
            <para>Any useful SDP record will include 
            a <c>ProtocolDescriptor</c> element containing
            the RFCOMM Channel number that the server is listening on,
            and a <c>ServiceClassId</c> element containing the service UUIDs.
            The record supplied in the <paramref name="sdpRecord"/> parameter
            should contain those elements.  On successful <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>,
            the RFCOMM Channel number that the protocol stack has assigned to the
            server is retrieved, and copied into the service record before it is
            published.
            </para>
            <para>
            An example SDP record is as follows.  This is actually the format of the 
            generic record used in the other constructors.  For another example see
            the code in the <c>ObexListener</c> class.
            <code lang="C#">
            private static ServiceRecord CreateBasicRfcommRecord(Guid serviceClassUuid)
            {
                ServiceElement pdl = ServiceRecordHelper.CreateRfcommProtocolDescriptorList();
                ServiceElement classList = new ServiceElement(ElementType.ElementSequence,
                    new ServiceElement(ElementType.Uuid128, serviceClassUuid));
                ServiceRecord record = new ServiceRecord(
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList,
                        classList),
                    new ServiceAttribute(
                        InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList,
                        pdl));
                return record;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object containing information about the accept operation.
            This object is passed to the callback delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"/> has been closed.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.EndAcceptSocket(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptSocket(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.EndAcceptBluetoothClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.BeginAcceptBluetoothClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            <remarks>AcceptSocket is a blocking method that returns a <see cref="T:System.Net.Sockets.Socket"/> that you can use to send and receive data.
            If you want to avoid blocking, use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue.
            <para>The <see cref="T:System.Net.Sockets.Socket"/> returned is initialized with the address and channel number of the remote device.
            You can use any of the Send and Receive methods available in the <see cref="T:System.Net.Sockets.Socket"/> class to communicate with the remote device.
            When you are finished using the <see cref="T:System.Net.Sockets.Socket"/>, be sure to call its <see cref="M:System.Net.Sockets.Socket.Close"/> method.
            If your application is relatively simple, consider using the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient"/> method rather than the AcceptSocket method.
            <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</para></remarks>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/> used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <remarks>AcceptTcpClient is a blocking method that returns a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> that you can use to send and receive data.
            Use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending"/> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.
            <para>Use the <see cref="M:InTheHand.Net.Sockets.BluetoothClient.GetStream"/> method to obtain the underlying <see cref="T:System.Net.Sockets.NetworkStream"/> of the returned <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>.
            The <see cref="T:System.Net.Sockets.NetworkStream"/> will provide you with methods for sending and receiving with the remote host.
            When you are through with the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/>, be sure to call its <see cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/> method.
            If you want greater flexibility than a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> offers, consider using <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket"/>.</para></remarks>
            <returns>A <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> component.</returns>
            <exception cref="T:System.InvalidOperationException">Listener is stopped.</exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.LocalEndPoint">
            <summary>
             Gets the underlying <see cref="T:InTheHand.Net.BluetoothEndPoint"/> of the current <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/>.  
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceClass">
            <summary>
            Get or set the Service Class flags that this service adds to the host 
            device&#x2019;s Class Of Device field.
            </summary>
            -
            <remarks>
            <para>The Class of Device value contains a Device part which describes 
            the primary service that the device provides, and a Service part which 
            is a set of flags indicating all the service types that the device supports, 
            e.g. <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony"/>,
            <see cref="F:InTheHand.Net.Bluetooth.ServiceClass.Audio"/> etc.
            This property supports setting those flags; bits set in this value will be 
            added to the host device&#x2019;s CoD Service Class bits when the listener
            is active.
            </para>
            <para><note>Supported on Win32, but not supported on WindowsMobile/WinCE 
            as there's no native API for it.  The WindowCE section of MSDN mentions the
            Registry value <c>COD</c> at key <c>HKEY_LOCAL_MACHINE\Software\Microsoft\Bluetooth\sys</c>. 
            However my (Jam) has value 0x920100 there but advertises a CoD of 0x100114, 
            so its not clear how the values relate to each other.
            </note>
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceName">
            <summary>
            Get or set the ServiceName the server will use in its SDP Record.
            </summary>
            -
            <value>A string representing the value to be used for the Service Name
            SDP Attribute.  Will be <see langword="null"/> if not specfied.
            </value>
            -
            <exception cref="T:System.InvalidOperationException">
            The listener is already started.
            <para>- or -</para>
            A custom Service Record was given at initialization time.  In that case 
            the ServiceName attribute should be added to that record.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server">
            <summary>
            Gets the underlying network <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>The underlying <see cref="T:System.Net.Sockets.Socket"/>.</value>
            <remarks><see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> creates a <see cref="T:System.Net.Sockets.Socket"/> to listen for incoming client connection requests.
            Classes deriving from <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> can use this property to get this <see cref="T:System.Net.Sockets.Socket"/>.
            Use the underlying <see cref="T:System.Net.Sockets.Socket"/> returned by the <see cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server"/> property if you require access beyond that which <see cref="T:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener"/> provides.
            <para>Note <see cref="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Server"/> property only returns the <see cref="T:System.Net.Sockets.Socket"/> used to listen for incoming client connection requests.
            Use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptSocket"/> method to accept a pending connection request and obtain a <see cref="T:System.Net.Sockets.Socket"/> for sending and receiving data.
            You can also use the <see cref="M:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.AcceptBluetoothClient"/> method to accept a pending connection request and obtain a <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> for sending and receiving data.</para></remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.ServiceRecord">
            <summary>
            Returns the SDP Service Record for this service.
            </summary>
            <remarks>
            <note>Returns <see langword="null"/> if the listener is not 
            <see cref="M:InTheHand.Net.Sockets.WindowsBluetoothListener.Start"/>ed
            (and an record wasn&#x2019;t supplied at initialization).
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.WindowsBluetoothListener.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.InTheHand#Net#Bluetooth#Factory#IBluetoothClient#DiscoverDevices(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Discovers accessible Bluetooth devices and returns their names and addresses.
            </summary>
            <param name="maxDevices">The maximum number of devices to get information about.</param>
            <param name="authenticated">True to return previously authenticated/paired devices.</param>
            <param name="remembered">True to return remembered devices.</param>
            <param name="unknown">True to return previously unknown devices.</param>
            <param name="discoverableOnly">True to return only discoverable devices
            (where both in range and in discoverable mode).
            When <see langword="true"/> all other flags are ignored.
            <strong>Note: Does NOT work on Win32 with the Microsoft stack.</strong>
            </param>
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
            -
            <remarks>
            <para>The <see paramref="discoverableOnly"/> flag will discover only 
            the devices that are in range and are in discoverable mode.  This works 
            only on WM/CE with the Microsoft stack, or on any platform with the 
            Widcomm stack.
            </para>
            <para>
            It does not work on desktop Windows with the Microsoft 
            stack, where the in range and remembered devices are returned already 
            merged!  There simple all devices will be returned.  Even the 
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen">BluetoothDeviceInfo.LastSeen</see>
            property is of no use there: on XP and Vista at least the value provided 
            is always simply the current time.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects a client to a specified endpoint.
            </summary>
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a <see cref="T:InTheHand.Net.BluetoothEndPoint"/>. 
            </summary>
            <param name="remoteEP">A <see cref="T:InTheHand.Net.BluetoothEndPoint"/> containing the 
            address and UUID of the remote service.</param>
            <param name="requestCallback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned by a call to 
            <see cref="M:BeginConnect(InTheHand.Net.Sockets.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>
            / <see cref="M:BeginConnect(InTheHand.Net.Sockets.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.SetPin(System.String)">
            <summary>
            Sets the PIN associated with the currently connected device.
            </summary>
            <param name="pin">PIN which must be composed of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.SetPin(InTheHand.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1 to 16 ASCII characters.</param>
            <remarks>Assigning null (Nothing in VB) or an empty String will revoke the PIN.</remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.GetRemoteMachineName(InTheHand.Net.BluetoothAddress)">
            <summary>
            Gets the name of the specified remote device.
            </summary>
            <param name="a">Address of remote device.</param>
            <returns>Friendly name of specified device.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of a device by a specified socket.
            </summary>
            <param name="s"> A <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <returns>Returns a string value of the computer or device name.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the BluetoothClient and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Dispose">
            <summary>
            Closes the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> and the underlying connection.
            </summary>
            -
            <seealso cref="M:InTheHand.Net.Sockets.BluetoothClient.Close"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Finalize">
            <summary>
            Frees resources used by the <see cref="T:InTheHand.Net.Sockets.BluetoothClient"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.InquiryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>On Windows CE the actual value used is expressed in units of 1.28 seconds, so will be the nearest match for the value supplied.
            The default value is 10 seconds. The maximum is 60 seconds.</remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.LinkKey">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.LinkPolicy">
            <summary>
            Returns the Link Policy of the current connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.MsftSocketOptionHelper.Authenticate">
            <summary>
            Gets or sets the authentication state of the current connect or behaviour to use when connection is established.
            </summary>
            <remarks>
            For disconnected sockets, specifies that authentication is required in order for a connect or accept operation to complete successfully.
            Setting this option actively initiates authentication during connection establishment, if the two Bluetooth devices were not previously authenticated.
            The user interface for passkey exchange, if necessary, is provided by the operating system outside the application context.
            For outgoing connections that require authentication, the connect operation fails with WSAEACCES if authentication is not successful.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            For incoming connections, the connection is rejected if authentication cannot be established and returns a WSAEHOSTDOWN error.
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Msft.SocketBluetoothClient.MsftSocketOptionHelper.Encrypt">
            <summary>
            On unconnected sockets, enforces encryption to establish a connection.
            Encryption is only available for authenticated connections.
            For incoming connections, a connection for which encryption cannot be established is automatically rejected and returns WSAEHOSTDOWN as the error.
            For outgoing connections, the connect function fails with WSAEACCES if encryption cannot be established.
            In response, the application may prompt the user to authenticate the two Bluetooth devices before connection.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId">
            <summary>
            Defines the ids for the &#x201C;universal attributes&#x201D;, those 
            &#x201C;whose definitions are common to all service records.&#x201D;
            </summary>
            <remarks>
            <para>&#x201C;
            Universal attributes are those service attributes whose definitions are common
            to all service records. Note that this does not mean that every service record
            must contain values for all of these service attributes. However, if a service
            record has a service attribute with an attribute ID allocated to a universal
            attribute, the attribute value must conform to the universal attribute’s definition.
            </para><para>&#x201C;
            Only two attributes are required to exist in every service record instance. They
            are the ServiceRecordHandle (attribute ID 0x0000) and the ServiceClassIDList
            (attribute ID 0x0001). All other service attributes are optional within a service
            record.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x000D-0x01FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordHandle">
            <summary>
            A service record handle is a 32-bit number that uniquely identifies each service
            record within an SDP server.
            [0x0000]
            </summary>
            <remarks>
            <para>[<c>32-bit unsigned integer</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList">
            <summary>
            The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to.
            [0x0001]
            </summary>
            <remarks>
            <para>[<c>Data Element Sequence</c>]</para>
            <para>&#x201C;The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to. The UUIDs are listed in order from the most specific
            class to the most general class. The ServiceClassIDList must contain at least
            one service class UUID.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordState">
             <summary>
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes.
             [0x0002]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes. If this attribute is contained in a service record, its value is
             guaranteed to change when any other attribute value is added to, deleted from
             or changed within the service record. This permits a client to check the value of
             this single attribute. If its value has not changed since it was last checked, the
             client knows that no other attribute values within the service record have
             changed.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceId">
             <summary>
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record.
             [0x0003]
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             <para>&#x201C;
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record. This service attribute is particularly
             useful if the same service is described by service records in more than one
             SDP server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList">
             <summary>
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             [0x0004]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>&#x201C;
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             </para><para>&#x201C;
             If the ProtocolDescriptorList describes a single stack, it takes the form of a data
             element sequence in which each element of the sequence is a protocol
             descriptor. Each protocol descriptor is, in turn, a data element sequence whose
             first element is a UUID identifying the protocol and whose successive elements
             are protocol-specific parameters. Potential protocol-specific parameters are a
             protocol version number and a connection-port number. The protocol descriptors
             are listed in order from the lowest layer protocol to the highest layer protocol
             used to gain access to the service.
             </para><para>&#x201C;
             If it is possible for more than one kind of protocol stack to be used to gain
             access to the service, the ProtocolDescriptorList takes the form of a data element
             alternative where each member is a data element sequence as described
             in the previous paragraph.
             </para><para>&#x201C;
             Protocol Descriptors
             </para><para>&#x201C;
             A protocol descriptor identifies a communications protocol and provides protocol-
             specific parameters. A protocol descriptor is represented as a data element
             sequence. The first data element in the sequence must be the UUID that identifies
             the protocol. Additional data elements optionally provide protocol-specific
             information, such as the L2CAP protocol/service multiplexer (PSM) and the
             RFCOMM server channel number (CN) shown below.
             </para><para>&#x201C;
             ProtocolDescriptorList Examples
             </para><para>&#x201C;
             These examples are intended to be illustrative. The parameter formats for each
             protocol are not defined within this specification.
             </para><para>&#x201C;
             In the first two examples, it is assumed that a single RFCOMM instance exists
             on top of the L2CAP layer. In this case, the L2CAP protocol specific information
             (PSM) points to the single instance of RFCOMM. In the last example, two different
             and independent RFCOMM instances are available on top of the L2CAP
             layer. In this case, the L2CAP protocol specific information (PSM) points to a
             distinct identifier that distinguishes each of the RFCOMM instances. According
             to the L2CAP specification, this identifier takes values in the range
             0x1000-0xFFFF.
             </para><para>&#x201C;
             IrDA-like printer
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=1 ), ( PostscriptStream ) )
             </para><para>&#x201C;
             IP Network Printing
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=2 ), ( PPP ), ( IP ), ( TCP ),
             ( IPP ) )
             </para><para>&#x201C;
             Synchronization Protocol Descriptor Example
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1001 ), ( RFCOMM, CN=1 ), ( Obex ), ( vCal ) )
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1002 ), ( RFCOMM, CN=1 ), ( Obex ),
             </para><para>&#x201C;
             ( otherSynchronisationApplication ) )
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BrowseGroupList">
             <summary>
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs.
             [0x0005]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs. The top-level browse group ID, called PublicBrowseRoot and
             representing the root of the browsing hierarchy, has the value 
             00001002-0000-1000-8000-00805F9B34FB 
             (UUID16: 0x1002) from the Bluetooth Assigned
             Numbers document.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList">
             <summary>
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             [0x0006]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             </para><para>&#x201C;
             The LanguageBaseAttributeIDList attribute is a list in which each member contains
             a language identifier, a character encoding identifier, and a base attribute
             ID for each of the natural languages used in the service record. The Language-
             BaseAttributeIDList attribute consists of a data element sequence in which
             each element is a 16-bit unsigned integer. The elements are grouped as triplets
             (threes).
             </para><para>&#x201C;
             The first element of each triplet contains an identifier representing the natural
             language. The language is encoded according to ISO 639:1988 (E/F): “Code
             for the representation of names of languages”.
             </para><para>&#x201C;
             The second element of each triplet contains an identifier that specifies a character
             encoding used for the language. Values for character encoding can be
             found in IANA's database1, and have the values that are referred to as MIBEnum
             values. The recommended character encoding is UTF-8.
             </para><para>&#x201C;
             The third element of each triplet contains an attribute ID that serves as the
             base attribute ID for the natural language in the service record. Different service
             records within a server may use different base attribute ID values for the
             same language.
             </para><para>&#x201C;
             To facilitate the retrieval of human-readable universal attributes in a principal
             language, the base attribute ID value for the primary language supported by a
             service record must be 0x0100. Also, if a LanguageBaseAttributeIDList
             attribute is contained in a service record, the base attribute ID value contained
             in its first element must be 0x0100.
             </para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceInfoTimeToLive">
             <summary>
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged.
             [0x0007]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged. This time interval is measured from the time that the
             attribute value is retrieved from the SDP server. This value does not imply a
             guarantee that the service record will remain available or unchanged. It is
             simply a hint that a client may use to determine a suitable polling interval to revalidate
             the service record contents.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceAvailability">
             <summary>
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients.
             [0x0008]
             </summary>
            <remarks>
             <para>[<c>8-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients. A value of 0xFF indicates
             that the service is not currently in use and is thus fully available, while a
             value of 0x00 means that the service is not accepting new clients. For services
             that support multiple simultaneous clients, intermediate values indicate the relative
             availability of the service on a linear scale.
             &#x201D;</para><para>&#x201C;
             For example, a service that can accept up to 3 clients should provide ServiceAvailability
             values of 0xFF, 0xAA, 0x55, and 0x00 when 0, 1, 2, and 3 clients, respectively,
             are utilizing the service. The value 0xAA is approximately (2/3) * 0xFF and
             represents 2/3 availability, while the value 0x55 is approximately (1/3)*0xFF and
             represents 1/3 availability. Note that the availability value may be approximated as
             &#x201D;</para><para>&#x201C;
             <c>( 1 - ( current_number_of_clients / maximum_number_of_clients ) ) * 0xFF</c>
             &#x201D;</para><para>&#x201C;
             When the maximum number of clients is large, this formula must be modified to
             ensure that ServiceAvailability values of 0x00 and 0xFF are reserved for their
             defined meanings of unavailability and full availability, respectively.
             &#x201D;</para><para>&#x201C;
             Note that the maximum number of clients a service can support may vary
             according to the resources utilized by the service's current clients.
             &#x201D;</para><para>&#x201C;
             A non-zero value for ServiceAvailability does not guarantee that the service will
             be available for use. It should be treated as a hint or an approximation of availability
             status.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList">
             <summary>
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms.
             [0x0009]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms. Each profile descriptor is a data element sequence whose
             first element is the UUID assigned to the profile and whose second element is
             a 16-bit profile version number.
             &#x201D;</para><para>&#x201C;
             Each version of a profile is assigned a 16-bit unsigned integer profile version
             number, which consists of two 8-bit fields. The higher-order 8 bits contain the
             major version number field and the lower-order 8 bits contain the minor version
             number field. The initial version of each profile has a major version of 1 and a
             minor version of 0. When upward compatible changes are made to the profile,
             the minor version number will be incremented. If incompatible changes are
             made to the profile, the major version number will be incremented.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl">
             <summary>
             This attribute is a URL which points to documentation on the service described
             by a service record.
             [0x000A]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl">
             <summary>
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record.
             [0x000B]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record. Since different
             operating environments require different executable formats, a mechanism
             has been defined to allow this single attribute to be used to locate an executable
             that is appropriate for the client device’s operating environment. In the
             attribute value URL, the first byte with the value 0x2A (ASCII character ‘*’) is to
             be replaced by the client application with a string representing the desired
             operating environment before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing operating environments is contained
             in the Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the ClientExecutableURL attribute is
             http://my.fake/public/*/client.exe. On a device capable of executing SH3 WindowsCE
             files, this URL would be changed to http://my.fake/public/sh3-
             microsoft-wince/client.exe. On a device capable of executing Windows 98 binaries,
             this URL would be changed to http://my.fake/public/i86-microsoft-win98/
             client.exe.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.IconUrl">
             <summary>
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record.
             [0x000C]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record. Since different
             hardware devices require different icon formats, a mechanism has been
             defined to allow this single attribute to be used to locate an icon that is appropriate
             for the client device. In the attribute value URL, the first byte with the
             value 0x2A (ASCII character ‘*’) is to be replaced by the client application with
             a string representing the desired icon format before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing icon formats is contained in the
             Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the IconURL attribute is http://my.fake/
             public/icons/*. On a device that prefers 24 x 24 icons with 256 colors, this URL
             would be changed to http://my.fake/public/icons/24x24x8.png. On a device that
             prefers 10 x 10 monochrome icons, this URL would be changed to http://
             my.fake/public/icons/10x10x1.png.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName">
             <summary>
             The ServiceName attribute is a string containing the name of the service represented
             by a service record.
             [0x0000 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             The ServiceName attribute is a string containing the name of the service represented
             by a service record. It should be brief and suitable for display with an
             Icon representing the service. The offset 0x0000 must be added to the attribute
             ID base (contained in the LanguageBaseAttributeIDList attribute) in order to
             compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription">
             <summary>
             This attribute is a string containing a brief description of the service.
             [0x0001 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing a brief description of the service. It should
             be less than 200 characters in length. The offset 0x0001 must be added to the
             attribute ID base (contained in the LanguageBaseAttributeIDList attribute) in
             order to compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName">
             <summary>
             This attribute is a string containing the name of the person or organization providing
             the service.
             [0x0002 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing the name of the person or organization providing
             the service. The offset 0x0002 must be added to the attribute ID base
             (contained in the LanguageBaseAttributeIDList attribute) in order to compute
             the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.AdditionalProtocolDescriptorLists">
             <summary>
             The AdditionalProtocolDescriptorLists attribute supports services that 
             require more channels in addition to the service described in the ProtocolDescriptorList
             attribute.  It contains a sequence of ProtocolDescriptorList-elements.
             [0x000D]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>Defined in Bluetooth version 2.1, SDP section 5.1.6.</para>
             <para>&#x201C;The AdditionalProtocolDescriptorLists attribute contains 
             a sequence of ProtocolDescriptorList-elements. Each element having the 
             same format as the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             described in section 5.1.5. The ordering of the elements is
             significant and should be specified and fixed in Profiles that make use of this
             attribute.</para>
             <para>&#x201D;The AdditionalProtocolDescriptorLists attribute supports services that require
             more channels in addition to the service described in Section 5.1.5 . If the AdditionalProtocolDescriptorLists
             attribute is included in a service record, the ProtocolDescriptorList
             attribute must be included.&#x201D;
             </para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId">
            <summary>
            This service class describes service records that contain attributes of service
            discovery server itself.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes service records that contain attributes of service
            discovery server itself. The attributes listed in this section are only valid if the
            ServiceClassIDList attribute contains the
            ServiceDiscoveryServerServiceClassID. Note that all of the universal attributes
            may be included in service records of the ServiceDiscoveryServer class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0202-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList">
             <summary>
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             &#x201D;</para><para>&#x201C;
             A version number is a 16-bit unsigned integer consisting of two fields. The
             higher-order 8 bits contain the major version number field and the low-order 8
             bits contain the minor version number field. The initial version of SDP has a
             major version of 1 and a minor version of 0. When upward compatible changes
             are made to the protocol, the minor version number will be incremented. If
             incompatible changes are made to SDP, the major version number will be
             incremented. This guarantees that if a client and a server support a common
             major version number, they can communicate if each uses only features of the
             specification with a minor version number that is supported by both client and
             server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.ServiceDatabaseState">
             <summary>
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records.
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records. If this attribute exists, its value is guaranteed to change
             when any of the other service records are added to or deleted from the server's
             database. If this value has not changed since the last time a client queried its
             value, the client knows that a) none of the other service records maintained by
             the SDP server have been added or deleted; and b) any service record handles
             acquired from the server are still valid. A client should query this attribute's
             value when a connection to the server is established, prior to using any service
             record handles acquired during a previous connection.
             &#x201D;</para><para>&#x201C;
             Note that the ServiceDatabaseState attribute does not change when existing
             service records are modified, including the addition, removal, or modification of
             service attributes. A service record's ServiceRecordState attribute indicates
             when that service record is modified.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId">
            <summary>
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device. The attributes listed in
            this section are only valid if the ServiceClassIDList attribute contains the BrowseGroupDescriptorServiceClassID.
            Note that all of the universal attributes may
            be included in service records of the BrowseGroupDescriptor class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0201-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId">
             <summary>
             This attribute contains a UUID that can be used to locate services that are
             members of the browse group that this service record describes.
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             </remarks>
        </member>
        <member name="T:InTheHand.TextWriterTraceListener32f">
            <summary>
            For use on NETCFv2
            </summary>
            -
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.TextWriterTraceListener32f.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.TextWriterTraceListener32f"/> class
            </summary>
            -
            <param name="filename">The filename of the log file to write to.
            Unlike the .NET supplied class this filename is relative to the
            folder that the calling assembly is located in.
            </param>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.Marshal32.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            NETCF doesn't have <see cref="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.IrDA.IrDAService">
            <summary>
            Standard IrDA service names.
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.IrComm">
            <summary>
            Well-known Service Name &#x201C;IrDA:IrCOMM&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.IrLpt">
            <summary>
            Well-known Service Name &#x201C;IrLPT&#x201D;
            </summary>
        </member>
        <member name="F:InTheHand.Net.IrDA.IrDAService.ObjectExchange">
            <summary>
            Well-known Service Name &#x201C;OBEX&#x201D;
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceAttribute">
            <summary>
            Holds an attribute from an SDP service record.
            </summary>
            -
            <remarks>
            Access its SDP Data Element through the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property and read the 
            data value through the methods and properties on the returned 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceAttribute.#ctor(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ServiceAttribute.#ctor(System.UInt16,InTheHand.Net.Bluetooth.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.Id">
            <summary>
            Get the Attribute Id for this attribute.
            </summary>
            -
            <remarks>
            <note >Id is a <em>unsigned</em> 32-bit integer but we use return it
            is a <em>signed</em> 32-bit integer for CLS Compliance reasons.  It
            should not thus be used for ordering etc, for example 0xFFFF will sort
            before 0x0001 which is backwards.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.IdAsOrdinalNumber">
            <summary>
            Get the Attribute Id as a number, e.g. for comparison.
            </summary>
            -
            <remarks>
            <para>Property <see cref="P:Id"/> should be used as an identifier,
            but not as a number.  That#x2019;s because the range is <em>unsigned</em>
            32-bit integer but we use return it is a <em>signed</em> 32-bit integer.
            Thus an example list will sort as { 0xFFFF, 0x8001, 0x0001, 0x0302 }
            when it should sort as { 0x0001, 0x0302, 0x8001,0xFFFF }
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ServiceAttribute.Value">
            <summary>
            Get the value of this attributes as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.RadioVersions">
            <summary>
            Stores the LMP etc versions.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.RadioVersions.#ctor(InTheHand.Net.Bluetooth.LmpVersion,System.UInt16,InTheHand.Net.Bluetooth.LmpFeatures,InTheHand.Net.Bluetooth.Manufacturer)">
            <summary>
            Initialises a new instance.
            </summary>
            -
            <param name="lmpVersion">The LMP Version.
            </param>
            <param name="lmpSubversion">The LMP Subversion
            as a <see cref="T:System.UInt16"/>.
            </param>
            <param name="lmpSupportedFeatures">The LMP Supported Features.
            </param>
            <param name="mfg">The Manufacturer.
            </param>
            <summary>
            Get the LMP Subversion value.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpVersion">
            <summary>
            Get the LMP Version.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpSubversion">
            <summary>
            Get the LMP Subversion.
            </summary>
            -
            <remarks>
            <note>This is of CLR type <see cref="T:System.Int32"/> for CLS
            compliance.  The Bluetooth value is of course of type
            <see cref="T:System.UInt16"/>.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.LmpSupportedFeatures">
            <summary>
            Get the LMP Supported Features.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.RadioVersions.Manufacturer">
            <summary>
            Get the Manufacturer.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.WidcommBluetoothListener">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.SdpService.DESC_TYPE">
            <summary>
            Define for service attribute, all the 'Descriptor Type' values.
            These are also referred to as 'attribute type' values
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Widcomm.PORT_EV">
            <summary>
            Define RFCOMM Port events that registered application can receive in the callback
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RXCHAR">
            <summary>
            Any Character received
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RXFLAG">
            <summary>
            Received certain character
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.TXEMPTY">
            <summary>
            Transmitt Queue Empty
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CTS">
            <summary>
            CTS changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.DSR">
            <summary>
            DSR changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RLSD">
            <summary>
            RLSD changed state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.BREAK">
            <summary>
            Ring signal detected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.ERR">
            <summary>
            Line status error occurred
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RING">
            <summary>
            Ring signal detected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CTSS">
            <summary>
            CTS state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.DSRS">
            <summary>
            DSR state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.RLSDS">
            <summary>
            RLSD state
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.OVERRUN">
            <summary>
            receiver buffer overrun
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.TXCHAR">
            <summary>
            Any character transmitted
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CONNECTED">
            <summary>
            RFCOMM connection established
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.CONNECT_ERR">
            <summary>
            Was not able to establish connection; or disconnected
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.FC">
            <summary>
            flow control enabled flag changed by remote
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Widcomm.PORT_EV.FCS">
            <summary>
            flow control status true = enabled
            </summary>
        </member>
    </members>
</doc>
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core.Windows</name>
  </assembly>
  <members>
    <member name="T:PalmSens.AuxInput.Auxiliar<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core</name>
  </assembly>
  <members>
    <member name="T:PalmSens.EnumExtraValue">
      <summary>
            All available extra value types
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.None">
      <summary>
            No auxiliary channel
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Current">
      <summary>
            Current
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Potential">
      <summary>
            Potential
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.WE2">
      <summary>
            Second working electrode on PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.AuxInput">
      <summary>
            MiniDIN pin
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Reverse">
      <summary>
            Reverse Current as used by SquareWave
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.PolyStatWE">
      <summary>
            Additional WE used with PolyPotentiostat
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.DCcurrent">
      <summary>
            Record DC current with AC voltammetry
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.CEPotential">
      <summary>
            The CE potential (PalmSens4 only)
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.BaselineCorrection.GetMovingAverageBaselineCorrected(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Perfroms the moving average baseline correction.
            </summary>
      <param name="curve">The curve.</param>
      <param name="nWindowSize">Size of the window.</param>
      <param name="maxNSweeps">The maximum amount of sweeps.</param>
      <param name="baseline">Show the baseline correction instead of the corrected baseline</param>
      <returns>
      </returns>
      <example>TODO: add baseline curve directly after changing the windowsize or the amount of sweeps, and before pressing the do baseline correction button</example>
    </member>
    <member name="T:PalmSens.Analysis.PeakList">
      <summary>
            Describes a list of peaks
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.PeakWithinWindow(PalmSens.Analysis.Peak,PalmSens.ScanMethod,System.Int32)">
      <summary>
            Check if the peak is within the analytes search window.
            </summary>
      <param name="p">The peak.</param>
      <param name="m">The method.</param>
      <param name="iAnalyte">The index of the analyte.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Analysis.PeakList.enumAnalytePeakType">
      <summary>
            Used to determine if a peak is auto found, is based on a fixed left and right or is manually selected
            This is used to distinguish peaks belonging to different analytes in Analytical mode
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.nPeaks">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakWidth">
      <summary>
            Minimum width of peak
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakHeight">
      <summary>
            Minimum height of a peak
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,PalmSens.Data.EnumDirection,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="peakdir">direction in which to seek for peaks</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="Start">a starting point on the x axis</param>
      <param name="End">an ending point on the x axis</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.InitAnalytePeaks">
      <summary>
            Makes sure there are always 4 peaks in the list enables use of indexing for Analytical stuff
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new empty peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.SortPeaksByXValue">
      <summary>
            Orders the peaks by X value.
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Remove(PalmSens.Analysis.Peak)">
      <summary>
            Removes the specified peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeakFree(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks from a baseline between two independent points with indicated direction
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak with 
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="xmax">The xmax.</param>
      <param name="ymax">The ymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(PalmSens.Analysis.Peak)">
      <summary>
            Adds a predefined peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak wi.
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="iymax">The iymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeak(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Find peaks from a baseline between two points on the curve.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.GetManualPeak">
      <summary>
            Help class for finding the max value between x1 and x2
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.Peak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.Peak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftX">
      <summary>Returns the X of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftY">
      <summary>Returns the Y of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakValue">
      <summary>Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightX">
      <summary>Returns the X of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightY">
      <summary>Returns the Y of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Width">
      <summary>Returns the half-height peak width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftIndex">
      <summary>Returns the leftside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightIndex">
      <summary>Returns the rightside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="T:PalmSens.Analysis.AutoPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftX">
      <summary>
            Returns the X of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftY">
      <summary>
            Returns the Y of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakX">
      <summary>
            Returns the X of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakY">
      <summary>
            Returns the Y of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakValue">
      <summary>
            Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftIndex">
      <summary>
            Returns the leftside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakIndex">
      <summary>
            Returns the location of the peak as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightIndex">
      <summary>
            Returns the rightside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="F:PalmSens.Analysis.AutoPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.AutoPeak.#ctor(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Int32,PalmSens.Data.EnumDirection)">
      <summary>
            Creates a new Peak class with automatically detected peaks.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.ManualPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="F:PalmSens.Analysis.ManualPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peak">The peak index.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peakx">The peakx.</param>
      <param name="peaky">The peaky.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="hasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="T:PalmSens.Analysis.NonLinearBaseLinePeak">
      <summary>
            Peak with a curve as baseline
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="T:PalmSens.AuxInput.AuxiliaryInputType">
      <summary>
            Describes a possible auxiliary input type
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor(System.Boolean,System.String,System.String,System.Single,System.Single,PalmSens.Units.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
      <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="offset">The offset.</param>
      <param name="slope">The slope.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="F:PalmSens.AuxInput.AuxiliaryInputType.IsReadOnly">
      <summary>
            The is read only
            </summary>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Unit">
      <summary>
            Gets or sets the unit.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Slope">
      <summary>
            Gets or sets the slope.
            </summary>
      <value>
            The slope.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
      <value>
            The offset.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>
            The description.
            </value>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ConvertAuxValue(System.Single)">
      <summary>
            Converts the original aux value to the specified input type.
            </summary>
      <param name="analogInput">The analog input.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Serialize">
      <summary>
            Serializes the specified type.
            </summary>
      <returns>Readonly [bool]|Name [string]|Description [string]|Offset [float]|Slope [bool]|Symbol [string], Quantity [string], Abbreviation [string]</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ToString(System.Double)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="value">The value.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ParseString(System.String)">
      <summary>
            Parses the string.
            </summary>
      <param name="serializedAuxiliaryInputType">Type of the serialized auxiliary input.</param>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Deserialize(System.String)">
      <summary>
            Deserializes the specified serialized auxiliary input type.
            </summary>
      <param name="serializedAuxiliaryInputType">The serialized auxiliary input string.</param>
      <returns>AuxiliaryInputType</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.DataManipulation.SmoothData(System.Int32,System.Double[]@)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <param name="yvalues">The yvalues.</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            or
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="T:PalmSens.Calculations.MathFunctions">
      <summary>
            Contains a number of mathematical functions used for 
            Blank subtraction and Impedemetric measurements
            
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(PalmSens.Data.DataArray,PalmSens.Data.DataArray,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new array by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <param name="iAStart">The index to start in dataA start.</param>
      <param name="iBStart">The index to start in dataB.</param>
      <param name="count">The number of points to iterate through.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            The curve with the minimum number of points determines the returned curve length.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <param name="iStart">The start index.</param>
      <param name="iEnd">The end index.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.MultiplyDataArray(System.Double[],System.Single)">
      <summary>
            Creates a new array by means of multiplication with a factor
            </summary>
      <param name="array">The target array to manipulate.</param>
      <param name="factor">The factor for multiplication.</param>
      <returns>
            Modified array
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AppendCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve)">
      <summary>
            Appends all equal DataArrays of two curves.
            Resulting nPoints = A.nPoints+B.nPoints
            </summary>
      <param name="curveA">The curve A.</param>
      <param name="curveB">The curve B.</param>
      <returns>Curve A and B appended.</returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DFT(PalmSens.SineCurve,System.Double@,System.Double@)">
      <summary>
            DFT over a sine curve
            </summary>
      <param name="sine">The sine curve.</param>
      <param name="re">The real component</param>
      <param name="im">The imaginary component</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.GetCurrAC(PalmSens.SineCurve,System.Double@)">
      <summary>
            Gets the magnitude RMS of the sine.
            </summary>
      <param name="sine">The sine</param>
      <param name="iAC">The AC RMS value</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DivComplex(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Divides the complex A and B
            </summary>
      <param name="a">Real of division</param>
      <param name="b">Imaginary of division</param>
      <param name="c">Real of fraction</param>
      <param name="d">Imaginary of fraction</param>
      <param name="re">The resulting real</param>
      <param name="im">The resulting imaginary</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.FindMeanY(PalmSens.Plottables.Curve)">
      <summary>
            Finds the mean Y.
            </summary>
      <param name="c">The curve.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.CalculateDerivative(PalmSens.Data.EnumDirection,System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the derivatives. Note the derivative is calculated over the index an x value is not specified.
            </summary>
      <param name="dir">The direction.</param>
      <param name="y">The y values.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="averagePoints">The average_points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPassFreq0(System.Double,System.Double)">
      <summary>
            Determines the value of freq0 based on frequency and phaseshift
            Used during calibration
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>  consult: http://www.johnhearfield.com/RC/RC2.htm
            Determine the phaseshift and Zfactor based on frequency and freq0
            Where frequency = freq0 * Math.Atan(phaseshift / 360.0 * 2.0 * Math.PI) ; 
            freq0 is obtained by means of calibrating
            </summary>
      <param name="freq0">The freq0.</param>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The Zfactor.</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCHighPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary> consult: http://www.johnhearfield.com/RC/RC2.htm 
            Determine the phaseshift and Zfactor based on frequency and freq0
            for AC coupled measurements
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="freq0">The freq0.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The zfactor.</param>
    </member>
    <member name="F:PalmSens.Calculations.PolyCurve.CurveGenerated">
      <summary>
            The curve generated by GetPolyCurve
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single)">
      <summary>
            Gets the poly curve based on the stepsize of the feeded curve
            The generated curve is also available as CurveGenerated
            </summary>
      <param name="x1">The smalles X.</param>
      <param name="x2">The largest X.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single,System.Single)">
      <summary>
            Gets the poly curve with custom stepsize
            </summary>
      <param name="x1">The left X.</param>
      <param name="x2">The right X.</param>
      <param name="nPoints">The n points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single,System.Int32)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
      <param name="iOrgCurve">The indiex of this point in the original curve.</param>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetClosestPoint">
      <summary>
            Gets the get closest point.
            </summary>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetFarestPoint">
      <summary>
            Gets the get farest point.
            </summary>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationSteps">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetDescription(System.Int32)">
      <summary>
            Gets the description.
            </summary>
      <param name="calibrationType">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.NSteps">
      <summary>
            Gets the number of calibration steps.
            </summary>
      <value>
            The number of calibration steps.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Contains(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,System.String}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Int32,System.String)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Int32)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.TryGetValue(System.Int32,System.String@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.String" /> with the specified key.
            </summary>
      <value>
            The <see cref="T:System.String" />.
            </value>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.CurrentStep">
      <summary>
            Gets or sets the current step.
            If the step does not exists the nearest available steps is chosen
            </summary>
      <value>
            The current step.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.SetNextStep">
      <summary>
            Sets the next step.
            </summary>
      <returns>
        <c>false</c> if next step does not exists, otherwise <c>true</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CurrentStepToString">
      <summary>
            Currents the step to string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFileCurrentStep">
      <summary>
            Gets the method file current step.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibration">
      <summary>
            Contains all values and functionalities for EIS calibrations
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all values to EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>All values as formatted string</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <returns>EISCalibration with default values</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates the values.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
      <returns>
        <c>true</c> if values are validated OK, otherwise <c>false</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationStepsPS3.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS3">
      <summary>
            This serializable class contains all calibration values used for impedance measurements
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.#ctor(PalmSens.Devices.EISSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Calibration.EISCalibrationPS3" /> class.
            The settings depend on firmware/hardware version of the instrument
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.EISSettingsPS3">
      <summary>
            Gets the EIS settings for PS3.
            </summary>
      <value>
            The EIS settings for PS3
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterAcFreq0">
      <summary>
            Calibration file contents
            RC filter values of Freq0 calculated between frequency and phaseshift of 30 and 5 degrees
            Index corresponds to FilterAc
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.HSTABFreq0">
      <summary>
            RC filter time of control amplifier (AD8620: GBWP = 25 MHz) used at HSTAB
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:PalmSens.Calibration.EISCalibrationPS3._magnitudeAcCoupledFreq0" -->
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.acCoupledFreq0">
      <summary>
            Only used when ac-coupled is applied
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.AcCoupledIsEnabled">
      <summary>
            Gets a value indicating whether ac coupled measurements can be used
            This relies on the solder bridge JP IMP being soldered or not
            </summary>
      <value>
        <c>true</c> if [ac coupled is enabled]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAGainFreq0">
      <summary>
            Used for corrections of PGA
            Corresponds to byte PGAgain
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterCFFreq0">
      <summary>
            Filter settings for each frequency
            Index corresponds to first 4 bits of Filter byte (so AND with 0xF)
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionDcCoupled">
      <summary>
            Input offset calibration procedure for value of newPGAoffset:
            connect WE,CE,RE to testsensor at side panel
            for dc-offset value:           
            set TRIMDAC1 to 32768, set cell on at E = 0.000 V using 1 mA CR.
            use 1 kHz time scan at GAIN 1 and average YmeanReal of the measured sine wave a couple of times. Its value must be 32768 +/- 300
            repeat measurment at GAIN3 and measure YmeanGain3
            The value of newPGAoffset = (YmeanGAIN3 - 32768)/100. On a PS3 a value of PGAoffsetCorrectionDcCoupled = 117 was found.
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionAcCoupled">
      <summary>
             See also description of PGAoffsetCorrectionDcCoupled
             
             or ac-coupled value:
             set TRIMDAC1 to 200 ( below this value the DAC is not linear!
            , set cell on at E = 0.000 V using 1 mA CR.
             use 1 kHz time scan at GAIN 1 and average YmeanReal (so YmeanGain1) of the measured sine wave a couple of times. Its value must be (32768-200) +/- 200
             repeat measurment at GAIN3 and measure YmeanGain3
             The value of newPGAoffset = 200 - (YmeanGAIN3 - YmeanGAIN1)/100. On a PS3 a value of PGAoffsetCorrectionAcCoupled = 51 was found. Negative values are NOT valid!
             </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <param name="capab">The capab.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates all values.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ParseResult(PalmSens.Plottables.EISData,System.Int32,System.Double@,System.String@)">
      <summary>
            Parses the result of an EIS calibration step to a calibration value.
            </summary>
      <param name="freqScan">The eis data.</param>
      <param name="calibrationStep">The calibration step.</param>
      <param name="result">The result.</param>
      <param name="message">The message.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.CorrectMeasuredValue(PalmSens.Techniques.ImpedimetricIterationMethod,System.Int32,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Corrects the measured value using the calibration values.
            </summary>
      <param name="method">The ImpedimetricIterationMethod.</param>
      <param name="phase">The phase.</param>
      <param name="Z">The impedance, Z.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all calibration values to EEPROM.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ConvertValuesForEEPROM(System.Double[],System.Int32[])">
      <summary>
            Converts the values for EEPROM.
            </summary>
      <param name="values">The values.</param>
      <param name="magnitudes">The magnitude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationStepsPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.CalibrationSteps" />
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.EISCalibration" />
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetPalmSensBiPotCalibration(PalmSens.Comm.ClientConnection)">
      <summary>
            Get values from EEPROM if PalmSens3, else from local settings.
            </summary>
      <param name="clientConnection">The client connection.</param>
      <returns>PalmSensBiPotCalibration containing calibration values</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the calibration values from EEPROM if PS3, else from local settings
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValuesFromSettings">
      <summary>
            Reads the calibration values from settings. For PalmSens2
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotCurrent(System.Double)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct reading
            AD offset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected current</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotPotential(System.Single)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct the potential set
            DACOffset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected potential to set</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.WriteValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes the values to EEPROM if PalmSens3, else to local settings.
            </summary>
      <param name="conn">The clientconnection.</param>
    </member>
    <member name="T:PalmSens.Comm.Buffer">
      <summary>
            Generic Buffer object
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Pop(System.Int32,System.Int32)">
      <summary>
            Retrieve bytes from the buffer if present.
            </summary>
      <param name="n">Number of bytes to retrieve</param>
      <param name="startIndex">The index to start the string from (all data up to "n" is still removed).</param>
      <returns>
            String with contents, "" if not enough bytes available.
            </returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Peek">
      <summary>
            Peek at the first character in the buffer
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.IndexOf(System.Char,System.Int32)">
      <summary>
            Find character in array
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="T:PalmSens.Comm.ConnBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ConnBuffer.#ctor(PalmSens.Devices.Device)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.OfflineBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.OfflineBuffer.#ctor(System.String)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection">
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens and EmStat communications protocols
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.BiPotCurrentRange">
      <summary>
            The active bipot current range
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.IsBipotOn">
      <summary>
            Is <c>true</c> when the Bipot is set on. Used in ParseIdlePacket 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotPotential(System.Single)">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOff">
      <summary>
            Disable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOnAndCR(PalmSens.CurrentRange)">
      <summary>
            Set the current range of the second working electrode. 
            This will enable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of CR
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrentStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentStatus(System.Double)">
      <summary>
            Returns the current status for a given current.
            </summary>
      <param name="current">The current in its current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPSBiPotMode(PalmSens.Method.EnumPalmSensBipotMode)">
      <summary>
            Sets the PalmSens3 bipot mode.
            0 = WE at independent potential
            1 = WE at offset from WE1
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.CommError">
      <summary>
            Occurs when there's an error in communication.
            If there are no subscribers for this event an Exception will be thrown in case of a comm error.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.Device">
      <summary>
            The Device for this connection (PalmSens or EmStat)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.ConnectedDeviceCapabilities">
      <summary>
            The capab of the most recent connected device.
            <c>Null</c> if no device connected.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.Capabilities">
      <summary>
            Describes the capab of the currently 
            connected device. May be null, if no capab 
            are known!
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.FirmwareVersion">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.NBipotBoardsInMeasurement">
      <summary>
            This value is used for synchronizing mixed measurements (like multistepping) on a nWE system
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection.MessageEventHandler">
      <summary>
            Delegate that is used for status messages during measurements.
            These messages are for example used by the status bar and can include messages like
            "recording level #" for Multistep techniques
            "limit reached"
            "..."
            </summary>
      <param name="sender">The sender.</param>
      <param name="message">The message.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveMessage">
      <summary>
            Occurs when [receive message].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DebugInformation">
      <summary>
            Raised when debug information is received from the PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DeviceReset">
      <summary>
            Occurs when the connected device was reset for unknown reasons
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(System.Boolean,PalmSens.Devices.Device,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="empty">if set to <c>true</c> Capabilities will not be read from device.</param>
      <param name="device">The device.</param>
      <param name="versionString">The version string received from the device.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(PalmSens.Devices.Device,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="device">The device to connect to</param>
      <param name="versionString">The version string received from the device.</param>
      <param name="forceNoEEPROM">if set to <c>true</c> [force no eeprom].</param>
      <param name="timeOutInMilliSeconds">The time out in milliseconds.</param>
      <exception cref="T:PalmSens.Comm.CommException">versionString error; device does not respond on packet 't'</exception>
      <exception cref="T:PalmSens.Comm.CommException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadFromDevice(System.Char,System.Int32)">
      <summary>
            Reads from a PalmSens BV device.
            First send 'c', wait for 'c' send 'CMD' return received package with sepcified length 
            </summary>
      <param name="cmd">The CMD.</param>
      <param name="length">The length.</param>
      <returns>The answer from the device</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ProcessData">
      <summary>
            Process idle packets
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetDeviceSerial">
      <summary>
            Gets the device serial.
            </summary>
      <returns>Empty DeviceSerial if not succesful</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastCurrentSet">
      <summary>
            The last current (in its current range) that was set using SetCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastPotentialSet">
      <summary>
            The last potential that was set using SetPotential
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCommMode(PalmSens.Comm.ClientConnection.CommMode)">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadPotential">
      <summary>
            Potential in Volts.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate">
      <summary>
            Calibrate. Run with sensorcable disconnected!
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadCurrent">
      <summary>
            Read the current in the active current range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V, resolution is 1 mV
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure">
      <overloads>
            Run a measurement with a specific method.
            </overloads>
      <summary>
            Run measurement with method currently loaded in PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method,System.Int32)">
      <overloads>
            Measurement the specified method at the specified mux channel (ranging from 0 to 7)
            </overloads>
      <summary>
            Run a measurement with the current parameters as set in the Method.
            </summary>
      <remarks>
            During a measurement, several events may be raised, depending on the method 
            that is currently selected. 
            
            If the communication channel allows it, the data points 
            being measured will be updated in real-time. In that case, the CurrentCurve 
            and/or CurrentMuxCurves properties will be updated whenever new data is received.
            
            At the end of the measurement, a ReceiveCurve() event will be raised.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentMethod">
      <summary>
            Receive current method loaded.
            </summary>
      <returns>hex representation of method</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetPowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendSine(System.UInt32[])">
      <summary>
            Sends a sine for impedimetric measurements
            For a PS3 device only
            </summary>
      <param name="Sine">The sine.</param>
      <returns>True if succeeded, false if failed</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetDACOffset(System.Single)">
      <summary>
            Send potential offset used when setting the DAC 
            For EmStat and PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialReadOffset(System.Single)">
      <summary>
            Send potential read offset to EmStat or PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAnalogInput">
      <summary>
            Reads the raw original auxilary analog input signal
            Use this value with <c>AuxInputSelected.ConvertAuxValue(float value)</c> to get the value for the selected aux input type.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.WriteToPS3EEPROM(System.Int32,System.UInt16)">
      <summary>
            Writes to EEPROM of a PalmSens3.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadEmStatEEPROM(System.Int32)">
      <summary>
            Reads the EEPROM.
            </summary>
      <param name="address">The address.</param>
      <returns>4 bytes with EEPROM data</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetESBiPotMode(PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode)">
      <summary>
            Sets the ES bipot mode.
            0 = none
            1 = WE at independent potential
            2 = WE at offset from WE1
            3 = Control mode (send pulses)
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetESBipotMode">
      <summary>
            Gets the ES bipot mode.
            </summary>
      <returns>
            0 = WE2 at independent potential
            1 = WE2 at offset from WE1
            2 = Control bipots (for main board)
            3 = None
            </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetFilterBytePS3(System.Byte)">
      <summary>
            FOR PALMSENS3 ONLY: Sets filter settings.
            Settings byte is calculated in Method.GetTimeFilterbyte
            </summary>
      <param name="settings">The settings as calculated by Method.GetTimeFilterbyte.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.RemoteControl(System.Char,System.Int64,System.Int64)">
      <summary>
            Sends a remote control command
            (see Communications Protocol document)
            </summary>
      <param name="cmd">The CMD character</param>
      <param name="arg1">Argument 1</param>
      <param name="arg2">Argument 1</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.IsHex(System.String)">
      <summary>
            Check whether a string is a valid hex string.
            </summary>
      <param name="hex">
            A <see cref="T:System.String" /></param>
      <returns>
            A <see cref="T:System.Boolean" /></returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.DecToHex(System.Int64,System.Int32)">
      <summary>
            Converts a decimal number to a Hex string
            </summary>
      <param name="v">
      </param>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.HexToDec(System.String)">
      <summary>
            Converts string with a hex value to an integer
            </summary>
      <param name="hex">string containing hex value</param>
      <exception cref="T:PalmSens.Comm.InvalidHexException" />
      <returns>the resulting integer</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FloatToUint32(System.Single)">
      <summary>
            Converts a float into a platform independant UInt32 representation readable by PalmSens devices.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Uint32ToFloat(System.UInt32)">
      <summary>
            Converts a platform independant UInt32 representation readable by PalmSens devices into a float.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FindDeviceType(System.String)">
      <summary>
            Finds the type of the device.
            </summary>
      <param name="versionString">The version string.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadVersion">
      <summary>
            Reads the firmware version and refreshes FirmwareVersion.
            Used after updating firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Supports10mA">
      <summary>
            Check for PalmSens1: return true if connected device supports 10 mA range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetLicence">
      <summary>
            Gets the licence.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetDeviceSerial">
      <summary>
            Gets the serial.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetSerial(PalmSens.Comm.DeviceSerialV2)">
      <summary>
            Sets the serial.
            </summary>
      <param name="serial">The serial code.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEeprom(System.Byte,System.UInt16)">
      <summary>
            Writes to the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEepromUint32(System.Byte,System.UInt32)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEeprom(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEepromUint32(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReloadData">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetReadInterval(System.UInt32)">
      <summary>
            Sets the read interval.
            </summary>
      <param name="timeMS">The time in ms.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
    </member>
    <member name="T:PalmSens.Comm.enumDeviceType">
      <summary>
            List of devices that can be connected
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.Unknown">
      <summary>
            Unable to determine device type
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens">
      <summary>
            PalmSens1 or PalmSens2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat1">
      <summary>
            Emstat1
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2">
      <summary>
            Emstat2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens3">
      <summary>
            PalmSens3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2BP">
      <summary>
            EmStat2 BiPot (BiPot version of EmStat2)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3">
      <summary>
            EmStat3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3P">
      <summary>
            EmStat3+
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3BP">
      <summary>
            EmStat3 Bipot
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens4">
      <summary>
            PalmSens4
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.SAMBAProgramPort">
      <summary>
            PalmSens4 firmware update port
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="T:PalmSens.Comm.PowerStatus">
      <summary>
            Available power status modes
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Unknown">
      <summary>
            Older version of the firmware. No information available. Upgrade to at least version 3.3 of 
            the firmware to be able to view the power status.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Charging">
      <summary>
            PalmSens is busy recharging.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.LowBattery">
      <summary>
            Low battery (equivalent to LoBatt on the LCD)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Normal">
      <summary>
            Not charging, battery status ok.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Mode">
      <summary>
            Mode of measurement at PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Galvanostatic">
      <summary>
            Measurement against current. Not supported by the Emstat
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Potentiostatic">
      <summary>
            Measurement against potential
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidHexException">
      <summary>
            Exception indicating an invalid hex integer was received.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidChecksumException">
      <summary>
            Exception indicating an invalid checksum
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventArgs">
      <summary>
            Debug information from PalmSens
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommException">
      <summary>
            Error in PalmSens Communication
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoMuxChannelsEnabled">
      <summary>
            Raised when no mux channels where enabled in a multiplexer measurement.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.UnknownDataException">
      <summary>
            Raised when unparsable data is received.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.UnknownDataException.Data">
      <summary>
            Data that couldn't be parsed.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DeviceWaitingForDataException">
      <summary>
            Raised when the PalmSens is waiting for data.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.LicenseException">
      <summary>
            Not licensed for use with SDK
            </summary>
    </member>
    <member name="T:PalmSens.Comm.BusyException">
      <summary>
            Exception that is thrown whenever an action is requested while the PalmSens device is busy (measuring or 
            downloading new firmware).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoResponseException">
      <summary>
            Exception that is thrown whenever the PalmSens doesn't respond
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.OnMeasurementEnded">
      <summary>
            Force the measurement to end, in case of an unexpected device reset.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.Phase">
      <summary>
            The current Phase in the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.StartStage(System.Double,System.String,System.Boolean)">
      <summary>
            Starts the measurement as part of a MixedMode measurement.
            </summary>
      <param name="timeOffsetInSec">The time offset in sec.</param>
      <param name="name">The name of the master method.</param>
      <param name="firstStage">if set to <c>true</c> [first stage].</param>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.OnHold">
      <summary>
            True if measurement is on hold.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ToggleHold">
      <summary>
            Toggles hold if SupportsHold() == true
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.GenericCommMeasurement">
      <summary>
            Parsing data of a generic measurement used for most techniques.
            Not used for CV, FA, SCP, aCV and 'manual controlled' techniques, like MA, MP and MM
            </summary>
    </member>
    <member name="M:PalmSens.Comm.GenericCommMeasurement.TryProcessData">
      <summary>
            Try processing the data that's being received
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.CommMeasurement">
      <summary>
            Active Measurement.
            Used for all measurement techniques/methods, except EIS (ImpedemetricMeasurement) and MultiStepMC (for PS2 only)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._iScan">
      <summary>
            The current Scan number, for mux and CV measurements 
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._measBuff">
      <summary>
            Buffer used to read measurement data from.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.IsOffline">
      <summary>
            Gets a value indicating whether this instance is offline (loaded from a device file).
            </summary>
      <value>
        <c>true</c> if this instance is offline; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.Conn">
      <summary>
            Comm object used for communication.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.SendDataDuringMeasurement">
      <summary>
            Whether data points will be sent during or after the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.GetStatusFast(System.Int32)">
      <summary>
            Gets the reading status during fast measurements
            </summary>
      <param name="value">The reading within bit range. Integer between 0 - 65536</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.WaitForChar(System.Char)">
      <summary>
            Wait for a char to arrive. 
            Does not consume the char waited for.
            </summary>
      <param name="cmd">Char to wait for</param>
      <returns>
            false if the char is not available, true otherwise
            </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.OnHold">
      <summary>
            If measurement is currently on hold
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ToggleHold">
      <summary>
            Pauses the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Reverse">
      <summary>
            Reverses the direction
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>TRUE if the measurement is finished</returns>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.PretreatmentDone">
      <summary>
            Indicates whether pretreatment is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ProcessData">
      <summary>
      </summary>
      <returns>True if done</returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.nPoints">
      <summary>
            Number of points that are going to be measured.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasureOnMuxChannel(System.Int32)">
      <summary>
            Measurement again after switching to a new mux channel
            </summary>
      <param name="channel">first channel is 0</param>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will 
            take care of announcing it.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Start">
      <summary>
            Starts a measurement with the currently selected method.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager">
      <summary>
            Wrapper around PalmSens.Comm.ClientConnection.
            This class uses a Timer with intervals of 100 ms to handle incoming data. 
            It also generates several events.
            
            See the ConnectionExample project (part of the SDK) for communications without
            the use of this helper class.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.Disconnected">
      <summary>
            Occurs when [disconnected].
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.StatusChangedEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.StateChanged">
      <summary>
            This event is raised when the State is changed.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.CellStateChanged">
      <summary>
            This event is raised when the property Cell of this class is set to true or false
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.PotentialOrCurrentChanged">
      <summary>
            This event is raised when the Cell is set to on or off.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.BeginMeasurementEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginMeasurement">
      <summary>
            This event is raised whenever PalmSens starts sending new measurement data
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended. When this event is 
            raised, the Comm object is already back in "Idle" mode.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.MeasurementStarted">
      <summary>
            Occurs as soon as measure is called, before the actual measurement has started
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveCurve">
      <summary>
            This event is raised whenever the device starts sending data and the default curve for the running technique has been created.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveEISData">
      <summary>
            This event is raised whenever the device starts sending new EISData.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveCurve">
      <summary>
            This event is raised whenever a complete curve (Finished is set to <c>true</c>) has been received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of the device.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DebugEventHandler">
      <summary>
            Raised when debug information is received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.DebugHandler">
      <summary>
            Occurs when [debug handler].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.UnknownDataEvent">
      <summary>
            Event raised whenever data is received that cannot be interpreted by the current
            Comm object.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventArgs">
      <summary>
            Arguments for the event raised when data is received that can't be interpreted.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.Data">
      <summary>
            Obtain the unknown data that has been received.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.PacketCount">
      <summary>
            Return the number of packets 
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventHandler">
      <summary>
            Delegate for handlers of the UnknownData event
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Devices.Device,System.Int32)">
      <summary>
            Create a new connection with a PalmSens over the given stream
            </summary>
      <param name="d">The PalmSens or EmStat device.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Comm.ClientConnection)">
      <summary>
            Initializes a new instance of the <see cref="N:PalmSens.Comm" /> class.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Text">
      <summary>
            The text representation of this CommManager object.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.TimerPeriod">
      <summary>
            Gets or sets the timer period in ms.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Device">
      <summary>
            The connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Capabilities">
      <summary>
            Gets the capab of the connected device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ResultLastMeasurement">
      <summary>
            This collection contains the result of the last measurement
            Contains curves or EIS data
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentCurve">
      <summary>
            Contains the curve that is currently being measured. If possible, this 
            Curve object will be updated whenever new points are measured.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Disconnect(System.Boolean)">
      <summary>
            Disconnects the comm
            </summary>
      <param name="silent">if set to <c>true</c> [silent]. When silent disconnect event is not raised.</param>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ActiveMeasurement">
      <summary>
            The measurement active
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.RemainingMeasurementTime">
      <summary>
            Gets the remaining measurement time.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Dispose">
      <summary>
            Disposes the connection (disconnects)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ClientConnection">
      <summary>
            The Comm class (this class) is a wrapper around the ClientConnection class
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceSerial">
      <summary>
            Gets the device serial number as stored in the permanent memory of the connected device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ResumeParsing">
      <summary>
            Resumes the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.PauseParsing">
      <summary>
            Pauses the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Finalize">
      <summary>
            Destroy the current Comm object. 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Status">
      <summary>Contains the last known status of the PalmSens.
            </summary>
      <remarks>
            This property is updated every few seconds when the PalmSens is in idle 
            mode. </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.StatusWhenIdle">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DeviceState">
      <summary>
            Reflects the last known state of the connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.State">
      <summary>
            Gets or sets the current device state
            </summary>
      <value>
            The state.
            </value>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Potential">
      <summary>
            Sets or gets the potential in Volts. 
            On set; if the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Current">
      <summary>
            Read or set current in uA. 
            If the current is set and PalmSens is not yet in Galvanostatic mode, it will be switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotPotential">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOnAndCurrentRange(PalmSens.CurrentRange)">
      <summary>
            Sets the WE2 and current range.
            </summary>
      <param name="currentRange">The current range for the WE2.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOff">
      <summary>
            Sets the bipot off.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotCurrentRange">
      <summary>
            The current range of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotCurrentRead">
      <summary>
            Gets the last BiPot current read.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotReadingStatus">
      <summary>
            Gets the last BiPot currentstatus
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of BiPot CR
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotReadingStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ExternalOutput">
      <summary>
            Set external analog output in Volt (pin 8 of PalmSens miniDIN connector).
            0.000 - 4.096 V, resolution is 1 mV
            </summary>
      <value>
            The external output in V.
            </value>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartOnWorkerThread(PalmSens.Method,PalmSens.MeasType)" -->
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartTask(PalmSens.Method,PalmSens.MeasType)" -->
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            If multiplexer settings are enabled, they're used.
            MeasType = new
            </summary>
      <param name="m">The method.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,System.Int32)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            </summary>
      <param name="m">The method</param>
      <param name="muxchannel">The multiplexer channel.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,PalmSens.MeasType)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            If multiplexer settings are enabled, they're used.
            </summary>
      <param name="m">The method</param>
      <param name="measType">Type of the measurement.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentRange">
      <summary>
            Get or set the current range, as PalmSens.CurrentRange
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Version">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Busy">
      <summary>
            Whether the PalmSens is busy at the moment</summary>
      <remarks>
            This property is set to true when the PalmSens is active downloading new 
            firmware or running a measurement.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Active">
      <summary>
            Whether the PalmSens is active.
            </summary>
      <remarks>
            True if the PalmSens this Comm class is connected to is active, False if it is not.
            This value may be False if there is no PalmSens connected, the PalmSens is powered off or 
            when the PalmSens is not responding for any other reason.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentMuxChannel">
      <summary>
            The active multiplexer channel (0-7 in case of 8 channel device)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Stirrer">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PotentialOffset1V">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Method">
      <summary>
            The method currently in use on the PalmSens.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Abort">
      <summary>
            Abort the current measurement running.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DigitalLineD0">
      <summary>
            Read digital input on D0
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.AnalogInput">
      <summary>
            Read auxilary analog input signal in selected unit
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Mode">
      <summary>
            Current mode of measurement at the PalmSens device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CellOn">
      <summary>
            Indicates whether the electric cell is currently on or off 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.IsBipotOn">
      <summary>
            Whether the bipot (WE2) is enabled
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ChannelIndex">
      <summary>
            Gets or sets the channel number assigned to this comm.  
            </summary>
      <value>
            The channel.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CellOffAfterSeconds(System.Int32)">
      <summary>
            Leaves the cell on (doesn't turn it on) for a specified period
            </summary>
      <param name="seconds">The number of seconds before turning the cell off.</param>
    </member>
    <member name="T:PalmSens.Comm.DeviceSerial">
      <summary>
            Device serial information used for saving info to EEPROM of PS3 and EmStat
            </summary>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.ReadSerial(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the device serial.
            </summary>
      <param name="c">The clientConnection.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.WriteSerial(PalmSens.Comm.DeviceSerial,PalmSens.Comm.ClientConnection)">
      <summary>
            Write serial number
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="T:PalmSens.Comm.Firmware">
      <summary>
            Describes the firmware for PalmSens. Use this object to upload new firmware.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Firmware.Block">
      <summary>
            Represents one block of data from the PalmSens Firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.address">
      <summary>
            Memory address this block should be written to
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.data">
      <summary>
            Data to write
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.lineno">
      <summary>
            Line number in file
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.blocks">
      <summary>
            The blocks of data in the firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Version">
      <summary>
            Firmware version
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.BootloaderDevice">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Device">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream)">
      <summary>
            Load firmware.
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream,System.String)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="fileStream">stream of hex file</param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.StreamReader)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="file">hex file</param>
    </member>
    <member name="P:PalmSens.Comm.Firmware.Filename">
      <summary>
            Gets the filename.
            </summary>
      <value>
            The filename.
            </value>
    </member>
    <member name="P:PalmSens.Comm.FirmwareUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs">
      <summary>
            Current status of uploading progress of the PalmSens firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Current">
      <summary>
            Number of blocks of firmware downloaded so far.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Total">
      <summary>
            Total number of blocks due to be downloaded.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventHandler">
      <summary>
            Delegate for handlers of the DownloadProgressEvent
            </summary>
    </member>
    <member name="E:PalmSens.Comm.FirmwareUploader.DownloadProgress">
      <summary>
            Raised whenever a new data block of firmware is sent
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ReadingStatus">
      <summary>
            Describes the status of the current or potential measurement
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Unknown">
      <summary>
            Status is not known or could not be determined.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.OK">
      <summary>
            Status is OK. Measurement is reliable
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Overload">
      <summary>
            Overload
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Underload">
      <summary>
            Underload
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Status">
      <summary>
            Contains the status information of a PalmSens at a certain moment. Used for parsing measurement packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.#ctor(PalmSens.Data.VoltageReading,PalmSens.Data.CurrentReading,System.Int32,System.Double,PalmSens.Comm.Status.EnumPretreatmentPhase,PalmSens.Devices.DeviceCapabilities,System.Collections.Generic.List{PalmSens.Data.GenericValue})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.Status" /> class.
            </summary>
      <param name="potentialReading">The potential reading.</param>
      <param name="currentReading">The current reading.</param>
      <param name="extraValue">Extra value. Is the raw auxiliary value as received</param>
      <param name="noise">The noise level.</param>
      <param name="pretPhase">The pretreatment phase.</param>
      <param name="capabilities">The device capabilities.</param>
    </member>
    <member name="F:PalmSens.Comm.Status.Noise">
      <summary>
            Noise as indicated by PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.PretreatmentPhase">
      <summary>
            Pretreatment phase (implemented since PS4.4 or ES2.5)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.None">
            The instrument doesn't send this kind of information
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Conditioning">
            The instrument is conditioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Depositing">
            The instrument is depositioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Equilibrating">
            The instrument is equilibrating
        </member>
    <member name="F:PalmSens.Comm.Status.PotentialReading">
      <summary>
            Measured potential with status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.CurrentReading">
      <summary>
            Measured current with range and status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.ExtraValue">
      <summary>
            Extra raw optional value sent with the package.
            Can be: 
            -WE2 current value
            -Aux. input voltage, 
            -DC current for ACV, 
            -Reverse current for SquareWave voltammetry
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.ToString">
      <summary>
            Give string presentation of the current status of the PalmSens.
            </summary>
      <remarks>The format in which the status is returned is: E=0.000,I=0.000,T=10.0C</remarks>
      <returns>String describing this status object</returns>
    </member>
    <member name="T:PalmSens.Comm.StatusEventHandler">
      <summary>
            Delegate that receives Status.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventHandler">
      <summary>
            Delegate that receives Debug Information.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.StatusEventArgs">
      <summary>
            Arguments for an event that receives the status of the PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.StatusEventArgs.GetStatus">
      <summary>
            Return the status
            </summary>
    </member>
    <member name="T:PalmSens.CustomMeasurement">
      <summary>
            Custom measurements.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.Aborted">
      <summary>
            Whether or not this measurement has been aborted.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.ActualCR">
      <summary>
            CurrentRange 
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.Conn">
      <summary>
            Comm object in use.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.MeasurementStarted">
      <summary>
             The moment the measurement was started
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Create a new CustomMeasurement.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="F:PalmSens.CustomMeasurement.LastMuxChannel">
      <summary>
            Last mux channel applied
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AutoRanging(System.Single)">
      <summary>
            Autoranging
            </summary>
      <param name="current">current value</param>
      <returns>current status</returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.NextState">
      <summary>
            Nexts the state.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.MeasureIterate">
      <summary>
            Do next measurement iteration
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AdjustCountdown">
      <summary>
            Adjusts the countdown.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.Simulator">
      <summary>
            Simlates a PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Potential">
      <summary>
            Current value set on the DAC
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotPotential">
      <summary>
            Bi Pot Potential as set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.CurrentRange">
      <summary>
            Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Mode">
      <summary>
            Mode set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.FastMode">
      <summary>
            Whether fast mode was set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotCurrentRange">
      <summary>
            Bi Pot Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.ExternalOutput">
      <summary>
            External output, used for stirring and multiplexer.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.SimMeasurement">
      <summary>
            A simulated measurment, based on method parameters
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Simulated.SimMeasurement.Finalize">
      <summary>
            Destroy the current object. 
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.parameters">
      <summary>
            All parameter names used in firmware
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Bits">
      <summary>
            The amount of bits this device uses.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxRawValue">
      <summary>
            Gets the maximum raw value, based on the amount of bits.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.VRange">
      <summary>
            Gets the reference voltage range of the device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Offset">
      <summary>
            Gets the voltage offset of the device, initially this is a predefined value for the device based on internal ADC gain, but it can be adjusted during calibration.
            When calibrating, keep in mind this Offset might not be 0, and include that in the calculation of the new offset.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Gain">
      <summary>
            Gets the voltage Gain of the device, initially this is a predefined value for the device based on internal ADC offset, but it can be adjusted during calibration.
            When calibrating, keep in mind this Gain might not be 1, and include that in the calculation of the new Gain.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Resolution">
      <summary>
            Gets the resolution of this analog device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.StepSize">
      <summary>
            Gets the Analog step size for the input or output of this component.
            </summary>
      <value>
            The size of the step as Resolution * Gain.
            </value>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxValue">
      <summary>
            Gets the maximum analog value this device can handle.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MinValue">
      <summary>
            Gets the minimum analog value this device can handle.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRaw(System.Single,System.Boolean)">
      <summary>
            To the raw.
            Offset is not used for for example the step potential.
            </summary>
      <param name="val">The value.</param>
      <param name="useOffset">if set to <c>true</c> [use offset].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRawBiPolar(System.Single)">
      <summary>
            Use for analog values. 
            Bits = Signbit
            </summary>
      <param name="val">The voltage</param>
      <returns>A signed integer, Bits is signbit</returns>
    </member>
    <member name="T:PalmSens.Devices.GetDeviceCapabilities">
      <summary>
            Returns the corresponding capab for a deviceType
            </summary>
    </member>
    <member name="M:PalmSens.Devices.GetDeviceCapabilities.GetCapabilities(PalmSens.Comm.enumDeviceType,PalmSens.Devices.Device)">
      <summary>
            Gets the capabilities of the connected deviceType.
            </summary>
      <param name="deviceType">The deviceType.</param>
      <param name="device">The device.</param>
      <param name="firmwareversion">The firmwareversion.</param>
      <returns>
            DeviceCapabilities
            </returns>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">No capab for unknown deviceType</exception>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities">
      <summary>
      </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.SpecialFirmwareDescription">
      <summary>
            This string contains the build date for newer firmware versions (since May 2017).
            For special (custom) firmware builds it contains a brief description.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port. 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
             </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.BiPotPresent">
      <summary>
            True if a bipot module is present (PalmSens series only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software. 
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            /// Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.BiPotCalibration">
      <summary>
            Contains PalmSens BiPot calibration information
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISsettings">
      <summary>
            Contains EIS settings loaded from XML file
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISCalibration">
      <summary>
            Contains calibration values loaded from EEPROM
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HardwareRevision">
      <summary>
            Gets the hardware revision.
            1 = ....
            </summary>
      <value>
            The hardware revision.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode">
      <summary>
            BiPot mode for EmStat3 and EmStat3 Bipot boards
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EmStatBiPotMode">
      <summary>
            Used for EmStat3 BiPot instruments
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsEmStatBipotBoard">
      <summary>
            Whether the deviceType is a the Bipot version of an EmStat (has its own USB/COM)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelPotential">
      <summary>
             The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelWE2">
      <summary>
             The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.NumMuxChannels">
      <summary>
            Number of mux channels supported. Any value below 1 
            means multiplexer operations are not supported by the instrument.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this 
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedBipotRanges">
      <summary>
            list of current ranges for the BiPot module supported by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsOfflineMeasurements">
      <summary>
            Whether off-line measurements are supported
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsDisplayMethodName">
      <summary>
            Gets a value indicating whether the device supports displaying a method name.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.SupportsRange(PalmSens.CurrentRange)">
      <summary>
            Check if deviceType supports the range.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsWireless">
      <summary>
            Whether the connection is a Bluetooth connection.
            Currently only used as work around to keep EIS meas working with BT
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsImpedance">
      <summary>
            Whether or not the deviceType supports impedance measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DefaultCapabilities">
      <summary>
            Describes default capabilities to use when nothing is connected
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DefaultCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.NoLicenseInfo">
      <summary>
            Raised when a device connection can't return any license info
            </summary>
    </member>
    <member name="T:PalmSens.Devices.IAndroidDevice">
      <summary>
            Temporary class used by PStouch. Integrate into Device in the future?
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open">
      <summary>
            Opens this instance and auto detects the baudrate if nescessary.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open(System.Int32)">
      <summary>
            Opens the connection at the specified baudrate.
            </summary>
      <param name="baudrate">The baudrate.</param>
    </member>
    <member name="F:PalmSens.Devices.Device.DeviceProtocol">
      <summary>
            Type of version command used.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EISSettings">
      <summary>
            All settings are read from an XML file with the name
            eissettingsps[v].xml where v is the hardware version of the PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettings.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettings.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxFreqForRange(System.Int32)">
      <summary>
            Gets the maximum frequency for range.
            Use this instead of field array MaxFreqForRange
            </summary>
      <param name="cr">The current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetCurrentRangeForFreq(System.Double)">
      <summary>
            Gets the current range for the frequency
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxPGAgain(System.Single,PalmSens.CurrentRange)">
      <summary>
            Gets the PGAgain byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="cr">The current range.</param>
      <returns>
            the byte for the cf filter
            </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.LowResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered low
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.HighResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered high
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetFilterCFByte(System.Single,System.SByte,System.Boolean)">
      <summary>
            Gets the filter byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>the byte for the CF filter</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MaxPhaseshift">
      <summary>
            Window max where phase values are used for freq0
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MinPhaseshift">
      <summary>
            Window min where phase values are used for freq0
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EmstatCapabilities">
      <summary>
            Describes Emstat capab.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.EmstatCapabilities" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
      <exception cref="T:System.InvalidOperationException">EmStat cannot control a current.</exception>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV. 
            Not supported by EmStat
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            NOT USED
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat2Capabilities">
      <summary>
            Describes EmStat2 capab (inherits most of EmStat1 capab)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat2Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat3Capabilities">
      <summary>
            EmStat3 Device capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3PCapabilities">
      <summary>
            EmStat3+ Device Capabilities
            </summary>
      <seealso cref="T:PalmSens.Devices.Emstat2Capabilities" />
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3BPCapabilities">
      <summary>
            Describes EmStat3 in BiPot mode (part of PolyEmStat)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat3BPCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.Emstat3BPCapabilities" /> class.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.PalmSensCapabilities">
      <summary>
            Describes PalmSens capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DeviceType">
      <summary>
            The device type for this Capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelReverseCurrent">
      <summary>
             The internal channel used for measuring the reverse current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSensCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Currently only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are sent in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens3Capabilities">
      <summary>
            Describes PalmSens3 capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrentNoPGA">
      <summary>
            Gets the current bypassing the PGA
            </summary>
      <value>
            The channel current with no PGA.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this instrument.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetCutoffFrequency(System.Int32,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="crByte">The current range as byte where 0=1nA, 1=10nA, 2=100nA, 3=1uA etc.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens4Capabilities">
      <summary>
            Describes PalmSens4 capabilities.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.CellTypes">
      <summary>
            Possible cell types (internal test sensor or external).
            Used for test internal sensors.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetCutoffFrequency(PalmSens.CurrentRange,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="range">The current range.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxAmpMDAC">
      <summary>
            Vamp = 435 mV (measured)
            Vamp rms = 600 mV / sqrt(2)
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS4.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilterADC">
      <summary>
            ac Filter for different frequencies
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetFilterACByte(System.Single)">
      <summary>
            Gets the filter ac.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.IdleFraction" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqAD16">
      <summary>
            Use 12 bit ADC when frequency is higher than this value (Hz)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD12">
      <summary>
            Maximum sampling rate (Hz) of 12 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD16">
      <summary>
            Maximum sampling rate (Hz) of 16 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12A">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12B">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD16A">
      <summary>
            Time for one AD concersion for the 16 bit
            tSingleAD nadc=1 -&gt; 1.8 us
            tSingleAD nadc&gt;1 -&gt; 2.04 us
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxLowFreqPhaseDelayCorrection">
      <summary>
            Use tpdSlope16LowFreq and tpdIntercept16LowFreq for phasedelay correction below this value
            instead of more accurate nPointsAC indexed offsets
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16LowFreq">
      <summary>
            Determined slope of phasedelay vs tintac for lower frequencies
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16LowFreq">
      <summary>
            Offset for phasedelay correction for lower frequencies
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16">
      <summary>
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope12">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset12">
      <summary>
            In seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead12">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 12 bit mode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead16">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 16 bit mode
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetDAOverhead(System.Single)">
      <summary>
            Gets the DA overhead.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>DA overhead time in s</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GettSingleADConversion(System.Single)">
      <summary>
            Gets the time for a single AD conversion.
            </summary>
      <param name="frequency">The frequency in Hz.</param>
      <returns>
            time in s
            </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilterADC">
      <summary>
            ADC Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterAcFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibHSTABFreq0Default">
      <summary>
            Default value for HSTAB freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibAcCoupledFreq0Default">
      <summary>
            Default value for AC coupled freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibPGAGainFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterCFFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>
            the abbrevation
            </returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.CurrentRange">
      <summary>
            Describes a specific current range
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte,System.String,System.Single)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
      <param name="description">The description.</param>
      <param name="factor">The factor.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.GetCRString(System.SByte)">
      <summary>
            The available current ranges as string
            </summary>
    </member>
    <member name="F:PalmSens.CurrentRange.AvailableCurrentRanges">
      <summary>
            The available current ranges as CurrentRange
            Where: 
            index=0 = 100pA
            index=1 = 1nA
            index=2 = 10nA
            index=3 = 100nA
            index=4 = 1uA
            ...
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.GetRanges(System.Int32,System.Int32)">
      <summary>
            Gets the range array.
            </summary>
      <param name="minRange">The min range as int from -1 (100 pA) to 8 (100 mA).</param>
      <param name="maxRange">The max range as int from -1 (100 pA) to 8 (100 mA).</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromMicroamps(System.Double)">
      <summary>
            Returns CurrentRange from a range given in microamps as a double.
            </summary>
      <param name="p">The currentrange in microamps.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromCRByte(System.SByte)">
      <summary>
            Returns CurrentRange from a range given as a byte from 0 - 7.
               -1 = "100 pA"
               0 = "1 nA"
               1 = "10 nA"
               2 = "100 nA"
               3 = "1 uA"
               4 = "10 uA"
               5 = "100 uA"
               6 = "1 mA"
               7 = "10 mA"
            
               F = "100 pA"
            </summary>
      <param name="p">The currentrange as a byte.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Lower">
      <summary>
            Returns one CurrentRange lower than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Higher">
      <summary>
            Returns one CurrentRange higher than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format(System.Double)">
      <summary>
            Formats the specified current provided in uA
            </summary>
      <param name="current">The current.</param>
      <returns>
            the formatted current
            </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format2(System.Double)">
      <summary>
            Formats the specified current provided in the range as is this class
            </summary>
      <param name="current">The current in the selected range (-2 to 2).</param>
      <returns>the formatted current</returns>
    </member>
    <member name="T:PalmSens.DataFiles.AnalysisMeasurementFile">
      <summary>
            Class for storing and loading PalmScan analysis files
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Method,System.IO.Stream)">
      <summary>
            Load an Analysis from file
            </summary>
      <param name="strfilename">path to mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new Analysisfile for the specified measurement
            </summary>
      <param name="m">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Load(System.IO.Stream)">
      <summary>Loads an analysis file containing multiple Curves.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Save(System.IO.Stream)">
      <summary>Saves multiple Curves to an analysis file.</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CSVDataFile">
      <summary>
            Save files as comma-separated values file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CSVDataFile.SaveCurves(System.IO.Stream,PalmSens.Plottables.Curve[])">
      <summary>
            Saves the specified filename in comma-separated values (CSV) format.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="curves">The curve(s).</param>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Logf">
      <summary>Log(f) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Phase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Idc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZIm">
      <summary>Z'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogY">
      <summary>Log(Y) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.CR">
      <summary>Current Range values</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CurveFile">
      <summary>
            Class for storing/loading curves in the PalmScan/PalmTime format
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.CurveFile.Curve">
      <summary>
            Curve associated with this CurveFile
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionScan">
      <summary>
            Extension for scan data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionTime">
      <summary>
            Extension for vs time data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileDialogFilter">
      <summary>
            Can be used to load and save curves using the System.Windows.Forms.FileDialog
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.Method">
      <summary>
            Method used
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Saves the specified curve with appropriate extension.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename with or without extension. Correct extension is added automatically if needed.</param>
      <param name="c">The curve.</param>
      <param name="changeTitle">if set to <c>true</c> curve title is changed to filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,System.IO.StreamReader,PalmSens.DataFiles.MethodFileType,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="methodStream">location of method file to load with this curve file. Can be NULL if not available.</param>
      <param name="methodFileType">location of method file to load with this curve file</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,PalmSens.Method,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="method">Method file to load with this curve file.</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new curvefile for the specified curve
            </summary>
      <param name="c">curve to save</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">path to save curve to</param>
      <param name="changeTitle">if set to <c>true</c>, the curve title is set to the filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.DataFile">
      <summary>
            Base class for storing/loading data from files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.POLE">
      <summary>
            Replacement for pole |, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.SPACE">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.TAB">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.CRLF">
      <summary>
            Replacement for carriage return line feed, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.NumberFormat">
      <summary>
            Default numberformat used when storing integer and floating-point data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToSingle(System.String)">
      <summary>
            Convert a string to a single using the current numberformat
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding single or 0.0F if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToInt(System.String)">
      <summary>
            Convert a string to an integer
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding integer value or 0 if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToBool(System.String)">
      <summary>
            Convert a string to a boolean
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding boolean</returns>
    </member>
    <member name="T:PalmSens.DataFiles.EISAnalysisFile">
      <summary>
            Saves the EIS data as a file, compatible with EIS Spectrum Analyzer
            http://www.abc.chemistry.bsu.by/vi/analyser/
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.EISDataFile">
      <summary>
             Class for storing/loading in PSImp format
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.EISDataFile.FileExtension">
      <summary>
            Value is ".pseisdata"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.DataFiles.EISDataFile" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.Save(System.String,PalmSens.Plottables.EISData,System.IO.Stream,System.String)">
      <summary>
            Saves the specified EIS data as .pseisdata file
            </summary>
      <param name="source">The source (program name and version).</param>
      <param name="eisdata">The EISData.</param>
      <param name="filename">The filename.pseisdata</param>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.FromStream(System.IO.Stream)">
      <summary>
            Loads EIS data from .pseisdata file.
            </summary>
      <param name="fileStream">The filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.JsonToken">
      <summary>
            Possible JSON tokens in parsed input.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.InvalidJsonException">
      <summary>
            Exception raised when <see cref="T:PalmSens.DataFiles.JsonParser" /> encounters an invalid token.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.JsonParser">
      <summary>
            A parser for JSON.
            <seealso cref="!:http://json.org" /></summary>
    </member>
    <member name="T:PalmSens.DataFiles.MeasurementFile">
      <summary>
            Base class with support functions for saving/storing measurement data
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MeasurementFile.Measurement">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor">
      <summary>
            Create a new measurement file with an empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new MeasurementFile for the specified measurement
            </summary>
      <param name="mm">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.LoadCommonCurves(System.String[],System.IO.StreamReader,System.Int32)">
      <summary>
            Load curve data from a measurement file
            </summary>
      <param name="captions">
      </param>
      <param name="file">StreamReader to read the data from</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCurves(System.IO.Stream)">
      <summary>Saves multiple Curves to a file. This format is NOT supported by Palm Instruments' PalmScan and PalmTime or Pocket PC older than versions 2.0.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCommonCurves(System.IO.StreamWriter)">
      <summary>
            Save the curve data from this measurement to file
            </summary>
      <param name="file">StreamWriter to write to</param>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile">
      <summary>
            Saves and loads files in a format supported by Palm Instruments and Ivium PalmSens software.
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.Filename">
      <summary>returns the currently used filename for this method.</summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Method">
      <summary>returns the Method.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Save(System.String)">
      <summary>Saves the methodparameters to a file compatible with common PalmSens software.
            OLD STYLE, DO NOT USE</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EField">
      <summary>
            Correponding variable names for the potential fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tField">
      <summary>
            Corresponding variable names for the time fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.ELabel">
      <summary>Each Evalue has it's Elabel with the same index, describing the function of the value. The Elabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tLabel">
      <summary>Each tValue has it's tLabel with the same index, describing the function of the value. The tLabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EUnit">
      <summary>Each Evalue has it's EUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tUnit">
      <summary>Each tValue has it's tUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMin">
      <summary>Describes the minimum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMin">
      <summary>Describes the minimum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMax">
      <summary>Describes the maximum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMax">
      <summary>Describes the maximum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.HandleAsCorrosionMethod">
      <summary>
            If true; include the parameters used for corrosion
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32,System.Boolean)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <param name="includeCorrosionVars">if true; include the parameters used for corrosion</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(PalmSens.Method)">
      <summary>
            Create a new methodfile instance based on an existing method
            </summary>
      <param name="method">PalmSens.Method method</param>
      <returns>clone of method as methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String)">
      <summary>Loads an existing method.</summary>
      <param name="file">The methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads an existing method.
            </summary>
      <param name="fileStream">The methodfile</param>
      <param name="includeCorrosionVars">if set to <c>true</c> include corrosion variables for this method (if applicable)</param>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelY">
      <summary>The label for the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelX">
      <summary>The label for the X axis of the plot.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.GetMethodData(System.String)">
      <summary>
            Get method data.
            </summary>
      <param name="name">name of parameter</param>
      <returns>value</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single,System.Int32)">
      <summary>
            Change the t[index] or val[index] for Multistep methods
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
      <param name="index">index for val (which is for E or i)</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single)">
      <summary>
            Change the value for a method parameter
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_EValue(System.Int32)">
      <summary>
            Contains all potential related parameters of the method.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_EValue(System.Int32,System.Single)">
      <summary>
            Change value of potential parameterFS
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new parameter value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_tValue(System.Int32)">
      <summary>
            Obtain value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <returns>value of parameter</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_tValue(System.Int32,System.Single)">
      <summary>
            Change value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Load a method file. This will read the first few line from the 
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Load a method file. This will read the first few line from the
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if set to <c>true</c> [handle as corrosion method].</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor">
      <summary>
            Create a new MethodFileOld
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Technique">
      <summary>returns the indexnumber for this technique.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Equals(System.Object)">
      <summary>
            Check whether this object is equal to o
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.ScanMethodExtension">
      <summary>
            Gets the extension for old style scan method files (.pms).
            </summary>
      <value>
            The scan method extension (.pms).
            </value>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.TimeMethodExtension">
      <summary>
            Gets the extension for old style time method files (.pmt).
            </summary>
      <value>
            The time method extension (.pmt).
            </value>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.LoadAnyMethodFile(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads any PalmSens method file (.pms, .pmt or .psmethod).
            </summary>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="fileName">The filename.</param>
      <param name="isCorrosion">if set to <c>true</c> [is corrosion].</param>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPms">
      <summary>
            Old style method filetype (.pms)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPmt">
      <summary>
            Old style method filetype (.pmt)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFile2">
      <summary>
            New style methodfile filetype (.psmethod)
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile2">
      <summary>
            Save method file to PSTrace methodfile format version 2.0
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Save(PalmSens.Method,System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file.
            Stream is automatically closed afterwards.
            </summary>
      <param name="method">The method.</param>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="filepath">The filepath.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Serialize(PalmSens.Method,System.IO.TextWriter,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file
            </summary>
      <param name="method">The method.</param>
      <param name="tw">TextWriter to serialize to.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.FromStream(System.IO.StreamReader)">
      <summary>
            Read a file containing method parameters and return the Method
            </summary>
      <returns>A method</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
      <returns>Method</returns>
    </member>
    <member name="T:PalmSens.DataFiles.MuxMeasurementFile">
      <summary>
            Class for loading/storing multiple curves data in one file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MuxMeasurementFile.FileExtension">
      <summary>
            Value is ".mux"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.#ctor(PalmSens.Method,System.IO.StreamReader)">
      <summary>
            Load a multiple curves measurement from file
            </summary>
      <param name="fileStream">Stream of mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Load(System.IO.StreamReader)">
      <summary>Loads a multiple curves file containing multiple Curves.</summary>
      <param name="fileStream">path to mux data file</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.LoadOldMuxFile(System.IO.StreamReader,System.Int32,System.Int32)">
      <summary>
            Load curve data from an old style mux file, used on the PocketPC
            </summary>
      <param name="file">StreamReader to read the data from</param>
      <param name="nPoints">number of points to read</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Save(System.IO.Stream,PalmSens.Plottables.Curve[],PalmSens.Method,System.Boolean)">
      <summary>
            Saves multiple curves to a mux file.
            </summary>
      <remarks>In case the source of the curve array is from a multiplexer measurement, 
            the curves are saved with the title 'Channel n', where n is the number. 
            The MuxChannel property of every curve is used to determine which channels are saved.
            This is saved as a 16 bits unsined integer (so for max. 16 channels) on the 3rd line 
            of the file. In case isMultiplexer = false, this value is set to -1 so the channel numbers are ignored.
            </remarks>
      <param name="fileStream">Stream to save to</param>
      <param name="curveArray">Array of curves to save</param>
    </member>
    <member name="T:PalmSens.DataFiles.ScanMethodFile">
      <summary>
            Class for loading/saving PalmScan method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.ScanMethod">
      <summary>
            The corresponding Scan Method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.Method">
      <summary>
            Corresponding Method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor">
      <summary>
            Create a new empty instance.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.RefreshMethod">
      <summary>
            Set method data again.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
      <param name="includeCorrosionVars">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.Save(System.String)">
      <summary>Saves the current method to a file</summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.Measurements">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MetaData">
      <summary>
            Metadata for this PSSession (includes information about visible curves and such)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MethodForEditor">
      <summary>
            The method currently active in the method editor
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.FileExtension">
      <summary>
            The default file extension
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor(PalmSens.Measurement[],PalmSens.Method,PalmSens.DataFiles.JsonBag)">
      <summary>
            Create a new PSSessionFile for the specified measurement
            </summary>
      <param name="measurements">Measurements to save.</param>
      <param name="methodForEditor">The method selected for next measurement. This is the active method in the method editor of PSTrace.</param>
      <param name="metaData">Contains meta data to be saved with the session file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor">
      <summary>
            Create a new PSSessionFile
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.TimeMethodFile">
      <summary>
            Class for storing/load PalmTime method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.TimeMethod">
      <summary>
            Active time method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.Method">
      <summary>
            Active method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor">
      <summary>
            Create new empty instance
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod,System.Boolean)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
      <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
            /// <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param></member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.RefreshMethod">
      <summary>
            Reload method data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.Save(System.String)">
      <summary>Saves the current method to a file.</summary>
      <param name="strFilename">path to save to</param>
    </member>
    <member name="T:PalmSens.Data.EnumAxes">
      <summary>
            Axis enumerator
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.StartIndex">
      <summary>
            The start index of the new points that where added
            In the case of a CV this refers to the total points
            in the scan not too the number of points in each curve.
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.Count">
      <summary>
            The number of points added
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayType">
      <summary>
            Data array function enumerator for standard arrays
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray">
      <summary>
            Contains an array of generic values as part of a DataSet
            </summary>
    </member>
    <member name="F:PalmSens.Data.DataArray.Hidden">
      <summary>
            Hidden data arrays will not show up for the user. 
            They can be used for debug or calibration purposes
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Data.DataArray.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the DataArray class.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArray.OnNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added.
            </summary>
      <param name="nNewValuesAdded">The n new values added.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.InvokeNewDataAdded(PalmSens.Data.ArrayDataAddedEventArgs)">
      <summary>
            Invokes the NewDataAdded event.
            </summary>
      <param name="e">The <see cref="T:PalmSens.Data.ArrayDataAddedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="F:PalmSens.Data.DataArray.Unit">
      <summary>
            Gets the unit used for this data array.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetIndexArray">
      <summary>
            Gets an array of indices with the same lenght as this array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
            /// <param name="type">The data type stored in this DataArray.</param></member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="type">The data type stored in this DataArray.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.String,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="dataValueTypeStr">The value type of the datapoints.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.Smooth(System.Int32)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="M:PalmSens.Data.DataArray.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues">
      <summary>
            Gets the values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <param name="count">The amount of datapoints to inlcude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetDirection(System.Int32)">
      <summary>
            Gets the direction of the data in the array at the specified index (compared to preceeding value).
            </summary>
      <value>
            The direction.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayTime">
      <summary>
            Contains an array of tie values as part of a DataSet
            </summary>
      <seealso cref="T:PalmSens.Data.DataArray" />
    </member>
    <member name="M:PalmSens.Data.DataArrayTime.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayPotentials">
      <summary>
            Contains an array of potential values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayPotentials.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCurrents">
      <summary>
            Contains an array of current values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayCurrents.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCharge">
      <summary>
            DataArray calculating charge from TimeDataArray and CurrentDataArray
            </summary>
      <seealso cref="T:PalmSens.Data.DataArrayIntegrate" />
    </member>
    <member name="T:PalmSens.Data.DataArrayDerivative">
      <summary>
            Creates a new DataArray that calculates the derivative for each value in DataArrayY based on the first two indices of the DataArrayX (dx = Abs(DataArrayX[1]-DataArrayX[0]).
            Use DataArrayFunc.GetDataArrayDerivative(DataArrayX, DataArrayY) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayDerivative.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayLog">
      <summary>
            Creates a new DataArray that performs a mathematical function on all returned values.
            Use DataArrayFunc.GetDataArrayLog(DataArray) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayLog.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSet">
      <summary>
            A DataSet contains multiple arrays of values. All values are related by means of their indices.
            DataArrays in a DataSet should always have an equal amount of entries.
             </summary>
    </member>
    <member name="E:PalmSens.Data.DataSet.MultipleArraysNewDataAdded">
      <summary>
            Occurs when new data was added during a measurement.
            When this event is triggered all DataArrays have equal lenghts.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnMultipleArraysNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added to multiple arrays.         
            Arrays could have inequal lengths before the measurement is finished when a measurement has multiple scans.
            (each scan has its own array, therefore, during the measurement their lengths are not necessarily equal).
            </summary>
    </member>
    <member name="P:PalmSens.Data.DataSet.NPoints">
      <summary>
            Gets the number of points in each DataArray.
            </summary>
      <value>
            The number of points.
            </value>
    </member>
    <member name="P:PalmSens.Data.DataSet.IsFinished">
      <summary>Is true if a Curve is 'finished'. This means that smoothing or peak searching can be applied.</summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.Finish">
      <summary>
            Finishes this instance meaning that NPoints is fixed.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.AddDataArray(PalmSens.Data.DataArray)">
      <summary>
            Adds the data array to the collection.
            </summary>
      <param name="newArray">The new array.</param>
      <returns>The added data array</returns>
      <exception cref="T:PalmSens.Data.DataArrayAlreadyExistsException">
      </exception>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays">
      <summary>
            Gets the data arrays which are not hidden (DataArray.Hidden == false).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(PalmSens.Data.DataArrayType)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(System.Int32)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32)">
      <summary>
            Triggers NewDataAdded event for all related DataArrays
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32,System.Collections.Generic.List{PalmSens.Data.DataArray})">
      <summary>
            Triggers NewDataAdded event for the specified DataArrays
            Used for CV where each scan is a new array
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveDataPointFromAllArrays(System.Int32)">
      <summary>
            Removes the datapoint at the specified index from all arrays in this DataSet.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(PalmSens.Data.DataArrayType)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(System.Int32)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSetCommon">
      <summary>
            Contains values for Time, Potential and Current
            </summary>
      <seealso cref="T:PalmSens.Data.DataSet" />
    </member>
    <member name="T:PalmSens.Data.DataSetEIS">
      <summary>
            The default DataSet for EIS measurements used by EISData object
            </summary>
      <seealso cref="T:PalmSens.Data.DataSetCommon" />
    </member>
    <member name="M:PalmSens.Data.IDataValue.Copy">
      <summary>
            Adressing a DataValue as a IDataValue boxes it as a reference (so for a deep copy we then need a copy function)
            </summary>
    </member>
    <member name="T:PalmSens.Data.CurrentReading">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.#ctor(System.Double,PalmSens.CurrentRange,PalmSens.Comm.ReadingStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.CurrentReading" /> struct.
            </summary>
      <param name="value">The value in uA.</param>
      <param name="range">The range used.</param>
      <param name="status">The status.</param>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.ValueInRange">
      <summary>
            The current in the corresponding current range
            </summary>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.Value">
      <summary>
            The current in uA 
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.CurrentRange">
      <summary>
            The current range used for this reading
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.ReadingStatus">
      <summary>
            The reading status
            </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValue">
      <summary>
            Gets the formatted value in uA.
            </summary>
      <returns>Formatted with exponential</returns>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValueInCR">
      <summary>
            Gets the formatted value in the current range.
            </summary>
      <returns>Example: 0.5000</returns>
    </member>
    <member name="M:PalmSens.Data.VoltageReading.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 1.2341 V</returns>
    </member>
    <member name="M:PalmSens.Data.GenericValue.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 0.123</returns>
    </member>
    <member name="T:PalmSens.Data.DeviceFile">
      <summary>
            Represents a measurement file from a device
            </summary>
    </member>
    <member name="T:PalmSens.Data.SessionManager">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Measurement" />
    </member>
    <member name="F:PalmSens.Data.SessionManager.CurveCollection">
      <summary>
            Collection of all available curves in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.EISDataCollection">
      <summary>
            Collection of all available EISData in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.AnalyticalMode">
      <summary>
            If <c>true</c> the peak search uses the ScanMethod.PeakWindow value for peak detection
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UseBlankIfAvailable">
      <summary>
            The use blank if available
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedCurve">
      <summary>
            Gets or sets the user selected curve.
            TreeViewCurves sets this value when a new curve is added to its list.
            </summary>
      <value>
            The user selected curve.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedEISData">
      <summary>
            Gets or sets the selected EIS data.
            TreeViewEISData sets this value when a new curve is added to its list.
            </summary>
      <value>
            The selected EIS data.
            </value>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UserSelectedDataType">
      <summary>
            The selected data type by a user. This field can be used to determine UI actions based on what is currently selected by the user.
            Used in PSTrace to determine what kind of data is selected in the Legend.
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedMeasurement">
      <summary>
            Gets or sets the selected measurement.
            </summary>
      <value>
            The selected measurement.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.MethodForEditor">
      <summary>
            Gets or sets the method that will be used for the next measurement.
            This property is reflected in MethodEditor if SessionManager is initialized with MethodEditor.InitSessionManager
            Event MethodForMeasurementChanged is triggered when value changed.
            </summary>
      <value>
            The method to be used for next measurement.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Load(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Loads the specified filename.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filepath">The filename with full path which will be used to set the <c>SavedToFile</c> property of Measurements, Curves and EISData classes.</param>
      <param name="add">if set to <c>true</c> do not clear collection before load.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.AddMeasurement(PalmSens.Measurement)">
      <summary>
            Adds the measurement to the collection. Raises MeasurementsAdded.
            </summary>
      <param name="m">The Measurement.</param>
      <returns>The added measurement</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInAllMeasurements">
      <summary>
            Finds the peaks or levels in all curves in all Measurements in this SessionManager using parameters from corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInSelectedCurve">
      <summary>
            Finds the peaks or levels in SelectedCurve using the Method parameters from the corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevels">
      <summary>
            Removes all existing peaks or levels in all Curves of all Measurements in this SessionManager.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevelsSelectedCurve">
      <summary>
            Removes all peaks or levels in SelectedCurve;
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCurveForMeasType(PalmSens.MeasType)">
      <summary>
            Gets the curve for the given measType if exists.
            There's only one curve available for each special measType in the SessionManager.
            </summary>
      <param name="measType">Type of the measurement.</param>
      <returns>The Curve designated with the given measType</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForCurve(PalmSens.Plottables.Curve)">
      <summary>
            Gets the measurement owner of the specified Curve.
            </summary>
      <param name="c">The c.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForEISData(PalmSens.Plottables.EISData)">
      <summary>
            Gets the measurement owner of the specified EISData.
            </summary>
      <param name="eisData">The EISData.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetAvailableAnalysisCurvesCount">
      <summary>
            Gets the number of available analysis curves, meaning curves with MeasType = Sample or Standard_1 or Standard_2, etc.
            </summary>
      <returns>The number of curves that can be used for concentration determination</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveMeasurement(PalmSens.Measurement,System.Boolean)">
      <summary>
            Removes the Measurement from the collection. Raises MeasurementsBeginRemoving before actual removal. 
            </summary>
      <param name="m">The Measurement.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.ClearMeasurements(System.Boolean)">
      <summary>
            Clears all Measurements in the collection. Raises MeasurementsBeginRemoving before actual removal.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCollection">
      <summary>
            Gets the collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Data.SessionManager.Count">
      <summary>
            Gets the number of Measurements.
            </summary>
      <value>
            The number of Measurements in the collection.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.AutoPeaks">
      <summary>
            Gets or sets a value indicating whether [automatic peaks].
            </summary>
      <value>
        <c>true</c> if [automatic peaks]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveCurves(PalmSens.Plottables.Curve[],System.Boolean)">
      <summary>
            Removes the curves from their corresponding measurements.
            Raises CurvesBeginRemoving event, which is used in SessionTree to reflect the changes
            </summary>
      <param name="curves">The curves.</param>
      <param name="deleteEmptyMeasurement">if set to <c>true</c> delete empty measurements (no Curves).</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Data.SessionManager.RemoveEISData(PalmSens.Plottables.EISData[],System.Boolean)" -->
    <member name="M:PalmSens.Data.SessionManager.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod">
      <summary>
            Helper class for generating protocol data
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethod.checksum">
      <summary>
            Calculate the checksum for this encodedmethod
            </summary>
      <returns>Checksum</returns>
    </member>
    <member name="T:PalmSens.EncodedMethod.enumOptions">
      <summary>
            intBits1 is from 0x0100 to 0x8000
            intBits2 is from 0x0001 to 0x0080
            Possible options
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseBlank">
      <summary>
            Measurement blank curve before actual curve
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PowerFreq50">
      <summary>
            Work for 50Hz power frequency
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseStirrer">
      <summary>
            Enable use of stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Equilibration">
      <summary>
            Enable equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Deposition">
      <summary>
            Enable deposition equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Conditioning">
      <summary>
            Enable conditioning pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PlotOnline">
      <summary>
            Enable online plotting
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.NoAutoRanging">
      <summary>
            Disable autoranging
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnAfterMeasurement">
      <summary>
            Enable cell when measurement is finished
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnDuringMeasurement">
      <summary>
            Enable cell during measurement
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.GalvanostatMode">
      <summary>
            Use galvanostat mode
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod.MeasurementIntervalUnit">
      <summary>
            Units for measurement intervaltime
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.HthSeconds">
      <summary>
            128th seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Seconds">
      <summary>
            Seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Minutes">
      <summary>
            Minutes
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Hours">
      <summary>
            Hours
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV0">
      <summary>
            Original format method.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV0.ADTcycle">
      <summary>
            time of one machine cycle
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.ADTimingUnit">
      <summary>
            Timing unit used to convert times sent to PalmSens. In (fractional) seconds.
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.checksum">
      <summary>
            Determine the checksum for this EncodedMethod
            </summary>
      <returns>checksum</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime(System.Int32,System.Single)">
      <summary>
            Set time (mostly used for small amounts)
            </summary>
      <param name="position">position to add at</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime2(System.Int32,System.Single)">
      <summary>
            Set time (used for larger amounts of time)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Item(System.Int32)">
      <summary>
            Get/Set 8-bit integer
            </summary>
      <param name="position">position</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16LE(System.Int32,System.UInt16)">
      <summary>
            Encode a Little-Endian 16-bits integer
            </summary>
      <param name="position">position in the blob</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16BE(System.Int32,System.UInt16)">
      <summary>
            Encode a Big-Endian 16-bits integer
            </summary>
      <param name="position">position to encode at</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16(System.Int32,System.UInt16)">
      <summary>
            Set 16-bit integer (Little-Endian)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalog(System.Int32,System.Single)">
      <summary>
            Set analog value (used for potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalogDiff(System.Int32,System.Single)">
      <summary>
            Set analog differential value (potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetBool(System.Int32,System.Int32)">
      <summary>
            Set bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.GetBool(System.Int32,System.Int32)">
      <summary>
            Get bool
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ResetBool(System.Int32,System.Int32)">
      <summary>
            Unset bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ToString">
      <summary>
            Convert to string. Will return a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetCurrentRange(System.Int32,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="position">position</param>
      <param name="value">value, in nA</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Length">
      <summary>
            Number of bytes used
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV1">
      <summary>
            Method format for EmStat and PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV1.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Set(System.String,System.String)">
      <summary>
            Set parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="data">value of parameter</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Get(System.String,System.String)">
      <summary>
            Get parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" was found if set to <c>true</c></param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="name">name of parameter</param>
      <param name="cr">current range</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <returns>
            Value
            </returns>
    </member>
    <member name="T:PalmSens.EncodedMethodV1.Options">
      <summary>
            Options bits
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PlotOffline">
      <summary>
            Whether data should be stored rather than sent online.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.AlternatingMux">
      <summary>
            Alternating multiplexer measurement.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.CellOnAfterMeasurement">
      <summary>
            Turn on cell after measurement is finished.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseStirrer">
      <summary>
            Enable the stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PulsedAmpDetectionPulse">
      <summary>
             Option
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMin">
      <summary>
            Use a minimum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMax">
      <summary>
            Use a maximum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.IsPartOfMixedMeasurement">
      <summary>
            Instrument does not go in to idle mode after measurement finished
            used for multistep amp and pot
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnEquil">
      <summary>
            Whether to set a digital trigger at the start of the equilibration period
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnStart">
      <summary>
            Whether to set a digital trigger at the start of the measurment (after equilibration)
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnDelay">
      <summary>
            Whether to set a digital trigger after a certain delay after the start of the measurment
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetDelay(System.String,System.Double)">
      <summary>
            Set delay
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetTimeCon(System.String,System.Single)">
      <summary>
            Set time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetTimeCon(System.String,System.Single)">
      <summary>
            Get time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt8(System.String,System.Byte)">
      <summary>
            Set 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt8(System.String,System.Byte)">
      <summary>
            Get 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt16(System.String,System.UInt16)">
      <summary>
            Encode a 16-bits integer
            </summary>
      <param name="name">name</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt16(System.String,System.UInt16)">
      <summary>
            Get 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt32(System.String,System.UInt32)">
      <summary>
            Set 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">byte</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt32(System.String,System.UInt32)">
      <summary>
            Get 4-byte integer parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" found if set to <c>true</c>.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalogDiff(System.String,System.Single)">
      <summary>
            Set analog bipolar value
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.ToString">
      <summary>
            Convert to string. Will reurn a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetOverrides(System.String)">
      <summary>
            Sets the overrides to be appended to the method blob.
            </summary>
      <param name="overrides">The overrides.</param>
    </member>
    <member name="T:PalmSens.CoreSettings">
      <summary>
            Core settings that can be set from outside the core.
            </summary>
    </member>
    <member name="F:PalmSens.CoreSettings.EntryAssembly">
      <summary>
            The entry assembly, ignored if null
            </summary>
    </member>
    <member name="T:PalmSens.PSThread">
      <summary>
            Wrapper for Thread class. Init() should be called before use.
            </summary>
    </member>
    <member name="T:PalmSens.PSThread.ThreadPriorities">
      <summary>
            Emulates the ThreadPriorities enum.
            </summary>
    </member>
    <member name="T:PalmSens.MeasType">
      <summary>
            The measurement type
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.New">
      <summary>
            New measurement
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Overlay">
      <summary>
            Overlay
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Blank">
      <summary>
            Blank
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Sample">
      <summary>
            Sample (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_1">
      <summary>
            Standard1 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_2">
      <summary>
            Standard2 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_3">
      <summary>
            Standard3 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_4">
      <summary>
            Standard4 (determination)
            </summary>
    </member>
    <member name="T:PalmSens.Measurement">
      <summary>The measurement class contains all classes, functions and parameters necessary for performing 
            a measurement. A measurement class can contain one method and multiple curves or impedance data. 
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor">
      <summary>
            Create new empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor(PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Measurement" /> class.
            </summary>
      <param name="m">The method.</param>
    </member>
    <member name="T:PalmSens.Measurement.SingleCurveChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="T:PalmSens.Measurement.CurveCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.CurvesAdded">
      <summary>This event is triggered when one or more Curves are added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.CurveRemoved">
      <summary>This event is triggered when a Curve is removed from the Measurement class.</summary>
    </member>
    <member name="T:PalmSens.Measurement.EISDataCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataAdded">
      <summary>This event is triggered when EISdata is added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataRemoved">
      <summary>This event is triggered when EISdata is removed from the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Pretreating">
      <summary>
            Raised when pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.PretreatmentStarted">
      <summary>
            Indicates pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.MeasuringStarted">
      <summary>
            Indicates the measurement is started.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Measuring">
      <summary>
            Raised when the measurement is activated.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.TitleChanged">
      <summary>
            Occurs when the Title has changed
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.SavedToFileChanged">
      <summary>
            Occurs when the measurement's data (DataSet) was saved to a file.
            Each Curve and EISData have their own <C>SavedToFile</C> bool.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.TimeStamp">
      <summary>
            Gets or sets the date and time of the start of this measurement.
            For old version data files (.pss, .pst, .mux) this is the creation date and time of the file.
            </summary>
      <value>
            The time stamp.
            </value>
    </member>
    <member name="F:PalmSens.Measurement.Channel">
      <summary>
            Gets or sets the channel.
            </summary>
      <value>
            The channel of a measurement in simultaneaous mode.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Method">
      <summary>Defines the Method related with this Measurement. The information from the Method is used when saving Curves.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ContainsBlank">
      <summary>
            Determines whether this instance contains the Blank curve for Blank subtraction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Measurement.SavedToFilePath">
      <summary>
            The filepath where this Measurement is saved to.
            This value is set when saving and loading this Measurement to a Session file.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.Int32)">
      <summary>
            curve with specified index
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurvesSilent">
      <summary>Removes all Curve classes from Measurement without raising CurveRemoved event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurves">
      <summary>Removes all Curve classes from Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllPeaks">
      <summary>Clear peaks for each curve in Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllLevels">
      <summary>Clear levels for each curve in Measurement.</summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(PalmSens.MeasType)">
      <summary>
            Curve with specified AnalysisType
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.String)">
      <summary>
            Curve with specified name
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurve(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection. Without raising CurveRemoved</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection without raising NewCurve event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurve(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurves(PalmSens.Plottables.Curve[])">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.SortCurves">
      <summary>
            Sorts the curves based on ChannelIndex.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.nCurves">
      <summary>Returns the number of curves that are part of the Measurement class.</summary>
    </member>
    <member name="P:PalmSens.Measurement.nEISdata">
      <summary>Returns the number of EISdata curves that are part of the Measurement class.</summary>
    </member>
    <member name="M:PalmSens.Measurement.GetCurveArray">
      <summary>
            Obtain the curves in this measurement as an array.
            </summary>
      <returns>array of curves</returns>
    </member>
    <member name="M:PalmSens.Measurement.GetEISDataArray">
      <summary>
            Obtain the EIS data in this measurement as an array.
            </summary>
      <returns>array of EIS data</returns>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaks(System.Boolean)">
      <summary>
            Find the peaks for each curve in this measurement
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.ContainsBlankSubtractedCurves">
      <summary>
            Gets a value indicating whether the curve collection contains a blank subtracted curve.
            </summary>
      <value>
        <c>true</c> if [contains blank subtracted curves]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Visible">
      <summary>
            Gets or sets a value indicating whether the curves in this <see cref="T:PalmSens.Measurement" /> are visible in the Plot.
            </summary>
      <value>
        <c>true</c> if the owned curves are visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Measurement should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyte(System.Int32)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesAllCurves(System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesSingleCurve(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyteSingleCurve(System.Int32,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.SetManualPeakForAnalyte(System.Int32,PalmSens.Plottables.Curve)">
      <summary>
            Sets the manual peak for analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
    </member>
    <member name="P:PalmSens.Measurement.ContainsEISdata">
      <summary>
            Gets a value indicating whether EIS data is available
            </summary>
      <value>
        <c>true</c> if [contains EIS data]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.EISdata">
      <summary>
            Gets or sets the EIS data.
            </summary>
      <value>
            The EISdata collection.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Title">
      <summary>
            Gets the title.
            </summary>
      <value>
            The title as shown in the Legend.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.BlankCurve">
      <summary>
            Gets or sets the Blank curve.
            if Blank curve is present (not null) a new curve will be added after each measurement containing
            the result of the measured curve subtracted with the Blank curve.
            </summary>
      <value>
            The Blank curve.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.AddEISdata(PalmSens.Plottables.EISData)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdata(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdataSilent(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the string "Measurement"</returns>
    </member>
    <member name="M:PalmSens.Measurement.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Method">
      <summary>
            Describes a PalmSens measurement method
            </summary>
      <remarks>
            Can be types ScanMethod (measure vs potential) or TimeMethod (measure vs time).
            To load and save methodfiles use the ScanMethodFile or TimeMethodFile class.
            </remarks>
    </member>
    <member name="M:PalmSens.Method.#ctor(System.Int32)">
      <summary>
            Create a new method
            </summary>
      <param name="technique">technique number for this method</param>
    </member>
    <member name="M:PalmSens.Method.GetHashCode">
      <summary>
            Not used; warning supressor only
            </summary>
      <returns>Hash</returns>
    </member>
    <member name="M:PalmSens.Method.Equals(System.Object)">
      <summary>
            Check whether this object is equal to another.
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects are equal, false otherwise</returns>
    </member>
    <member name="T:PalmSens.Method.InvalidPowerFreqException">
      <summary>
            Invalid Power FixedFrequency set
            </summary>
    </member>
    <member name="T:PalmSens.Method.InvalidEBiPotOffsetException">
      <summary>
            Create a new instance.
            </summary>
    </member>
    <member name="F:PalmSens.Method.MethodIsGalvanostatic">
      <summary>
            Method is a Galvanostatic measurement (read potential, drive current), 
            False if Potentiostatic
            </summary>
    </member>
    <member name="P:PalmSens.Method.MethodFilename">
      <summary>
            The filepath used with this method, including path and extension
            </summary>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeOffset">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="P:PalmSens.Method.PowerFreq">
      <summary>The frequency of the local powersupply in Hz. The default value is '50'.</summary>
    </member>
    <member name="M:PalmSens.Method.ToShortString">
      <summary>
            Returns the abbreviation of the technique.
            </summary>
      <returns>e.g. Amperometric Detection returns "AD"</returns>
    </member>
    <member name="M:PalmSens.Method.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Method.Technique">
      <summary>
            The technique number used in the firmware
            </summary>
    </member>
    <member name="P:PalmSens.Method.Notes">
      <summary>Some user notes for use with this method.</summary>
    </member>
    <member name="F:PalmSens.Method.UseStirrer">
      <summary>True if a stirrer is being used.</summary>
    </member>
    <member name="P:PalmSens.Method.Ranging">
      <summary>
            Ranging information
            </summary>
    </member>
    <member name="F:PalmSens.Method.SmoothLevel">
      <summary>The smoothlevel to be used.
            <list type="bullet"><item><description>-1 = none</description></item><item><description>0 = no smooth (spike rejection only)</description></item><item><description>1 = 5 points</description></item><item><description>2 = 9 points</description></item><item><description>3 = 15 points</description></item><item><description>4 = 25 points</description></item></list></summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakHeight">
      <summary>Determines the minimum peak height in uA. Peaks lower than this value are neglected.</summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakWidth">
      <summary>Determines the minimum peak width in V or s. Peaks width a lower width may not be detected.</summary>
    </member>
    <member name="F:PalmSens.Method.PeakOverlap">
      <summary>Is used when two peaks are very close to each other. If the peak separation
            is less than the specified value, a single baseline is used for the two overlapping peaks.
            If each peak should have its own baseline, specify a value of 0.</summary>
    </member>
    <member name="P:PalmSens.Method.PeakWindow">
      <summary>Is used to identify which component corresponds to which peak. Peaks must be within the peak window.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewLeft">
      <summary>The lowest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewRight">
      <summary>The highest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewBottom">
      <summary>The lowest value on the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewTop">
      <summary>The highest value on the Y axis of the plot.</summary>
    </member>
    <member name="P:PalmSens.Method.ConcentrationUnit">
      <summary>The label for the unit of the analyte's concentration. This value is not used for calculations.</summary>
    </member>
    <member name="F:PalmSens.Method.DefaultXAxis">
      <summary>
            Default data array index for X axis when using this method.
            </summary>
    </member>
    <member name="F:PalmSens.Method.DefaultYAxis">
      <summary>
            Default data array index for Y axis when using this method.
            </summary>
    </member>
    <member name="P:PalmSens.Method.DefaultXUnit">
      <summary>
            Gets the default unit used for the X axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.DefaultYUnit">
      <summary>
            Gets the default unit used for the Y axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.XLeft">
      <summary>
            Default left X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XRight">
      <summary>
            Default right X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YBottom">
      <summary>
            Default bottom Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YTop">
      <summary>
            Default top Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XDirection">
      <summary>
            X direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.RecordExtraValue">
      <summary>Auxiliary channel to record</summary>
    </member>
    <member name="P:PalmSens.Method.RecordAuxInputIsUsed">
      <summary>
            Gets a value indicating whether the auxiliary channel of the device is used
            RecordAux == AuxInput
            </summary>
      <value>
        <c>true</c> if [record aux is used]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Method.RecordCE">
      <summary>
            Gets a value indicating whether the CE potential is recorded
            </summary>
      <value>
        <c>true</c> if [record CE is recorded]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Method.HasValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Determines whether has validation errors for the specified devic capabilities.
            Only fatal errors as in <c>MethodError.IsFatal = TRUE</c> are taken into account
            </summary>
      <param name="c">The capabilities.</param>
      <returns>
        <c>true</c> if [has validation errors] [the specified capabilities]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Method.ValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns a string with fatal validation errors
            </summary>
      <param name="c">The capabilities.</param>
      <returns>String with fatal validation errors</returns>
    </member>
    <member name="M:PalmSens.Method.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            <list type="bullet"><item><description>supported mux channels</description></item><item><description>supported ranges for auto ranging (1 mA and 10 mA not supported by EmStat1)</description></item></list></summary>
      <param name="capab">The device capabilities.</param>
    </member>
    <member name="P:PalmSens.Method.PowerLinePeriod">
      <summary>
            Power Line Period (1/PowerFreq)
            </summary>
    </member>
    <member name="P:PalmSens.Method.SupportsCorrosion">
      <summary>Is true if the method can be used for corrosion measurements.</summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningPotential">
      <summary>
            Conditioning potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningTime">
      <summary>
            Conditioning duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionPotential">
      <summary>
            Deposition potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionTime">
      <summary>
            Deposition duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.EquilibrationTime">
      <summary>
            Equilibration duration in seconds 
            BeginPotential is applied during equilibration
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyTime">
      <summary>
            Standby time (for use with cell on after measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Method.BeginPotential">
      <summary>
            Begin potential (also set  equilibration)
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyPotential">
      <summary>
            Stand by Potential
            </summary>
    </member>
    <member name="P:PalmSens.Method.CellOnAfterMeasurement">
      <summary>
            Enable/disable cell after measurement
            </summary>
    </member>
    <member name="P:PalmSens.Method.PretreatmentDuration">
      <summary>
            Estimated number of seconds the pretreatment phase will take.
            </summary>
    </member>
    <member name="P:PalmSens.Method.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least in seconds (not multiplied by multiplexer cycles)</summary>
    </member>
    <member name="P:PalmSens.Method.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take multiplied with n multiplexer channels (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Method.MultiplexCycles">
      <summary>
            Gets the number of selected multiplexer cycles.
            </summary>
      <value>The number of multiplexer cycles.</value>
    </member>
    <member name="F:PalmSens.Method.UseMuxChannel">
      <summary>Specifies channels used for this method.</summary>
    </member>
    <member name="P:PalmSens.Method.MaxMuxChannelSelected">
      <summary>
            Return the maximum mux channel selected.
            </summary>
    </member>
    <member name="P:PalmSens.Method.PolyStatMode">
      <summary>Specifies the mode for WEn. This is a copied value from PolyEmStatEx.PolyStatMode[i], used for converting values on receiving in ParseMeasurePackage</summary>
    </member>
    <member name="T:PalmSens.Method.EnumPalmSensBipotMode">
      <summary>
            BiPot mode for PalmSens Bipot boards
            Currently only supported by PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.Method.BiPotPotential">
      <summary>Specifies the potential for WEn.</summary>
    </member>
    <member name="F:PalmSens.Method.BiPotCR">
      <summary>Specifies the current range for WE2.</summary>
    </member>
    <member name="P:PalmSens.Method.BipotModePS">
      <summary>
            Gets or sets the bipot mode.
            Only applicable for PalmSens3 with Bipot and Auxiliary input set on Bipot
            </summary>
      <value>
            The bipot mode for a PalmSens3 with BiPot
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use MinValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MinValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use MaxValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MaxValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMinValue.
            </summary>
      <value>
        <c>true</c> if use LimitMinValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMaxValue.
            </summary>
      <value>
        <c>true</c> if use LimitMaxValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SaveOnDevice">
      <summary>
            Determines whether the method and measurement data are saved locally on the device (if possible).
            </summary>
    </member>
    <member name="M:PalmSens.Method.GetPointsPerSecond(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the points per second. If deviceCapabilities is null than this may be an approximation because the Real E step cannot be calculated (in the  case of a potential method).
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnEquil">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration starts..
            Digital output will be set LOW again as soon as equilibration ends and measurement is starts.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnEquil">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnEquil on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnDelay">
      <summary>
            Only used when <c>UseTriggerOnDelay = true</c>
            UseTriggerOnDelay can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as delay time has passed after the start of the measurement.
            Use value TriggerDelay to set the delay. This will be calculated to an integer value (index) used during the measurement.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on the delay.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnDelay">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerDelayPeriod">
      <summary>
            Gets or sets the delay trigger if <c>UseTriggerOnDelay == true</c> 
            This value is calculated to an index in the measurement. Therefore TriggerDelay can be any values as an integer multiplication of the interval time.
            </summary>
      <value>
            The delay in seconds after start of the measurement.
            </value>
    </member>
    <member name="M:PalmSens.Method.ToHex(System.Int32,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Function for generating hex blob
            </summary>
      <param name="rev">blob format revision</param>
      <param name="capabilities">The capabilities.</param>
      <returns>
            destination blob
            </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="F:PalmSens.Method.fileNameCnt">
      <summary>
            The amouhnt of filenames that have been sent to the device, this is used to make filenames uniques in case multiple are sent in the same second.
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.Method.PGAGAINBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.FILTERBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.OPTIONSINT">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="M:PalmSens.Method.AdjustMeasurementTime(System.Single@,PalmSens.EncodedMethodV0)">
      <summary>
            Adjust measurement time for power frequency and store in blob
            </summary>
      <param name="tmeas">measurement time</param>
      <param name="m">hex blob</param>
    </member>
    <member name="M:PalmSens.Method.SetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetNextSelectedMuxChannel(System.Int32)">
      <summary>
            Gets the next selected mux channel in UseMuxChannel.
            If iLastChannel = -1, the first selected channel is returned
            </summary>
      <param name="iLastChannel">The i last channel (0-nChannels). Or -1 if there is no next.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.OCPmode">
      <summary>
            Used with corrosion and impedance measurements only
            Bitwise three options so value is 0 ~ 8 (2^3)
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPUseIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether the indexed potential parameter should be used for OCP
            </summary>
    </member>
    <member name="P:PalmSens.Method.nOCPparameters">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a the number of vs OCP parameters available
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetLabelIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the name of the indexed vs OCP parameters
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPSetEValue(System.Int32,System.Single)">
      <summary>
            Used with corrosion and impedance measurements only
            Sets the indexed OCP parameter
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetEValue(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the indexed OCP parameter
            </summary>
    </member>
    <member name="P:PalmSens.Method.IsVersusOCP">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether OCP is used (OCPmode &gt; 0)
            </summary>
      <value>
        <c>true</c> if [use OCP]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.OCPMaxOCPTime">
      <summary>
            Used with corrosion and impedance measurements only
            Max. EOC time (1 – 30000 s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.OCPStabilityCriterion">
      <summary>
            Used with corrosion and impedance measurements only
            Stability Criterion (range 0.001 – 1000 mV/s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.Ba">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Ba in V/dec
            </summary>
    </member>
    <member name="P:PalmSens.Method.Bc">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Bc in V/dec 
            </summary>
    </member>
    <member name="P:PalmSens.Method.Weight">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Weight in gr
            </summary>
    </member>
    <member name="P:PalmSens.Method.Area">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Area in cm2
            </summary>
    </member>
    <member name="P:PalmSens.Method.Density">
      <summary>
            Material property for corrosion 
            Used with corrosion measurements only
            Density in gr/cm3
            </summary>
    </member>
    <member name="P:PalmSens.Method.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="F:PalmSens.Method.PolyEmStat">
      <summary>
            Method extension for PolyEmStat, containing calibration and bipot values
            </summary>
    </member>
    <member name="M:PalmSens.Method.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Method.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.Deserialize(System.String)">
      <summary>
            Deserializes the contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Method.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="M:PalmSens.Method.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Generate a receive measurement event
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Method.FromMethodID(System.String)">
      <summary>
            Creates a Mehtod class from [method].GetMethodID()
            </summary>
      <param name="name">The unique ID.</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">Unknown technique name: " + name</exception>
    </member>
    <member name="F:PalmSens.Method.MethodIds">
      <summary>
            A list with all available MethodID's
            </summary>
    </member>
    <member name="T:PalmSens.Method.TechniqueIds">
      <summary>
            Technique identifiers for each technique
            </summary>
    </member>
    <member name="M:PalmSens.Method.FromTechniqueNumber(System.Int32)">
      <summary>
            Create a new method by technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) method</returns>
    </member>
    <member name="M:PalmSens.Method.CopyMethod(PalmSens.Method,PalmSens.Method@)">
      <summary>
            Copies all overlapping parameters from the source method to the destination method.
            If Destination Method is null, a clone will be returned.
            </summary>
      <param name="mSource">The source Method.</param>
      <param name="mDestination">The destination Method.</param>
    </member>
    <member name="M:PalmSens.Method.ResetView">
      <summary>
            Resets the X axis view settings used by Plot.
            Effect is that setting this method to Plot makes Plot automatically reset Axis settings based on method.
            </summary>
    </member>
    <member name="M:PalmSens.Method.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
    </member>
    <member name="T:PalmSens.INPointsMethod">
      <summary>
            Method for which the number of points can be predicted.
            </summary>
    </member>
    <member name="P:PalmSens.INPointsMethod.nPoints">
      <summary>Returns the expected number of measured points to be returned.</summary>
    </member>
    <member name="T:PalmSens.MuxMethod">
      <summary>
            Type of mux measurement
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Sequentially">
      <summary>
            Sequential - complete curve after complete curve
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Alternatingly">
      <summary>
            Alternatingly - measure one point for each curve then go to the next
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.None">
      <summary>
            No multiplexer
            </summary>
    </member>
    <member name="T:PalmSens.Auxiliary">
      <summary>
            Helper functions for Auxiliary input
            </summary>
    </member>
    <member name="M:PalmSens.Auxiliary.GetUnit(PalmSens.EnumExtraValue)">
      <summary>
            Returns the Unit corresponding to the Auxiliary Channel
            </summary>
      <param name="extraValueType">Type of the channel.</param>
      <returns>The corresponding unit</returns>
    </member>
    <member name="T:PalmSens.Plottables.Blank">
      <summary>
            The Blank curve used for Blank subtraction
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Blank.UseBlank">
      <summary>
            Whether or not use the available Blank for subtraction after measurement
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveDirection">
      <summary>
            Indicates the 
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Ascending">
      <summary>
            Ascending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Descending">
      <summary>
            Descending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Unspecified">
      <summary>
            Direction unspecified. 
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.AxisFunction">
      <summary>
            Used to get converted Y values
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Normal">
      <summary>
            Original Y value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Derivative">
      <summary>
            Derivative of value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Log">
      <summary>
            Math.Log10 of value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve">
      <summary>
            This class contains X and Y data of a single curve that can be plotted.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Used when loading from file
            </summary>
      <param name="bag">The bag.</param>
      <param name="coreVersion">The core version.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Data.DataArray,PalmSens.Data.DataArray,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Default title = "Curve"
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Create a new Curve based on an existing Curve with same type of DataArrays for X and Y, Title and MeasType
            </summary>
      <param name="curve">The Curve.</param>
      <param name="cloneData">if set to <c>true</c> clones the contents of the X and Y DataArrays.</param>
    </member>
    <member name="E:PalmSens.Plottables.Curve.MeasTypeChanged">
      <summary>
            Occurs when [meas type changed].
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.Curve.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the curve class.
            Use of this event is Threadsafe if PointsAddedFromOtherThread = True
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ToString">
      <summary>Returns title of this Curve.</summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForChannel(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="channel">The channel starting at 0.</param>
      <returns>Channel #, where #=<para>channel</para>+1</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForScan(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="scan">The CV scan starting at 1.</param>
      <returns>Scan #, where #=<para>scan</para></returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodePotential">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XOffset">
      <summary>
            Gets or sets the offset used on the X axis.
            This is generaly [ReferenceElectrodePotential] - [RE potential used as reference in Plot]
            </summary>
      <value>
            The x offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="F:PalmSens.Plottables.Curve.OCPValue">
      <summary>
            Contains the measured Eoc value for this curve. Used for corrosion measurements
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.ErrorMessage">
      <summary>
            An error that occured during measurement (used by StatusBar)
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MeasType">
      <summary>
            Gets or sets the type of the measurement is associated with this curve.
            </summary>
      <value>
            The type of the measurement.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxisDataArray">
      <summary>
            Gets the X axis data array.
            </summary>
      <value>
            The X axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxisDataArray">
      <summary>
            Gets the Y axis data array.
            </summary>
      <value>
            The Y axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ZAxisDataValue">
      <summary>
            Gets the value for the Z axis
            </summary>
      <value>
            The Z axis value
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNUnderloads">
      <summary>
            Gets the current underloads count from the YAxisDataArray.
            </summary>
      <returns>number of underloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNOverloads">
      <summary>
            Gets the current overloads count from the YAxisDataArray.
            </summary>
      <returns>number of overloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXValue(System.Int32)">
      <summary>
            Returns the X value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetYValue(System.Int32)">
      <summary>
            Returns the Y value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedXValue(System.Int32)">
      <summary>
            Gets the formatted x value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedYValue(System.Int32)">
      <summary>
            Gets the formatted y value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXDirection">
      <summary>
            The direction of the data at the specified axis
            determined using the first two points of the array
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetDirection(PalmSens.Data.EnumAxes,System.Int32)">
      <summary>
            The direction of the data at the specified axis for the specified index.
            Compares difference between index and index+1.
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxX">
      <summary>Maximum X value</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxY">
      <summary>Maximum Y value found in this Curve. 
            If nPoints&gt;10 first 2 points are disregarded when determining MaxY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinX">
      <summary>Minimum X value found in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinY">
      <summary>Minimum Y value found in this Curve.
            If nPoints&gt;10 first 2 points are disregarded when determining MinY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.NPoints">
      <summary>Returns number of points in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.Peaks">
      <summary>
            List of peaks found in this curve.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionButlerVolmer">
      <summary>
            Gets the results of a manual corrosion butler volmer fit.
            </summary>
      <value>
            Indices for the manual butler volmer fit.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionTafel">
      <summary>
            Gets the results of a manual corrosion tafel fit.
            </summary>
      <value>
            Indices for the manual corrosion tafel fit.
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetVertexIndicesForCV">
      <summary>
                Returns two indices: Evtx1 and Evtx2 of a Cyclic Voltammetry scan
            </summary>
      <returns>
                2 value array containing the indices for Evtx1 and Evtx2.
                In case of no direction switches (normal curve) both indices are equal to nPoints.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CorrectIndicesCV">
      <summary>
            Corrects the XDataArray and YDataArray
            In case a CV curve has the begin potential in between a vtx1 and vtx2 there are two loose ascending or descending
            parts in the curve, which makes it difficult to de operations on them. This function re-indexes the curve so that there is only 1 index where the direction changes.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.HasMultipleDirections">
      <summary>
            Gets a value indicating whether the data in this instance has multiple directions (Cyclic Voltammetry)
            </summary>
      <value>
        <c>true</c> if this instance has multiple directions; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumXAxis">
      <summary>
            Used for selecting the X axis to plot against
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumYAxis">
      <summary>
            Used for selecting the Y axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxis">
      <summary>
            X Axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxis">
      <summary>
            Y Axis to plot against
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.SetYAxisFunction(PalmSens.Plottables.AxisFunction)">
      <summary>
            Sets a math function on the left Y axis
            </summary>
      <param name="axisFunction">The axes function.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindPeaks(System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks in a curve in all directions; CV can have 1 or 2 direction changes
            </summary>
      <param name="minPeakWidth">Minimum width of the peak in V.</param>
      <param name="minPeakHeight">Minimum height of the peak in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearPeaks">
      <summary>
            Removes all found peaks for this curve.
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.Levels">
      <summary>
            List of levels found in this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindLevels(System.Single,System.Single)">
      <summary>
            Finds the levels.
            </summary>
      <param name="minWidth">The minimum level width in V or s.</param>
      <param name="minHeight">The minimum level height in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearLevels">
      <summary>
            Removes all found levels for this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestX(System.Double)">
      <summary>
            Find the index of the X point nearest to p
            Not suitable for CV since there are two values for each x
            </summary>
      <param name="x">x to look for</param>
      <returns>index nearest to x, or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double)">
      <summary>
            Find the index closest to the given x and current
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <returns>
            index nearest to x,current or 0 if there were no X points yet
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index closest to the given x and current in a given range
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <param name="iStart">Beginning of range.</param>
      <param name="iEnd">End of range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestXCV(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index of the X point nearest to p between a minimum and maximum index
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for</param>
      <param name="iMin">minimum index</param>
      <param name="iMax">maximum index</param>
      <returns>index nearest to x,current or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CalculateSlope(System.Int32,System.Int32)">
      <summary>
            Calculate the slope between two points
            </summary>
      <param name="f">first index</param>
      <param name="t">second index</param>
      <returns>calculated slope</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve
            current = a + b * x
            </summary>
      <param name="a">offset</param>
      <param name="b">slope</param>
      <param name="corr">Correlation Coefficient</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve between two indexes
            current = offset + slope * x
            </summary>
      <param name="offset">offset</param>
      <param name="slope">slope</param>
      <param name="CoefDet">Coefficient of determination (R2)</param>
      <param name="from">begin index</param>
      <param name="to">end index</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Finish">
      <summary>
            Finishes the curve. This stops from raising the NewDataAdded event.
            This is automatically called at the end of a measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Empty">
      <summary>
            Returns an empty Curve
            </summary>
      <returns>an empty Curve</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionStart">
      <summary>
            Gets or sets the first index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection start.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionEnd">
      <summary>
            Gets or sets the last index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection end.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventHandler">
      <summary>
            Delegate that receives Curves.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISDataEventHandler">
      <summary>
            Delegate that receives EISData.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventArgs">
      <summary>
            Curve Events
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create new instance.
            </summary>
      <param name="c">curve that was touched</param>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.GetCurve">
      <summary>
            Obtain the curve that was received
            </summary>
      <returns>Curve</returns>
    </member>
    <member name="T:PalmSens.Plottables.EISPlotModes">
      <summary>
            The available plot options
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZZvsX">
      <summary>
            ZZ vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZPhasevsLogF">
      <summary>
            Z and Phase vs FixedFrequency
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZPhasevsX">
      <summary>
            Z and Phase vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.RctvsX">
      <summary>
            RCT vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZvsZ">
      <summary>
            Z' vs Z''
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZvsLogF">
      <summary>
            Log(|Z|) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsY">
      <summary>
            Y'' vs Y'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsLogF">
      <summary>
            Y'/Y'' vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogYvsLogF">
      <summary>
            Log(Y) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsX">
      <summary>
            Y' and Y'' vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsX">
      <summary>
            Y vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.CsImvsCsRe">
      <summary>
            C'' vs C'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISDataSubScan.ParentEISData">
      <summary>
            The parent EISData owning this EISDataSubScan
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISDataSubScan.NFrequencies">
      <summary>
            Gets the number of frequencies in this sub scan
            </summary>
      <value>
            The number of frequencies.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData">
      <summary>
            Contains all data as result of an Impedance measurement. In case of multiple frequency scans versus time or potential,
            all data can be obtained using EISData.GetValue(). 
            Seperate frequency scan can be obtained using GetSubScans().
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.#ctor(PalmSens.Techniques.ImpedimetricMethod.enumScanType,PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType,System.Collections.Generic.List{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.EISData" /> class.
            </summary>
      <param name="scanType">Type of the scan.</param>
      <param name="freqType">Type of the freq. Set to 'fixed' if unknown at beforehand. AddRow() will change FreqType if a different frequency is added.</param>
      <param name="frequencies">The frequencies used in case freqType == FreqScan.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToJsonBag">
      <summary>
            Saves EISData to a Json bag.
            </summary>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "T:PalmSens.Plottables.EISData.NewFreqScanAddedEventHandler" -->
    <member name="E:PalmSens.Plottables.EISData.NewSubScanAdded">
      <summary>
            Event is triggered when a new frequency scan is added.
            An EISData can contain multiple scans if FreqScan is measured vs Time or E
            These frequency scans are listed in FreqScans.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventHandler">
      <summary>
            Delegate for the NewDataEventHandler Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.EISData.NewDataAdded">
      <summary>Occurs when new data is added to the EISData</summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.OnNewDataAdded(System.Int32)">
      <summary>
            Raises the <see cref="E:NewDataAdded" /> event.
            </summary>
      <param name="index">The iFreq.</param>
    </member>
    <member name="P:PalmSens.Plottables.EISData.ScanType">
      <summary>
            Gets or sets the type of the scan.
            Can be vs time or vs potential
            </summary>
      <value>The type of the scan.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FreqType">
      <summary>
            Gets or sets the type of the frequency mode.
            Can be scan or fixed
            </summary>
      <value>The type of the frequency mode.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.HasSubScans">
      <summary>
            Gets a value indicating whether this instance has sub frequency scans.
            This is only the case if a frequency scan is combined with a time or potential scan
            </summary>
      <value>
        <c>true</c> if this instance has sub scans; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FrequencyCurves">
      <summary>
            This dictionary contains one or two curves for each frequency.
            Used when plotting vs X.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.NPoints">
      <summary>
            The total number of dataPoints (rows in DataSet) in this EISData
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.EISDataSet">
      <summary>
            Gets the EIS DataSet.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.DebugValueType">
      <summary>
            Value types used for debugging and calibration only
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.nPointsAC">
      <summary>
            The number of points in the sinewave applied and measured
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.realtintac">
      <summary>
            The realtintac. Used for calibration of PS3 firmware overhead causing phasedelay
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.EISValueType">
      <summary>
            Used for returning min and max values for X or Y axis
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Logf">
      <summary>Log(F) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Edc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Time">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Idc">
      <summary>E values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Iac">
      <summary>I ac values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZIm">
      <summary>-Z'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.MinPhase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Rct">
      <summary>RCT values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogY">
      <summary>E or t values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsRe">
      <summary>CsRe values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsIm">
      <summary>CsIm values</summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.CDC">
      <summary>
            Gets or sets the CDC circuit for fitting.
            </summary>
      <value>
            The circuit.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventArgs">
      <summary>
            Event arguments for the new data event
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.EISData">
      <summary>
            The EISData associated with the new added point
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.Index">
      <summary>
            The iFreq of the datapoint
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewFreqScanEventArgs">
      <summary>
            Event arguments for the NewSubScanAdded event
            </summary>
      <seealso cref="T:System.EventArgs" />
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewFreqScanEventArgs.AddedScan">
      <summary>
            The new frequency scan added
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.XUnit">
      <summary>
            The XUnit corresponding with the AxesType
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GenerateCurves(PalmSens.Plottables.EISPlotModes,System.Boolean)">
      <summary>
            Gets the curves.
            </summary>
      <param name="plotMode">The plot mode.</param>
      <param name="onlyIfExists">if set to <c>true</c> do not generate the curves</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">plotMode - null</exception>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetFreqScanSelectedSeries(System.Int32)">
      <summary>
            Returns the EIS data belonging only to the scan of which the selected point is part of.
            This is useful for exporting to third party software for EIS fitting in case multiple frequency scans were done vs time or E.
            </summary>
      <param name="index">The iFreq.</param>
      <returns>EISData series containing only one frequency scan</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetSubScans">
      <summary>
            Gets the data splitted up in multiple EISData's for each frequency scan.
            If the frequency was fixed only one EISData is returned containing all values of the time or potential scan
            </summary>
      <returns>One or more EISData's</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetAllEISDatas">
      <summary>
            If this EISData has SubScans this function returns all sub frequency scans as EISData objects, similar to GetSubScans()
            If this EISData is measured at a fixed frequency or at a fixed potential it will only return the a single EISData object
            </summary>
      <returns>one or more EISData objects</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.AddRow(System.Int32,System.Double,PalmSens.Data.VoltageReading,System.Double,PalmSens.Data.CurrentReading,PalmSens.Data.CurrentReading,System.Double,System.Double,System.Double)">
      <summary>
            Adds the row to the DataSet.
            </summary>
      <param name="seriesStartTime">The series start time.</param>
      <param name="edc">The edc.</param>
      <param name="frequency">The frequency.</param>
      <param name="idc">The iDC.</param>
      <param name="iac">The iAC.</param>
      <param name="zRe">The ZRe.</param>
      <param name="zIm">The Zim.</param>
      <param name="phase">The phase.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.Title">
      <summary>
            The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.VisualSettingsChanged">
      <summary>
      </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.ColorChanged">
      <summary>
            Occurs when plot color changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.#ctor(PalmSens.Plottables.VisualSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.VisualSettings" /> class.
            Sets UseDefaultSettings to <c>false</c>.
            </summary>
      <param name="settings">The settings.</param>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.GetVisualSettingsFastDraw">
      <summary>
            Gets the best visual settings for fast drawing large curves.
            </summary>
      <returns>VisualSettings</returns>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.UseDefaultSettings">
      <summary>
            Gets or sets a value indicating whether the Plot Default setting should be used for this Curve when adding it to a Plot.
            If <c>true</c> the plot will assign a colour and set the default appearance settings
            This value returns false after the first time the curve is added to a Plot.
            </summary>
      <value>
        <c>true</c> if [use default settings]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.AutoAssignColor">
      <summary>
            If true the Plot will assign a colour automatically
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.Color">
      <summary>
            The color for this plottable as ARGB value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.VisualSettings.Symbol">
      <summary>
            The symbols available
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolType">
      <summary>
            Gets or sets the type of the symbol.
            </summary>
      <value>
            The type of the symbol.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolFill">
      <summary>
            The symbol fill
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolSize">
      <summary>
            The symbol size
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.LineWidth">
      <summary>
            Use a custom line width.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.HideCurveLine">
      <summary>
            If true, no line is drawn, only dots
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.CopyAppearance(PalmSens.Plottables.VisualSettings,System.Boolean,System.Boolean)">
      <summary>
            Clones the appearance except the color, unless specified.
            </summary>
      <param name="newSettings">The default curve settings.</param>
      <param name="includeColor">if set to <c>true</c> [include color].</param>
      <param name="includeSymbolType">if set to <c>true</c> [include symbol type].</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.ICalibrationMethod">
      <summary>
            Properties for methods that can be used with calibration.
            </summary>
    </member>
    <member name="M:PalmSens.ICalibrationMethod.CalculateSignal(PalmSens.Plottables.Curve)">
      <summary>
            Function that calculates the signal for a give Curve
            </summary>
      <param name="c">Curve to calculate derivative of</param>
      <returns>calculated signal</returns>
    </member>
    <member name="T:PalmSens.CalibrationCurve">
      <summary>
            Curve derived from calculations using Calibration measurement
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.#ctor(PalmSens.Units.Unit,PalmSens.Units.Unit,System.Single[],System.Single[])">
      <summary>
            Create a new Calibrationcurve
            </summary>
      <param name="signalUnit">SignalUnit</param>
      <param name="concentrationUnit">ConcentrationUnit</param>
      <param name="i">signals</param>
      <param name="conc">concentrations</param>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Offset">
      <summary>
            Offset of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Slope">
      <summary>
            Slope of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.CorrCoef">
      <summary>
            Correlation Coefficient
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(System.Single)">
      <summary>
            Calculate concentration corresponding to given signal
            </summary>
      <param name="i">signal to calculate for</param>
      <returns>concentration for specified signal</returns>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(PalmSens.ICalibrationMethod,PalmSens.Plottables.Curve)">
      <summary>
            Calculate concentration
            </summary>
      <param name="m">method to use</param>
      <param name="c">curve to calculate concentration for</param>
      <returns>concentration</returns>
    </member>
    <member name="T:PalmSens.CFALevelList">
      <summary>
            Describes a list of levels
            </summary>
    </member>
    <member name="T:PalmSens.CFALevelList.Level">
      <summary>
            Level information
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftX">
      <summary>
            X coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightX">
      <summary>
            X coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftY">
      <summary>
            Y coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightY">
      <summary>
            Y coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelX">
      <summary>
            X coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelY">
      <summary>
            Y coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.CFALevelList.nLevels">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.CFALevelList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="M:PalmSens.CFALevelList.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double)">
      <summary>
            Create a new levellist, looking for levels in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="pxmin">minimum level width</param>
      <param name="pymin">minimum level height</param>
    </member>
    <member name="M:PalmSens.CFALevelList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve">
      <summary>
            The sine curve returned during impedemetric measurements
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve.EnumSine">
      <summary>
            The sine function
            </summary>
    </member>
    <member name="M:PalmSens.SineCurve.GetPercentageOfResolution(System.Single)">
      <summary>
            Gets the percentage of resolution.
            </summary>
      <param name="maxDigital">The maximum digital value.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.SineCurve.Ymean">
      <summary>
            This is the mean of all Y's
            Value is in uA if current or V if voltage
            </summary>
    </member>
    <member name="T:PalmSens.Plottable">
      <summary>
            A generic plottable class
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.TitleChanged">
      <summary>
            Raised when the curves Title has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.VisibleChanged">
      <summary>
            Raised when the curves Visibility has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.SavedToFileChanged">
      <summary>
            Occurs when the plottable was saved to a file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.AppearanceChanged">
      <summary>
            Occurs when Visual Settings have changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnTitleChanged">
      <summary>
            Called when legend needs refreshment
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnVisibleChanged">
      <summary>
            Called when [visible changed].
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsInPlot">
      <summary>
            Gets or sets a value indicating whether this instance is in plot.
            This property is maintained by the plot if part of the Plot.CurveCollection
            This setting is not related to the Curve.Visible property.
            </summary>
      <value>
        <c>true</c> if this instance is in plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PalmSens.Plottables.Curve" /> is visible in the Plot.
            Raises VisibleChanged();
            </summary>
      <value>
        <c>true</c> if visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Plottable.SetVisibilityNoEvents(System.Boolean)">
      <summary>
            Sets the Visible property without raising OnVisibleChanged event.
            </summary>
      <param name="visible">if set to <c>true</c> [visible].</param>
    </member>
    <member name="P:PalmSens.Plottable.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Curve should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.SavedToFilePath">
      <summary>
            The filepath to which this plottable has been saved to.
            This value is set when saving and loading this plottable to a Session file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.Finished">
      <summary>
            Occurs when this curve is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.Title">
      <summary>The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.</summary>
    </member>
    <member name="P:PalmSens.Plottable.Error">
      <summary>Error(s) that occured during measurement.</summary>
    </member>
    <member name="M:PalmSens.Plottable.OnFinished">
      <summary>
            Called when this plottable is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsFinished">
      <summary>
            Gets a value indicating whether this plottable is still receiving data (<c>false</c>) or not (<c>true</c>)
            </summary>
      <value>
        <c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.MuxChannel">
      <summary>
            The corresponding MUX channel number with the curve starting at 0.
            Value is -1 for no MUX channel used.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx">
      <summary>
            Method extention for a PolyEmStat device
            </summary>
    </member>
    <member name="M:PalmSens.PolyEmStatMethodEx.SetEMode(System.Int32,PalmSens.PolyEmStatMethodEx.enumEMode)">
      <summary>
            Sets the potential mode for an additional WE channel.
            </summary>
      <param name="iChannel">The additional WE channel.</param>
      <param name="mode">The potential mode.</param>
      <value>
            The potential mode.
              </value>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.SelectedRange">
      <summary>
            The current range for the PolyEmStat BiPot channels
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.WEPotential">
      <summary>
            The potential (offset) for the PolyEmStat WE
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationValues">
      <summary>
            The calibration curve values for concentration determination
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.a">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.b">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.c">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="T:PalmSens.PotentialMethod">
      <summary>Contains all shared methodparameters of all measurement method classes for measurement vs. potential.</summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.#ctor(System.Int32)">
      <summary>
            Create a new potential method 
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.BeginPotential">
      <summary>Potential where scan starts. The applicable range of the potential depends on the device connected.
            Reflects start potential if CV.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.EndPotential">
      <summary>Potential in V where measurement stops (Except for CV).</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.StepPotential">
      <summary>Step potential in V.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="M:PalmSens.PotentialMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error message or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.PotentialMethod.nPoints">
      <summary>
            Number of points that will be measured with the current settings
            </summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealStepPotential(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real step potential based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
            The step potential as absolute value
            </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.PotentialMethod.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Annotations.CanBeNullAttribute">
      <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
      <example>
        <code>
            [CanBeNull] object Test() =&gt; null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotNullAttribute">
      <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
      <example>
        <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.ItemNotNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ItemCanBeNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitNotNullAttribute">
      <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.StringFormatMethodAttribute">
      <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
      <example>
        <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
      </example>
    </member>
    <member name="M:PalmSens.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
    </member>
    <member name="T:PalmSens.Annotations.ValueProviderAttribute">
      <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InvokerParameterNameAttribute">
      <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
      <example>
        <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotifyPropertyChangedInvocatorAttribute">
      <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
      <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
      <example>
        <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
    </member>
    <member name="T:PalmSens.Annotations.ContractAnnotationAttribute">
      <summary>
            Describes dependency between method input and output.
            </summary>
      <syntax>
        <p>Function Definition Table syntax:</p>
        <list>
          <item>FDT      ::= FDTRow [;FDTRow]*</item>
          <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
          <item>Input    ::= ParameterName: Value [, Input]*</item>
          <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
          <item>Value    ::= true | false | null | notnull | canbenull</item>
        </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br /><c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br /></syntax>
      <examples>
        <list>
          <item>
            <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
          </item>
          <item>
            <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
          </item>
        </list>
      </examples>
    </member>
    <member name="T:PalmSens.Annotations.LocalizationRequiredAttribute">
      <summary>
            Indicates that marked element should be localized or not.
            </summary>
      <example>
        <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.CannotApplyEqualityOperatorAttribute">
      <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
      <example>
        <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.BaseTypeRequiredAttribute">
      <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
      <example>
        <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.UsedImplicitlyAttribute">
      <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.MeansImplicitUseAttribute">
      <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Access">
      <summary>Only entity marked with attribute considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Assign">
      <summary>Indicates implicit assignment to a member.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
      <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
      <summary>Indicates implicit instantiation of a type.</summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitUseTargetFlags">
      <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:PalmSens.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:PalmSens.Annotations.UsedImplicitlyAttribute" />.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.Members">
      <summary>Members of entity marked with attribute are considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.WithMembers">
      <summary>Entity marked with attribute and all its members considered used.</summary>
    </member>
    <member name="T:PalmSens.Annotations.PublicAPIAttribute">
      <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InstantHandleAttribute">
      <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.PureAttribute">
      <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
      <example>
        <code>
            [Pure] int Multiply(int x, int y) =&gt; x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.MustUseReturnValueAttribute">
      <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ProvidesContextAttribute">
      <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
      <example>
        <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.PathReferenceAttribute">
      <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.SourceTemplateAttribute">
      <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
      <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:PalmSens.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
      <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code></example>
    </member>
    <member name="T:PalmSens.Annotations.MacroAttribute">
      <summary>
            Allows specifying a macro for a parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
      <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:PalmSens.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
      <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code></example>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Expression">
      <summary>
            Allows specifying a macro that will be executed for a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Editable">
      <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
      <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values &gt;= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>&gt;
        </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Target">
      <summary>
            Identifies the target parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:PalmSens.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcAreaAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcControllerAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcMasterAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcModelTypeAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcPartialViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcSuppressViewErrorAttribute">
      <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcDisplayTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcEditorTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionSelectorAttribute">
      <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
      <example>
        <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.RazorSectionAttribute">
      <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.CollectionAccessAttribute">
      <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.None">
      <summary>Method does not use or modify content of the collection.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.Read">
      <summary>Method only reads content of the collection but does not modify it.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.ModifyExistingContent">
      <summary>Method can change content of the collection but does not add new elements.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.UpdatedContent">
      <summary>Method can add new elements to the collection.</summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionMethodAttribute">
      <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:PalmSens.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionAttribute">
      <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:PalmSens.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionType">
      <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_TRUE">
      <summary>Marked parameter should be evaluated to true.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_FALSE">
      <summary>Marked parameter should be evaluated to false.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NULL">
      <summary>Marked parameter should be evaluated to null value.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NOT_NULL">
      <summary>Marked parameter should be evaluated to not null value.</summary>
    </member>
    <member name="T:PalmSens.Annotations.TerminatesProgramAttribute">
      <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.LinqTunnelAttribute">
      <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.NoEnumerationAttribute">
      <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.RegexPatternAttribute">
      <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemBindingOfItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
      <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:PalmSens.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
    </member>
    <member name="T:PalmSens.Annotations.NoReorder">
      <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
      <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
    </member>
    <member name="T:PalmSens.Ranging">
      <summary>
            Ranging settings
            </summary>
    </member>
    <member name="E:PalmSens.Ranging.RangingChanged">
      <summary>
            Occurs when minimum, maximum or begin current range was changed.
            </summary>
    </member>
    <member name="F:PalmSens.Ranging.CurrentRange">
      <summary>
            Active Current Range
            </summary>
    </member>
    <member name="P:PalmSens.Ranging.StartCurrentRange">
      <summary>
            Gets or sets the current range to begin at.
            </summary>
      <value>
            The first current range to start at.
            </value>
    </member>
    <member name="P:PalmSens.Ranging.Autoranging">
      <summary>
            Whether autoranging is enabled
            </summary>
    </member>
    <member name="M:PalmSens.Ranging.GetOptimalRangeForCurrent(System.Double,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the optimal range for current in uA.
            </summary>
      <param name="current">The current in uA.</param>
      <returns>Byte to use for PalmSens.CurrentRange.FromCRByte()</returns>
    </member>
    <member name="T:PalmSens.AutoRanging">
      <summary>
            Autoranging
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
      <param name="startRange">The start range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="T:PalmSens.FixedCurrentRange">
      <summary>
            Fixed current ranging
            Maximum current range is actual current range (minimum current range is same as maximum)
            </summary>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MaximumCurrentRange">
      <summary>
            Same as CurrentRange range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MinimumCurrentRange">
      <summary>
            Same as maximum current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.StartCurrentRange">
      <summary>
            Same as current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertRichTextToSaveString(System.String)">
      <summary>
            Converts the rich text containing spaces, enters and tabs to save string.
            </summary>
      <param name="stringToConvert">The text to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertLoadedStringToRichText(System.String)">
      <summary>
            Converts the rich loaded string to text containing spaces, enters and tabs.
            </summary>
      <param name="stringToConvert">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.ScanMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. potential.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.#ctor(System.Int32)">
      <summary>
            Create a new scan method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SupportsDetermination">
      <summary>Is true if the method can be used for determination.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.BlankType">
      <summary>Blank subtraction can be performed in two ways.
            <para>The blank can be measured using a separate blank solution.</para><para>The second curve is subtracted from the original curve.</para></summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalyteName">
      <summary>
            Array containing the names of 4 possible analytes.
            Use SetAnalyteName to change individual name
            </summary>
      <value>
            The array with names for each analyte.
            </value>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalyteName(System.Int32,System.String)">
      <summary>
            Sets the name of an analyte.
            </summary>
      <param name="iAnalyte">The index (0-4) of the analyte.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SolutionNr">
      <summary>Array containing the of 4 possible solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalytePeakAutodetect">
      <summary>
            Used to determine if the peak for an analyte is found automatically or by fixed E left and E right values 
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalytePeakAutodetect(System.Int32,System.Boolean)">
      <summary>
            Specifies peak autodetect for a analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="value">if set to <c>true</c> [value].</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeaks">
      <summary>Specifies the expected peak potential.
            Use SetEPeak to change individual values.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeaks(System.Int32,System.Single)">
      <summary>
            Sets the expected peak potential EPeak for the analyte iAnalyte
            </summary>
      <param name="iAnalyte">The index of the analyte.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakLeft">
      <summary>
            Leftside of the manual baseline 
            Use SetEPeakLeft to change individual values
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakLeft(System.Int32,System.Single)">
      <summary>
            Sets the E peak left.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakLeftNew">The E peak left new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakRight">
      <summary>
            Rightside of the manual baseline
            Use SetEPeakRight to change individual values
            9999 means AutoPeak
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakRight(System.Int32,System.Single)">
      <summary>
            Sets the E peak right.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakRightNew">The E peak right new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardConcentration">
      <summary>Specifies the concentration given in 'Unit of concentration' of the component in the corresponding standard solution.</summary>
      <remarks>These parameters are only relevant when the standard addition method is applied.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.VolumeConcentration">
      <summary>This table (Column, Row) is used to specify either the added volume of the standard additions or the concentration of a standard solution.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.SampleVolume">
      <summary>Is used to calculate the concentration in the original sample from the peak height measured in the solution specified in the box of the cell volume.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.CellVolume">
      <summary>Is required to correct for dilution effect due to the addition of the standard solutions and to calculate the concentration in the original sample.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.Determination">
      <summary>
        <c>StandardAddition</c> requires measurement of the sample and a sample to which standard solution is added. Analysis by using <c>Calibration</c> curve requires a calibration curve.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardsValues">
      <summary>If <c>ConcentrationsAddedToSample</c> is used, the specified values are used and peaks are not corrected. If <c>VolumesAddedToCell</c> is used, peaks are corrected for dilution due to the addition of standard solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.PeakValue">
      <summary>
        <c>PeakValue</c> determines which value is used for calculations. /// </summary>
    </member>
    <member name="F:PalmSens.ScanMethod.EPretreat">
      <summary>Pretreatment potentials.</summary>
    </member>
    <member name="F:PalmSens.ScanMethod.tPretreat">
      <summary>Time applied for each potential.</summary>
    </member>
    <member name="M:PalmSens.ScanMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate a hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Equals(System.Object)">
      <summary>
            Compare two scanmethods
            </summary>
      <param name="o">method to compare with</param>
      <returns>whether the two scanmethods were equal</returns>
    </member>
    <member name="M:PalmSens.ScanMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.enumBlankType">
      <summary>
            Possible Blank types. 
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.None">
      <summary>
            No blank at all.
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SeperateMeasurement">
      <summary>
            Subtract a seperate curve from the current one
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SubstractiveStripping">
      <summary>
            Measurement blank data before measuring a curve
            </summary>
    </member>
    <member name="T:PalmSens.enumDetermination">
      <summary>
            Method for determining concentrations
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.StandardAddition">
      <summary>
            Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.Calibration">
      <summary>
            Calibration
            </summary>
    </member>
    <member name="T:PalmSens.enumUsePeakValue">
      <summary>
            Method for determining which peak value to use for calculations
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakHeight">
      <summary>
            Use the peak height
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakArea">
      <summary>
            Use the peak area
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakSumSlopes">
      <summary>
            Use the sum of the maximum and minimum slope derivatives of the peak
            </summary>
    </member>
    <member name="T:PalmSens.enumStandardsValues">
      <summary>
            Possible standards for Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.ConcentrationsAddedToSample">
      <summary>
            Concentrations added to sample
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.VolumesAddedToCell">
      <summary>
            Volumes added to cell
            </summary>
    </member>
    <member name="T:PalmSens.SingleThreadSyncContext">
      <summary>Provides a SynchronizationContext that's single-threaded.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Dispatches an asynchronous message to the synchronization context.</summary>
      <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Not supported.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunAllOnCurrentThread">
      <summary>Runs a loop to process all queued work items. Does not block.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunOneOnCurrentThread">
      <summary>
            Runs the one work item on current thread. Blocks until next work item is available.
            </summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Complete">
      <summary>Notifies the context that no more work will arrive.</summary>
    </member>
    <member name="T:PalmSens.Techniques.ACVoltammetry">
      <summary>Contains all method parameters for technique acVoltammetry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.#ctor">
      <summary>
            Create a new AC Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Frequency">
      <summary>Frequency of the ac signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.factorACI">
      <summary>Correction factor for data received from PalmSens.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.SineWaveAmplitude">
      <summary>Amplitude of sine wave. Value is V rms.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MeasureDCcurrent">
      <summary>
            Measurement the DC current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Not applicable for this technique
            </summary>
      <param name="capabilities">Device capabilities</param>
      <returns>0f</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.Techniques.AmperometricDetection">
      <summary>
            Contains all methodparameters for technique Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.#ctor">
      <summary>
            Create a new Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ChronoPotStripping">
      <summary>Contains all methodparameters for technique Stripping Chronopotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.#ctor">
      <summary>
            Create a new ChronoPotStripping method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.AppliedCurrentRange">
      <summary>
            Current range during stripping in 1*10^n nA. Min value is 1uA (3).
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MaximumEstimatedMeasurementDuration">
      <summary> Estimated number of seconds a measurement will take at most (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MeasurementTime">
      <summary>Measurement Time</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.EndPotential">
      <summary>Potential where measurement stops.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Current">
      <summary>
            See Istrip
            </summary>
      <value>
            Equal to Istrip
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Istrip">
      <summary>Stripping current.</summary>
      <remarks>
             If specified as 0, the method is called chemical stripping, otherwise it
             is chemical constant current stripping. The applicable range is +- 0.001 microampere to +- 2 milliampere
            </remarks>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this method will at least take. 
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="T:PalmSens.Techniques.CyclicVoltammetry">
      <summary>
            Contains all methodparameters for technique Cyclic Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.#ctor">
      <summary>
            Create a new Cyclic Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">DeviceCapabilities required to determine resolution</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nEqScans">
      <summary>The number of equilibration scans.</summary>
                    ///<summary>The applied scan rate.</summary><remarks>The applicable range depends on the value of E step</remarks></member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx1Potential">
      <summary>
            Gets or sets the VTX1 potential.
            </summary>
      <value>
            The VTX1 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx2Potential">
      <summary>
            Gets or sets the VTX2 potential.
            </summary>
      <value>
            The VTX2 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToString">
      <summary>
            Generate description of this method
            </summary>
      <returns>the string "Cyclic Voltammetry"</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"CV"</returns>
    </member>
    <member name="T:PalmSens.Techniques.FastPotentiometry">
      <summary>Contains all methodparameters for technique Fast Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.#ctor">
      <summary>
            Create a new Fast Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastPotentiometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.FastAmperometry">
      <summary>
            Fast Amperometric Detection
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.#ctor">
      <summary>
            Create a new Fast Amperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.nPoints">
      <summary>
            Number of points used in a measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <param name="capab">Capabilities</param>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.IntervalTimeF">
      <summary>Interval time for Fast measurements.</summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.EqPotentialFA">
      <summary>The equilibration potential (only used in FA).</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.FastMeasurement">
      <summary>
            Fast time measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastMeasurement.TryProcessData">
      <summary>
            Try to receive more data
            </summary>
      <returns>whether the measurement is done</returns>
    </member>
    <member name="M:PalmSens.Techniques.IFastMeasurement.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.IMixedModeStageMethod">
      <summary>
            Methods with this interfaced can be serialized / deserialized as stage in MixedTechniqueMethod method file.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStageMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E or I (depending whether the potential or current is controlled).
            </summary>
      <value>
        <c>true</c> if versus previous E or I; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod">
      <summary>
            Method for use with the "sub"-Measurements that are part of each ImpedimetricMeasurement.
            This should not be registered in the UI and only used from ClientConnection.measureImpedimetric.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.IsLastIteration">
      <summary>
            If is last measurement, MixedTechniqueMethod bit (used to combine multiple measurements like this one) will not be set
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"IMP_it"</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToString">
      <summary>
            Returns the name of the technique
            Used in PalmSens.Control.StatusBar 
            </summary>
      <returns>"Impedance"</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Frequency">
      <summary>
             FixedFrequency of the sine signal.
             This value is corrected for the real applied frequency after calling ToHex.
             The difference between the set frequency and the real frequency is due to rounding
             and timing in the PalmSens firmware
             </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.numsinestable">
      <summary>
            Numsinestables the specified frequency.
            number of sines in table is 1 or 2
            This value is determined in DetermineSine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterDAC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterADC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterCF">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTAB">
      <summary>
            HSTAB filter is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTABByte">
      <summary>
            HSTAB filter code
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.AcCoupled">
      <summary>
            AcCoupled is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterAc">
      <summary>
            AC Filter
            if value  is provided, OverrideFilterAc will not be calculated, but the provided value for FilterAc will be used.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAgain">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAoffset">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.tIntac">
      <summary>
            The time for one point in the sine in seconds
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.nPointsac">
      <summary>
             Length of Sine wave
             this value is determined in DetermineSine 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Nadc">
      <summary>
            Number of ADC's to integrate per point in the sine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NadcStart">
      <summary>
            The index where integration of the nADC start, points before this
            index are ignored due to the longer RC time
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MDAC">
      <summary>
            The multiplying DAC value
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Neqstart">
      <summary>
            The place in eq to start in in case of very low frequency
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumMeasurementSines">
      <summary>
            The number of measurement sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumEquilibrationSines">
      <summary>
            Gets the num equilibration sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MaxSamplingRate">
      <summary>
            The maximum sampling rate.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Channel">
      <summary>
            Selected channel.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Celltype">
      <summary>
            Selected cell type.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.UseExternalAD">
      <summary>
            Used in PS3 firmware to determine wheter to use the internal or external AD
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides">
      <summary>
            Used to determine which parameters should be calculated automatically and which parameters are specified
            for all overriden parameters the specified value for the parameter will be used
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.IsOverridden(PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides)">
      <summary>
            Check if the specified parameter is overridden
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>
        <c>true</c> if the specified parameter is overridden; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            To the hex1.
            </summary>
      <param name="m">The em.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetNPoints(System.Single,System.Single,System.Int32,System.Int32)">
      <summary>
            Gets the number of points in the sine.
            </summary>
      <param name="maxSamplingRate">The max sampling rate.</param>
      <param name="frequency">The frequency.</param>
      <param name="minPoints">The min points.</param>
      <param name="maxPoints">The max points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.DetermineSine(PalmSens.Devices.EISSettingsPS3)">
      <summary>
            Code for PS3
            This should be done before starting a measurement (calling ToHex1)
            Fills Sine[] with values over full 16 bit DAC range (0-65563).
            Output is multiplied with MDAC
            </summary>
      <param name="eisSettings">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod">
      <summary>Contains all methodparameters for technique ImpedimetricMethod.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.#ctor">
      <summary>
            Create a new Impedimetric Method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MaxPGAgain">
      <summary>
            This value is normally taken from EISsettings, but can be overridden
            From method window: Sensitivity: O Low (maxgain1)  O Normal (maxgain2)  O High (maxgain3) 
            Default is High
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.IterationMethodOverrides">
      <summary>
            This iteration method is the initial iteration method and may contain
            filter and other overrides for testing and calibration purposes
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FixedFrequency">
      <summary>
            The fixed sine Frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxFrequency">
      <summary>
            Maximum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxEqTime">
      <summary>
            Max. time for generating equilibration sines
            van 0.01 ~ 1000 s
            Only used if nEquil sines equals 1
            number of equil sines = measure sines / 5
            5 &gt;= eq sines &gt; 1
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinFrequency">
      <summary>
            Minimum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.nFrequencies">
      <summary>
            Number of Frequencies
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetFreqsListString">
      <summary>
            Gets the freqs list.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Freqs">
      <summary>
            Returns an array with length nFrequenciess 
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SamplingTime">
      <summary>
            Minimum sampling time
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Eac">
      <summary>
            Eac or E amplitude
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.EndPotential">
      <summary>
            Eend
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.StepPotential">
      <summary>
            Estep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumScanType">
      <summary>
            Type of scan; vs potential or vs time
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType">
      <summary>
            Scanning on a fixed frequency or doing frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.ScanType">
      <summary>
            Determines if scan is versus E or t
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FreqType">
      <summary>
            Determines if frequency is fixed or scanned
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachFreqMeas">
      <summary>
            Do pretreatment on each frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachScan">
      <summary>
            Do pretreatment on each new intervaltime (in case of potential or time scan)
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method.
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at maximum (in seconds)</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes to the specified textwriter.
            </summary>
      <param name="tw">The textwriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement">
      <summary>
            Measurement procedures for Impedimetric measurement. PalmSens is controlled manually with this measurement.
            Each iteration (short measurement at a certain frequency) is an ImpedimetricIterationMeasurement
            The ImpedemetricMethod is the Method class used to set up an EIS measurement. 
            Each iteration is set in an ImpedimetricIterationMethod during the run of a measurement.
            
            This measurement does not generate a Curve but a PalmSens.EISData, which is also a Plottable.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ImpedimetricMeasurement" /> class.
            Note: Impedance measurements are currently not supported for the SDK.
            All data is recorded in the DataSet. The PalmSens.Plottable.EISData plottable uses this DataSet to generate curves for the 
            PalmSens.Plot2.PlotEISdata object.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement.NewFreqCurveEventHandler">
      <summary>
            Delegate for the NewSine events
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineECurve">
      <summary>This event is triggered when a sine Curve for E is added to the impdata class.</summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineICurve">
      <summary>This event is triggered when a returned sine Curve I is added to the impdata class.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.DataSet">
      <summary>
            Use _currentEISdata.DataSet instead.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.Method">
      <summary>
            Gets the method as <see cref="T:PalmSens.Techniques.ImpedimetricMethod" />.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMeasurement.CalibrationType">
      <summary>
            The type of calibration to run as used in CalibrationSteps and derived classes
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.IntToFloat(System.UInt32)">
      <summary>
            Ints to floats converter.
            </summary>
      <param name="i">The integer value</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.MeasureIterate">
      <summary>
            This is the iterated function for an Impedimetric Measurement
            </summary>
      <returns>true if finished</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            Only used here to parse the itterations, since this is invoked with every timer tick from Comm
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.Current">
      <summary>
            Gets or sets the current.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.LinearSweep">
      <summary>Contains all methodparameters for technique Lineair Sweep.</summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.#ctor">
      <summary>
            Generate Linear Sweep method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserializes the technique specific parameters.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MethodError">
      <summary>
            A method error
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MethodError.#ctor(System.String,PalmSens.Techniques.enumTechniqueParameter,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MethodError" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="parameter">The parameter.</param>
      <param name="isFatal">if set to <c>true</c> [is fatal].</param>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Message">
      <summary>
            Gets or sets the message.
            </summary>
      <value>
            The message.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.IsFatal">
      <summary>
            Gets or sets a value indicating whether this instance is fatal.
            </summary>
      <value>
        <c>true</c> if this instance is fatal; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Parameter">
      <summary>
            Gets or sets the parameter associated with this error.
            </summary>
      <value>
            The parameter.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.MixedModeMeasurement.StageMeasurement">
      <summary>
            The measurement running for the current mixed mode stage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.ProcessData">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            TRUE if the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will
            take care of announcing it.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode">
      <summary>
            Combines different techniques
            </summary>
      <seealso cref="T:PalmSens.Method" />
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode.EnumMixedModeStageType">
      <summary>
            Different stages available for Mixed Mode
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantE">
      <summary>
            Apply constant E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantI">
      <summary>
            Apply constant I
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.SweepE">
      <summary>
            Sweep E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.OpenCircuit">
      <summary>
            Cell at open circuit
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.Impedance">
      <summary>
            Apply AC 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.AddStage(PalmSens.Techniques.MixedMode.EnumMixedModeStageType)">
      <summary>
            Adds the stage.
            </summary>
      <param name="stage">The stage.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">stage</exception>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            </summary>
      <param name="capab">The device capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStage.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageConstantE">
      <summary>
      </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus the last measured E or I.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus the last measured E or I.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantI.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.IntervalTime">
      <summary>
            Sets the interval time, but doesn't apply for Sweep, because interval = Estep / scan rate
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageOcp.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageEIS">
      <summary>
            MixedMode stage for EIS (AC) measurements at a fixed frequency
            </summary>
      <seealso cref="T:PalmSens.Techniques.ImpedimetricMethod" />
      <seealso cref="T:PalmSens.Techniques.IMixedModeStage" />
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MixedModeStageEIS" /> class.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageEIS.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultiplePulseAmperometry">
      <summary>Contains all methodparameters for technique MultiplePulseAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.#ctor">
      <summary>
            Create a new MultiplePulseAmperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.E3">
      <summary>
            Applied potentials.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t3">
      <summary>
            Gets or sets the t3.
            </summary>
      <value>
            The t3.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t2">
      <summary>
            Gets or sets the t2.
            </summary>
      <value>
            The t2.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t1">
      <summary>
            Gets or sets the t1.
            </summary>
      <value>
            The t1.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.nPoints">
      <summary>
            Returns the number of datapoints.
            </summary>
      <returns>number of datapoints"</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultistepAmperometry">
      <summary>Contains all methodparameters for technique MultistepAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.MultistepPotentiometry">
      <summary>Contains all methodparameters for technique MultistepPotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MultistepPotentiometry" /> class.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            N/A for this technique
            Setting
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.Current">
      <summary>
            Gets or sets the current. N/A for this technique.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Multistep">
      <summary>Contains all methodparameters for technique Multistep Amperometry or Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.#ctor(PalmSens.Techniques.Multistep.EnumMode,System.Int32)">
      <summary>
            Create a new Multistep class
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Mode">
      <summary>
            The mode for Multistep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.Multistep.EnumMode">
      <summary>
            Available modes
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Amperometry">
      <summary>
            Multistep Amperometry
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Potentiometry">
      <summary>
            Multistep Potentiometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseLimits">
      <summary>
            Gets or sets a value indicating whether [use limits].
            </summary>
      <value>
        <c>true</c> if [use limits]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseSelectiveRecord">
      <summary>
            Gets or sets a value indicating whether [use selective record].
            This allows the user to apply a level without recording the result
            </summary>
      <value>
        <c>true</c> if [use selective record]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Delta">
      <summary>
            Maximum delta. [not used in this version]
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nSteps">
      <summary>
            Number of steps
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.RunTime">
      <summary>
            Total time of measurement (only include recorded levels).
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.BeginPotential">
      <summary>
            First potential for MultistepAmperometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.Levels">
      <summary>
            Contains the collection of levels
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.Levels.LevelChanged">
      <summary>
            Occurs when a value in one of the levels has changed.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.EILevel">
      <summary>
            A single level
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MultistepMeasurementMC">
      <summary>
            Measurement procedures for MultistepAmperometry. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Chrono Amperometry measurement. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.MeasureIterate">
      <summary>
            Next iteration during measurement, returns true if measurement is finished
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.ScriptOverridable">
      <summary>
            Determines if this value can be overriden in the script
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="propertyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="properyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.PropertyName">
      <summary>
            Gets or sets the name of the parameter
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.FriendlyName">
      <summary>
            Gets or sets the friendly name
            </summary>
      <value>
            The name of the friendly.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.Unit">
      <summary>
            Gets or sets the unit for this parameter
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Potentiometry">
      <summary>Contains all methodparameters for technique Potentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.#ctor">
      <summary>
            Create a new Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.OverrideFilter">
      <summary>
            Gets or sets a value indicating whether [override filter].
            </summary>
      <value>
        <c>true</c> if [override filter]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Filter">
      <summary>
            Gets or sets the dampening filter.
            Can be a value from 0 to 10 where
            at 10 mA: the RC-times are approx. 500 ns(0), 500 ns(1), 500 ns(2) and 7 us(3). 
            at 1 mA: the RC-times are approx. 500 ns(1), 500 ns(2), 7 us(3) and 50 us(4). 
            at 100 uA: the RC-times are approx.500 ns(2), 7 us (3), 50 us(4)and 500 us(5). 
            at 10 uA: the RC-times are approx. 7 us (3), 50 us(4), 500 us(5) and 5 ms(6). 
            at 1 uA: the RC-times are approx. 50 us(4), 500 us(5), 5 ms(6) and 50 ms(7). 
            at 100 nA: the RC-times are approx. 500 us (5), 5 ms(6), 50 ms(7) and 500 ms(8).
            at 10 nA: the RC-times are approx. 5 ms(6), 50 ms(7), 500 ms(8) and 5 s(9).
            at 1 nA: the RC-times are approx. 50 ms(7), 500 ms(8), 5 s(9) and 50? s (10).
            </summary>
      <value>
            The filter value between 0 and 10. 
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Current">
      <summary>
            Current during measurement <c>(Potentiometry)</c>. 
            The applicable range of the potential is defined by the device's Capabilities:
             Capabilities.MaxCurrent and Capabilities.MinCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            Changes OCP to <c>true</c> if capab.IsGalvanostat is <c>false</c></summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.OpenCircuitPotentiometry">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Techniques.Potentiometry" />
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="P:PalmSens.Techniques.OpenCircuitPotentiometry.Current">
      <summary>
             Is always 0 for this technique (Open Circuit Potentiometry)
             </summary>
    </member>
    <member name="T:PalmSens.Techniques.DifferentialPulse">
      <summary>
            Contains all methodparameters for Differential Pulse Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.#ctor">
      <summary>
            Create new differential pulse method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.DifferentialPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.NormalPulse">
      <summary>
            Contains all methodparameters for Normal Pulse Voltammetry.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.#ctor">
      <summary>
            Create new Normal Pulse method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.NormalPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration of this method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.Pulse">
      <summary>Contains all shared methodparameters for all pulse related measurement method classes.</summary>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulsePotential">
      <summary>
            Pulse Potential
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulseTime">
      <summary>The pulse time.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToString">
      <summary>
            Generate description
            </summary>
      <returns>the string "Normal Pulse"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"NPV"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.#ctor(System.Int32)">
      <summary>
            Create a new pulse method
            </summary>
      <param name="t">technique number to use</param>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection">
      <summary>
            Contains all methodparameters for technique Pulsed Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.#ctor">
      <summary>
            Create Pulsed Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulseTime">
      <summary>The pulse time in <c>PulsedAmpDetection</c> and <c>FastAmperometry</c>.</summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.DcPotential">
      <summary>
            dc potential for PAD
            Will always have same value as the inherited values <para>Potential</para> or <para>Begin potential</para></summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulsePotentialAD">
      <summary>
            Pulse Potential for PAD
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection.enumMode">
      <summary>
            Pulsed Amperometric Detection mode to use
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.dc">
      <summary>
            DC
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Pulse">
      <summary>
            Pulse
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Differential">
      <summary>
            Differential
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.tMode">
      <summary>There are three modi for this technique:
             <list type="bullet"><item><description><c>Dc</c> measurement is performed at potential E</description></item><item><description><c>Pulse</c> measurement is performed at potential E pulse</description></item><item><description><c>Dif</c> measurement is <c>Dc - Pulse</c></description></item></list></summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.SquareWave">
      <summary>Contains all methodparameters for technique Square Wave.</summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.#ctor">
      <summary>
            Create a new Square Wave method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration for this method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.PulseAmplitude">
      <summary>Amplitude of pulse. Values are half peak-to-peak.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.Frequency">
      <summary>FixedFrequency of the square wave signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MeasureIForwardReverse">
      <summary>
            Measurement Forward/Reverse Current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is 1/Frequency
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.TimeMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. time.
            </summary>
    </member>
    <member name="F:PalmSens.TimeMethod.MUX_DELAY">
      <summary>
            Delay before switching to the next multiplexer channel.
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.#ctor(System.Int32)">
      <summary>
            Create a new vs. time method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.TimeMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Potential">
      <summary>Potential during measurement <c>(AmperometricDetection)</c> or applied before pulse is given <c>PulsedAmpDetection</c>. The applicable range of the potential is -2 V to +2 V.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.BeginPotential">
      <summary>
            Begin potential (also applied during equilibration)
            Same value as property <code>Potential</code></summary>
      <value>
      </value>
    </member>
    <member name="P:PalmSens.TimeMethod.IntervalTime">
      <summary>Time between two measurements.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.RunTime">
      <summary>Total time of measurement.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.AnalyteName">
      <summary>The name of the measured analyte.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.Standard">
      <summary>The concentrations of the analyte, used for analysis.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Signal">
      <summary>
        <list type="bullet">
          <item>
            <description>1 = DC_Current</description>
          </item>
          <item>
            <description>2 = Peak</description>
          </item>
        </list>
            If dc-current is specified, stationary dc-levels are searched. Specify 'Peak' when the current
            versus time plots will show peaks.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelWidth">
      <summary>
            Minimum level width (in seconds)
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelHeight">
      <summary>
            Minimum level height (in uA), compared to previous level.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method.
            </summary>
      <returns>error string or null if there are no errors</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SetAlternatingMux(PalmSens.EncodedMethodV1@,System.Single@)">
      <summary>
            Sets the alternating mux settings.
            </summary>
      <param name="m">The m.</param>
      <param name="tmeas">The tmeas.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Equals(System.Object)">
      <summary>
            Check if this method is equal to another
            </summary>
      <param name="o">method to compare to</param>
      <returns>true if objects are equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Called to handle receiving a measurement.
            </summary>
      <param name="c">Comm connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.TimeMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.TimeMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.enumSignal">
      <summary>
            Signal types
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.DC_Current">
      <summary>
            DC Current
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.Peak">
      <summary>
            Peaks
            </summary>
    </member>
    <member name="T:PalmSens.enumReaction">
      <summary>
            Reaction types
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Reduction">
      <summary>
            Reduction
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Oxidation">
      <summary>
            Oxidation
            </summary>
    </member>
    <member name="T:PalmSens.Units.Unit">
      <summary>
            Describes unit for curve data
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized_string.</param>
    </member>
    <member name="F:PalmSens.Units.Unit.DefaultPrefix">
      <summary>
            Default prefix.
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Symbol">
      <summary>
            Symbol for this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Quantity">
      <summary>
            Quantity
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Abbreviation">
      <summary>
            Abbreviation
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.FormatString">
      <summary>
            Format string to use for values of this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.IsLogarithmic">
      <summary>
            The Unit is logarithmic
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>formatted string containing f</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(PalmSens.Units.Prefix,System.Double)">
      <summary>
            Format value in this unit for specified prefix
            </summary>
      <param name="pf">prefix to use</param>
      <param name="f">value to format</param>
      <returns>formatted string</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string
            </summary>
      <param name="pf">prefix to use</param>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToLongString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string including unit type (as displayed with plot axes)
            </summary>
      <param name="pf">prefix to use</param>
    </member>
    <member name="P:PalmSens.Units.Unit.ZeroPrefix">
      <summary>
            Gets the default prefix with factor 1.
            </summary>
      <value>
            The zero or default prefix.
            </value>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.GetPrefix(System.Double)">
      <summary>
            Calculate prefix appropriate for specified value
            </summary>
      <param name="f">value</param>
      <returns>corresponding prefix (or default prefix if none could be found)</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Equals(System.Object)">
      <summary>
            Check if this object is equal to another
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ConvertValue(System.Single)">
      <summary>
            Converts an original value to the value for this Unit
            </summary>
      <param name="originalvalue">The original value.</param>
      <returns>A converted value</returns>
    </member>
    <member name="T:PalmSens.Units.SIPrefixUnit">
      <summary>
            Base unit for units that use SI prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new SI Prefixed Unit
            </summary>
      <param name="s">description</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized string.</param>
    </member>
    <member name="T:PalmSens.Units.AdjustedSIPrefixUnit">
      <summary>
            SI Unit for use with data points that are a factor 100000 smaller
            </summary>
    </member>
    <member name="M:PalmSens.Units.AdjustedSIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new (adjusted) SI prefixed unit
            </summary>
      <param name="s">symbol</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="T:PalmSens.Units.Time">
      <summary>
            Time (seconds, minutes, hours)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.#ctor">
      <summary>
            Create new time unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>
            formatted string containing f
            </returns>
    </member>
    <member name="T:PalmSens.Units.Volt">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.Volt.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Hertz">
      <summary>
            Frequency
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.Format(System.Double)">
      <summary>
            Formats the specified frequency.
            </summary>
      <param name="f">The f.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Units.VauxV">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.VauxV.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroAmpere">
      <summary>
            MicroAmpere
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroAmpere.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Log10Current">
      <summary>
            Log10 of the given current in uA
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Current.#ctor(PalmSens.Units.Unit,System.Single)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="originalUnit">The original Unit to Log10().</param>
      <param name="minimumCurrentRange">The value Method.Ranging.MinimumCurrentRange.factor.</param>
    </member>
    <member name="M:PalmSens.Units.Log10Current.ConvertValue(System.Single)">
      <summary>
            Converts Current to Log10(Current), using MinimumCurrentRangeFactor
            </summary>
      <param name="originalvalue">The current.</param>
      <returns>
            Math.Log10(Current)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Log10Unit">
      <summary>
            Natural log of the given unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="s">description, (V for Volt)</param>
      <param name="q">quantity, (Potential for Volt)</param>
      <param name="a">abbreviation, (E for Volt)</param>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.ConvertValue(System.Double)">
      <summary>
            Converts value back to not Log value
            </summary>
      <param name="originalvalue">The value.</param>
      <returns>
            Math.Pow(10, originalvalue)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Ampere">
      <summary>
            Ampere
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ampere.#ctor">
      <summary>
            Create new Ampere
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroCoulomb">
      <summary>
            Coulomb
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroCoulomb.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradReal">
      <summary>
            Coulomb Real
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradReal.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradImaginary">
      <summary>
            Coulomb Imaginary
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradImaginary.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.Temperature">
      <summary>
            Temperature
            </summary>
    </member>
    <member name="M:PalmSens.Units.Temperature.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZRe">
      <summary>
            Z'
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZRe.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZIm">
      <summary>
            Z''
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZIm.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.Z">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Z.#ctor">
      <summary>
            Create new unit for Impedance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Y">
      <summary>
            Y in Siemens
            </summary>
    </member>
    <member name="M:PalmSens.Units.Y.#ctor">
      <summary>
            Create new unit for Y in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YRe">
      <summary>
            Y'
            </summary>
    </member>
    <member name="M:PalmSens.Units.YRe.#ctor">
      <summary>
            Create new unit for Y' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YIm">
      <summary>
            Y''
            </summary>
    </member>
    <member name="M:PalmSens.Units.YIm.#ctor">
      <summary>
            Create new unit for Y'' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.Phase">
      <summary>
            Phase
            </summary>
    </member>
    <member name="M:PalmSens.Units.Phase.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Farad">
      <summary>
            Cs
            </summary>
    </member>
    <member name="M:PalmSens.Units.Farad.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Ohm">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ohm.#ctor">
      <summary>
            Create new unit for Resistance 
            </summary>
    </member>
    <member name="T:PalmSens.Units.Index">
      <summary>
            Use the index for X axis
            </summary>
    </member>
    <member name="T:PalmSens.Units.FixedUnit">
      <summary>
            Unit without prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.FixedUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new fixed unit
            </summary>
      <param name="s">symbol (symbol V for potential for example)</param>
      <param name="q">quantity (potential for example)</param>
      <param name="a">abbreviation (E for potential for example)</param>
    </member>
    <member name="T:PalmSens.Units.Prefix">
      <summary>
            Prefix for a unit (i.e. kilo, nano, etc)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.#ctor(System.Double,System.String)">
      <summary>
            Create new prefix
            </summary>
      <param name="factor">factor for this prefix</param>
      <param name="prefix">name of prefix</param>
    </member>
    <member name="F:PalmSens.Units.Prefix.Factor">
      <summary>
            Gain for this prefix
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string description of this prefix</returns>
    </member>
    <member name="T:MicroLibrary.MicroStopwatch">
      <summary>
            MicroStopwatch class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimer">
      <summary>
            MicroTimer class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimerEventArgs">
      <summary>
            MicroTimer Event Argument class
            </summary>
    </member>
  </members>
</doc><?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core</name>
  </assembly>
  <members>
    <member name="T:PalmSens.EnumExtraValue">
      <summary>
            All available extra value types
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.None">
      <summary>
            No auxiliary channel
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Current">
      <summary>
            Current
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Potential">
      <summary>
            Potential
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.WE2">
      <summary>
            Second working electrode on PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.AuxInput">
      <summary>
            MiniDIN pin
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Reverse">
      <summary>
            Reverse Current as used by SquareWave
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.PolyStatWE">
      <summary>
            Additional WE used with PolyPotentiostat
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.DCcurrent">
      <summary>
            Record DC current with AC voltammetry
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.CEPotential">
      <summary>
            The CE potential (PalmSens4 only)
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.BaselineCorrection.GetMovingAverageBaselineCorrected(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Perfroms the moving average baseline correction.
            </summary>
      <param name="curve">The curve.</param>
      <param name="nWindowSize">Size of the window.</param>
      <param name="maxNSweeps">The maximum amount of sweeps.</param>
      <param name="baseline">Show the baseline correction instead of the corrected baseline</param>
      <returns>
      </returns>
      <example>TODO: add baseline curve directly after changing the windowsize or the amount of sweeps, and before pressing the do baseline correction button</example>
    </member>
    <member name="T:PalmSens.Analysis.PeakList">
      <summary>
            Describes a list of peaks
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.PeakWithinWindow(PalmSens.Analysis.Peak,PalmSens.ScanMethod,System.Int32)">
      <summary>
            Check if the peak is within the analytes search window.
            </summary>
      <param name="p">The peak.</param>
      <param name="m">The method.</param>
      <param name="iAnalyte">The index of the analyte.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Analysis.PeakList.enumAnalytePeakType">
      <summary>
            Used to determine if a peak is auto found, is based on a fixed left and right or is manually selected
            This is used to distinguish peaks belonging to different analytes in Analytical mode
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.nPeaks">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakWidth">
      <summary>
            Minimum width of peak
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakHeight">
      <summary>
            Minimum height of a peak
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,PalmSens.Data.EnumDirection,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="peakdir">direction in which to seek for peaks</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="Start">a starting point on the x axis</param>
      <param name="End">an ending point on the x axis</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.InitAnalytePeaks">
      <summary>
            Makes sure there are always 4 peaks in the list enables use of indexing for Analytical stuff
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new empty peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.SortPeaksByXValue">
      <summary>
            Orders the peaks by X value.
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Remove(PalmSens.Analysis.Peak)">
      <summary>
            Removes the specified peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeakFree(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks from a baseline between two independent points with indicated direction
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak with 
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="xmax">The xmax.</param>
      <param name="ymax">The ymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(PalmSens.Analysis.Peak)">
      <summary>
            Adds a predefined peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak wi.
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="iymax">The iymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeak(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Find peaks from a baseline between two points on the curve.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.GetManualPeak">
      <summary>
            Help class for finding the max value between x1 and x2
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.Peak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.Peak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftX">
      <summary>Returns the X of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftY">
      <summary>Returns the Y of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakValue">
      <summary>Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightX">
      <summary>Returns the X of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightY">
      <summary>Returns the Y of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Width">
      <summary>Returns the half-height peak width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftIndex">
      <summary>Returns the leftside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightIndex">
      <summary>Returns the rightside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="T:PalmSens.Analysis.AutoPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftX">
      <summary>
            Returns the X of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftY">
      <summary>
            Returns the Y of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakX">
      <summary>
            Returns the X of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakY">
      <summary>
            Returns the Y of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakValue">
      <summary>
            Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftIndex">
      <summary>
            Returns the leftside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakIndex">
      <summary>
            Returns the location of the peak as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightIndex">
      <summary>
            Returns the rightside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="F:PalmSens.Analysis.AutoPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.AutoPeak.#ctor(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Int32,PalmSens.Data.EnumDirection)">
      <summary>
            Creates a new Peak class with automatically detected peaks.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.ManualPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="F:PalmSens.Analysis.ManualPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peak">The peak index.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peakx">The peakx.</param>
      <param name="peaky">The peaky.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="hasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="T:PalmSens.Analysis.NonLinearBaseLinePeak">
      <summary>
            Peak with a curve as baseline
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="T:PalmSens.AuxInput.AuxiliaryInputType">
      <summary>
            Describes a possible auxiliary input type
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor(System.Boolean,System.String,System.String,System.Single,System.Single,PalmSens.Units.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
      <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="offset">The offset.</param>
      <param name="slope">The slope.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="F:PalmSens.AuxInput.AuxiliaryInputType.IsReadOnly">
      <summary>
            The is read only
            </summary>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Unit">
      <summary>
            Gets or sets the unit.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Slope">
      <summary>
            Gets or sets the slope.
            </summary>
      <value>
            The slope.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
      <value>
            The offset.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>
            The description.
            </value>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ConvertAuxValue(System.Single)">
      <summary>
            Converts the original aux value to the specified input type.
            </summary>
      <param name="analogInput">The analog input.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Serialize">
      <summary>
            Serializes the specified type.
            </summary>
      <returns>Readonly [bool]|Name [string]|Description [string]|Offset [float]|Slope [bool]|Symbol [string], Quantity [string], Abbreviation [string]</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ToString(System.Double)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="value">The value.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ParseString(System.String)">
      <summary>
            Parses the string.
            </summary>
      <param name="serializedAuxiliaryInputType">Type of the serialized auxiliary input.</param>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Deserialize(System.String)">
      <summary>
            Deserializes the specified serialized auxiliary input type.
            </summary>
      <param name="serializedAuxiliaryInputType">The serialized auxiliary input string.</param>
      <returns>AuxiliaryInputType</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.DataManipulation.SmoothData(System.Int32,System.Double[]@)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <param name="yvalues">The yvalues.</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            or
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="T:PalmSens.Calculations.MathFunctions">
      <summary>
            Contains a number of mathematical functions used for 
            Blank subtraction and Impedemetric measurements
            
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(PalmSens.Data.DataArray,PalmSens.Data.DataArray,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new array by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <param name="iAStart">The index to start in dataA start.</param>
      <param name="iBStart">The index to start in dataB.</param>
      <param name="count">The number of points to iterate through.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            The curve with the minimum number of points determines the returned curve length.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <param name="iStart">The start index.</param>
      <param name="iEnd">The end index.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.MultiplyDataArray(System.Double[],System.Single)">
      <summary>
            Creates a new array by means of multiplication with a factor
            </summary>
      <param name="array">The target array to manipulate.</param>
      <param name="factor">The factor for multiplication.</param>
      <returns>
            Modified array
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AppendCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve)">
      <summary>
            Appends all equal DataArrays of two curves.
            Resulting nPoints = A.nPoints+B.nPoints
            </summary>
      <param name="curveA">The curve A.</param>
      <param name="curveB">The curve B.</param>
      <returns>Curve A and B appended.</returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DFT(PalmSens.SineCurve,System.Double@,System.Double@)">
      <summary>
            DFT over a sine curve
            </summary>
      <param name="sine">The sine curve.</param>
      <param name="re">The real component</param>
      <param name="im">The imaginary component</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.GetCurrAC(PalmSens.SineCurve,System.Double@)">
      <summary>
            Gets the magnitude RMS of the sine.
            </summary>
      <param name="sine">The sine</param>
      <param name="iAC">The AC RMS value</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DivComplex(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Divides the complex A and B
            </summary>
      <param name="a">Real of division</param>
      <param name="b">Imaginary of division</param>
      <param name="c">Real of fraction</param>
      <param name="d">Imaginary of fraction</param>
      <param name="re">The resulting real</param>
      <param name="im">The resulting imaginary</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.FindMeanY(PalmSens.Plottables.Curve)">
      <summary>
            Finds the mean Y.
            </summary>
      <param name="c">The curve.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.CalculateDerivative(PalmSens.Data.EnumDirection,System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the derivatives. Note the derivative is calculated over the index an x value is not specified.
            </summary>
      <param name="dir">The direction.</param>
      <param name="y">The y values.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="averagePoints">The average_points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPassFreq0(System.Double,System.Double)">
      <summary>
            Determines the value of freq0 based on frequency and phaseshift
            Used during calibration
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>  consult: http://www.johnhearfield.com/RC/RC2.htm
            Determine the phaseshift and Zfactor based on frequency and freq0
            Where frequency = freq0 * Math.Atan(phaseshift / 360.0 * 2.0 * Math.PI) ; 
            freq0 is obtained by means of calibrating
            </summary>
      <param name="freq0">The freq0.</param>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The Zfactor.</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCHighPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary> consult: http://www.johnhearfield.com/RC/RC2.htm 
            Determine the phaseshift and Zfactor based on frequency and freq0
            for AC coupled measurements
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="freq0">The freq0.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The zfactor.</param>
    </member>
    <member name="F:PalmSens.Calculations.PolyCurve.CurveGenerated">
      <summary>
            The curve generated by GetPolyCurve
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single)">
      <summary>
            Gets the poly curve based on the stepsize of the feeded curve
            The generated curve is also available as CurveGenerated
            </summary>
      <param name="x1">The smalles X.</param>
      <param name="x2">The largest X.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single,System.Single)">
      <summary>
            Gets the poly curve with custom stepsize
            </summary>
      <param name="x1">The left X.</param>
      <param name="x2">The right X.</param>
      <param name="nPoints">The n points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single,System.Int32)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
      <param name="iOrgCurve">The indiex of this point in the original curve.</param>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetClosestPoint">
      <summary>
            Gets the get closest point.
            </summary>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetFarestPoint">
      <summary>
            Gets the get farest point.
            </summary>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationSteps">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetDescription(System.Int32)">
      <summary>
            Gets the description.
            </summary>
      <param name="calibrationType">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.NSteps">
      <summary>
            Gets the number of calibration steps.
            </summary>
      <value>
            The number of calibration steps.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Contains(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,System.String}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Int32,System.String)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Int32)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.TryGetValue(System.Int32,System.String@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.String" /> with the specified key.
            </summary>
      <value>
            The <see cref="T:System.String" />.
            </value>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.CurrentStep">
      <summary>
            Gets or sets the current step.
            If the step does not exists the nearest available steps is chosen
            </summary>
      <value>
            The current step.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.SetNextStep">
      <summary>
            Sets the next step.
            </summary>
      <returns>
        <c>false</c> if next step does not exists, otherwise <c>true</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CurrentStepToString">
      <summary>
            Currents the step to string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFileCurrentStep">
      <summary>
            Gets the method file current step.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibration">
      <summary>
            Contains all values and functionalities for EIS calibrations
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all values to EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>All values as formatted string</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <returns>EISCalibration with default values</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates the values.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
      <returns>
        <c>true</c> if values are validated OK, otherwise <c>false</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationStepsPS3.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS3">
      <summary>
            This serializable class contains all calibration values used for impedance measurements
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.#ctor(PalmSens.Devices.EISSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Calibration.EISCalibrationPS3" /> class.
            The settings depend on firmware/hardware version of the instrument
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.EISSettingsPS3">
      <summary>
            Gets the EIS settings for PS3.
            </summary>
      <value>
            The EIS settings for PS3
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterAcFreq0">
      <summary>
            Calibration file contents
            RC filter values of Freq0 calculated between frequency and phaseshift of 30 and 5 degrees
            Index corresponds to FilterAc
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.HSTABFreq0">
      <summary>
            RC filter time of control amplifier (AD8620: GBWP = 25 MHz) used at HSTAB
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:PalmSens.Calibration.EISCalibrationPS3._magnitudeAcCoupledFreq0" -->
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.acCoupledFreq0">
      <summary>
            Only used when ac-coupled is applied
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.AcCoupledIsEnabled">
      <summary>
            Gets a value indicating whether ac coupled measurements can be used
            This relies on the solder bridge JP IMP being soldered or not
            </summary>
      <value>
        <c>true</c> if [ac coupled is enabled]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAGainFreq0">
      <summary>
            Used for corrections of PGA
            Corresponds to byte PGAgain
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterCFFreq0">
      <summary>
            Filter settings for each frequency
            Index corresponds to first 4 bits of Filter byte (so AND with 0xF)
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionDcCoupled">
      <summary>
            Input offset calibration procedure for value of newPGAoffset:
            connect WE,CE,RE to testsensor at side panel
            for dc-offset value:           
            set TRIMDAC1 to 32768, set cell on at E = 0.000 V using 1 mA CR.
            use 1 kHz time scan at GAIN 1 and average YmeanReal of the measured sine wave a couple of times. Its value must be 32768 +/- 300
            repeat measurment at GAIN3 and measure YmeanGain3
            The value of newPGAoffset = (YmeanGAIN3 - 32768)/100. On a PS3 a value of PGAoffsetCorrectionDcCoupled = 117 was found.
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionAcCoupled">
      <summary>
             See also description of PGAoffsetCorrectionDcCoupled
             
             or ac-coupled value:
             set TRIMDAC1 to 200 ( below this value the DAC is not linear!
            , set cell on at E = 0.000 V using 1 mA CR.
             use 1 kHz time scan at GAIN 1 and average YmeanReal (so YmeanGain1) of the measured sine wave a couple of times. Its value must be (32768-200) +/- 200
             repeat measurment at GAIN3 and measure YmeanGain3
             The value of newPGAoffset = 200 - (YmeanGAIN3 - YmeanGAIN1)/100. On a PS3 a value of PGAoffsetCorrectionAcCoupled = 51 was found. Negative values are NOT valid!
             </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <param name="capab">The capab.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates all values.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ParseResult(PalmSens.Plottables.EISData,System.Int32,System.Double@,System.String@)">
      <summary>
            Parses the result of an EIS calibration step to a calibration value.
            </summary>
      <param name="freqScan">The eis data.</param>
      <param name="calibrationStep">The calibration step.</param>
      <param name="result">The result.</param>
      <param name="message">The message.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.CorrectMeasuredValue(PalmSens.Techniques.ImpedimetricIterationMethod,System.Int32,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Corrects the measured value using the calibration values.
            </summary>
      <param name="method">The ImpedimetricIterationMethod.</param>
      <param name="phase">The phase.</param>
      <param name="Z">The impedance, Z.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all calibration values to EEPROM.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ConvertValuesForEEPROM(System.Double[],System.Int32[])">
      <summary>
            Converts the values for EEPROM.
            </summary>
      <param name="values">The values.</param>
      <param name="magnitudes">The magnitude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationStepsPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.CalibrationSteps" />
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.EISCalibration" />
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetPalmSensBiPotCalibration(PalmSens.Comm.ClientConnection)">
      <summary>
            Get values from EEPROM if PalmSens3, else from local settings.
            </summary>
      <param name="clientConnection">The client connection.</param>
      <returns>PalmSensBiPotCalibration containing calibration values</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the calibration values from EEPROM if PS3, else from local settings
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValuesFromSettings">
      <summary>
            Reads the calibration values from settings. For PalmSens2
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotCurrent(System.Double)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct reading
            AD offset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected current</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotPotential(System.Single)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct the potential set
            DACOffset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected potential to set</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.WriteValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes the values to EEPROM if PalmSens3, else to local settings.
            </summary>
      <param name="conn">The clientconnection.</param>
    </member>
    <member name="T:PalmSens.Comm.Buffer">
      <summary>
            Generic Buffer object
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Pop(System.Int32,System.Int32)">
      <summary>
            Retrieve bytes from the buffer if present.
            </summary>
      <param name="n">Number of bytes to retrieve</param>
      <param name="startIndex">The index to start the string from (all data up to "n" is still removed).</param>
      <returns>
            String with contents, "" if not enough bytes available.
            </returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Peek">
      <summary>
            Peek at the first character in the buffer
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.IndexOf(System.Char,System.Int32)">
      <summary>
            Find character in array
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="T:PalmSens.Comm.ConnBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ConnBuffer.#ctor(PalmSens.Devices.Device)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.OfflineBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.OfflineBuffer.#ctor(System.String)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection">
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens and EmStat communications protocols
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.BiPotCurrentRange">
      <summary>
            The active bipot current range
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.IsBipotOn">
      <summary>
            Is <c>true</c> when the Bipot is set on. Used in ParseIdlePacket 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotPotential(System.Single)">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOff">
      <summary>
            Disable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOnAndCR(PalmSens.CurrentRange)">
      <summary>
            Set the current range of the second working electrode. 
            This will enable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of CR
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrentStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentStatus(System.Double)">
      <summary>
            Returns the current status for a given current.
            </summary>
      <param name="current">The current in its current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPSBiPotMode(PalmSens.Method.EnumPalmSensBipotMode)">
      <summary>
            Sets the PalmSens3 bipot mode.
            0 = WE at independent potential
            1 = WE at offset from WE1
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.CommError">
      <summary>
            Occurs when there's an error in communication.
            If there are no subscribers for this event an Exception will be thrown in case of a comm error.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.Device">
      <summary>
            The Device for this connection (PalmSens or EmStat)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.ConnectedDeviceCapabilities">
      <summary>
            The capab of the most recent connected device.
            <c>Null</c> if no device connected.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.Capabilities">
      <summary>
            Describes the capab of the currently 
            connected device. May be null, if no capab 
            are known!
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.FirmwareVersion">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.NBipotBoardsInMeasurement">
      <summary>
            This value is used for synchronizing mixed measurements (like multistepping) on a nWE system
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection.MessageEventHandler">
      <summary>
            Delegate that is used for status messages during measurements.
            These messages are for example used by the status bar and can include messages like
            "recording level #" for Multistep techniques
            "limit reached"
            "..."
            </summary>
      <param name="sender">The sender.</param>
      <param name="message">The message.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveMessage">
      <summary>
            Occurs when [receive message].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DebugInformation">
      <summary>
            Raised when debug information is received from the PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DeviceReset">
      <summary>
            Occurs when the connected device was reset for unknown reasons
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(System.Boolean,PalmSens.Devices.Device,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="empty">if set to <c>true</c> Capabilities will not be read from device.</param>
      <param name="device">The device.</param>
      <param name="versionString">The version string received from the device.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(PalmSens.Devices.Device,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="device">The device to connect to</param>
      <param name="versionString">The version string received from the device.</param>
      <param name="forceNoEEPROM">if set to <c>true</c> [force no eeprom].</param>
      <param name="timeOutInMilliSeconds">The time out in milliseconds.</param>
      <exception cref="T:PalmSens.Comm.CommException">versionString error; device does not respond on packet 't'</exception>
      <exception cref="T:PalmSens.Comm.CommException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadFromDevice(System.Char,System.Int32)">
      <summary>
            Reads from a PalmSens BV device.
            First send 'c', wait for 'c' send 'CMD' return received package with sepcified length 
            </summary>
      <param name="cmd">The CMD.</param>
      <param name="length">The length.</param>
      <returns>The answer from the device</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ProcessData">
      <summary>
            Process idle packets
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetDeviceSerial">
      <summary>
            Gets the device serial.
            </summary>
      <returns>Empty DeviceSerial if not succesful</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastCurrentSet">
      <summary>
            The last current (in its current range) that was set using SetCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastPotentialSet">
      <summary>
            The last potential that was set using SetPotential
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCommMode(PalmSens.Comm.ClientConnection.CommMode)">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadPotential">
      <summary>
            Potential in Volts.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate">
      <summary>
            Calibrate. Run with sensorcable disconnected!
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadCurrent">
      <summary>
            Read the current in the active current range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V, resolution is 1 mV
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure">
      <overloads>
            Run a measurement with a specific method.
            </overloads>
      <summary>
            Run measurement with method currently loaded in PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method,System.Int32)">
      <overloads>
            Measurement the specified method at the specified mux channel (ranging from 0 to 7)
            </overloads>
      <summary>
            Run a measurement with the current parameters as set in the Method.
            </summary>
      <remarks>
            During a measurement, several events may be raised, depending on the method 
            that is currently selected. 
            
            If the communication channel allows it, the data points 
            being measured will be updated in real-time. In that case, the CurrentCurve 
            and/or CurrentMuxCurves properties will be updated whenever new data is received.
            
            At the end of the measurement, a ReceiveCurve() event will be raised.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentMethod">
      <summary>
            Receive current method loaded.
            </summary>
      <returns>hex representation of method</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetPowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendSine(System.UInt32[])">
      <summary>
            Sends a sine for impedimetric measurements
            For a PS3 device only
            </summary>
      <param name="Sine">The sine.</param>
      <returns>True if succeeded, false if failed</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetDACOffset(System.Single)">
      <summary>
            Send potential offset used when setting the DAC 
            For EmStat and PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialReadOffset(System.Single)">
      <summary>
            Send potential read offset to EmStat or PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAnalogInput">
      <summary>
            Reads the raw original auxilary analog input signal
            Use this value with <c>AuxInputSelected.ConvertAuxValue(float value)</c> to get the value for the selected aux input type.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.WriteToPS3EEPROM(System.Int32,System.UInt16)">
      <summary>
            Writes to EEPROM of a PalmSens3.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadEmStatEEPROM(System.Int32)">
      <summary>
            Reads the EEPROM.
            </summary>
      <param name="address">The address.</param>
      <returns>4 bytes with EEPROM data</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetESBiPotMode(PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode)">
      <summary>
            Sets the ES bipot mode.
            0 = none
            1 = WE at independent potential
            2 = WE at offset from WE1
            3 = Control mode (send pulses)
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetESBipotMode">
      <summary>
            Gets the ES bipot mode.
            </summary>
      <returns>
            0 = WE2 at independent potential
            1 = WE2 at offset from WE1
            2 = Control bipots (for main board)
            3 = None
            </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetFilterBytePS3(System.Byte)">
      <summary>
            FOR PALMSENS3 ONLY: Sets filter settings.
            Settings byte is calculated in Method.GetTimeFilterbyte
            </summary>
      <param name="settings">The settings as calculated by Method.GetTimeFilterbyte.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.RemoteControl(System.Char,System.Int64,System.Int64)">
      <summary>
            Sends a remote control command
            (see Communications Protocol document)
            </summary>
      <param name="cmd">The CMD character</param>
      <param name="arg1">Argument 1</param>
      <param name="arg2">Argument 1</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.IsHex(System.String)">
      <summary>
            Check whether a string is a valid hex string.
            </summary>
      <param name="hex">
            A <see cref="T:System.String" /></param>
      <returns>
            A <see cref="T:System.Boolean" /></returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.DecToHex(System.Int64,System.Int32)">
      <summary>
            Converts a decimal number to a Hex string
            </summary>
      <param name="v">
      </param>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.HexToDec(System.String)">
      <summary>
            Converts string with a hex value to an integer
            </summary>
      <param name="hex">string containing hex value</param>
      <exception cref="T:PalmSens.Comm.InvalidHexException" />
      <returns>the resulting integer</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FloatToUint32(System.Single)">
      <summary>
            Converts a float into a platform independant UInt32 representation readable by PalmSens devices.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Uint32ToFloat(System.UInt32)">
      <summary>
            Converts a platform independant UInt32 representation readable by PalmSens devices into a float.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FindDeviceType(System.String)">
      <summary>
            Finds the type of the device.
            </summary>
      <param name="versionString">The version string.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadVersion">
      <summary>
            Reads the firmware version and refreshes FirmwareVersion.
            Used after updating firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Supports10mA">
      <summary>
            Check for PalmSens1: return true if connected device supports 10 mA range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetLicence">
      <summary>
            Gets the licence.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetDeviceSerial">
      <summary>
            Gets the serial.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetSerial(PalmSens.Comm.DeviceSerialV2)">
      <summary>
            Sets the serial.
            </summary>
      <param name="serial">The serial code.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEeprom(System.Byte,System.UInt16)">
      <summary>
            Writes to the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEepromUint32(System.Byte,System.UInt32)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEeprom(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEepromUint32(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReloadData">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetReadInterval(System.UInt32)">
      <summary>
            Sets the read interval.
            </summary>
      <param name="timeMS">The time in ms.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
    </member>
    <member name="T:PalmSens.Comm.enumDeviceType">
      <summary>
            List of devices that can be connected
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.Unknown">
      <summary>
            Unable to determine device type
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens">
      <summary>
            PalmSens1 or PalmSens2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat1">
      <summary>
            Emstat1
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2">
      <summary>
            Emstat2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens3">
      <summary>
            PalmSens3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2BP">
      <summary>
            EmStat2 BiPot (BiPot version of EmStat2)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3">
      <summary>
            EmStat3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3P">
      <summary>
            EmStat3+
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3BP">
      <summary>
            EmStat3 Bipot
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens4">
      <summary>
            PalmSens4
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.SAMBAProgramPort">
      <summary>
            PalmSens4 firmware update port
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="T:PalmSens.Comm.PowerStatus">
      <summary>
            Available power status modes
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Unknown">
      <summary>
            Older version of the firmware. No information available. Upgrade to at least version 3.3 of 
            the firmware to be able to view the power status.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Charging">
      <summary>
            PalmSens is busy recharging.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.LowBattery">
      <summary>
            Low battery (equivalent to LoBatt on the LCD)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Normal">
      <summary>
            Not charging, battery status ok.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Mode">
      <summary>
            Mode of measurement at PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Galvanostatic">
      <summary>
            Measurement against current. Not supported by the Emstat
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Potentiostatic">
      <summary>
            Measurement against potential
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidHexException">
      <summary>
            Exception indicating an invalid hex integer was received.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidChecksumException">
      <summary>
            Exception indicating an invalid checksum
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventArgs">
      <summary>
            Debug information from PalmSens
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommException">
      <summary>
            Error in PalmSens Communication
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoMuxChannelsEnabled">
      <summary>
            Raised when no mux channels where enabled in a multiplexer measurement.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.UnknownDataException">
      <summary>
            Raised when unparsable data is received.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.UnknownDataException.Data">
      <summary>
            Data that couldn't be parsed.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DeviceWaitingForDataException">
      <summary>
            Raised when the PalmSens is waiting for data.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.LicenseException">
      <summary>
            Not licensed for use with SDK
            </summary>
    </member>
    <member name="T:PalmSens.Comm.BusyException">
      <summary>
            Exception that is thrown whenever an action is requested while the PalmSens device is busy (measuring or 
            downloading new firmware).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoResponseException">
      <summary>
            Exception that is thrown whenever the PalmSens doesn't respond
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.OnMeasurementEnded">
      <summary>
            Force the measurement to end, in case of an unexpected device reset.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.Phase">
      <summary>
            The current Phase in the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.StartStage(System.Double,System.String,System.Boolean)">
      <summary>
            Starts the measurement as part of a MixedMode measurement.
            </summary>
      <param name="timeOffsetInSec">The time offset in sec.</param>
      <param name="name">The name of the master method.</param>
      <param name="firstStage">if set to <c>true</c> [first stage].</param>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.OnHold">
      <summary>
            True if measurement is on hold.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ToggleHold">
      <summary>
            Toggles hold if SupportsHold() == true
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.GenericCommMeasurement">
      <summary>
            Parsing data of a generic measurement used for most techniques.
            Not used for CV, FA, SCP, aCV and 'manual controlled' techniques, like MA, MP and MM
            </summary>
    </member>
    <member name="M:PalmSens.Comm.GenericCommMeasurement.TryProcessData">
      <summary>
            Try processing the data that's being received
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.CommMeasurement">
      <summary>
            Active Measurement.
            Used for all measurement techniques/methods, except EIS (ImpedemetricMeasurement) and MultiStepMC (for PS2 only)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._iScan">
      <summary>
            The current Scan number, for mux and CV measurements 
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._measBuff">
      <summary>
            Buffer used to read measurement data from.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.IsOffline">
      <summary>
            Gets a value indicating whether this instance is offline (loaded from a device file).
            </summary>
      <value>
        <c>true</c> if this instance is offline; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.Conn">
      <summary>
            Comm object used for communication.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.SendDataDuringMeasurement">
      <summary>
            Whether data points will be sent during or after the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.GetStatusFast(System.Int32)">
      <summary>
            Gets the reading status during fast measurements
            </summary>
      <param name="value">The reading within bit range. Integer between 0 - 65536</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.WaitForChar(System.Char)">
      <summary>
            Wait for a char to arrive. 
            Does not consume the char waited for.
            </summary>
      <param name="cmd">Char to wait for</param>
      <returns>
            false if the char is not available, true otherwise
            </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.OnHold">
      <summary>
            If measurement is currently on hold
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ToggleHold">
      <summary>
            Pauses the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Reverse">
      <summary>
            Reverses the direction
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>TRUE if the measurement is finished</returns>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.PretreatmentDone">
      <summary>
            Indicates whether pretreatment is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ProcessData">
      <summary>
      </summary>
      <returns>True if done</returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.nPoints">
      <summary>
            Number of points that are going to be measured.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasureOnMuxChannel(System.Int32)">
      <summary>
            Measurement again after switching to a new mux channel
            </summary>
      <param name="channel">first channel is 0</param>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will 
            take care of announcing it.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Start">
      <summary>
            Starts a measurement with the currently selected method.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager">
      <summary>
            Wrapper around PalmSens.Comm.ClientConnection.
            This class uses a Timer with intervals of 100 ms to handle incoming data. 
            It also generates several events.
            
            See the ConnectionExample project (part of the SDK) for communications without
            the use of this helper class.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.Disconnected">
      <summary>
            Occurs when [disconnected].
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.StatusChangedEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.StateChanged">
      <summary>
            This event is raised when the State is changed.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.CellStateChanged">
      <summary>
            This event is raised when the property Cell of this class is set to true or false
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.PotentialOrCurrentChanged">
      <summary>
            This event is raised when the Cell is set to on or off.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.BeginMeasurementEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginMeasurement">
      <summary>
            This event is raised whenever PalmSens starts sending new measurement data
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended. When this event is 
            raised, the Comm object is already back in "Idle" mode.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.MeasurementStarted">
      <summary>
            Occurs as soon as measure is called, before the actual measurement has started
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveCurve">
      <summary>
            This event is raised whenever the device starts sending data and the default curve for the running technique has been created.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveEISData">
      <summary>
            This event is raised whenever the device starts sending new EISData.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveCurve">
      <summary>
            This event is raised whenever a complete curve (Finished is set to <c>true</c>) has been received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of the device.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DebugEventHandler">
      <summary>
            Raised when debug information is received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.DebugHandler">
      <summary>
            Occurs when [debug handler].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.UnknownDataEvent">
      <summary>
            Event raised whenever data is received that cannot be interpreted by the current
            Comm object.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventArgs">
      <summary>
            Arguments for the event raised when data is received that can't be interpreted.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.Data">
      <summary>
            Obtain the unknown data that has been received.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.PacketCount">
      <summary>
            Return the number of packets 
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventHandler">
      <summary>
            Delegate for handlers of the UnknownData event
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Devices.Device,System.Int32)">
      <summary>
            Create a new connection with a PalmSens over the given stream
            </summary>
      <param name="d">The PalmSens or EmStat device.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Comm.ClientConnection)">
      <summary>
            Initializes a new instance of the <see cref="N:PalmSens.Comm" /> class.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Text">
      <summary>
            The text representation of this CommManager object.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.TimerPeriod">
      <summary>
            Gets or sets the timer period in ms.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Device">
      <summary>
            The connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Capabilities">
      <summary>
            Gets the capab of the connected device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ResultLastMeasurement">
      <summary>
            This collection contains the result of the last measurement
            Contains curves or EIS data
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentCurve">
      <summary>
            Contains the curve that is currently being measured. If possible, this 
            Curve object will be updated whenever new points are measured.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Disconnect(System.Boolean)">
      <summary>
            Disconnects the comm
            </summary>
      <param name="silent">if set to <c>true</c> [silent]. When silent disconnect event is not raised.</param>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ActiveMeasurement">
      <summary>
            The measurement active
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.RemainingMeasurementTime">
      <summary>
            Gets the remaining measurement time.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Dispose">
      <summary>
            Disposes the connection (disconnects)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ClientConnection">
      <summary>
            The Comm class (this class) is a wrapper around the ClientConnection class
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceSerial">
      <summary>
            Gets the device serial number as stored in the permanent memory of the connected device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ResumeParsing">
      <summary>
            Resumes the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.PauseParsing">
      <summary>
            Pauses the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Finalize">
      <summary>
            Destroy the current Comm object. 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Status">
      <summary>Contains the last known status of the PalmSens.
            </summary>
      <remarks>
            This property is updated every few seconds when the PalmSens is in idle 
            mode. </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.StatusWhenIdle">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DeviceState">
      <summary>
            Reflects the last known state of the connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.State">
      <summary>
            Gets or sets the current device state
            </summary>
      <value>
            The state.
            </value>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Potential">
      <summary>
            Sets or gets the potential in Volts. 
            On set; if the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Current">
      <summary>
            Read or set current in uA. 
            If the current is set and PalmSens is not yet in Galvanostatic mode, it will be switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotPotential">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOnAndCurrentRange(PalmSens.CurrentRange)">
      <summary>
            Sets the WE2 and current range.
            </summary>
      <param name="currentRange">The current range for the WE2.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOff">
      <summary>
            Sets the bipot off.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotCurrentRange">
      <summary>
            The current range of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotCurrentRead">
      <summary>
            Gets the last BiPot current read.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotReadingStatus">
      <summary>
            Gets the last BiPot currentstatus
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of BiPot CR
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotReadingStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ExternalOutput">
      <summary>
            Set external analog output in Volt (pin 8 of PalmSens miniDIN connector).
            0.000 - 4.096 V, resolution is 1 mV
            </summary>
      <value>
            The external output in V.
            </value>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartOnWorkerThread(PalmSens.Method,PalmSens.MeasType)" -->
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartTask(PalmSens.Method,PalmSens.MeasType)" -->
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            If multiplexer settings are enabled, they're used.
            MeasType = new
            </summary>
      <param name="m">The method.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,System.Int32)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            </summary>
      <param name="m">The method</param>
      <param name="muxchannel">The multiplexer channel.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,PalmSens.MeasType)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            If multiplexer settings are enabled, they're used.
            </summary>
      <param name="m">The method</param>
      <param name="measType">Type of the measurement.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentRange">
      <summary>
            Get or set the current range, as PalmSens.CurrentRange
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Version">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Busy">
      <summary>
            Whether the PalmSens is busy at the moment</summary>
      <remarks>
            This property is set to true when the PalmSens is active downloading new 
            firmware or running a measurement.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Active">
      <summary>
            Whether the PalmSens is active.
            </summary>
      <remarks>
            True if the PalmSens this Comm class is connected to is active, False if it is not.
            This value may be False if there is no PalmSens connected, the PalmSens is powered off or 
            when the PalmSens is not responding for any other reason.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentMuxChannel">
      <summary>
            The active multiplexer channel (0-7 in case of 8 channel device)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Stirrer">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PotentialOffset1V">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Method">
      <summary>
            The method currently in use on the PalmSens.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Abort">
      <summary>
            Abort the current measurement running.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DigitalLineD0">
      <summary>
            Read digital input on D0
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.AnalogInput">
      <summary>
            Read auxilary analog input signal in selected unit
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Mode">
      <summary>
            Current mode of measurement at the PalmSens device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CellOn">
      <summary>
            Indicates whether the electric cell is currently on or off 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.IsBipotOn">
      <summary>
            Whether the bipot (WE2) is enabled
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ChannelIndex">
      <summary>
            Gets or sets the channel number assigned to this comm.  
            </summary>
      <value>
            The channel.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CellOffAfterSeconds(System.Int32)">
      <summary>
            Leaves the cell on (doesn't turn it on) for a specified period
            </summary>
      <param name="seconds">The number of seconds before turning the cell off.</param>
    </member>
    <member name="T:PalmSens.Comm.DeviceSerial">
      <summary>
            Device serial information used for saving info to EEPROM of PS3 and EmStat
            </summary>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.ReadSerial(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the device serial.
            </summary>
      <param name="c">The clientConnection.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.WriteSerial(PalmSens.Comm.DeviceSerial,PalmSens.Comm.ClientConnection)">
      <summary>
            Write serial number
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="T:PalmSens.Comm.Firmware">
      <summary>
            Describes the firmware for PalmSens. Use this object to upload new firmware.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Firmware.Block">
      <summary>
            Represents one block of data from the PalmSens Firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.address">
      <summary>
            Memory address this block should be written to
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.data">
      <summary>
            Data to write
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.lineno">
      <summary>
            Line number in file
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.blocks">
      <summary>
            The blocks of data in the firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Version">
      <summary>
            Firmware version
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.BootloaderDevice">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Device">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream)">
      <summary>
            Load firmware.
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream,System.String)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="fileStream">stream of hex file</param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.StreamReader)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="file">hex file</param>
    </member>
    <member name="P:PalmSens.Comm.Firmware.Filename">
      <summary>
            Gets the filename.
            </summary>
      <value>
            The filename.
            </value>
    </member>
    <member name="P:PalmSens.Comm.FirmwareUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs">
      <summary>
            Current status of uploading progress of the PalmSens firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Current">
      <summary>
            Number of blocks of firmware downloaded so far.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Total">
      <summary>
            Total number of blocks due to be downloaded.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventHandler">
      <summary>
            Delegate for handlers of the DownloadProgressEvent
            </summary>
    </member>
    <member name="E:PalmSens.Comm.FirmwareUploader.DownloadProgress">
      <summary>
            Raised whenever a new data block of firmware is sent
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ReadingStatus">
      <summary>
            Describes the status of the current or potential measurement
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Unknown">
      <summary>
            Status is not known or could not be determined.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.OK">
      <summary>
            Status is OK. Measurement is reliable
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Overload">
      <summary>
            Overload
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Underload">
      <summary>
            Underload
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Status">
      <summary>
            Contains the status information of a PalmSens at a certain moment. Used for parsing measurement packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.#ctor(PalmSens.Data.VoltageReading,PalmSens.Data.CurrentReading,System.Int32,System.Double,PalmSens.Comm.Status.EnumPretreatmentPhase,PalmSens.Devices.DeviceCapabilities,System.Collections.Generic.List{PalmSens.Data.GenericValue})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.Status" /> class.
            </summary>
      <param name="potentialReading">The potential reading.</param>
      <param name="currentReading">The current reading.</param>
      <param name="extraValue">Extra value. Is the raw auxiliary value as received</param>
      <param name="noise">The noise level.</param>
      <param name="pretPhase">The pretreatment phase.</param>
      <param name="capabilities">The device capabilities.</param>
    </member>
    <member name="F:PalmSens.Comm.Status.Noise">
      <summary>
            Noise as indicated by PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.PretreatmentPhase">
      <summary>
            Pretreatment phase (implemented since PS4.4 or ES2.5)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.None">
            The instrument doesn't send this kind of information
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Conditioning">
            The instrument is conditioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Depositing">
            The instrument is depositioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Equilibrating">
            The instrument is equilibrating
        </member>
    <member name="F:PalmSens.Comm.Status.PotentialReading">
      <summary>
            Measured potential with status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.CurrentReading">
      <summary>
            Measured current with range and status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.ExtraValue">
      <summary>
            Extra raw optional value sent with the package.
            Can be: 
            -WE2 current value
            -Aux. input voltage, 
            -DC current for ACV, 
            -Reverse current for SquareWave voltammetry
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.ToString">
      <summary>
            Give string presentation of the current status of the PalmSens.
            </summary>
      <remarks>The format in which the status is returned is: E=0.000,I=0.000,T=10.0C</remarks>
      <returns>String describing this status object</returns>
    </member>
    <member name="T:PalmSens.Comm.StatusEventHandler">
      <summary>
            Delegate that receives Status.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventHandler">
      <summary>
            Delegate that receives Debug Information.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.StatusEventArgs">
      <summary>
            Arguments for an event that receives the status of the PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.StatusEventArgs.GetStatus">
      <summary>
            Return the status
            </summary>
    </member>
    <member name="T:PalmSens.CustomMeasurement">
      <summary>
            Custom measurements.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.Aborted">
      <summary>
            Whether or not this measurement has been aborted.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.ActualCR">
      <summary>
            CurrentRange 
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.Conn">
      <summary>
            Comm object in use.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.MeasurementStarted">
      <summary>
             The moment the measurement was started
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Create a new CustomMeasurement.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="F:PalmSens.CustomMeasurement.LastMuxChannel">
      <summary>
            Last mux channel applied
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AutoRanging(System.Single)">
      <summary>
            Autoranging
            </summary>
      <param name="current">current value</param>
      <returns>current status</returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.NextState">
      <summary>
            Nexts the state.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.MeasureIterate">
      <summary>
            Do next measurement iteration
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AdjustCountdown">
      <summary>
            Adjusts the countdown.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.Simulator">
      <summary>
            Simlates a PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Potential">
      <summary>
            Current value set on the DAC
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotPotential">
      <summary>
            Bi Pot Potential as set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.CurrentRange">
      <summary>
            Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Mode">
      <summary>
            Mode set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.FastMode">
      <summary>
            Whether fast mode was set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotCurrentRange">
      <summary>
            Bi Pot Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.ExternalOutput">
      <summary>
            External output, used for stirring and multiplexer.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.SimMeasurement">
      <summary>
            A simulated measurment, based on method parameters
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Simulated.SimMeasurement.Finalize">
      <summary>
            Destroy the current object. 
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.parameters">
      <summary>
            All parameter names used in firmware
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Bits">
      <summary>
            The amount of bits this device uses.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxRawValue">
      <summary>
            Gets the maximum raw value, based on the amount of bits.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.VRange">
      <summary>
            Gets the reference voltage range of the device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Offset">
      <summary>
            Gets the voltage offset of the device, initially this is a predefined value for the device based on internal ADC gain, but it can be adjusted during calibration.
            When calibrating, keep in mind this Offset might not be 0, and include that in the calculation of the new offset.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Gain">
      <summary>
            Gets the voltage Gain of the device, initially this is a predefined value for the device based on internal ADC offset, but it can be adjusted during calibration.
            When calibrating, keep in mind this Gain might not be 1, and include that in the calculation of the new Gain.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Resolution">
      <summary>
            Gets the resolution of this analog device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.StepSize">
      <summary>
            Gets the Analog step size for the input or output of this component.
            </summary>
      <value>
            The size of the step as Resolution * Gain.
            </value>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxValue">
      <summary>
            Gets the maximum analog value this device can handle.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MinValue">
      <summary>
            Gets the minimum analog value this device can handle.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRaw(System.Single,System.Boolean)">
      <summary>
            To the raw.
            Offset is not used for for example the step potential.
            </summary>
      <param name="val">The value.</param>
      <param name="useOffset">if set to <c>true</c> [use offset].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRawBiPolar(System.Single)">
      <summary>
            Use for analog values. 
            Bits = Signbit
            </summary>
      <param name="val">The voltage</param>
      <returns>A signed integer, Bits is signbit</returns>
    </member>
    <member name="T:PalmSens.Devices.GetDeviceCapabilities">
      <summary>
            Returns the corresponding capab for a deviceType
            </summary>
    </member>
    <member name="M:PalmSens.Devices.GetDeviceCapabilities.GetCapabilities(PalmSens.Comm.enumDeviceType,PalmSens.Devices.Device)">
      <summary>
            Gets the capabilities of the connected deviceType.
            </summary>
      <param name="deviceType">The deviceType.</param>
      <param name="device">The device.</param>
      <param name="firmwareversion">The firmwareversion.</param>
      <returns>
            DeviceCapabilities
            </returns>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">No capab for unknown deviceType</exception>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities">
      <summary>
      </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.SpecialFirmwareDescription">
      <summary>
            This string contains the build date for newer firmware versions (since May 2017).
            For special (custom) firmware builds it contains a brief description.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port. 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
             </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.BiPotPresent">
      <summary>
            True if a bipot module is present (PalmSens series only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software. 
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            /// Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.BiPotCalibration">
      <summary>
            Contains PalmSens BiPot calibration information
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISsettings">
      <summary>
            Contains EIS settings loaded from XML file
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISCalibration">
      <summary>
            Contains calibration values loaded from EEPROM
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HardwareRevision">
      <summary>
            Gets the hardware revision.
            1 = ....
            </summary>
      <value>
            The hardware revision.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode">
      <summary>
            BiPot mode for EmStat3 and EmStat3 Bipot boards
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EmStatBiPotMode">
      <summary>
            Used for EmStat3 BiPot instruments
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsEmStatBipotBoard">
      <summary>
            Whether the deviceType is a the Bipot version of an EmStat (has its own USB/COM)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelPotential">
      <summary>
             The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelWE2">
      <summary>
             The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.NumMuxChannels">
      <summary>
            Number of mux channels supported. Any value below 1 
            means multiplexer operations are not supported by the instrument.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this 
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedBipotRanges">
      <summary>
            list of current ranges for the BiPot module supported by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsOfflineMeasurements">
      <summary>
            Whether off-line measurements are supported
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsDisplayMethodName">
      <summary>
            Gets a value indicating whether the device supports displaying a method name.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.SupportsRange(PalmSens.CurrentRange)">
      <summary>
            Check if deviceType supports the range.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsWireless">
      <summary>
            Whether the connection is a Bluetooth connection.
            Currently only used as work around to keep EIS meas working with BT
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsImpedance">
      <summary>
            Whether or not the deviceType supports impedance measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DefaultCapabilities">
      <summary>
            Describes default capabilities to use when nothing is connected
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DefaultCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.NoLicenseInfo">
      <summary>
            Raised when a device connection can't return any license info
            </summary>
    </member>
    <member name="T:PalmSens.Devices.IAndroidDevice">
      <summary>
            Temporary class used by PStouch. Integrate into Device in the future?
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open">
      <summary>
            Opens this instance and auto detects the baudrate if nescessary.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open(System.Int32)">
      <summary>
            Opens the connection at the specified baudrate.
            </summary>
      <param name="baudrate">The baudrate.</param>
    </member>
    <member name="F:PalmSens.Devices.Device.DeviceProtocol">
      <summary>
            Type of version command used.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EISSettings">
      <summary>
            All settings are read from an XML file with the name
            eissettingsps[v].xml where v is the hardware version of the PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettings.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettings.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxFreqForRange(System.Int32)">
      <summary>
            Gets the maximum frequency for range.
            Use this instead of field array MaxFreqForRange
            </summary>
      <param name="cr">The current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetCurrentRangeForFreq(System.Double)">
      <summary>
            Gets the current range for the frequency
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxPGAgain(System.Single,PalmSens.CurrentRange)">
      <summary>
            Gets the PGAgain byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="cr">The current range.</param>
      <returns>
            the byte for the cf filter
            </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.LowResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered low
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.HighResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered high
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetFilterCFByte(System.Single,System.SByte,System.Boolean)">
      <summary>
            Gets the filter byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>the byte for the CF filter</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MaxPhaseshift">
      <summary>
            Window max where phase values are used for freq0
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MinPhaseshift">
      <summary>
            Window min where phase values are used for freq0
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EmstatCapabilities">
      <summary>
            Describes Emstat capab.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.EmstatCapabilities" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
      <exception cref="T:System.InvalidOperationException">EmStat cannot control a current.</exception>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV. 
            Not supported by EmStat
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            NOT USED
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat2Capabilities">
      <summary>
            Describes EmStat2 capab (inherits most of EmStat1 capab)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat2Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat3Capabilities">
      <summary>
            EmStat3 Device capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3PCapabilities">
      <summary>
            EmStat3+ Device Capabilities
            </summary>
      <seealso cref="T:PalmSens.Devices.Emstat2Capabilities" />
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3BPCapabilities">
      <summary>
            Describes EmStat3 in BiPot mode (part of PolyEmStat)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat3BPCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.Emstat3BPCapabilities" /> class.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.PalmSensCapabilities">
      <summary>
            Describes PalmSens capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DeviceType">
      <summary>
            The device type for this Capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelReverseCurrent">
      <summary>
             The internal channel used for measuring the reverse current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSensCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Currently only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are sent in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens3Capabilities">
      <summary>
            Describes PalmSens3 capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrentNoPGA">
      <summary>
            Gets the current bypassing the PGA
            </summary>
      <value>
            The channel current with no PGA.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this instrument.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetCutoffFrequency(System.Int32,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="crByte">The current range as byte where 0=1nA, 1=10nA, 2=100nA, 3=1uA etc.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens4Capabilities">
      <summary>
            Describes PalmSens4 capabilities.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.CellTypes">
      <summary>
            Possible cell types (internal test sensor or external).
            Used for test internal sensors.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetCutoffFrequency(PalmSens.CurrentRange,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="range">The current range.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxAmpMDAC">
      <summary>
            Vamp = 435 mV (measured)
            Vamp rms = 600 mV / sqrt(2)
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS4.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilterADC">
      <summary>
            ac Filter for different frequencies
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetFilterACByte(System.Single)">
      <summary>
            Gets the filter ac.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.IdleFraction" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqAD16">
      <summary>
            Use 12 bit ADC when frequency is higher than this value (Hz)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD12">
      <summary>
            Maximum sampling rate (Hz) of 12 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD16">
      <summary>
            Maximum sampling rate (Hz) of 16 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12A">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12B">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD16A">
      <summary>
            Time for one AD concersion for the 16 bit
            tSingleAD nadc=1 -&gt; 1.8 us
            tSingleAD nadc&gt;1 -&gt; 2.04 us
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxLowFreqPhaseDelayCorrection">
      <summary>
            Use tpdSlope16LowFreq and tpdIntercept16LowFreq for phasedelay correction below this value
            instead of more accurate nPointsAC indexed offsets
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16LowFreq">
      <summary>
            Determined slope of phasedelay vs tintac for lower frequencies
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16LowFreq">
      <summary>
            Offset for phasedelay correction for lower frequencies
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16">
      <summary>
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope12">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset12">
      <summary>
            In seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead12">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 12 bit mode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead16">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 16 bit mode
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetDAOverhead(System.Single)">
      <summary>
            Gets the DA overhead.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>DA overhead time in s</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GettSingleADConversion(System.Single)">
      <summary>
            Gets the time for a single AD conversion.
            </summary>
      <param name="frequency">The frequency in Hz.</param>
      <returns>
            time in s
            </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilterADC">
      <summary>
            ADC Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterAcFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibHSTABFreq0Default">
      <summary>
            Default value for HSTAB freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibAcCoupledFreq0Default">
      <summary>
            Default value for AC coupled freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibPGAGainFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterCFFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>
            the abbrevation
            </returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.CurrentRange">
      <summary>
            Describes a specific current range
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte,System.String,System.Single)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
      <param name="description">The description.</param>
      <param name="factor">The factor.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.GetCRString(System.SByte)">
      <summary>
            The available current ranges as string
            </summary>
    </member>
    <member name="F:PalmSens.CurrentRange.AvailableCurrentRanges">
      <summary>
            The available current ranges as CurrentRange
            Where: 
            index=0 = 100pA
            index=1 = 1nA
            index=2 = 10nA
            index=3 = 100nA
            index=4 = 1uA
            ...
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.GetRanges(System.Int32,System.Int32)">
      <summary>
            Gets the range array.
            </summary>
      <param name="minRange">The min range as int from -1 (100 pA) to 8 (100 mA).</param>
      <param name="maxRange">The max range as int from -1 (100 pA) to 8 (100 mA).</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromMicroamps(System.Double)">
      <summary>
            Returns CurrentRange from a range given in microamps as a double.
            </summary>
      <param name="p">The currentrange in microamps.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromCRByte(System.SByte)">
      <summary>
            Returns CurrentRange from a range given as a byte from 0 - 7.
               -1 = "100 pA"
               0 = "1 nA"
               1 = "10 nA"
               2 = "100 nA"
               3 = "1 uA"
               4 = "10 uA"
               5 = "100 uA"
               6 = "1 mA"
               7 = "10 mA"
            
               F = "100 pA"
            </summary>
      <param name="p">The currentrange as a byte.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Lower">
      <summary>
            Returns one CurrentRange lower than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Higher">
      <summary>
            Returns one CurrentRange higher than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format(System.Double)">
      <summary>
            Formats the specified current provided in uA
            </summary>
      <param name="current">The current.</param>
      <returns>
            the formatted current
            </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format2(System.Double)">
      <summary>
            Formats the specified current provided in the range as is this class
            </summary>
      <param name="current">The current in the selected range (-2 to 2).</param>
      <returns>the formatted current</returns>
    </member>
    <member name="T:PalmSens.DataFiles.AnalysisMeasurementFile">
      <summary>
            Class for storing and loading PalmScan analysis files
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Method,System.IO.Stream)">
      <summary>
            Load an Analysis from file
            </summary>
      <param name="strfilename">path to mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new Analysisfile for the specified measurement
            </summary>
      <param name="m">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Load(System.IO.Stream)">
      <summary>Loads an analysis file containing multiple Curves.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Save(System.IO.Stream)">
      <summary>Saves multiple Curves to an analysis file.</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CSVDataFile">
      <summary>
            Save files as comma-separated values file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CSVDataFile.SaveCurves(System.IO.Stream,PalmSens.Plottables.Curve[])">
      <summary>
            Saves the specified filename in comma-separated values (CSV) format.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="curves">The curve(s).</param>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Logf">
      <summary>Log(f) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Phase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Idc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZIm">
      <summary>Z'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogY">
      <summary>Log(Y) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.CR">
      <summary>Current Range values</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CurveFile">
      <summary>
            Class for storing/loading curves in the PalmScan/PalmTime format
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.CurveFile.Curve">
      <summary>
            Curve associated with this CurveFile
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionScan">
      <summary>
            Extension for scan data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionTime">
      <summary>
            Extension for vs time data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileDialogFilter">
      <summary>
            Can be used to load and save curves using the System.Windows.Forms.FileDialog
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.Method">
      <summary>
            Method used
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Saves the specified curve with appropriate extension.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename with or without extension. Correct extension is added automatically if needed.</param>
      <param name="c">The curve.</param>
      <param name="changeTitle">if set to <c>true</c> curve title is changed to filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,System.IO.StreamReader,PalmSens.DataFiles.MethodFileType,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="methodStream">location of method file to load with this curve file. Can be NULL if not available.</param>
      <param name="methodFileType">location of method file to load with this curve file</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,PalmSens.Method,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="method">Method file to load with this curve file.</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new curvefile for the specified curve
            </summary>
      <param name="c">curve to save</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">path to save curve to</param>
      <param name="changeTitle">if set to <c>true</c>, the curve title is set to the filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.DataFile">
      <summary>
            Base class for storing/loading data from files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.POLE">
      <summary>
            Replacement for pole |, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.SPACE">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.TAB">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.CRLF">
      <summary>
            Replacement for carriage return line feed, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.NumberFormat">
      <summary>
            Default numberformat used when storing integer and floating-point data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToSingle(System.String)">
      <summary>
            Convert a string to a single using the current numberformat
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding single or 0.0F if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToInt(System.String)">
      <summary>
            Convert a string to an integer
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding integer value or 0 if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToBool(System.String)">
      <summary>
            Convert a string to a boolean
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding boolean</returns>
    </member>
    <member name="T:PalmSens.DataFiles.EISAnalysisFile">
      <summary>
            Saves the EIS data as a file, compatible with EIS Spectrum Analyzer
            http://www.abc.chemistry.bsu.by/vi/analyser/
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.EISDataFile">
      <summary>
             Class for storing/loading in PSImp format
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.EISDataFile.FileExtension">
      <summary>
            Value is ".pseisdata"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.DataFiles.EISDataFile" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.Save(System.String,PalmSens.Plottables.EISData,System.IO.Stream,System.String)">
      <summary>
            Saves the specified EIS data as .pseisdata file
            </summary>
      <param name="source">The source (program name and version).</param>
      <param name="eisdata">The EISData.</param>
      <param name="filename">The filename.pseisdata</param>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.FromStream(System.IO.Stream)">
      <summary>
            Loads EIS data from .pseisdata file.
            </summary>
      <param name="fileStream">The filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.JsonToken">
      <summary>
            Possible JSON tokens in parsed input.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.InvalidJsonException">
      <summary>
            Exception raised when <see cref="T:PalmSens.DataFiles.JsonParser" /> encounters an invalid token.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.JsonParser">
      <summary>
            A parser for JSON.
            <seealso cref="!:http://json.org" /></summary>
    </member>
    <member name="T:PalmSens.DataFiles.MeasurementFile">
      <summary>
            Base class with support functions for saving/storing measurement data
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MeasurementFile.Measurement">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor">
      <summary>
            Create a new measurement file with an empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new MeasurementFile for the specified measurement
            </summary>
      <param name="mm">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.LoadCommonCurves(System.String[],System.IO.StreamReader,System.Int32)">
      <summary>
            Load curve data from a measurement file
            </summary>
      <param name="captions">
      </param>
      <param name="file">StreamReader to read the data from</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCurves(System.IO.Stream)">
      <summary>Saves multiple Curves to a file. This format is NOT supported by Palm Instruments' PalmScan and PalmTime or Pocket PC older than versions 2.0.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCommonCurves(System.IO.StreamWriter)">
      <summary>
            Save the curve data from this measurement to file
            </summary>
      <param name="file">StreamWriter to write to</param>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile">
      <summary>
            Saves and loads files in a format supported by Palm Instruments and Ivium PalmSens software.
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.Filename">
      <summary>returns the currently used filename for this method.</summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Method">
      <summary>returns the Method.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Save(System.String)">
      <summary>Saves the methodparameters to a file compatible with common PalmSens software.
            OLD STYLE, DO NOT USE</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EField">
      <summary>
            Correponding variable names for the potential fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tField">
      <summary>
            Corresponding variable names for the time fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.ELabel">
      <summary>Each Evalue has it's Elabel with the same index, describing the function of the value. The Elabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tLabel">
      <summary>Each tValue has it's tLabel with the same index, describing the function of the value. The tLabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EUnit">
      <summary>Each Evalue has it's EUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tUnit">
      <summary>Each tValue has it's tUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMin">
      <summary>Describes the minimum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMin">
      <summary>Describes the minimum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMax">
      <summary>Describes the maximum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMax">
      <summary>Describes the maximum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.HandleAsCorrosionMethod">
      <summary>
            If true; include the parameters used for corrosion
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32,System.Boolean)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <param name="includeCorrosionVars">if true; include the parameters used for corrosion</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(PalmSens.Method)">
      <summary>
            Create a new methodfile instance based on an existing method
            </summary>
      <param name="method">PalmSens.Method method</param>
      <returns>clone of method as methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String)">
      <summary>Loads an existing method.</summary>
      <param name="file">The methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads an existing method.
            </summary>
      <param name="fileStream">The methodfile</param>
      <param name="includeCorrosionVars">if set to <c>true</c> include corrosion variables for this method (if applicable)</param>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelY">
      <summary>The label for the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelX">
      <summary>The label for the X axis of the plot.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.GetMethodData(System.String)">
      <summary>
            Get method data.
            </summary>
      <param name="name">name of parameter</param>
      <returns>value</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single,System.Int32)">
      <summary>
            Change the t[index] or val[index] for Multistep methods
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
      <param name="index">index for val (which is for E or i)</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single)">
      <summary>
            Change the value for a method parameter
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_EValue(System.Int32)">
      <summary>
            Contains all potential related parameters of the method.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_EValue(System.Int32,System.Single)">
      <summary>
            Change value of potential parameterFS
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new parameter value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_tValue(System.Int32)">
      <summary>
            Obtain value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <returns>value of parameter</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_tValue(System.Int32,System.Single)">
      <summary>
            Change value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Load a method file. This will read the first few line from the 
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Load a method file. This will read the first few line from the
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if set to <c>true</c> [handle as corrosion method].</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor">
      <summary>
            Create a new MethodFileOld
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Technique">
      <summary>returns the indexnumber for this technique.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Equals(System.Object)">
      <summary>
            Check whether this object is equal to o
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.ScanMethodExtension">
      <summary>
            Gets the extension for old style scan method files (.pms).
            </summary>
      <value>
            The scan method extension (.pms).
            </value>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.TimeMethodExtension">
      <summary>
            Gets the extension for old style time method files (.pmt).
            </summary>
      <value>
            The time method extension (.pmt).
            </value>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.LoadAnyMethodFile(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads any PalmSens method file (.pms, .pmt or .psmethod).
            </summary>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="fileName">The filename.</param>
      <param name="isCorrosion">if set to <c>true</c> [is corrosion].</param>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPms">
      <summary>
            Old style method filetype (.pms)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPmt">
      <summary>
            Old style method filetype (.pmt)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFile2">
      <summary>
            New style methodfile filetype (.psmethod)
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile2">
      <summary>
            Save method file to PSTrace methodfile format version 2.0
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Save(PalmSens.Method,System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file.
            Stream is automatically closed afterwards.
            </summary>
      <param name="method">The method.</param>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="filepath">The filepath.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Serialize(PalmSens.Method,System.IO.TextWriter,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file
            </summary>
      <param name="method">The method.</param>
      <param name="tw">TextWriter to serialize to.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.FromStream(System.IO.StreamReader)">
      <summary>
            Read a file containing method parameters and return the Method
            </summary>
      <returns>A method</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
      <returns>Method</returns>
    </member>
    <member name="T:PalmSens.DataFiles.MuxMeasurementFile">
      <summary>
            Class for loading/storing multiple curves data in one file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MuxMeasurementFile.FileExtension">
      <summary>
            Value is ".mux"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.#ctor(PalmSens.Method,System.IO.StreamReader)">
      <summary>
            Load a multiple curves measurement from file
            </summary>
      <param name="fileStream">Stream of mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Load(System.IO.StreamReader)">
      <summary>Loads a multiple curves file containing multiple Curves.</summary>
      <param name="fileStream">path to mux data file</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.LoadOldMuxFile(System.IO.StreamReader,System.Int32,System.Int32)">
      <summary>
            Load curve data from an old style mux file, used on the PocketPC
            </summary>
      <param name="file">StreamReader to read the data from</param>
      <param name="nPoints">number of points to read</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Save(System.IO.Stream,PalmSens.Plottables.Curve[],PalmSens.Method,System.Boolean)">
      <summary>
            Saves multiple curves to a mux file.
            </summary>
      <remarks>In case the source of the curve array is from a multiplexer measurement, 
            the curves are saved with the title 'Channel n', where n is the number. 
            The MuxChannel property of every curve is used to determine which channels are saved.
            This is saved as a 16 bits unsined integer (so for max. 16 channels) on the 3rd line 
            of the file. In case isMultiplexer = false, this value is set to -1 so the channel numbers are ignored.
            </remarks>
      <param name="fileStream">Stream to save to</param>
      <param name="curveArray">Array of curves to save</param>
    </member>
    <member name="T:PalmSens.DataFiles.ScanMethodFile">
      <summary>
            Class for loading/saving PalmScan method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.ScanMethod">
      <summary>
            The corresponding Scan Method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.Method">
      <summary>
            Corresponding Method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor">
      <summary>
            Create a new empty instance.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.RefreshMethod">
      <summary>
            Set method data again.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
      <param name="includeCorrosionVars">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.Save(System.String)">
      <summary>Saves the current method to a file</summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.Measurements">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MetaData">
      <summary>
            Metadata for this PSSession (includes information about visible curves and such)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MethodForEditor">
      <summary>
            The method currently active in the method editor
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.FileExtension">
      <summary>
            The default file extension
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor(PalmSens.Measurement[],PalmSens.Method,PalmSens.DataFiles.JsonBag)">
      <summary>
            Create a new PSSessionFile for the specified measurement
            </summary>
      <param name="measurements">Measurements to save.</param>
      <param name="methodForEditor">The method selected for next measurement. This is the active method in the method editor of PSTrace.</param>
      <param name="metaData">Contains meta data to be saved with the session file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor">
      <summary>
            Create a new PSSessionFile
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.TimeMethodFile">
      <summary>
            Class for storing/load PalmTime method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.TimeMethod">
      <summary>
            Active time method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.Method">
      <summary>
            Active method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor">
      <summary>
            Create new empty instance
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod,System.Boolean)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
      <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
            /// <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param></member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.RefreshMethod">
      <summary>
            Reload method data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.Save(System.String)">
      <summary>Saves the current method to a file.</summary>
      <param name="strFilename">path to save to</param>
    </member>
    <member name="T:PalmSens.Data.EnumAxes">
      <summary>
            Axis enumerator
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.StartIndex">
      <summary>
            The start index of the new points that where added
            In the case of a CV this refers to the total points
            in the scan not too the number of points in each curve.
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.Count">
      <summary>
            The number of points added
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayType">
      <summary>
            Data array function enumerator for standard arrays
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray">
      <summary>
            Contains an array of generic values as part of a DataSet
            </summary>
    </member>
    <member name="F:PalmSens.Data.DataArray.Hidden">
      <summary>
            Hidden data arrays will not show up for the user. 
            They can be used for debug or calibration purposes
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Data.DataArray.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the DataArray class.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArray.OnNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added.
            </summary>
      <param name="nNewValuesAdded">The n new values added.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.InvokeNewDataAdded(PalmSens.Data.ArrayDataAddedEventArgs)">
      <summary>
            Invokes the NewDataAdded event.
            </summary>
      <param name="e">The <see cref="T:PalmSens.Data.ArrayDataAddedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="F:PalmSens.Data.DataArray.Unit">
      <summary>
            Gets the unit used for this data array.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetIndexArray">
      <summary>
            Gets an array of indices with the same lenght as this array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
            /// <param name="type">The data type stored in this DataArray.</param></member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="type">The data type stored in this DataArray.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.String,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="dataValueTypeStr">The value type of the datapoints.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.Smooth(System.Int32)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="M:PalmSens.Data.DataArray.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues">
      <summary>
            Gets the values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <param name="count">The amount of datapoints to inlcude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetDirection(System.Int32)">
      <summary>
            Gets the direction of the data in the array at the specified index (compared to preceeding value).
            </summary>
      <value>
            The direction.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayTime">
      <summary>
            Contains an array of tie values as part of a DataSet
            </summary>
      <seealso cref="T:PalmSens.Data.DataArray" />
    </member>
    <member name="M:PalmSens.Data.DataArrayTime.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayPotentials">
      <summary>
            Contains an array of potential values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayPotentials.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCurrents">
      <summary>
            Contains an array of current values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayCurrents.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCharge">
      <summary>
            DataArray calculating charge from TimeDataArray and CurrentDataArray
            </summary>
      <seealso cref="T:PalmSens.Data.DataArrayIntegrate" />
    </member>
    <member name="T:PalmSens.Data.DataArrayDerivative">
      <summary>
            Creates a new DataArray that calculates the derivative for each value in DataArrayY based on the first two indices of the DataArrayX (dx = Abs(DataArrayX[1]-DataArrayX[0]).
            Use DataArrayFunc.GetDataArrayDerivative(DataArrayX, DataArrayY) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayDerivative.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayLog">
      <summary>
            Creates a new DataArray that performs a mathematical function on all returned values.
            Use DataArrayFunc.GetDataArrayLog(DataArray) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayLog.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSet">
      <summary>
            A DataSet contains multiple arrays of values. All values are related by means of their indices.
            DataArrays in a DataSet should always have an equal amount of entries.
             </summary>
    </member>
    <member name="E:PalmSens.Data.DataSet.MultipleArraysNewDataAdded">
      <summary>
            Occurs when new data was added during a measurement.
            When this event is triggered all DataArrays have equal lenghts.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnMultipleArraysNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added to multiple arrays.         
            Arrays could have inequal lengths before the measurement is finished when a measurement has multiple scans.
            (each scan has its own array, therefore, during the measurement their lengths are not necessarily equal).
            </summary>
    </member>
    <member name="P:PalmSens.Data.DataSet.NPoints">
      <summary>
            Gets the number of points in each DataArray.
            </summary>
      <value>
            The number of points.
            </value>
    </member>
    <member name="P:PalmSens.Data.DataSet.IsFinished">
      <summary>Is true if a Curve is 'finished'. This means that smoothing or peak searching can be applied.</summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.Finish">
      <summary>
            Finishes this instance meaning that NPoints is fixed.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.AddDataArray(PalmSens.Data.DataArray)">
      <summary>
            Adds the data array to the collection.
            </summary>
      <param name="newArray">The new array.</param>
      <returns>The added data array</returns>
      <exception cref="T:PalmSens.Data.DataArrayAlreadyExistsException">
      </exception>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays">
      <summary>
            Gets the data arrays which are not hidden (DataArray.Hidden == false).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(PalmSens.Data.DataArrayType)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(System.Int32)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32)">
      <summary>
            Triggers NewDataAdded event for all related DataArrays
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32,System.Collections.Generic.List{PalmSens.Data.DataArray})">
      <summary>
            Triggers NewDataAdded event for the specified DataArrays
            Used for CV where each scan is a new array
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveDataPointFromAllArrays(System.Int32)">
      <summary>
            Removes the datapoint at the specified index from all arrays in this DataSet.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(PalmSens.Data.DataArrayType)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(System.Int32)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSetCommon">
      <summary>
            Contains values for Time, Potential and Current
            </summary>
      <seealso cref="T:PalmSens.Data.DataSet" />
    </member>
    <member name="T:PalmSens.Data.DataSetEIS">
      <summary>
            The default DataSet for EIS measurements used by EISData object
            </summary>
      <seealso cref="T:PalmSens.Data.DataSetCommon" />
    </member>
    <member name="M:PalmSens.Data.IDataValue.Copy">
      <summary>
            Adressing a DataValue as a IDataValue boxes it as a reference (so for a deep copy we then need a copy function)
            </summary>
    </member>
    <member name="T:PalmSens.Data.CurrentReading">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.#ctor(System.Double,PalmSens.CurrentRange,PalmSens.Comm.ReadingStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.CurrentReading" /> struct.
            </summary>
      <param name="value">The value in uA.</param>
      <param name="range">The range used.</param>
      <param name="status">The status.</param>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.ValueInRange">
      <summary>
            The current in the corresponding current range
            </summary>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.Value">
      <summary>
            The current in uA 
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.CurrentRange">
      <summary>
            The current range used for this reading
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.ReadingStatus">
      <summary>
            The reading status
            </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValue">
      <summary>
            Gets the formatted value in uA.
            </summary>
      <returns>Formatted with exponential</returns>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValueInCR">
      <summary>
            Gets the formatted value in the current range.
            </summary>
      <returns>Example: 0.5000</returns>
    </member>
    <member name="M:PalmSens.Data.VoltageReading.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 1.2341 V</returns>
    </member>
    <member name="M:PalmSens.Data.GenericValue.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 0.123</returns>
    </member>
    <member name="T:PalmSens.Data.DeviceFile">
      <summary>
            Represents a measurement file from a device
            </summary>
    </member>
    <member name="T:PalmSens.Data.SessionManager">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Measurement" />
    </member>
    <member name="F:PalmSens.Data.SessionManager.CurveCollection">
      <summary>
            Collection of all available curves in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.EISDataCollection">
      <summary>
            Collection of all available EISData in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.AnalyticalMode">
      <summary>
            If <c>true</c> the peak search uses the ScanMethod.PeakWindow value for peak detection
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UseBlankIfAvailable">
      <summary>
            The use blank if available
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedCurve">
      <summary>
            Gets or sets the user selected curve.
            TreeViewCurves sets this value when a new curve is added to its list.
            </summary>
      <value>
            The user selected curve.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedEISData">
      <summary>
            Gets or sets the selected EIS data.
            TreeViewEISData sets this value when a new curve is added to its list.
            </summary>
      <value>
            The selected EIS data.
            </value>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UserSelectedDataType">
      <summary>
            The selected data type by a user. This field can be used to determine UI actions based on what is currently selected by the user.
            Used in PSTrace to determine what kind of data is selected in the Legend.
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedMeasurement">
      <summary>
            Gets or sets the selected measurement.
            </summary>
      <value>
            The selected measurement.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.MethodForEditor">
      <summary>
            Gets or sets the method that will be used for the next measurement.
            This property is reflected in MethodEditor if SessionManager is initialized with MethodEditor.InitSessionManager
            Event MethodForMeasurementChanged is triggered when value changed.
            </summary>
      <value>
            The method to be used for next measurement.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Load(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Loads the specified filename.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filepath">The filename with full path which will be used to set the <c>SavedToFile</c> property of Measurements, Curves and EISData classes.</param>
      <param name="add">if set to <c>true</c> do not clear collection before load.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.AddMeasurement(PalmSens.Measurement)">
      <summary>
            Adds the measurement to the collection. Raises MeasurementsAdded.
            </summary>
      <param name="m">The Measurement.</param>
      <returns>The added measurement</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInAllMeasurements">
      <summary>
            Finds the peaks or levels in all curves in all Measurements in this SessionManager using parameters from corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInSelectedCurve">
      <summary>
            Finds the peaks or levels in SelectedCurve using the Method parameters from the corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevels">
      <summary>
            Removes all existing peaks or levels in all Curves of all Measurements in this SessionManager.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevelsSelectedCurve">
      <summary>
            Removes all peaks or levels in SelectedCurve;
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCurveForMeasType(PalmSens.MeasType)">
      <summary>
            Gets the curve for the given measType if exists.
            There's only one curve available for each special measType in the SessionManager.
            </summary>
      <param name="measType">Type of the measurement.</param>
      <returns>The Curve designated with the given measType</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForCurve(PalmSens.Plottables.Curve)">
      <summary>
            Gets the measurement owner of the specified Curve.
            </summary>
      <param name="c">The c.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForEISData(PalmSens.Plottables.EISData)">
      <summary>
            Gets the measurement owner of the specified EISData.
            </summary>
      <param name="eisData">The EISData.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetAvailableAnalysisCurvesCount">
      <summary>
            Gets the number of available analysis curves, meaning curves with MeasType = Sample or Standard_1 or Standard_2, etc.
            </summary>
      <returns>The number of curves that can be used for concentration determination</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveMeasurement(PalmSens.Measurement,System.Boolean)">
      <summary>
            Removes the Measurement from the collection. Raises MeasurementsBeginRemoving before actual removal. 
            </summary>
      <param name="m">The Measurement.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.ClearMeasurements(System.Boolean)">
      <summary>
            Clears all Measurements in the collection. Raises MeasurementsBeginRemoving before actual removal.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCollection">
      <summary>
            Gets the collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Data.SessionManager.Count">
      <summary>
            Gets the number of Measurements.
            </summary>
      <value>
            The number of Measurements in the collection.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.AutoPeaks">
      <summary>
            Gets or sets a value indicating whether [automatic peaks].
            </summary>
      <value>
        <c>true</c> if [automatic peaks]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveCurves(PalmSens.Plottables.Curve[],System.Boolean)">
      <summary>
            Removes the curves from their corresponding measurements.
            Raises CurvesBeginRemoving event, which is used in SessionTree to reflect the changes
            </summary>
      <param name="curves">The curves.</param>
      <param name="deleteEmptyMeasurement">if set to <c>true</c> delete empty measurements (no Curves).</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Data.SessionManager.RemoveEISData(PalmSens.Plottables.EISData[],System.Boolean)" -->
    <member name="M:PalmSens.Data.SessionManager.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod">
      <summary>
            Helper class for generating protocol data
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethod.checksum">
      <summary>
            Calculate the checksum for this encodedmethod
            </summary>
      <returns>Checksum</returns>
    </member>
    <member name="T:PalmSens.EncodedMethod.enumOptions">
      <summary>
            intBits1 is from 0x0100 to 0x8000
            intBits2 is from 0x0001 to 0x0080
            Possible options
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseBlank">
      <summary>
            Measurement blank curve before actual curve
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PowerFreq50">
      <summary>
            Work for 50Hz power frequency
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseStirrer">
      <summary>
            Enable use of stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Equilibration">
      <summary>
            Enable equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Deposition">
      <summary>
            Enable deposition equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Conditioning">
      <summary>
            Enable conditioning pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PlotOnline">
      <summary>
            Enable online plotting
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.NoAutoRanging">
      <summary>
            Disable autoranging
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnAfterMeasurement">
      <summary>
            Enable cell when measurement is finished
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnDuringMeasurement">
      <summary>
            Enable cell during measurement
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.GalvanostatMode">
      <summary>
            Use galvanostat mode
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod.MeasurementIntervalUnit">
      <summary>
            Units for measurement intervaltime
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.HthSeconds">
      <summary>
            128th seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Seconds">
      <summary>
            Seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Minutes">
      <summary>
            Minutes
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Hours">
      <summary>
            Hours
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV0">
      <summary>
            Original format method.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV0.ADTcycle">
      <summary>
            time of one machine cycle
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.ADTimingUnit">
      <summary>
            Timing unit used to convert times sent to PalmSens. In (fractional) seconds.
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.checksum">
      <summary>
            Determine the checksum for this EncodedMethod
            </summary>
      <returns>checksum</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime(System.Int32,System.Single)">
      <summary>
            Set time (mostly used for small amounts)
            </summary>
      <param name="position">position to add at</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime2(System.Int32,System.Single)">
      <summary>
            Set time (used for larger amounts of time)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Item(System.Int32)">
      <summary>
            Get/Set 8-bit integer
            </summary>
      <param name="position">position</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16LE(System.Int32,System.UInt16)">
      <summary>
            Encode a Little-Endian 16-bits integer
            </summary>
      <param name="position">position in the blob</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16BE(System.Int32,System.UInt16)">
      <summary>
            Encode a Big-Endian 16-bits integer
            </summary>
      <param name="position">position to encode at</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16(System.Int32,System.UInt16)">
      <summary>
            Set 16-bit integer (Little-Endian)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalog(System.Int32,System.Single)">
      <summary>
            Set analog value (used for potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalogDiff(System.Int32,System.Single)">
      <summary>
            Set analog differential value (potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetBool(System.Int32,System.Int32)">
      <summary>
            Set bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.GetBool(System.Int32,System.Int32)">
      <summary>
            Get bool
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ResetBool(System.Int32,System.Int32)">
      <summary>
            Unset bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ToString">
      <summary>
            Convert to string. Will return a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetCurrentRange(System.Int32,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="position">position</param>
      <param name="value">value, in nA</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Length">
      <summary>
            Number of bytes used
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV1">
      <summary>
            Method format for EmStat and PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV1.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Set(System.String,System.String)">
      <summary>
            Set parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="data">value of parameter</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Get(System.String,System.String)">
      <summary>
            Get parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" was found if set to <c>true</c></param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="name">name of parameter</param>
      <param name="cr">current range</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <returns>
            Value
            </returns>
    </member>
    <member name="T:PalmSens.EncodedMethodV1.Options">
      <summary>
            Options bits
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PlotOffline">
      <summary>
            Whether data should be stored rather than sent online.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.AlternatingMux">
      <summary>
            Alternating multiplexer measurement.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.CellOnAfterMeasurement">
      <summary>
            Turn on cell after measurement is finished.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseStirrer">
      <summary>
            Enable the stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PulsedAmpDetectionPulse">
      <summary>
             Option
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMin">
      <summary>
            Use a minimum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMax">
      <summary>
            Use a maximum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.IsPartOfMixedMeasurement">
      <summary>
            Instrument does not go in to idle mode after measurement finished
            used for multistep amp and pot
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnEquil">
      <summary>
            Whether to set a digital trigger at the start of the equilibration period
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnStart">
      <summary>
            Whether to set a digital trigger at the start of the measurment (after equilibration)
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnDelay">
      <summary>
            Whether to set a digital trigger after a certain delay after the start of the measurment
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetDelay(System.String,System.Double)">
      <summary>
            Set delay
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetTimeCon(System.String,System.Single)">
      <summary>
            Set time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetTimeCon(System.String,System.Single)">
      <summary>
            Get time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt8(System.String,System.Byte)">
      <summary>
            Set 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt8(System.String,System.Byte)">
      <summary>
            Get 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt16(System.String,System.UInt16)">
      <summary>
            Encode a 16-bits integer
            </summary>
      <param name="name">name</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt16(System.String,System.UInt16)">
      <summary>
            Get 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt32(System.String,System.UInt32)">
      <summary>
            Set 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">byte</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt32(System.String,System.UInt32)">
      <summary>
            Get 4-byte integer parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" found if set to <c>true</c>.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalogDiff(System.String,System.Single)">
      <summary>
            Set analog bipolar value
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.ToString">
      <summary>
            Convert to string. Will reurn a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetOverrides(System.String)">
      <summary>
            Sets the overrides to be appended to the method blob.
            </summary>
      <param name="overrides">The overrides.</param>
    </member>
    <member name="T:PalmSens.CoreSettings">
      <summary>
            Core settings that can be set from outside the core.
            </summary>
    </member>
    <member name="F:PalmSens.CoreSettings.EntryAssembly">
      <summary>
            The entry assembly, ignored if null
            </summary>
    </member>
    <member name="T:PalmSens.PSThread">
      <summary>
            Wrapper for Thread class. Init() should be called before use.
            </summary>
    </member>
    <member name="T:PalmSens.PSThread.ThreadPriorities">
      <summary>
            Emulates the ThreadPriorities enum.
            </summary>
    </member>
    <member name="T:PalmSens.MeasType">
      <summary>
            The measurement type
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.New">
      <summary>
            New measurement
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Overlay">
      <summary>
            Overlay
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Blank">
      <summary>
            Blank
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Sample">
      <summary>
            Sample (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_1">
      <summary>
            Standard1 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_2">
      <summary>
            Standard2 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_3">
      <summary>
            Standard3 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_4">
      <summary>
            Standard4 (determination)
            </summary>
    </member>
    <member name="T:PalmSens.Measurement">
      <summary>The measurement class contains all classes, functions and parameters necessary for performing 
            a measurement. A measurement class can contain one method and multiple curves or impedance data. 
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor">
      <summary>
            Create new empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor(PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Measurement" /> class.
            </summary>
      <param name="m">The method.</param>
    </member>
    <member name="T:PalmSens.Measurement.SingleCurveChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="T:PalmSens.Measurement.CurveCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.CurvesAdded">
      <summary>This event is triggered when one or more Curves are added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.CurveRemoved">
      <summary>This event is triggered when a Curve is removed from the Measurement class.</summary>
    </member>
    <member name="T:PalmSens.Measurement.EISDataCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataAdded">
      <summary>This event is triggered when EISdata is added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataRemoved">
      <summary>This event is triggered when EISdata is removed from the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Pretreating">
      <summary>
            Raised when pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.PretreatmentStarted">
      <summary>
            Indicates pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.MeasuringStarted">
      <summary>
            Indicates the measurement is started.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Measuring">
      <summary>
            Raised when the measurement is activated.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.TitleChanged">
      <summary>
            Occurs when the Title has changed
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.SavedToFileChanged">
      <summary>
            Occurs when the measurement's data (DataSet) was saved to a file.
            Each Curve and EISData have their own <C>SavedToFile</C> bool.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.TimeStamp">
      <summary>
            Gets or sets the date and time of the start of this measurement.
            For old version data files (.pss, .pst, .mux) this is the creation date and time of the file.
            </summary>
      <value>
            The time stamp.
            </value>
    </member>
    <member name="F:PalmSens.Measurement.Channel">
      <summary>
            Gets or sets the channel.
            </summary>
      <value>
            The channel of a measurement in simultaneaous mode.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Method">
      <summary>Defines the Method related with this Measurement. The information from the Method is used when saving Curves.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ContainsBlank">
      <summary>
            Determines whether this instance contains the Blank curve for Blank subtraction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Measurement.SavedToFilePath">
      <summary>
            The filepath where this Measurement is saved to.
            This value is set when saving and loading this Measurement to a Session file.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.Int32)">
      <summary>
            curve with specified index
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurvesSilent">
      <summary>Removes all Curve classes from Measurement without raising CurveRemoved event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurves">
      <summary>Removes all Curve classes from Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllPeaks">
      <summary>Clear peaks for each curve in Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllLevels">
      <summary>Clear levels for each curve in Measurement.</summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(PalmSens.MeasType)">
      <summary>
            Curve with specified AnalysisType
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.String)">
      <summary>
            Curve with specified name
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurve(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection. Without raising CurveRemoved</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection without raising NewCurve event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurve(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurves(PalmSens.Plottables.Curve[])">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.SortCurves">
      <summary>
            Sorts the curves based on ChannelIndex.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.nCurves">
      <summary>Returns the number of curves that are part of the Measurement class.</summary>
    </member>
    <member name="P:PalmSens.Measurement.nEISdata">
      <summary>Returns the number of EISdata curves that are part of the Measurement class.</summary>
    </member>
    <member name="M:PalmSens.Measurement.GetCurveArray">
      <summary>
            Obtain the curves in this measurement as an array.
            </summary>
      <returns>array of curves</returns>
    </member>
    <member name="M:PalmSens.Measurement.GetEISDataArray">
      <summary>
            Obtain the EIS data in this measurement as an array.
            </summary>
      <returns>array of EIS data</returns>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaks(System.Boolean)">
      <summary>
            Find the peaks for each curve in this measurement
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.ContainsBlankSubtractedCurves">
      <summary>
            Gets a value indicating whether the curve collection contains a blank subtracted curve.
            </summary>
      <value>
        <c>true</c> if [contains blank subtracted curves]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Visible">
      <summary>
            Gets or sets a value indicating whether the curves in this <see cref="T:PalmSens.Measurement" /> are visible in the Plot.
            </summary>
      <value>
        <c>true</c> if the owned curves are visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Measurement should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyte(System.Int32)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesAllCurves(System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesSingleCurve(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyteSingleCurve(System.Int32,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.SetManualPeakForAnalyte(System.Int32,PalmSens.Plottables.Curve)">
      <summary>
            Sets the manual peak for analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
    </member>
    <member name="P:PalmSens.Measurement.ContainsEISdata">
      <summary>
            Gets a value indicating whether EIS data is available
            </summary>
      <value>
        <c>true</c> if [contains EIS data]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.EISdata">
      <summary>
            Gets or sets the EIS data.
            </summary>
      <value>
            The EISdata collection.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Title">
      <summary>
            Gets the title.
            </summary>
      <value>
            The title as shown in the Legend.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.BlankCurve">
      <summary>
            Gets or sets the Blank curve.
            if Blank curve is present (not null) a new curve will be added after each measurement containing
            the result of the measured curve subtracted with the Blank curve.
            </summary>
      <value>
            The Blank curve.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.AddEISdata(PalmSens.Plottables.EISData)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdata(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdataSilent(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the string "Measurement"</returns>
    </member>
    <member name="M:PalmSens.Measurement.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Method">
      <summary>
            Describes a PalmSens measurement method
            </summary>
      <remarks>
            Can be types ScanMethod (measure vs potential) or TimeMethod (measure vs time).
            To load and save methodfiles use the ScanMethodFile or TimeMethodFile class.
            </remarks>
    </member>
    <member name="M:PalmSens.Method.#ctor(System.Int32)">
      <summary>
            Create a new method
            </summary>
      <param name="technique">technique number for this method</param>
    </member>
    <member name="M:PalmSens.Method.GetHashCode">
      <summary>
            Not used; warning supressor only
            </summary>
      <returns>Hash</returns>
    </member>
    <member name="M:PalmSens.Method.Equals(System.Object)">
      <summary>
            Check whether this object is equal to another.
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects are equal, false otherwise</returns>
    </member>
    <member name="T:PalmSens.Method.InvalidPowerFreqException">
      <summary>
            Invalid Power FixedFrequency set
            </summary>
    </member>
    <member name="T:PalmSens.Method.InvalidEBiPotOffsetException">
      <summary>
            Create a new instance.
            </summary>
    </member>
    <member name="F:PalmSens.Method.MethodIsGalvanostatic">
      <summary>
            Method is a Galvanostatic measurement (read potential, drive current), 
            False if Potentiostatic
            </summary>
    </member>
    <member name="P:PalmSens.Method.MethodFilename">
      <summary>
            The filepath used with this method, including path and extension
            </summary>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeOffset">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="P:PalmSens.Method.PowerFreq">
      <summary>The frequency of the local powersupply in Hz. The default value is '50'.</summary>
    </member>
    <member name="M:PalmSens.Method.ToShortString">
      <summary>
            Returns the abbreviation of the technique.
            </summary>
      <returns>e.g. Amperometric Detection returns "AD"</returns>
    </member>
    <member name="M:PalmSens.Method.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Method.Technique">
      <summary>
            The technique number used in the firmware
            </summary>
    </member>
    <member name="P:PalmSens.Method.Notes">
      <summary>Some user notes for use with this method.</summary>
    </member>
    <member name="F:PalmSens.Method.UseStirrer">
      <summary>True if a stirrer is being used.</summary>
    </member>
    <member name="P:PalmSens.Method.Ranging">
      <summary>
            Ranging information
            </summary>
    </member>
    <member name="F:PalmSens.Method.SmoothLevel">
      <summary>The smoothlevel to be used.
            <list type="bullet"><item><description>-1 = none</description></item><item><description>0 = no smooth (spike rejection only)</description></item><item><description>1 = 5 points</description></item><item><description>2 = 9 points</description></item><item><description>3 = 15 points</description></item><item><description>4 = 25 points</description></item></list></summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakHeight">
      <summary>Determines the minimum peak height in uA. Peaks lower than this value are neglected.</summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakWidth">
      <summary>Determines the minimum peak width in V or s. Peaks width a lower width may not be detected.</summary>
    </member>
    <member name="F:PalmSens.Method.PeakOverlap">
      <summary>Is used when two peaks are very close to each other. If the peak separation
            is less than the specified value, a single baseline is used for the two overlapping peaks.
            If each peak should have its own baseline, specify a value of 0.</summary>
    </member>
    <member name="P:PalmSens.Method.PeakWindow">
      <summary>Is used to identify which component corresponds to which peak. Peaks must be within the peak window.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewLeft">
      <summary>The lowest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewRight">
      <summary>The highest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewBottom">
      <summary>The lowest value on the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewTop">
      <summary>The highest value on the Y axis of the plot.</summary>
    </member>
    <member name="P:PalmSens.Method.ConcentrationUnit">
      <summary>The label for the unit of the analyte's concentration. This value is not used for calculations.</summary>
    </member>
    <member name="F:PalmSens.Method.DefaultXAxis">
      <summary>
            Default data array index for X axis when using this method.
            </summary>
    </member>
    <member name="F:PalmSens.Method.DefaultYAxis">
      <summary>
            Default data array index for Y axis when using this method.
            </summary>
    </member>
    <member name="P:PalmSens.Method.DefaultXUnit">
      <summary>
            Gets the default unit used for the X axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.DefaultYUnit">
      <summary>
            Gets the default unit used for the Y axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.XLeft">
      <summary>
            Default left X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XRight">
      <summary>
            Default right X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YBottom">
      <summary>
            Default bottom Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YTop">
      <summary>
            Default top Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XDirection">
      <summary>
            X direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.RecordExtraValue">
      <summary>Auxiliary channel to record</summary>
    </member>
    <member name="P:PalmSens.Method.RecordAuxInputIsUsed">
      <summary>
            Gets a value indicating whether the auxiliary channel of the device is used
            RecordAux == AuxInput
            </summary>
      <value>
        <c>true</c> if [record aux is used]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Method.RecordCE">
      <summary>
            Gets a value indicating whether the CE potential is recorded
            </summary>
      <value>
        <c>true</c> if [record CE is recorded]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Method.HasValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Determines whether has validation errors for the specified devic capabilities.
            Only fatal errors as in <c>MethodError.IsFatal = TRUE</c> are taken into account
            </summary>
      <param name="c">The capabilities.</param>
      <returns>
        <c>true</c> if [has validation errors] [the specified capabilities]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Method.ValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns a string with fatal validation errors
            </summary>
      <param name="c">The capabilities.</param>
      <returns>String with fatal validation errors</returns>
    </member>
    <member name="M:PalmSens.Method.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            <list type="bullet"><item><description>supported mux channels</description></item><item><description>supported ranges for auto ranging (1 mA and 10 mA not supported by EmStat1)</description></item></list></summary>
      <param name="capab">The device capabilities.</param>
    </member>
    <member name="P:PalmSens.Method.PowerLinePeriod">
      <summary>
            Power Line Period (1/PowerFreq)
            </summary>
    </member>
    <member name="P:PalmSens.Method.SupportsCorrosion">
      <summary>Is true if the method can be used for corrosion measurements.</summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningPotential">
      <summary>
            Conditioning potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningTime">
      <summary>
            Conditioning duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionPotential">
      <summary>
            Deposition potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionTime">
      <summary>
            Deposition duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.EquilibrationTime">
      <summary>
            Equilibration duration in seconds 
            BeginPotential is applied during equilibration
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyTime">
      <summary>
            Standby time (for use with cell on after measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Method.BeginPotential">
      <summary>
            Begin potential (also set  equilibration)
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyPotential">
      <summary>
            Stand by Potential
            </summary>
    </member>
    <member name="P:PalmSens.Method.CellOnAfterMeasurement">
      <summary>
            Enable/disable cell after measurement
            </summary>
    </member>
    <member name="P:PalmSens.Method.PretreatmentDuration">
      <summary>
            Estimated number of seconds the pretreatment phase will take.
            </summary>
    </member>
    <member name="P:PalmSens.Method.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least in seconds (not multiplied by multiplexer cycles)</summary>
    </member>
    <member name="P:PalmSens.Method.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take multiplied with n multiplexer channels (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Method.MultiplexCycles">
      <summary>
            Gets the number of selected multiplexer cycles.
            </summary>
      <value>The number of multiplexer cycles.</value>
    </member>
    <member name="F:PalmSens.Method.UseMuxChannel">
      <summary>Specifies channels used for this method.</summary>
    </member>
    <member name="P:PalmSens.Method.MaxMuxChannelSelected">
      <summary>
            Return the maximum mux channel selected.
            </summary>
    </member>
    <member name="P:PalmSens.Method.PolyStatMode">
      <summary>Specifies the mode for WEn. This is a copied value from PolyEmStatEx.PolyStatMode[i], used for converting values on receiving in ParseMeasurePackage</summary>
    </member>
    <member name="T:PalmSens.Method.EnumPalmSensBipotMode">
      <summary>
            BiPot mode for PalmSens Bipot boards
            Currently only supported by PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.Method.BiPotPotential">
      <summary>Specifies the potential for WEn.</summary>
    </member>
    <member name="F:PalmSens.Method.BiPotCR">
      <summary>Specifies the current range for WE2.</summary>
    </member>
    <member name="P:PalmSens.Method.BipotModePS">
      <summary>
            Gets or sets the bipot mode.
            Only applicable for PalmSens3 with Bipot and Auxiliary input set on Bipot
            </summary>
      <value>
            The bipot mode for a PalmSens3 with BiPot
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use MinValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MinValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use MaxValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MaxValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMinValue.
            </summary>
      <value>
        <c>true</c> if use LimitMinValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMaxValue.
            </summary>
      <value>
        <c>true</c> if use LimitMaxValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SaveOnDevice">
      <summary>
            Determines whether the method and measurement data are saved locally on the device (if possible).
            </summary>
    </member>
    <member name="M:PalmSens.Method.GetPointsPerSecond(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the points per second. If deviceCapabilities is null than this may be an approximation because the Real E step cannot be calculated (in the  case of a potential method).
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnEquil">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration starts..
            Digital output will be set LOW again as soon as equilibration ends and measurement is starts.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnEquil">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnEquil on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnDelay">
      <summary>
            Only used when <c>UseTriggerOnDelay = true</c>
            UseTriggerOnDelay can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as delay time has passed after the start of the measurement.
            Use value TriggerDelay to set the delay. This will be calculated to an integer value (index) used during the measurement.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on the delay.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnDelay">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerDelayPeriod">
      <summary>
            Gets or sets the delay trigger if <c>UseTriggerOnDelay == true</c> 
            This value is calculated to an index in the measurement. Therefore TriggerDelay can be any values as an integer multiplication of the interval time.
            </summary>
      <value>
            The delay in seconds after start of the measurement.
            </value>
    </member>
    <member name="M:PalmSens.Method.ToHex(System.Int32,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Function for generating hex blob
            </summary>
      <param name="rev">blob format revision</param>
      <param name="capabilities">The capabilities.</param>
      <returns>
            destination blob
            </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="F:PalmSens.Method.fileNameCnt">
      <summary>
            The amouhnt of filenames that have been sent to the device, this is used to make filenames uniques in case multiple are sent in the same second.
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.Method.PGAGAINBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.FILTERBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.OPTIONSINT">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="M:PalmSens.Method.AdjustMeasurementTime(System.Single@,PalmSens.EncodedMethodV0)">
      <summary>
            Adjust measurement time for power frequency and store in blob
            </summary>
      <param name="tmeas">measurement time</param>
      <param name="m">hex blob</param>
    </member>
    <member name="M:PalmSens.Method.SetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetNextSelectedMuxChannel(System.Int32)">
      <summary>
            Gets the next selected mux channel in UseMuxChannel.
            If iLastChannel = -1, the first selected channel is returned
            </summary>
      <param name="iLastChannel">The i last channel (0-nChannels). Or -1 if there is no next.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.OCPmode">
      <summary>
            Used with corrosion and impedance measurements only
            Bitwise three options so value is 0 ~ 8 (2^3)
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPUseIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether the indexed potential parameter should be used for OCP
            </summary>
    </member>
    <member name="P:PalmSens.Method.nOCPparameters">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a the number of vs OCP parameters available
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetLabelIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the name of the indexed vs OCP parameters
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPSetEValue(System.Int32,System.Single)">
      <summary>
            Used with corrosion and impedance measurements only
            Sets the indexed OCP parameter
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetEValue(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the indexed OCP parameter
            </summary>
    </member>
    <member name="P:PalmSens.Method.IsVersusOCP">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether OCP is used (OCPmode &gt; 0)
            </summary>
      <value>
        <c>true</c> if [use OCP]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.OCPMaxOCPTime">
      <summary>
            Used with corrosion and impedance measurements only
            Max. EOC time (1 – 30000 s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.OCPStabilityCriterion">
      <summary>
            Used with corrosion and impedance measurements only
            Stability Criterion (range 0.001 – 1000 mV/s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.Ba">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Ba in V/dec
            </summary>
    </member>
    <member name="P:PalmSens.Method.Bc">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Bc in V/dec 
            </summary>
    </member>
    <member name="P:PalmSens.Method.Weight">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Weight in gr
            </summary>
    </member>
    <member name="P:PalmSens.Method.Area">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Area in cm2
            </summary>
    </member>
    <member name="P:PalmSens.Method.Density">
      <summary>
            Material property for corrosion 
            Used with corrosion measurements only
            Density in gr/cm3
            </summary>
    </member>
    <member name="P:PalmSens.Method.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="F:PalmSens.Method.PolyEmStat">
      <summary>
            Method extension for PolyEmStat, containing calibration and bipot values
            </summary>
    </member>
    <member name="M:PalmSens.Method.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Method.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.Deserialize(System.String)">
      <summary>
            Deserializes the contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Method.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="M:PalmSens.Method.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Generate a receive measurement event
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Method.FromMethodID(System.String)">
      <summary>
            Creates a Mehtod class from [method].GetMethodID()
            </summary>
      <param name="name">The unique ID.</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">Unknown technique name: " + name</exception>
    </member>
    <member name="F:PalmSens.Method.MethodIds">
      <summary>
            A list with all available MethodID's
            </summary>
    </member>
    <member name="T:PalmSens.Method.TechniqueIds">
      <summary>
            Technique identifiers for each technique
            </summary>
    </member>
    <member name="M:PalmSens.Method.FromTechniqueNumber(System.Int32)">
      <summary>
            Create a new method by technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) method</returns>
    </member>
    <member name="M:PalmSens.Method.CopyMethod(PalmSens.Method,PalmSens.Method@)">
      <summary>
            Copies all overlapping parameters from the source method to the destination method.
            If Destination Method is null, a clone will be returned.
            </summary>
      <param name="mSource">The source Method.</param>
      <param name="mDestination">The destination Method.</param>
    </member>
    <member name="M:PalmSens.Method.ResetView">
      <summary>
            Resets the X axis view settings used by Plot.
            Effect is that setting this method to Plot makes Plot automatically reset Axis settings based on method.
            </summary>
    </member>
    <member name="M:PalmSens.Method.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
    </member>
    <member name="T:PalmSens.INPointsMethod">
      <summary>
            Method for which the number of points can be predicted.
            </summary>
    </member>
    <member name="P:PalmSens.INPointsMethod.nPoints">
      <summary>Returns the expected number of measured points to be returned.</summary>
    </member>
    <member name="T:PalmSens.MuxMethod">
      <summary>
            Type of mux measurement
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Sequentially">
      <summary>
            Sequential - complete curve after complete curve
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Alternatingly">
      <summary>
            Alternatingly - measure one point for each curve then go to the next
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.None">
      <summary>
            No multiplexer
            </summary>
    </member>
    <member name="T:PalmSens.Auxiliary">
      <summary>
            Helper functions for Auxiliary input
            </summary>
    </member>
    <member name="M:PalmSens.Auxiliary.GetUnit(PalmSens.EnumExtraValue)">
      <summary>
            Returns the Unit corresponding to the Auxiliary Channel
            </summary>
      <param name="extraValueType">Type of the channel.</param>
      <returns>The corresponding unit</returns>
    </member>
    <member name="T:PalmSens.Plottables.Blank">
      <summary>
            The Blank curve used for Blank subtraction
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Blank.UseBlank">
      <summary>
            Whether or not use the available Blank for subtraction after measurement
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveDirection">
      <summary>
            Indicates the 
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Ascending">
      <summary>
            Ascending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Descending">
      <summary>
            Descending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Unspecified">
      <summary>
            Direction unspecified. 
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.AxisFunction">
      <summary>
            Used to get converted Y values
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Normal">
      <summary>
            Original Y value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Derivative">
      <summary>
            Derivative of value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Log">
      <summary>
            Math.Log10 of value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve">
      <summary>
            This class contains X and Y data of a single curve that can be plotted.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Used when loading from file
            </summary>
      <param name="bag">The bag.</param>
      <param name="coreVersion">The core version.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Data.DataArray,PalmSens.Data.DataArray,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Default title = "Curve"
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Create a new Curve based on an existing Curve with same type of DataArrays for X and Y, Title and MeasType
            </summary>
      <param name="curve">The Curve.</param>
      <param name="cloneData">if set to <c>true</c> clones the contents of the X and Y DataArrays.</param>
    </member>
    <member name="E:PalmSens.Plottables.Curve.MeasTypeChanged">
      <summary>
            Occurs when [meas type changed].
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.Curve.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the curve class.
            Use of this event is Threadsafe if PointsAddedFromOtherThread = True
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ToString">
      <summary>Returns title of this Curve.</summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForChannel(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="channel">The channel starting at 0.</param>
      <returns>Channel #, where #=<para>channel</para>+1</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForScan(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="scan">The CV scan starting at 1.</param>
      <returns>Scan #, where #=<para>scan</para></returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodePotential">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XOffset">
      <summary>
            Gets or sets the offset used on the X axis.
            This is generaly [ReferenceElectrodePotential] - [RE potential used as reference in Plot]
            </summary>
      <value>
            The x offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="F:PalmSens.Plottables.Curve.OCPValue">
      <summary>
            Contains the measured Eoc value for this curve. Used for corrosion measurements
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.ErrorMessage">
      <summary>
            An error that occured during measurement (used by StatusBar)
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MeasType">
      <summary>
            Gets or sets the type of the measurement is associated with this curve.
            </summary>
      <value>
            The type of the measurement.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxisDataArray">
      <summary>
            Gets the X axis data array.
            </summary>
      <value>
            The X axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxisDataArray">
      <summary>
            Gets the Y axis data array.
            </summary>
      <value>
            The Y axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ZAxisDataValue">
      <summary>
            Gets the value for the Z axis
            </summary>
      <value>
            The Z axis value
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNUnderloads">
      <summary>
            Gets the current underloads count from the YAxisDataArray.
            </summary>
      <returns>number of underloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNOverloads">
      <summary>
            Gets the current overloads count from the YAxisDataArray.
            </summary>
      <returns>number of overloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXValue(System.Int32)">
      <summary>
            Returns the X value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetYValue(System.Int32)">
      <summary>
            Returns the Y value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedXValue(System.Int32)">
      <summary>
            Gets the formatted x value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedYValue(System.Int32)">
      <summary>
            Gets the formatted y value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXDirection">
      <summary>
            The direction of the data at the specified axis
            determined using the first two points of the array
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetDirection(PalmSens.Data.EnumAxes,System.Int32)">
      <summary>
            The direction of the data at the specified axis for the specified index.
            Compares difference between index and index+1.
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxX">
      <summary>Maximum X value</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxY">
      <summary>Maximum Y value found in this Curve. 
            If nPoints&gt;10 first 2 points are disregarded when determining MaxY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinX">
      <summary>Minimum X value found in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinY">
      <summary>Minimum Y value found in this Curve.
            If nPoints&gt;10 first 2 points are disregarded when determining MinY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.NPoints">
      <summary>Returns number of points in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.Peaks">
      <summary>
            List of peaks found in this curve.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionButlerVolmer">
      <summary>
            Gets the results of a manual corrosion butler volmer fit.
            </summary>
      <value>
            Indices for the manual butler volmer fit.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionTafel">
      <summary>
            Gets the results of a manual corrosion tafel fit.
            </summary>
      <value>
            Indices for the manual corrosion tafel fit.
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetVertexIndicesForCV">
      <summary>
                Returns two indices: Evtx1 and Evtx2 of a Cyclic Voltammetry scan
            </summary>
      <returns>
                2 value array containing the indices for Evtx1 and Evtx2.
                In case of no direction switches (normal curve) both indices are equal to nPoints.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CorrectIndicesCV">
      <summary>
            Corrects the XDataArray and YDataArray
            In case a CV curve has the begin potential in between a vtx1 and vtx2 there are two loose ascending or descending
            parts in the curve, which makes it difficult to de operations on them. This function re-indexes the curve so that there is only 1 index where the direction changes.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.HasMultipleDirections">
      <summary>
            Gets a value indicating whether the data in this instance has multiple directions (Cyclic Voltammetry)
            </summary>
      <value>
        <c>true</c> if this instance has multiple directions; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumXAxis">
      <summary>
            Used for selecting the X axis to plot against
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumYAxis">
      <summary>
            Used for selecting the Y axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxis">
      <summary>
            X Axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxis">
      <summary>
            Y Axis to plot against
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.SetYAxisFunction(PalmSens.Plottables.AxisFunction)">
      <summary>
            Sets a math function on the left Y axis
            </summary>
      <param name="axisFunction">The axes function.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindPeaks(System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks in a curve in all directions; CV can have 1 or 2 direction changes
            </summary>
      <param name="minPeakWidth">Minimum width of the peak in V.</param>
      <param name="minPeakHeight">Minimum height of the peak in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearPeaks">
      <summary>
            Removes all found peaks for this curve.
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.Levels">
      <summary>
            List of levels found in this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindLevels(System.Single,System.Single)">
      <summary>
            Finds the levels.
            </summary>
      <param name="minWidth">The minimum level width in V or s.</param>
      <param name="minHeight">The minimum level height in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearLevels">
      <summary>
            Removes all found levels for this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestX(System.Double)">
      <summary>
            Find the index of the X point nearest to p
            Not suitable for CV since there are two values for each x
            </summary>
      <param name="x">x to look for</param>
      <returns>index nearest to x, or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double)">
      <summary>
            Find the index closest to the given x and current
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <returns>
            index nearest to x,current or 0 if there were no X points yet
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index closest to the given x and current in a given range
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <param name="iStart">Beginning of range.</param>
      <param name="iEnd">End of range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestXCV(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index of the X point nearest to p between a minimum and maximum index
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for</param>
      <param name="iMin">minimum index</param>
      <param name="iMax">maximum index</param>
      <returns>index nearest to x,current or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CalculateSlope(System.Int32,System.Int32)">
      <summary>
            Calculate the slope between two points
            </summary>
      <param name="f">first index</param>
      <param name="t">second index</param>
      <returns>calculated slope</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve
            current = a + b * x
            </summary>
      <param name="a">offset</param>
      <param name="b">slope</param>
      <param name="corr">Correlation Coefficient</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve between two indexes
            current = offset + slope * x
            </summary>
      <param name="offset">offset</param>
      <param name="slope">slope</param>
      <param name="CoefDet">Coefficient of determination (R2)</param>
      <param name="from">begin index</param>
      <param name="to">end index</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Finish">
      <summary>
            Finishes the curve. This stops from raising the NewDataAdded event.
            This is automatically called at the end of a measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Empty">
      <summary>
            Returns an empty Curve
            </summary>
      <returns>an empty Curve</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionStart">
      <summary>
            Gets or sets the first index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection start.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionEnd">
      <summary>
            Gets or sets the last index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection end.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventHandler">
      <summary>
            Delegate that receives Curves.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISDataEventHandler">
      <summary>
            Delegate that receives EISData.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventArgs">
      <summary>
            Curve Events
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create new instance.
            </summary>
      <param name="c">curve that was touched</param>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.GetCurve">
      <summary>
            Obtain the curve that was received
            </summary>
      <returns>Curve</returns>
    </member>
    <member name="T:PalmSens.Plottables.EISPlotModes">
      <summary>
            The available plot options
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZZvsX">
      <summary>
            ZZ vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZPhasevsLogF">
      <summary>
            Z and Phase vs FixedFrequency
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZPhasevsX">
      <summary>
            Z and Phase vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.RctvsX">
      <summary>
            RCT vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZvsZ">
      <summary>
            Z' vs Z''
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZvsLogF">
      <summary>
            Log(|Z|) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsY">
      <summary>
            Y'' vs Y'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsLogF">
      <summary>
            Y'/Y'' vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogYvsLogF">
      <summary>
            Log(Y) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsX">
      <summary>
            Y' and Y'' vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsX">
      <summary>
            Y vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.CsImvsCsRe">
      <summary>
            C'' vs C'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISDataSubScan.ParentEISData">
      <summary>
            The parent EISData owning this EISDataSubScan
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISDataSubScan.NFrequencies">
      <summary>
            Gets the number of frequencies in this sub scan
            </summary>
      <value>
            The number of frequencies.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData">
      <summary>
            Contains all data as result of an Impedance measurement. In case of multiple frequency scans versus time or potential,
            all data can be obtained using EISData.GetValue(). 
            Seperate frequency scan can be obtained using GetSubScans().
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.#ctor(PalmSens.Techniques.ImpedimetricMethod.enumScanType,PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType,System.Collections.Generic.List{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.EISData" /> class.
            </summary>
      <param name="scanType">Type of the scan.</param>
      <param name="freqType">Type of the freq. Set to 'fixed' if unknown at beforehand. AddRow() will change FreqType if a different frequency is added.</param>
      <param name="frequencies">The frequencies used in case freqType == FreqScan.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToJsonBag">
      <summary>
            Saves EISData to a Json bag.
            </summary>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "T:PalmSens.Plottables.EISData.NewFreqScanAddedEventHandler" -->
    <member name="E:PalmSens.Plottables.EISData.NewSubScanAdded">
      <summary>
            Event is triggered when a new frequency scan is added.
            An EISData can contain multiple scans if FreqScan is measured vs Time or E
            These frequency scans are listed in FreqScans.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventHandler">
      <summary>
            Delegate for the NewDataEventHandler Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.EISData.NewDataAdded">
      <summary>Occurs when new data is added to the EISData</summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.OnNewDataAdded(System.Int32)">
      <summary>
            Raises the <see cref="E:NewDataAdded" /> event.
            </summary>
      <param name="index">The iFreq.</param>
    </member>
    <member name="P:PalmSens.Plottables.EISData.ScanType">
      <summary>
            Gets or sets the type of the scan.
            Can be vs time or vs potential
            </summary>
      <value>The type of the scan.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FreqType">
      <summary>
            Gets or sets the type of the frequency mode.
            Can be scan or fixed
            </summary>
      <value>The type of the frequency mode.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.HasSubScans">
      <summary>
            Gets a value indicating whether this instance has sub frequency scans.
            This is only the case if a frequency scan is combined with a time or potential scan
            </summary>
      <value>
        <c>true</c> if this instance has sub scans; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FrequencyCurves">
      <summary>
            This dictionary contains one or two curves for each frequency.
            Used when plotting vs X.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.NPoints">
      <summary>
            The total number of dataPoints (rows in DataSet) in this EISData
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.EISDataSet">
      <summary>
            Gets the EIS DataSet.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.DebugValueType">
      <summary>
            Value types used for debugging and calibration only
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.nPointsAC">
      <summary>
            The number of points in the sinewave applied and measured
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.realtintac">
      <summary>
            The realtintac. Used for calibration of PS3 firmware overhead causing phasedelay
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.EISValueType">
      <summary>
            Used for returning min and max values for X or Y axis
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Logf">
      <summary>Log(F) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Edc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Time">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Idc">
      <summary>E values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Iac">
      <summary>I ac values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZIm">
      <summary>-Z'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.MinPhase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Rct">
      <summary>RCT values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogY">
      <summary>E or t values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsRe">
      <summary>CsRe values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsIm">
      <summary>CsIm values</summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.CDC">
      <summary>
            Gets or sets the CDC circuit for fitting.
            </summary>
      <value>
            The circuit.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventArgs">
      <summary>
            Event arguments for the new data event
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.EISData">
      <summary>
            The EISData associated with the new added point
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.Index">
      <summary>
            The iFreq of the datapoint
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewFreqScanEventArgs">
      <summary>
            Event arguments for the NewSubScanAdded event
            </summary>
      <seealso cref="T:System.EventArgs" />
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewFreqScanEventArgs.AddedScan">
      <summary>
            The new frequency scan added
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.XUnit">
      <summary>
            The XUnit corresponding with the AxesType
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GenerateCurves(PalmSens.Plottables.EISPlotModes,System.Boolean)">
      <summary>
            Gets the curves.
            </summary>
      <param name="plotMode">The plot mode.</param>
      <param name="onlyIfExists">if set to <c>true</c> do not generate the curves</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">plotMode - null</exception>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetFreqScanSelectedSeries(System.Int32)">
      <summary>
            Returns the EIS data belonging only to the scan of which the selected point is part of.
            This is useful for exporting to third party software for EIS fitting in case multiple frequency scans were done vs time or E.
            </summary>
      <param name="index">The iFreq.</param>
      <returns>EISData series containing only one frequency scan</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetSubScans">
      <summary>
            Gets the data splitted up in multiple EISData's for each frequency scan.
            If the frequency was fixed only one EISData is returned containing all values of the time or potential scan
            </summary>
      <returns>One or more EISData's</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetAllEISDatas">
      <summary>
            If this EISData has SubScans this function returns all sub frequency scans as EISData objects, similar to GetSubScans()
            If this EISData is measured at a fixed frequency or at a fixed potential it will only return the a single EISData object
            </summary>
      <returns>one or more EISData objects</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.AddRow(System.Int32,System.Double,PalmSens.Data.VoltageReading,System.Double,PalmSens.Data.CurrentReading,PalmSens.Data.CurrentReading,System.Double,System.Double,System.Double)">
      <summary>
            Adds the row to the DataSet.
            </summary>
      <param name="seriesStartTime">The series start time.</param>
      <param name="edc">The edc.</param>
      <param name="frequency">The frequency.</param>
      <param name="idc">The iDC.</param>
      <param name="iac">The iAC.</param>
      <param name="zRe">The ZRe.</param>
      <param name="zIm">The Zim.</param>
      <param name="phase">The phase.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.Title">
      <summary>
            The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.VisualSettingsChanged">
      <summary>
      </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.ColorChanged">
      <summary>
            Occurs when plot color changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.#ctor(PalmSens.Plottables.VisualSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.VisualSettings" /> class.
            Sets UseDefaultSettings to <c>false</c>.
            </summary>
      <param name="settings">The settings.</param>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.GetVisualSettingsFastDraw">
      <summary>
            Gets the best visual settings for fast drawing large curves.
            </summary>
      <returns>VisualSettings</returns>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.UseDefaultSettings">
      <summary>
            Gets or sets a value indicating whether the Plot Default setting should be used for this Curve when adding it to a Plot.
            If <c>true</c> the plot will assign a colour and set the default appearance settings
            This value returns false after the first time the curve is added to a Plot.
            </summary>
      <value>
        <c>true</c> if [use default settings]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.AutoAssignColor">
      <summary>
            If true the Plot will assign a colour automatically
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.Color">
      <summary>
            The color for this plottable as ARGB value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.VisualSettings.Symbol">
      <summary>
            The symbols available
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolType">
      <summary>
            Gets or sets the type of the symbol.
            </summary>
      <value>
            The type of the symbol.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolFill">
      <summary>
            The symbol fill
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolSize">
      <summary>
            The symbol size
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.LineWidth">
      <summary>
            Use a custom line width.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.HideCurveLine">
      <summary>
            If true, no line is drawn, only dots
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.CopyAppearance(PalmSens.Plottables.VisualSettings,System.Boolean,System.Boolean)">
      <summary>
            Clones the appearance except the color, unless specified.
            </summary>
      <param name="newSettings">The default curve settings.</param>
      <param name="includeColor">if set to <c>true</c> [include color].</param>
      <param name="includeSymbolType">if set to <c>true</c> [include symbol type].</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.ICalibrationMethod">
      <summary>
            Properties for methods that can be used with calibration.
            </summary>
    </member>
    <member name="M:PalmSens.ICalibrationMethod.CalculateSignal(PalmSens.Plottables.Curve)">
      <summary>
            Function that calculates the signal for a give Curve
            </summary>
      <param name="c">Curve to calculate derivative of</param>
      <returns>calculated signal</returns>
    </member>
    <member name="T:PalmSens.CalibrationCurve">
      <summary>
            Curve derived from calculations using Calibration measurement
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.#ctor(PalmSens.Units.Unit,PalmSens.Units.Unit,System.Single[],System.Single[])">
      <summary>
            Create a new Calibrationcurve
            </summary>
      <param name="signalUnit">SignalUnit</param>
      <param name="concentrationUnit">ConcentrationUnit</param>
      <param name="i">signals</param>
      <param name="conc">concentrations</param>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Offset">
      <summary>
            Offset of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Slope">
      <summary>
            Slope of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.CorrCoef">
      <summary>
            Correlation Coefficient
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(System.Single)">
      <summary>
            Calculate concentration corresponding to given signal
            </summary>
      <param name="i">signal to calculate for</param>
      <returns>concentration for specified signal</returns>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(PalmSens.ICalibrationMethod,PalmSens.Plottables.Curve)">
      <summary>
            Calculate concentration
            </summary>
      <param name="m">method to use</param>
      <param name="c">curve to calculate concentration for</param>
      <returns>concentration</returns>
    </member>
    <member name="T:PalmSens.CFALevelList">
      <summary>
            Describes a list of levels
            </summary>
    </member>
    <member name="T:PalmSens.CFALevelList.Level">
      <summary>
            Level information
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftX">
      <summary>
            X coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightX">
      <summary>
            X coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftY">
      <summary>
            Y coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightY">
      <summary>
            Y coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelX">
      <summary>
            X coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelY">
      <summary>
            Y coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.CFALevelList.nLevels">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.CFALevelList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="M:PalmSens.CFALevelList.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double)">
      <summary>
            Create a new levellist, looking for levels in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="pxmin">minimum level width</param>
      <param name="pymin">minimum level height</param>
    </member>
    <member name="M:PalmSens.CFALevelList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve">
      <summary>
            The sine curve returned during impedemetric measurements
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve.EnumSine">
      <summary>
            The sine function
            </summary>
    </member>
    <member name="M:PalmSens.SineCurve.GetPercentageOfResolution(System.Single)">
      <summary>
            Gets the percentage of resolution.
            </summary>
      <param name="maxDigital">The maximum digital value.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.SineCurve.Ymean">
      <summary>
            This is the mean of all Y's
            Value is in uA if current or V if voltage
            </summary>
    </member>
    <member name="T:PalmSens.Plottable">
      <summary>
            A generic plottable class
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.TitleChanged">
      <summary>
            Raised when the curves Title has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.VisibleChanged">
      <summary>
            Raised when the curves Visibility has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.SavedToFileChanged">
      <summary>
            Occurs when the plottable was saved to a file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.AppearanceChanged">
      <summary>
            Occurs when Visual Settings have changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnTitleChanged">
      <summary>
            Called when legend needs refreshment
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnVisibleChanged">
      <summary>
            Called when [visible changed].
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsInPlot">
      <summary>
            Gets or sets a value indicating whether this instance is in plot.
            This property is maintained by the plot if part of the Plot.CurveCollection
            This setting is not related to the Curve.Visible property.
            </summary>
      <value>
        <c>true</c> if this instance is in plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PalmSens.Plottables.Curve" /> is visible in the Plot.
            Raises VisibleChanged();
            </summary>
      <value>
        <c>true</c> if visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Plottable.SetVisibilityNoEvents(System.Boolean)">
      <summary>
            Sets the Visible property without raising OnVisibleChanged event.
            </summary>
      <param name="visible">if set to <c>true</c> [visible].</param>
    </member>
    <member name="P:PalmSens.Plottable.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Curve should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.SavedToFilePath">
      <summary>
            The filepath to which this plottable has been saved to.
            This value is set when saving and loading this plottable to a Session file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.Finished">
      <summary>
            Occurs when this curve is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.Title">
      <summary>The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.</summary>
    </member>
    <member name="P:PalmSens.Plottable.Error">
      <summary>Error(s) that occured during measurement.</summary>
    </member>
    <member name="M:PalmSens.Plottable.OnFinished">
      <summary>
            Called when this plottable is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsFinished">
      <summary>
            Gets a value indicating whether this plottable is still receiving data (<c>false</c>) or not (<c>true</c>)
            </summary>
      <value>
        <c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.MuxChannel">
      <summary>
            The corresponding MUX channel number with the curve starting at 0.
            Value is -1 for no MUX channel used.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx">
      <summary>
            Method extention for a PolyEmStat device
            </summary>
    </member>
    <member name="M:PalmSens.PolyEmStatMethodEx.SetEMode(System.Int32,PalmSens.PolyEmStatMethodEx.enumEMode)">
      <summary>
            Sets the potential mode for an additional WE channel.
            </summary>
      <param name="iChannel">The additional WE channel.</param>
      <param name="mode">The potential mode.</param>
      <value>
            The potential mode.
              </value>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.SelectedRange">
      <summary>
            The current range for the PolyEmStat BiPot channels
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.WEPotential">
      <summary>
            The potential (offset) for the PolyEmStat WE
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationValues">
      <summary>
            The calibration curve values for concentration determination
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.a">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.b">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.c">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="T:PalmSens.PotentialMethod">
      <summary>Contains all shared methodparameters of all measurement method classes for measurement vs. potential.</summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.#ctor(System.Int32)">
      <summary>
            Create a new potential method 
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.BeginPotential">
      <summary>Potential where scan starts. The applicable range of the potential depends on the device connected.
            Reflects start potential if CV.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.EndPotential">
      <summary>Potential in V where measurement stops (Except for CV).</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.StepPotential">
      <summary>Step potential in V.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="M:PalmSens.PotentialMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error message or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.PotentialMethod.nPoints">
      <summary>
            Number of points that will be measured with the current settings
            </summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealStepPotential(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real step potential based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
            The step potential as absolute value
            </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.PotentialMethod.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Annotations.CanBeNullAttribute">
      <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
      <example>
        <code>
            [CanBeNull] object Test() =&gt; null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotNullAttribute">
      <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
      <example>
        <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.ItemNotNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ItemCanBeNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitNotNullAttribute">
      <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.StringFormatMethodAttribute">
      <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
      <example>
        <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
      </example>
    </member>
    <member name="M:PalmSens.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
    </member>
    <member name="T:PalmSens.Annotations.ValueProviderAttribute">
      <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InvokerParameterNameAttribute">
      <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
      <example>
        <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotifyPropertyChangedInvocatorAttribute">
      <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
      <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
      <example>
        <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
    </member>
    <member name="T:PalmSens.Annotations.ContractAnnotationAttribute">
      <summary>
            Describes dependency between method input and output.
            </summary>
      <syntax>
        <p>Function Definition Table syntax:</p>
        <list>
          <item>FDT      ::= FDTRow [;FDTRow]*</item>
          <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
          <item>Input    ::= ParameterName: Value [, Input]*</item>
          <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
          <item>Value    ::= true | false | null | notnull | canbenull</item>
        </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br /><c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br /></syntax>
      <examples>
        <list>
          <item>
            <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
          </item>
          <item>
            <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
          </item>
        </list>
      </examples>
    </member>
    <member name="T:PalmSens.Annotations.LocalizationRequiredAttribute">
      <summary>
            Indicates that marked element should be localized or not.
            </summary>
      <example>
        <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.CannotApplyEqualityOperatorAttribute">
      <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
      <example>
        <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.BaseTypeRequiredAttribute">
      <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
      <example>
        <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.UsedImplicitlyAttribute">
      <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.MeansImplicitUseAttribute">
      <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Access">
      <summary>Only entity marked with attribute considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Assign">
      <summary>Indicates implicit assignment to a member.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
      <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
      <summary>Indicates implicit instantiation of a type.</summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitUseTargetFlags">
      <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:PalmSens.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:PalmSens.Annotations.UsedImplicitlyAttribute" />.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.Members">
      <summary>Members of entity marked with attribute are considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.WithMembers">
      <summary>Entity marked with attribute and all its members considered used.</summary>
    </member>
    <member name="T:PalmSens.Annotations.PublicAPIAttribute">
      <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InstantHandleAttribute">
      <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.PureAttribute">
      <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
      <example>
        <code>
            [Pure] int Multiply(int x, int y) =&gt; x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.MustUseReturnValueAttribute">
      <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ProvidesContextAttribute">
      <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
      <example>
        <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.PathReferenceAttribute">
      <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.SourceTemplateAttribute">
      <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
      <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:PalmSens.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
      <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code></example>
    </member>
    <member name="T:PalmSens.Annotations.MacroAttribute">
      <summary>
            Allows specifying a macro for a parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
      <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:PalmSens.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
      <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code></example>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Expression">
      <summary>
            Allows specifying a macro that will be executed for a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Editable">
      <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
      <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values &gt;= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>&gt;
        </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Target">
      <summary>
            Identifies the target parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:PalmSens.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcAreaAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcControllerAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcMasterAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcModelTypeAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcPartialViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcSuppressViewErrorAttribute">
      <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcDisplayTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcEditorTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionSelectorAttribute">
      <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
      <example>
        <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.RazorSectionAttribute">
      <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.CollectionAccessAttribute">
      <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.None">
      <summary>Method does not use or modify content of the collection.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.Read">
      <summary>Method only reads content of the collection but does not modify it.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.ModifyExistingContent">
      <summary>Method can change content of the collection but does not add new elements.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.UpdatedContent">
      <summary>Method can add new elements to the collection.</summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionMethodAttribute">
      <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:PalmSens.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionAttribute">
      <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:PalmSens.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionType">
      <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_TRUE">
      <summary>Marked parameter should be evaluated to true.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_FALSE">
      <summary>Marked parameter should be evaluated to false.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NULL">
      <summary>Marked parameter should be evaluated to null value.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NOT_NULL">
      <summary>Marked parameter should be evaluated to not null value.</summary>
    </member>
    <member name="T:PalmSens.Annotations.TerminatesProgramAttribute">
      <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.LinqTunnelAttribute">
      <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.NoEnumerationAttribute">
      <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.RegexPatternAttribute">
      <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemBindingOfItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
      <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:PalmSens.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
    </member>
    <member name="T:PalmSens.Annotations.NoReorder">
      <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
      <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
    </member>
    <member name="T:PalmSens.Ranging">
      <summary>
            Ranging settings
            </summary>
    </member>
    <member name="E:PalmSens.Ranging.RangingChanged">
      <summary>
            Occurs when minimum, maximum or begin current range was changed.
            </summary>
    </member>
    <member name="F:PalmSens.Ranging.CurrentRange">
      <summary>
            Active Current Range
            </summary>
    </member>
    <member name="P:PalmSens.Ranging.StartCurrentRange">
      <summary>
            Gets or sets the current range to begin at.
            </summary>
      <value>
            The first current range to start at.
            </value>
    </member>
    <member name="P:PalmSens.Ranging.Autoranging">
      <summary>
            Whether autoranging is enabled
            </summary>
    </member>
    <member name="M:PalmSens.Ranging.GetOptimalRangeForCurrent(System.Double,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the optimal range for current in uA.
            </summary>
      <param name="current">The current in uA.</param>
      <returns>Byte to use for PalmSens.CurrentRange.FromCRByte()</returns>
    </member>
    <member name="T:PalmSens.AutoRanging">
      <summary>
            Autoranging
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
      <param name="startRange">The start range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="T:PalmSens.FixedCurrentRange">
      <summary>
            Fixed current ranging
            Maximum current range is actual current range (minimum current range is same as maximum)
            </summary>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MaximumCurrentRange">
      <summary>
            Same as CurrentRange range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MinimumCurrentRange">
      <summary>
            Same as maximum current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.StartCurrentRange">
      <summary>
            Same as current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertRichTextToSaveString(System.String)">
      <summary>
            Converts the rich text containing spaces, enters and tabs to save string.
            </summary>
      <param name="stringToConvert">The text to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertLoadedStringToRichText(System.String)">
      <summary>
            Converts the rich loaded string to text containing spaces, enters and tabs.
            </summary>
      <param name="stringToConvert">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.ScanMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. potential.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.#ctor(System.Int32)">
      <summary>
            Create a new scan method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SupportsDetermination">
      <summary>Is true if the method can be used for determination.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.BlankType">
      <summary>Blank subtraction can be performed in two ways.
            <para>The blank can be measured using a separate blank solution.</para><para>The second curve is subtracted from the original curve.</para></summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalyteName">
      <summary>
            Array containing the names of 4 possible analytes.
            Use SetAnalyteName to change individual name
            </summary>
      <value>
            The array with names for each analyte.
            </value>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalyteName(System.Int32,System.String)">
      <summary>
            Sets the name of an analyte.
            </summary>
      <param name="iAnalyte">The index (0-4) of the analyte.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SolutionNr">
      <summary>Array containing the of 4 possible solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalytePeakAutodetect">
      <summary>
            Used to determine if the peak for an analyte is found automatically or by fixed E left and E right values 
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalytePeakAutodetect(System.Int32,System.Boolean)">
      <summary>
            Specifies peak autodetect for a analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="value">if set to <c>true</c> [value].</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeaks">
      <summary>Specifies the expected peak potential.
            Use SetEPeak to change individual values.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeaks(System.Int32,System.Single)">
      <summary>
            Sets the expected peak potential EPeak for the analyte iAnalyte
            </summary>
      <param name="iAnalyte">The index of the analyte.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakLeft">
      <summary>
            Leftside of the manual baseline 
            Use SetEPeakLeft to change individual values
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakLeft(System.Int32,System.Single)">
      <summary>
            Sets the E peak left.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakLeftNew">The E peak left new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakRight">
      <summary>
            Rightside of the manual baseline
            Use SetEPeakRight to change individual values
            9999 means AutoPeak
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakRight(System.Int32,System.Single)">
      <summary>
            Sets the E peak right.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakRightNew">The E peak right new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardConcentration">
      <summary>Specifies the concentration given in 'Unit of concentration' of the component in the corresponding standard solution.</summary>
      <remarks>These parameters are only relevant when the standard addition method is applied.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.VolumeConcentration">
      <summary>This table (Column, Row) is used to specify either the added volume of the standard additions or the concentration of a standard solution.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.SampleVolume">
      <summary>Is used to calculate the concentration in the original sample from the peak height measured in the solution specified in the box of the cell volume.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.CellVolume">
      <summary>Is required to correct for dilution effect due to the addition of the standard solutions and to calculate the concentration in the original sample.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.Determination">
      <summary>
        <c>StandardAddition</c> requires measurement of the sample and a sample to which standard solution is added. Analysis by using <c>Calibration</c> curve requires a calibration curve.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardsValues">
      <summary>If <c>ConcentrationsAddedToSample</c> is used, the specified values are used and peaks are not corrected. If <c>VolumesAddedToCell</c> is used, peaks are corrected for dilution due to the addition of standard solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.PeakValue">
      <summary>
        <c>PeakValue</c> determines which value is used for calculations. /// </summary>
    </member>
    <member name="F:PalmSens.ScanMethod.EPretreat">
      <summary>Pretreatment potentials.</summary>
    </member>
    <member name="F:PalmSens.ScanMethod.tPretreat">
      <summary>Time applied for each potential.</summary>
    </member>
    <member name="M:PalmSens.ScanMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate a hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Equals(System.Object)">
      <summary>
            Compare two scanmethods
            </summary>
      <param name="o">method to compare with</param>
      <returns>whether the two scanmethods were equal</returns>
    </member>
    <member name="M:PalmSens.ScanMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.enumBlankType">
      <summary>
            Possible Blank types. 
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.None">
      <summary>
            No blank at all.
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SeperateMeasurement">
      <summary>
            Subtract a seperate curve from the current one
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SubstractiveStripping">
      <summary>
            Measurement blank data before measuring a curve
            </summary>
    </member>
    <member name="T:PalmSens.enumDetermination">
      <summary>
            Method for determining concentrations
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.StandardAddition">
      <summary>
            Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.Calibration">
      <summary>
            Calibration
            </summary>
    </member>
    <member name="T:PalmSens.enumUsePeakValue">
      <summary>
            Method for determining which peak value to use for calculations
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakHeight">
      <summary>
            Use the peak height
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakArea">
      <summary>
            Use the peak area
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakSumSlopes">
      <summary>
            Use the sum of the maximum and minimum slope derivatives of the peak
            </summary>
    </member>
    <member name="T:PalmSens.enumStandardsValues">
      <summary>
            Possible standards for Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.ConcentrationsAddedToSample">
      <summary>
            Concentrations added to sample
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.VolumesAddedToCell">
      <summary>
            Volumes added to cell
            </summary>
    </member>
    <member name="T:PalmSens.SingleThreadSyncContext">
      <summary>Provides a SynchronizationContext that's single-threaded.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Dispatches an asynchronous message to the synchronization context.</summary>
      <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Not supported.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunAllOnCurrentThread">
      <summary>Runs a loop to process all queued work items. Does not block.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunOneOnCurrentThread">
      <summary>
            Runs the one work item on current thread. Blocks until next work item is available.
            </summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Complete">
      <summary>Notifies the context that no more work will arrive.</summary>
    </member>
    <member name="T:PalmSens.Techniques.ACVoltammetry">
      <summary>Contains all method parameters for technique acVoltammetry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.#ctor">
      <summary>
            Create a new AC Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Frequency">
      <summary>Frequency of the ac signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.factorACI">
      <summary>Correction factor for data received from PalmSens.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.SineWaveAmplitude">
      <summary>Amplitude of sine wave. Value is V rms.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MeasureDCcurrent">
      <summary>
            Measurement the DC current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Not applicable for this technique
            </summary>
      <param name="capabilities">Device capabilities</param>
      <returns>0f</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.Techniques.AmperometricDetection">
      <summary>
            Contains all methodparameters for technique Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.#ctor">
      <summary>
            Create a new Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ChronoPotStripping">
      <summary>Contains all methodparameters for technique Stripping Chronopotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.#ctor">
      <summary>
            Create a new ChronoPotStripping method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.AppliedCurrentRange">
      <summary>
            Current range during stripping in 1*10^n nA. Min value is 1uA (3).
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MaximumEstimatedMeasurementDuration">
      <summary> Estimated number of seconds a measurement will take at most (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MeasurementTime">
      <summary>Measurement Time</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.EndPotential">
      <summary>Potential where measurement stops.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Current">
      <summary>
            See Istrip
            </summary>
      <value>
            Equal to Istrip
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Istrip">
      <summary>Stripping current.</summary>
      <remarks>
             If specified as 0, the method is called chemical stripping, otherwise it
             is chemical constant current stripping. The applicable range is +- 0.001 microampere to +- 2 milliampere
            </remarks>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this method will at least take. 
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="T:PalmSens.Techniques.CyclicVoltammetry">
      <summary>
            Contains all methodparameters for technique Cyclic Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.#ctor">
      <summary>
            Create a new Cyclic Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">DeviceCapabilities required to determine resolution</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nEqScans">
      <summary>The number of equilibration scans.</summary>
                    ///<summary>The applied scan rate.</summary><remarks>The applicable range depends on the value of E step</remarks></member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx1Potential">
      <summary>
            Gets or sets the VTX1 potential.
            </summary>
      <value>
            The VTX1 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx2Potential">
      <summary>
            Gets or sets the VTX2 potential.
            </summary>
      <value>
            The VTX2 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToString">
      <summary>
            Generate description of this method
            </summary>
      <returns>the string "Cyclic Voltammetry"</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"CV"</returns>
    </member>
    <member name="T:PalmSens.Techniques.FastPotentiometry">
      <summary>Contains all methodparameters for technique Fast Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.#ctor">
      <summary>
            Create a new Fast Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastPotentiometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.FastAmperometry">
      <summary>
            Fast Amperometric Detection
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.#ctor">
      <summary>
            Create a new Fast Amperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.nPoints">
      <summary>
            Number of points used in a measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <param name="capab">Capabilities</param>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.IntervalTimeF">
      <summary>Interval time for Fast measurements.</summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.EqPotentialFA">
      <summary>The equilibration potential (only used in FA).</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.FastMeasurement">
      <summary>
            Fast time measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastMeasurement.TryProcessData">
      <summary>
            Try to receive more data
            </summary>
      <returns>whether the measurement is done</returns>
    </member>
    <member name="M:PalmSens.Techniques.IFastMeasurement.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.IMixedModeStageMethod">
      <summary>
            Methods with this interfaced can be serialized / deserialized as stage in MixedTechniqueMethod method file.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStageMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E or I (depending whether the potential or current is controlled).
            </summary>
      <value>
        <c>true</c> if versus previous E or I; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod">
      <summary>
            Method for use with the "sub"-Measurements that are part of each ImpedimetricMeasurement.
            This should not be registered in the UI and only used from ClientConnection.measureImpedimetric.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.IsLastIteration">
      <summary>
            If is last measurement, MixedTechniqueMethod bit (used to combine multiple measurements like this one) will not be set
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"IMP_it"</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToString">
      <summary>
            Returns the name of the technique
            Used in PalmSens.Control.StatusBar 
            </summary>
      <returns>"Impedance"</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Frequency">
      <summary>
             FixedFrequency of the sine signal.
             This value is corrected for the real applied frequency after calling ToHex.
             The difference between the set frequency and the real frequency is due to rounding
             and timing in the PalmSens firmware
             </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.numsinestable">
      <summary>
            Numsinestables the specified frequency.
            number of sines in table is 1 or 2
            This value is determined in DetermineSine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterDAC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterADC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterCF">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTAB">
      <summary>
            HSTAB filter is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTABByte">
      <summary>
            HSTAB filter code
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.AcCoupled">
      <summary>
            AcCoupled is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterAc">
      <summary>
            AC Filter
            if value  is provided, OverrideFilterAc will not be calculated, but the provided value for FilterAc will be used.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAgain">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAoffset">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.tIntac">
      <summary>
            The time for one point in the sine in seconds
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.nPointsac">
      <summary>
             Length of Sine wave
             this value is determined in DetermineSine 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Nadc">
      <summary>
            Number of ADC's to integrate per point in the sine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NadcStart">
      <summary>
            The index where integration of the nADC start, points before this
            index are ignored due to the longer RC time
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MDAC">
      <summary>
            The multiplying DAC value
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Neqstart">
      <summary>
            The place in eq to start in in case of very low frequency
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumMeasurementSines">
      <summary>
            The number of measurement sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumEquilibrationSines">
      <summary>
            Gets the num equilibration sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MaxSamplingRate">
      <summary>
            The maximum sampling rate.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Channel">
      <summary>
            Selected channel.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Celltype">
      <summary>
            Selected cell type.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.UseExternalAD">
      <summary>
            Used in PS3 firmware to determine wheter to use the internal or external AD
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides">
      <summary>
            Used to determine which parameters should be calculated automatically and which parameters are specified
            for all overriden parameters the specified value for the parameter will be used
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.IsOverridden(PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides)">
      <summary>
            Check if the specified parameter is overridden
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>
        <c>true</c> if the specified parameter is overridden; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            To the hex1.
            </summary>
      <param name="m">The em.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetNPoints(System.Single,System.Single,System.Int32,System.Int32)">
      <summary>
            Gets the number of points in the sine.
            </summary>
      <param name="maxSamplingRate">The max sampling rate.</param>
      <param name="frequency">The frequency.</param>
      <param name="minPoints">The min points.</param>
      <param name="maxPoints">The max points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.DetermineSine(PalmSens.Devices.EISSettingsPS3)">
      <summary>
            Code for PS3
            This should be done before starting a measurement (calling ToHex1)
            Fills Sine[] with values over full 16 bit DAC range (0-65563).
            Output is multiplied with MDAC
            </summary>
      <param name="eisSettings">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod">
      <summary>Contains all methodparameters for technique ImpedimetricMethod.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.#ctor">
      <summary>
            Create a new Impedimetric Method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MaxPGAgain">
      <summary>
            This value is normally taken from EISsettings, but can be overridden
            From method window: Sensitivity: O Low (maxgain1)  O Normal (maxgain2)  O High (maxgain3) 
            Default is High
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.IterationMethodOverrides">
      <summary>
            This iteration method is the initial iteration method and may contain
            filter and other overrides for testing and calibration purposes
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FixedFrequency">
      <summary>
            The fixed sine Frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxFrequency">
      <summary>
            Maximum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxEqTime">
      <summary>
            Max. time for generating equilibration sines
            van 0.01 ~ 1000 s
            Only used if nEquil sines equals 1
            number of equil sines = measure sines / 5
            5 &gt;= eq sines &gt; 1
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinFrequency">
      <summary>
            Minimum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.nFrequencies">
      <summary>
            Number of Frequencies
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetFreqsListString">
      <summary>
            Gets the freqs list.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Freqs">
      <summary>
            Returns an array with length nFrequenciess 
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SamplingTime">
      <summary>
            Minimum sampling time
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Eac">
      <summary>
            Eac or E amplitude
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.EndPotential">
      <summary>
            Eend
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.StepPotential">
      <summary>
            Estep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumScanType">
      <summary>
            Type of scan; vs potential or vs time
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType">
      <summary>
            Scanning on a fixed frequency or doing frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.ScanType">
      <summary>
            Determines if scan is versus E or t
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FreqType">
      <summary>
            Determines if frequency is fixed or scanned
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachFreqMeas">
      <summary>
            Do pretreatment on each frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachScan">
      <summary>
            Do pretreatment on each new intervaltime (in case of potential or time scan)
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method.
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at maximum (in seconds)</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes to the specified textwriter.
            </summary>
      <param name="tw">The textwriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement">
      <summary>
            Measurement procedures for Impedimetric measurement. PalmSens is controlled manually with this measurement.
            Each iteration (short measurement at a certain frequency) is an ImpedimetricIterationMeasurement
            The ImpedemetricMethod is the Method class used to set up an EIS measurement. 
            Each iteration is set in an ImpedimetricIterationMethod during the run of a measurement.
            
            This measurement does not generate a Curve but a PalmSens.EISData, which is also a Plottable.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ImpedimetricMeasurement" /> class.
            Note: Impedance measurements are currently not supported for the SDK.
            All data is recorded in the DataSet. The PalmSens.Plottable.EISData plottable uses this DataSet to generate curves for the 
            PalmSens.Plot2.PlotEISdata object.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement.NewFreqCurveEventHandler">
      <summary>
            Delegate for the NewSine events
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineECurve">
      <summary>This event is triggered when a sine Curve for E is added to the impdata class.</summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineICurve">
      <summary>This event is triggered when a returned sine Curve I is added to the impdata class.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.DataSet">
      <summary>
            Use _currentEISdata.DataSet instead.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.Method">
      <summary>
            Gets the method as <see cref="T:PalmSens.Techniques.ImpedimetricMethod" />.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMeasurement.CalibrationType">
      <summary>
            The type of calibration to run as used in CalibrationSteps and derived classes
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.IntToFloat(System.UInt32)">
      <summary>
            Ints to floats converter.
            </summary>
      <param name="i">The integer value</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.MeasureIterate">
      <summary>
            This is the iterated function for an Impedimetric Measurement
            </summary>
      <returns>true if finished</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            Only used here to parse the itterations, since this is invoked with every timer tick from Comm
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.Current">
      <summary>
            Gets or sets the current.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.LinearSweep">
      <summary>Contains all methodparameters for technique Lineair Sweep.</summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.#ctor">
      <summary>
            Generate Linear Sweep method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserializes the technique specific parameters.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MethodError">
      <summary>
            A method error
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MethodError.#ctor(System.String,PalmSens.Techniques.enumTechniqueParameter,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MethodError" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="parameter">The parameter.</param>
      <param name="isFatal">if set to <c>true</c> [is fatal].</param>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Message">
      <summary>
            Gets or sets the message.
            </summary>
      <value>
            The message.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.IsFatal">
      <summary>
            Gets or sets a value indicating whether this instance is fatal.
            </summary>
      <value>
        <c>true</c> if this instance is fatal; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Parameter">
      <summary>
            Gets or sets the parameter associated with this error.
            </summary>
      <value>
            The parameter.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.MixedModeMeasurement.StageMeasurement">
      <summary>
            The measurement running for the current mixed mode stage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.ProcessData">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            TRUE if the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will
            take care of announcing it.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode">
      <summary>
            Combines different techniques
            </summary>
      <seealso cref="T:PalmSens.Method" />
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode.EnumMixedModeStageType">
      <summary>
            Different stages available for Mixed Mode
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantE">
      <summary>
            Apply constant E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantI">
      <summary>
            Apply constant I
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.SweepE">
      <summary>
            Sweep E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.OpenCircuit">
      <summary>
            Cell at open circuit
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.Impedance">
      <summary>
            Apply AC 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.AddStage(PalmSens.Techniques.MixedMode.EnumMixedModeStageType)">
      <summary>
            Adds the stage.
            </summary>
      <param name="stage">The stage.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">stage</exception>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            </summary>
      <param name="capab">The device capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStage.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageConstantE">
      <summary>
      </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus the last measured E or I.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus the last measured E or I.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantI.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.IntervalTime">
      <summary>
            Sets the interval time, but doesn't apply for Sweep, because interval = Estep / scan rate
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageOcp.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageEIS">
      <summary>
            MixedMode stage for EIS (AC) measurements at a fixed frequency
            </summary>
      <seealso cref="T:PalmSens.Techniques.ImpedimetricMethod" />
      <seealso cref="T:PalmSens.Techniques.IMixedModeStage" />
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MixedModeStageEIS" /> class.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageEIS.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultiplePulseAmperometry">
      <summary>Contains all methodparameters for technique MultiplePulseAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.#ctor">
      <summary>
            Create a new MultiplePulseAmperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.E3">
      <summary>
            Applied potentials.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t3">
      <summary>
            Gets or sets the t3.
            </summary>
      <value>
            The t3.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t2">
      <summary>
            Gets or sets the t2.
            </summary>
      <value>
            The t2.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t1">
      <summary>
            Gets or sets the t1.
            </summary>
      <value>
            The t1.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.nPoints">
      <summary>
            Returns the number of datapoints.
            </summary>
      <returns>number of datapoints"</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultistepAmperometry">
      <summary>Contains all methodparameters for technique MultistepAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.MultistepPotentiometry">
      <summary>Contains all methodparameters for technique MultistepPotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MultistepPotentiometry" /> class.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            N/A for this technique
            Setting
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.Current">
      <summary>
            Gets or sets the current. N/A for this technique.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Multistep">
      <summary>Contains all methodparameters for technique Multistep Amperometry or Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.#ctor(PalmSens.Techniques.Multistep.EnumMode,System.Int32)">
      <summary>
            Create a new Multistep class
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Mode">
      <summary>
            The mode for Multistep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.Multistep.EnumMode">
      <summary>
            Available modes
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Amperometry">
      <summary>
            Multistep Amperometry
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Potentiometry">
      <summary>
            Multistep Potentiometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseLimits">
      <summary>
            Gets or sets a value indicating whether [use limits].
            </summary>
      <value>
        <c>true</c> if [use limits]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseSelectiveRecord">
      <summary>
            Gets or sets a value indicating whether [use selective record].
            This allows the user to apply a level without recording the result
            </summary>
      <value>
        <c>true</c> if [use selective record]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Delta">
      <summary>
            Maximum delta. [not used in this version]
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nSteps">
      <summary>
            Number of steps
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.RunTime">
      <summary>
            Total time of measurement (only include recorded levels).
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.BeginPotential">
      <summary>
            First potential for MultistepAmperometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.Levels">
      <summary>
            Contains the collection of levels
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.Levels.LevelChanged">
      <summary>
            Occurs when a value in one of the levels has changed.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.EILevel">
      <summary>
            A single level
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MultistepMeasurementMC">
      <summary>
            Measurement procedures for MultistepAmperometry. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Chrono Amperometry measurement. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.MeasureIterate">
      <summary>
            Next iteration during measurement, returns true if measurement is finished
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.ScriptOverridable">
      <summary>
            Determines if this value can be overriden in the script
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="propertyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="properyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.PropertyName">
      <summary>
            Gets or sets the name of the parameter
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.FriendlyName">
      <summary>
            Gets or sets the friendly name
            </summary>
      <value>
            The name of the friendly.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.Unit">
      <summary>
            Gets or sets the unit for this parameter
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Potentiometry">
      <summary>Contains all methodparameters for technique Potentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.#ctor">
      <summary>
            Create a new Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.OverrideFilter">
      <summary>
            Gets or sets a value indicating whether [override filter].
            </summary>
      <value>
        <c>true</c> if [override filter]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Filter">
      <summary>
            Gets or sets the dampening filter.
            Can be a value from 0 to 10 where
            at 10 mA: the RC-times are approx. 500 ns(0), 500 ns(1), 500 ns(2) and 7 us(3). 
            at 1 mA: the RC-times are approx. 500 ns(1), 500 ns(2), 7 us(3) and 50 us(4). 
            at 100 uA: the RC-times are approx.500 ns(2), 7 us (3), 50 us(4)and 500 us(5). 
            at 10 uA: the RC-times are approx. 7 us (3), 50 us(4), 500 us(5) and 5 ms(6). 
            at 1 uA: the RC-times are approx. 50 us(4), 500 us(5), 5 ms(6) and 50 ms(7). 
            at 100 nA: the RC-times are approx. 500 us (5), 5 ms(6), 50 ms(7) and 500 ms(8).
            at 10 nA: the RC-times are approx. 5 ms(6), 50 ms(7), 500 ms(8) and 5 s(9).
            at 1 nA: the RC-times are approx. 50 ms(7), 500 ms(8), 5 s(9) and 50? s (10).
            </summary>
      <value>
            The filter value between 0 and 10. 
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Current">
      <summary>
            Current during measurement <c>(Potentiometry)</c>. 
            The applicable range of the potential is defined by the device's Capabilities:
             Capabilities.MaxCurrent and Capabilities.MinCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            Changes OCP to <c>true</c> if capab.IsGalvanostat is <c>false</c></summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.OpenCircuitPotentiometry">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Techniques.Potentiometry" />
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="P:PalmSens.Techniques.OpenCircuitPotentiometry.Current">
      <summary>
             Is always 0 for this technique (Open Circuit Potentiometry)
             </summary>
    </member>
    <member name="T:PalmSens.Techniques.DifferentialPulse">
      <summary>
            Contains all methodparameters for Differential Pulse Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.#ctor">
      <summary>
            Create new differential pulse method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.DifferentialPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.NormalPulse">
      <summary>
            Contains all methodparameters for Normal Pulse Voltammetry.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.#ctor">
      <summary>
            Create new Normal Pulse method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.NormalPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration of this method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.Pulse">
      <summary>Contains all shared methodparameters for all pulse related measurement method classes.</summary>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulsePotential">
      <summary>
            Pulse Potential
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulseTime">
      <summary>The pulse time.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToString">
      <summary>
            Generate description
            </summary>
      <returns>the string "Normal Pulse"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"NPV"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.#ctor(System.Int32)">
      <summary>
            Create a new pulse method
            </summary>
      <param name="t">technique number to use</param>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection">
      <summary>
            Contains all methodparameters for technique Pulsed Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.#ctor">
      <summary>
            Create Pulsed Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulseTime">
      <summary>The pulse time in <c>PulsedAmpDetection</c> and <c>FastAmperometry</c>.</summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.DcPotential">
      <summary>
            dc potential for PAD
            Will always have same value as the inherited values <para>Potential</para> or <para>Begin potential</para></summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulsePotentialAD">
      <summary>
            Pulse Potential for PAD
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection.enumMode">
      <summary>
            Pulsed Amperometric Detection mode to use
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.dc">
      <summary>
            DC
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Pulse">
      <summary>
            Pulse
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Differential">
      <summary>
            Differential
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.tMode">
      <summary>There are three modi for this technique:
             <list type="bullet"><item><description><c>Dc</c> measurement is performed at potential E</description></item><item><description><c>Pulse</c> measurement is performed at potential E pulse</description></item><item><description><c>Dif</c> measurement is <c>Dc - Pulse</c></description></item></list></summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.SquareWave">
      <summary>Contains all methodparameters for technique Square Wave.</summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.#ctor">
      <summary>
            Create a new Square Wave method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration for this method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.PulseAmplitude">
      <summary>Amplitude of pulse. Values are half peak-to-peak.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.Frequency">
      <summary>FixedFrequency of the square wave signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MeasureIForwardReverse">
      <summary>
            Measurement Forward/Reverse Current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is 1/Frequency
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.TimeMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. time.
            </summary>
    </member>
    <member name="F:PalmSens.TimeMethod.MUX_DELAY">
      <summary>
            Delay before switching to the next multiplexer channel.
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.#ctor(System.Int32)">
      <summary>
            Create a new vs. time method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.TimeMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Potential">
      <summary>Potential during measurement <c>(AmperometricDetection)</c> or applied before pulse is given <c>PulsedAmpDetection</c>. The applicable range of the potential is -2 V to +2 V.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.BeginPotential">
      <summary>
            Begin potential (also applied during equilibration)
            Same value as property <code>Potential</code></summary>
      <value>
      </value>
    </member>
    <member name="P:PalmSens.TimeMethod.IntervalTime">
      <summary>Time between two measurements.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.RunTime">
      <summary>Total time of measurement.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.AnalyteName">
      <summary>The name of the measured analyte.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.Standard">
      <summary>The concentrations of the analyte, used for analysis.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Signal">
      <summary>
        <list type="bullet">
          <item>
            <description>1 = DC_Current</description>
          </item>
          <item>
            <description>2 = Peak</description>
          </item>
        </list>
            If dc-current is specified, stationary dc-levels are searched. Specify 'Peak' when the current
            versus time plots will show peaks.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelWidth">
      <summary>
            Minimum level width (in seconds)
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelHeight">
      <summary>
            Minimum level height (in uA), compared to previous level.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method.
            </summary>
      <returns>error string or null if there are no errors</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SetAlternatingMux(PalmSens.EncodedMethodV1@,System.Single@)">
      <summary>
            Sets the alternating mux settings.
            </summary>
      <param name="m">The m.</param>
      <param name="tmeas">The tmeas.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Equals(System.Object)">
      <summary>
            Check if this method is equal to another
            </summary>
      <param name="o">method to compare to</param>
      <returns>true if objects are equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Called to handle receiving a measurement.
            </summary>
      <param name="c">Comm connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.TimeMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.TimeMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.enumSignal">
      <summary>
            Signal types
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.DC_Current">
      <summary>
            DC Current
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.Peak">
      <summary>
            Peaks
            </summary>
    </member>
    <member name="T:PalmSens.enumReaction">
      <summary>
            Reaction types
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Reduction">
      <summary>
            Reduction
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Oxidation">
      <summary>
            Oxidation
            </summary>
    </member>
    <member name="T:PalmSens.Units.Unit">
      <summary>
            Describes unit for curve data
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized_string.</param>
    </member>
    <member name="F:PalmSens.Units.Unit.DefaultPrefix">
      <summary>
            Default prefix.
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Symbol">
      <summary>
            Symbol for this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Quantity">
      <summary>
            Quantity
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Abbreviation">
      <summary>
            Abbreviation
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.FormatString">
      <summary>
            Format string to use for values of this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.IsLogarithmic">
      <summary>
            The Unit is logarithmic
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>formatted string containing f</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(PalmSens.Units.Prefix,System.Double)">
      <summary>
            Format value in this unit for specified prefix
            </summary>
      <param name="pf">prefix to use</param>
      <param name="f">value to format</param>
      <returns>formatted string</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string
            </summary>
      <param name="pf">prefix to use</param>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToLongString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string including unit type (as displayed with plot axes)
            </summary>
      <param name="pf">prefix to use</param>
    </member>
    <member name="P:PalmSens.Units.Unit.ZeroPrefix">
      <summary>
            Gets the default prefix with factor 1.
            </summary>
      <value>
            The zero or default prefix.
            </value>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.GetPrefix(System.Double)">
      <summary>
            Calculate prefix appropriate for specified value
            </summary>
      <param name="f">value</param>
      <returns>corresponding prefix (or default prefix if none could be found)</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Equals(System.Object)">
      <summary>
            Check if this object is equal to another
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ConvertValue(System.Single)">
      <summary>
            Converts an original value to the value for this Unit
            </summary>
      <param name="originalvalue">The original value.</param>
      <returns>A converted value</returns>
    </member>
    <member name="T:PalmSens.Units.SIPrefixUnit">
      <summary>
            Base unit for units that use SI prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new SI Prefixed Unit
            </summary>
      <param name="s">description</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized string.</param>
    </member>
    <member name="T:PalmSens.Units.AdjustedSIPrefixUnit">
      <summary>
            SI Unit for use with data points that are a factor 100000 smaller
            </summary>
    </member>
    <member name="M:PalmSens.Units.AdjustedSIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new (adjusted) SI prefixed unit
            </summary>
      <param name="s">symbol</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="T:PalmSens.Units.Time">
      <summary>
            Time (seconds, minutes, hours)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.#ctor">
      <summary>
            Create new time unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>
            formatted string containing f
            </returns>
    </member>
    <member name="T:PalmSens.Units.Volt">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.Volt.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Hertz">
      <summary>
            Frequency
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.Format(System.Double)">
      <summary>
            Formats the specified frequency.
            </summary>
      <param name="f">The f.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Units.VauxV">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.VauxV.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroAmpere">
      <summary>
            MicroAmpere
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroAmpere.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Log10Current">
      <summary>
            Log10 of the given current in uA
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Current.#ctor(PalmSens.Units.Unit,System.Single)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="originalUnit">The original Unit to Log10().</param>
      <param name="minimumCurrentRange">The value Method.Ranging.MinimumCurrentRange.factor.</param>
    </member>
    <member name="M:PalmSens.Units.Log10Current.ConvertValue(System.Single)">
      <summary>
            Converts Current to Log10(Current), using MinimumCurrentRangeFactor
            </summary>
      <param name="originalvalue">The current.</param>
      <returns>
            Math.Log10(Current)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Log10Unit">
      <summary>
            Natural log of the given unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="s">description, (V for Volt)</param>
      <param name="q">quantity, (Potential for Volt)</param>
      <param name="a">abbreviation, (E for Volt)</param>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.ConvertValue(System.Double)">
      <summary>
            Converts value back to not Log value
            </summary>
      <param name="originalvalue">The value.</param>
      <returns>
            Math.Pow(10, originalvalue)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Ampere">
      <summary>
            Ampere
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ampere.#ctor">
      <summary>
            Create new Ampere
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroCoulomb">
      <summary>
            Coulomb
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroCoulomb.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradReal">
      <summary>
            Coulomb Real
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradReal.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradImaginary">
      <summary>
            Coulomb Imaginary
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradImaginary.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.Temperature">
      <summary>
            Temperature
            </summary>
    </member>
    <member name="M:PalmSens.Units.Temperature.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZRe">
      <summary>
            Z'
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZRe.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZIm">
      <summary>
            Z''
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZIm.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.Z">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Z.#ctor">
      <summary>
            Create new unit for Impedance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Y">
      <summary>
            Y in Siemens
            </summary>
    </member>
    <member name="M:PalmSens.Units.Y.#ctor">
      <summary>
            Create new unit for Y in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YRe">
      <summary>
            Y'
            </summary>
    </member>
    <member name="M:PalmSens.Units.YRe.#ctor">
      <summary>
            Create new unit for Y' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YIm">
      <summary>
            Y''
            </summary>
    </member>
    <member name="M:PalmSens.Units.YIm.#ctor">
      <summary>
            Create new unit for Y'' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.Phase">
      <summary>
            Phase
            </summary>
    </member>
    <member name="M:PalmSens.Units.Phase.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Farad">
      <summary>
            Cs
            </summary>
    </member>
    <member name="M:PalmSens.Units.Farad.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Ohm">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ohm.#ctor">
      <summary>
            Create new unit for Resistance 
            </summary>
    </member>
    <member name="T:PalmSens.Units.Index">
      <summary>
            Use the index for X axis
            </summary>
    </member>
    <member name="T:PalmSens.Units.FixedUnit">
      <summary>
            Unit without prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.FixedUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new fixed unit
            </summary>
      <param name="s">symbol (symbol V for potential for example)</param>
      <param name="q">quantity (potential for example)</param>
      <param name="a">abbreviation (E for potential for example)</param>
    </member>
    <member name="T:PalmSens.Units.Prefix">
      <summary>
            Prefix for a unit (i.e. kilo, nano, etc)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.#ctor(System.Double,System.String)">
      <summary>
            Create new prefix
            </summary>
      <param name="factor">factor for this prefix</param>
      <param name="prefix">name of prefix</param>
    </member>
    <member name="F:PalmSens.Units.Prefix.Factor">
      <summary>
            Gain for this prefix
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string description of this prefix</returns>
    </member>
    <member name="T:MicroLibrary.MicroStopwatch">
      <summary>
            MicroStopwatch class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimer">
      <summary>
            MicroTimer class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimerEventArgs">
      <summary>
            MicroTimer Event Argument class
            </summary>
    </member>
  </members>
</doc><?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core</name>
  </assembly>
  <members>
    <member name="T:PalmSens.EnumExtraValue">
      <summary>
            All available extra value types
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.None">
      <summary>
            No auxiliary channel
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Current">
      <summary