<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PalmSens.Core</name>
  </assembly>
  <members>
    <member name="T:PalmSens.EnumExtraValue">
      <summary>
            All available extra value types
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.None">
      <summary>
            No auxiliary channel
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Current">
      <summary>
            Current
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Potential">
      <summary>
            Potential
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.WE2">
      <summary>
            Second working electrode on PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.AuxInput">
      <summary>
            MiniDIN pin
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.Reverse">
      <summary>
            Reverse Current as used by SquareWave
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.PolyStatWE">
      <summary>
            Additional WE used with PolyPotentiostat
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.DCcurrent">
      <summary>
            Record DC current with AC voltammetry
            </summary>
    </member>
    <member name="F:PalmSens.EnumExtraValue.CEPotential">
      <summary>
            The CE potential (PalmSens4 only)
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.BaselineCorrection.GetMovingAverageBaselineCorrected(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Perfroms the moving average baseline correction.
            </summary>
      <param name="curve">The curve.</param>
      <param name="nWindowSize">Size of the window.</param>
      <param name="maxNSweeps">The maximum amount of sweeps.</param>
      <param name="baseline">Show the baseline correction instead of the corrected baseline</param>
      <returns>
      </returns>
      <example>TODO: add baseline curve directly after changing the windowsize or the amount of sweeps, and before pressing the do baseline correction button</example>
    </member>
    <member name="T:PalmSens.Analysis.PeakList">
      <summary>
            Describes a list of peaks
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.PeakWithinWindow(PalmSens.Analysis.Peak,PalmSens.ScanMethod,System.Int32)">
      <summary>
            Check if the peak is within the analytes search window.
            </summary>
      <param name="p">The peak.</param>
      <param name="m">The method.</param>
      <param name="iAnalyte">The index of the analyte.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Analysis.PeakList.enumAnalytePeakType">
      <summary>
            Used to determine if a peak is auto found, is based on a fixed left and right or is manually selected
            This is used to distinguish peaks belonging to different analytes in Analytical mode
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.Analysis.PeakList.nPeaks">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakWidth">
      <summary>
            Minimum width of peak
            </summary>
    </member>
    <member name="F:PalmSens.Analysis.PeakList.MinPeakHeight">
      <summary>
            Minimum height of a peak
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,PalmSens.Data.EnumDirection,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="peakdir">direction in which to seek for peaks</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Create a new peaklist, looking for peaks in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="MinPeakWidth">minimum width before considering something a peak (in Axis.Unit)</param>
      <param name="MinPeakHeight">minimum height before considering something a peak (in Axis.Unit)</param>
      <param name="Start">a starting point on the x axis</param>
      <param name="End">an ending point on the x axis</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.InitAnalytePeaks">
      <summary>
            Makes sure there are always 4 peaks in the list enables use of indexing for Analytical stuff
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new empty peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.SortPeaksByXValue">
      <summary>
            Orders the peaks by X value.
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.Remove(PalmSens.Analysis.Peak)">
      <summary>
            Removes the specified peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeakFree(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks from a baseline between two independent points with indicated direction
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak with 
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="xmax">The xmax.</param>
      <param name="ymax">The ymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(PalmSens.Analysis.Peak)">
      <summary>
            Adds a predefined peak
            </summary>
      <param name="p">The peak.</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddPeak(System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
      <summary>
            Adds a peak wi.
            </summary>
      <param name="xleft">The xleft.</param>
      <param name="yleft">The yleft.</param>
      <param name="iymax">The iymax.</param>
      <param name="xright">The xright.</param>
      <param name="yright">The yright.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.PeakList.AddManualPeak(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Find peaks from a baseline between two points on the curve.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.GetManualPeak">
      <summary>
            Help class for finding the max value between x1 and x2
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.Peak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.Peak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftX">
      <summary>Returns the X of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftY">
      <summary>Returns the Y of the left side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakValue">
      <summary>Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightX">
      <summary>Returns the X of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightY">
      <summary>Returns the Y of the right side of the peak baseline.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Width">
      <summary>Returns the half-height peak width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.LeftIndex">
      <summary>Returns the leftside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.Peak.RightIndex">
      <summary>Returns the rightside of the peaks baseline as indexnumber.</summary>
    </member>
    <member name="T:PalmSens.Analysis.AutoPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftX">
      <summary>
            Returns the X of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftY">
      <summary>
            Returns the Y of the left side of the peak baseline.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakX">
      <summary>
            Returns the X of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakY">
      <summary>
            Returns the Y of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakValue">
      <summary>
            Returns the value of the peak in unit of Curve. This is the value of the peak height relative to the baseline of the peak.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.LeftIndex">
      <summary>
            Returns the leftside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.PeakIndex">
      <summary>
            Returns the location of the peak as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightIndex">
      <summary>
            Returns the rightside of the peaks baseline as indexnumber.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="F:PalmSens.Analysis.AutoPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.AutoPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="M:PalmSens.Analysis.AutoPeak.#ctor(PalmSens.Plottables.Curve,System.Int32,System.Int32,System.Int32,PalmSens.Data.EnumDirection)">
      <summary>
            Creates a new Peak class with automatically detected peaks.
            </summary>
    </member>
    <member name="T:PalmSens.Analysis.ManualPeak">
      <summary>Contains the peak data of one peak in a curve.</summary>
      <remarks>The peak class does not have a public constructor. Instances can only 
             be obtained by enumerating the peaks on a Curve.
            </remarks>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="F:PalmSens.Analysis.ManualPeak.Direction">
      <summary>
            Direction of peaks in the curve.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.ManualPeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peak">The peak index.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="HasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="M:PalmSens.Analysis.ManualPeak.#ctor(PalmSens.Plottables.Curve,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Creates a new Peak class.
            </summary>
      <param name="curve">The curve</param>
      <param name="leftx">The leftx.</param>
      <param name="lefty">The lefty.</param>
      <param name="peakx">The peakx.</param>
      <param name="peaky">The peaky.</param>
      <param name="rightx">The rightx.</param>
      <param name="righty">The righty.</param>
      <param name="hasArea">if set to <c>true</c> [has area].</param>
    </member>
    <member name="T:PalmSens.Analysis.NonLinearBaseLinePeak">
      <summary>
            Peak with a curve as baseline
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Curve">
      <summary>
            Gets the Curve for this peak
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.AnalyteName">
      <summary>Gets or sets the corresponding analyte name. </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftX">
      <summary>Returns the X of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftY">
      <summary>Returns the Y of the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakX">
      <summary>Returns the X of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakY">
      <summary>Returns the Y of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakValue">
      <summary>Returns the value of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.LeftIndex">
      <summary>Returns the leftside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.PeakIndex">
      <summary>Returns the location of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightIndex">
      <summary>Returns the rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightX">
      <summary>Returns the X of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.RightY">
      <summary>Returns the Y of the Rightside of the peak as indexnumber.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Area">
      <summary>Returns the area of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Width">
      <summary>Returns the width of the peak.</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.OffsetY">
      <summary>Offset of Y</summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeSum">
      <summary>
            Returns the sum of the absolute values for both 
            the positive and negative maximum derivative.
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativePos">
      <summary>
            Returns the maximum derivative of the positive slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.MaximumOfDerivativeNeg">
      <summary>
            Returns the maximum derivative of the negative slope of the peak 
            </summary>
    </member>
    <member name="P:PalmSens.Analysis.NonLinearBaseLinePeak.Label">
      <summary>
            Nicely formatted label with this peak's value
            </summary>
      <value>
      </value>
    </member>
    <member name="T:PalmSens.AuxInput.AuxiliaryInputType">
      <summary>
            Describes a possible auxiliary input type
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.#ctor(System.Boolean,System.String,System.String,System.Single,System.Single,PalmSens.Units.Unit)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AuxInput.AuxiliaryInputType" /> class.
            </summary>
      <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="offset">The offset.</param>
      <param name="slope">The slope.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="F:PalmSens.AuxInput.AuxiliaryInputType.IsReadOnly">
      <summary>
            The is read only
            </summary>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Unit">
      <summary>
            Gets or sets the unit.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Slope">
      <summary>
            Gets or sets the slope.
            </summary>
      <value>
            The slope.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
      <value>
            The offset.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.AuxInput.AuxiliaryInputType.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>
            The description.
            </value>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ConvertAuxValue(System.Single)">
      <summary>
            Converts the original aux value to the specified input type.
            </summary>
      <param name="analogInput">The analog input.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Serialize">
      <summary>
            Serializes the specified type.
            </summary>
      <returns>Readonly [bool]|Name [string]|Description [string]|Offset [float]|Slope [bool]|Symbol [string], Quantity [string], Abbreviation [string]</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ToString(System.Double)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="value">The value.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.ParseString(System.String)">
      <summary>
            Parses the string.
            </summary>
      <param name="serializedAuxiliaryInputType">Type of the serialized auxiliary input.</param>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Deserialize(System.String)">
      <summary>
            Deserializes the specified serialized auxiliary input type.
            </summary>
      <param name="serializedAuxiliaryInputType">The serialized auxiliary input string.</param>
      <returns>AuxiliaryInputType</returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.AuxInput.AuxiliaryInputType.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.DataManipulation.SmoothData(System.Int32,System.Double[]@)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <param name="yvalues">The yvalues.</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            or
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="T:PalmSens.Calculations.MathFunctions">
      <summary>
            Contains a number of mathematical functions used for 
            Blank subtraction and Impedemetric measurements
            
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(PalmSens.Data.DataArray,PalmSens.Data.DataArray,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Both arrays should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractDataArrays(System.Double[],System.Double[],PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new array by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="dataA">The target array.</param>
      <param name="dataB">The array to use for add to dataA or subtract from dataA.</param>
      <param name="Operator">Add or subtract operator.</param>
      <param name="iAStart">The index to start in dataA start.</param>
      <param name="iBStart">The index to start in dataB.</param>
      <param name="count">The number of points to iterate through.</param>
      <returns>
            Modified array, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            The curve with the minimum number of points determines the returned curve length.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AddSubtractCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve,PalmSens.Calculations.MathFunctions.enumOperator,System.Int32,System.Int32)">
      <summary>
            Creates a new curve by means of add, subtract or multiplication.
            Both curves should at least have 3 points, otherwise Null is returned.
            </summary>
      <param name="curveA">The target curve to manipulate.</param>
      <param name="curveB">The curve to use for manipulation in case of add or subtract.</param>
      <param name="Operator">The operator.</param>
      <param name="iStart">The start index.</param>
      <param name="iEnd">The end index.</param>
      <returns>
            Modified curve, or Null in case of problems
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.MultiplyDataArray(System.Double[],System.Single)">
      <summary>
            Creates a new array by means of multiplication with a factor
            </summary>
      <param name="array">The target array to manipulate.</param>
      <param name="factor">The factor for multiplication.</param>
      <returns>
            Modified array
            </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.AppendCurves(PalmSens.Plottables.Curve,PalmSens.Plottables.Curve)">
      <summary>
            Appends all equal DataArrays of two curves.
            Resulting nPoints = A.nPoints+B.nPoints
            </summary>
      <param name="curveA">The curve A.</param>
      <param name="curveB">The curve B.</param>
      <returns>Curve A and B appended.</returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DFT(PalmSens.SineCurve,System.Double@,System.Double@)">
      <summary>
            DFT over a sine curve
            </summary>
      <param name="sine">The sine curve.</param>
      <param name="re">The real component</param>
      <param name="im">The imaginary component</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.GetCurrAC(PalmSens.SineCurve,System.Double@)">
      <summary>
            Gets the magnitude RMS of the sine.
            </summary>
      <param name="sine">The sine</param>
      <param name="iAC">The AC RMS value</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.DivComplex(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Divides the complex A and B
            </summary>
      <param name="a">Real of division</param>
      <param name="b">Imaginary of division</param>
      <param name="c">Real of fraction</param>
      <param name="d">Imaginary of fraction</param>
      <param name="re">The resulting real</param>
      <param name="im">The resulting imaginary</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.FindMeanY(PalmSens.Plottables.Curve)">
      <summary>
            Finds the mean Y.
            </summary>
      <param name="c">The curve.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.CalculateDerivative(PalmSens.Data.EnumDirection,System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the derivatives. Note the derivative is calculated over the index an x value is not specified.
            </summary>
      <param name="dir">The direction.</param>
      <param name="y">The y values.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="averagePoints">The average_points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPassFreq0(System.Double,System.Double)">
      <summary>
            Determines the value of freq0 based on frequency and phaseshift
            Used during calibration
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCLowPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>  consult: http://www.johnhearfield.com/RC/RC2.htm
            Determine the phaseshift and Zfactor based on frequency and freq0
            Where frequency = freq0 * Math.Atan(phaseshift / 360.0 * 2.0 * Math.PI) ; 
            freq0 is obtained by means of calibrating
            </summary>
      <param name="freq0">The freq0.</param>
      <param name="frequency">The frequency.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The Zfactor.</param>
    </member>
    <member name="M:PalmSens.Calculations.MathFunctions.RCHighPass(System.Double,System.Double,System.Double@,System.Double@)">
      <summary> consult: http://www.johnhearfield.com/RC/RC2.htm 
            Determine the phaseshift and Zfactor based on frequency and freq0
            for AC coupled measurements
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="freq0">The freq0.</param>
      <param name="phaseshift">The phaseshift.</param>
      <param name="Zfactor">The zfactor.</param>
    </member>
    <member name="F:PalmSens.Calculations.PolyCurve.CurveGenerated">
      <summary>
            The curve generated by GetPolyCurve
            </summary>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single)">
      <summary>
            Gets the poly curve based on the stepsize of the feeded curve
            The generated curve is also available as CurveGenerated
            </summary>
      <param name="x1">The smalles X.</param>
      <param name="x2">The largest X.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.GetPolyCurve(System.Single,System.Single,System.Single)">
      <summary>
            Gets the poly curve with custom stepsize
            </summary>
      <param name="x1">The left X.</param>
      <param name="x2">The right X.</param>
      <param name="nPoints">The n points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
    </member>
    <member name="M:PalmSens.Calculations.PolyCurve.AddPoint(System.Single,System.Single,System.Int32)">
      <summary>
            Adds a new point
            </summary>
      <param name="newX">The new X.</param>
      <param name="newY">The new Y.</param>
      <param name="iOrgCurve">The indiex of this point in the original curve.</param>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetClosestPoint">
      <summary>
            Gets the get closest point.
            </summary>
    </member>
    <member name="P:PalmSens.Calculations.PolyCurve.GetFarestPoint">
      <summary>
            Gets the get farest point.
            </summary>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationSteps">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetDescription(System.Int32)">
      <summary>
            Gets the description.
            </summary>
      <param name="calibrationType">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.NSteps">
      <summary>
            Gets the number of calibration steps.
            </summary>
      <value>
            The number of calibration steps.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Contains(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,System.String}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Add(System.Int32,System.String)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.Remove(System.Int32)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.TryGetValue(System.Int32,System.String@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.String" /> with the specified key.
            </summary>
      <value>
            The <see cref="T:System.String" />.
            </value>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.CalibrationSteps.CurrentStep">
      <summary>
            Gets or sets the current step.
            If the step does not exists the nearest available steps is chosen
            </summary>
      <value>
            The current step.
            </value>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.SetNextStep">
      <summary>
            Sets the next step.
            </summary>
      <returns>
        <c>false</c> if next step does not exists, otherwise <c>true</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.CurrentStepToString">
      <summary>
            Currents the step to string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationSteps.GetMethodFileCurrentStep">
      <summary>
            Gets the method file current step.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibration">
      <summary>
            Contains all values and functionalities for EIS calibrations
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ReadValuesFromEEPROMAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all values to EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.WriteAllValuesToEEPROMAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all values to EEPROM.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>All values as formatted string</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <returns>EISCalibration with default values</returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibration.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates the values.
            </summary>
      <param name="clientConnection">The ClientConnection.</param>
      <returns>
        <c>true</c> if values are validated OK, otherwise <c>false</c></returns>
    </member>
    <member name="M:PalmSens.Calibration.CalibrationStepsPS3.GetMethodFile(System.Int32)">
      <summary>
            Gets the method file.
            </summary>
      <param name="calibrationStep">Type of the calibration.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS3">
      <summary>
            This serializable class contains all calibration values used for impedance measurements
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.#ctor(PalmSens.Devices.EISSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Calibration.EISCalibrationPS3" /> class.
            The settings depend on firmware/hardware version of the instrument
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.EISSettingsPS3">
      <summary>
            Gets the EIS settings for PS3.
            </summary>
      <value>
            The EIS settings for PS3
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterAcFreq0">
      <summary>
            Calibration file contents
            RC filter values of Freq0 calculated between frequency and phaseshift of 30 and 5 degrees
            Index corresponds to FilterAc
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.HSTABFreq0">
      <summary>
            RC filter time of control amplifier (AD8620: GBWP = 25 MHz) used at HSTAB
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:PalmSens.Calibration.EISCalibrationPS3._magnitudeAcCoupledFreq0" -->
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.acCoupledFreq0">
      <summary>
            Only used when ac-coupled is applied
            </summary>
    </member>
    <member name="P:PalmSens.Calibration.EISCalibrationPS3.AcCoupledIsEnabled">
      <summary>
            Gets a value indicating whether ac coupled measurements can be used
            This relies on the solder bridge JP IMP being soldered or not
            </summary>
      <value>
        <c>true</c> if [ac coupled is enabled]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAGainFreq0">
      <summary>
            Used for corrections of PGA
            Corresponds to byte PGAgain
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.FilterCFFreq0">
      <summary>
            Filter settings for each frequency
            Index corresponds to first 4 bits of Filter byte (so AND with 0xF)
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionDcCoupled">
      <summary>
            Input offset calibration procedure for value of newPGAoffset:
            connect WE,CE,RE to testsensor at side panel
            for dc-offset value:           
            set TRIMDAC1 to 32768, set cell on at E = 0.000 V using 1 mA CR.
            use 1 kHz time scan at GAIN 1 and average YmeanReal of the measured sine wave a couple of times. Its value must be 32768 +/- 300
            repeat measurment at GAIN3 and measure YmeanGain3
            The value of newPGAoffset = (YmeanGAIN3 - 32768)/100. On a PS3 a value of PGAoffsetCorrectionDcCoupled = 117 was found.
            </summary>
    </member>
    <member name="F:PalmSens.Calibration.EISCalibrationPS3.PGAoffsetCorrectionAcCoupled">
      <summary>
             See also description of PGAoffsetCorrectionDcCoupled
             
             or ac-coupled value:
             set TRIMDAC1 to 200 ( below this value the DAC is not linear!
            , set cell on at E = 0.000 V using 1 mA CR.
             use 1 kHz time scan at GAIN 1 and average YmeanReal (so YmeanGain1) of the measured sine wave a couple of times. Its value must be (32768-200) +/- 200
             repeat measurment at GAIN3 and measure YmeanGain3
             The value of newPGAoffset = 200 - (YmeanGAIN3 - YmeanGAIN1)/100. On a PS3 a value of PGAoffsetCorrectionAcCoupled = 51 was found. Negative values are NOT valid!
             </summary>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetDefaultValues(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the default values.
            </summary>
      <param name="capab">The capab.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ValidateAllValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Validates all values.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ParseResult(PalmSens.Plottables.EISData,System.Int32,System.Double@,System.String@)">
      <summary>
            Parses the result of an EIS calibration step to a calibration value.
            </summary>
      <param name="freqScan">The eis data.</param>
      <param name="calibrationStep">The calibration step.</param>
      <param name="result">The result.</param>
      <param name="message">The message.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.CorrectMeasuredValue(PalmSens.Techniques.ImpedimetricIterationMethod,System.Int32,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Corrects the measured value using the calibration values.
            </summary>
      <param name="method">The ImpedimetricIterationMethod.</param>
      <param name="phase">The phase.</param>
      <param name="Z">The impedance, Z.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ReadValuesFromEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ReadValuesFromEEPROMAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the values from EEPROM.
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.WriteAllValuesToEEPROM(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all calibration values to EEPROM.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.WriteAllValuesToEEPROMAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes all calibration values to EEPROM.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.ConvertValuesForEEPROM(System.Double[],System.Int32[])">
      <summary>
            Converts the values for EEPROM.
            </summary>
      <param name="values">The values.</param>
      <param name="magnitudes">The magnitude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Calibration.EISCalibrationPS3.GetValuesAsString">
      <summary>
            Gets the values as string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Calibration.CalibrationStepsPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.CalibrationSteps" />
    </member>
    <member name="T:PalmSens.Calibration.EISCalibrationPS4">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Calibration.EISCalibration" />
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetPalmSensBiPotCalibration(PalmSens.Comm.ClientConnection)">
      <summary>
            Get values from EEPROM if PalmSens3, else from local settings.
            </summary>
      <param name="clientConnection">The client connection.</param>
      <returns>PalmSensBiPotCalibration containing calibration values</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetPalmSensBiPotCalibrationAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Get values from EEPROM if PalmSens3, else from local settings.
            </summary>
      <param name="clientConnection">The client connection.</param>
      <returns>PalmSensBiPotCalibration containing calibration values</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the calibration values from EEPROM if PS3, else from local settings
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValuesAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the calibration values from EEPROM if PS3, else from local settings
            </summary>
      <param name="conn">The conn.</param>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.ReadValuesFromSettings">
      <summary>
            Reads the calibration values from settings. For PalmSens2
            </summary>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotCurrent(System.Double)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct reading
            AD offset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected current</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.GetCorrectedPSBiPotPotential(System.Single)">
      <summary>
            Uses Capabilities.PalmSensBiPotCalibration values to correct the potential set
            DACOffset is subtracted
            </summary>
      <param name="value">The value.</param>
      <returns>Corrected potential to set</returns>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.WriteValues(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes the values to EEPROM if PalmSens3, else to local settings.
            </summary>
      <param name="conn">The clientconnection.</param>
    </member>
    <member name="M:PalmSens.Calibration.PalmSensBiPotCalibration.WriteValuesAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Writes the values to EEPROM if PalmSens3, else to local settings.
            </summary>
      <param name="conn">The clientconnection.</param>
    </member>
    <member name="T:PalmSens.Comm.Buffer">
      <summary>
            Generic Buffer object
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Pop(System.Int32,System.Int32)">
      <summary>
            Retrieve bytes from the buffer if present.
            </summary>
      <param name="n">Number of bytes to retrieve</param>
      <param name="startIndex">The index to start the string from (all data up to "n" is still removed).</param>
      <returns>
            String with contents, "" if not enough bytes available.
            </returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.PopAsync(System.Int32,System.Int32)">
      <summary>
            Retrieve bytes from the buffer if present.
            </summary>
      <param name="n">Number of bytes to retrieve</param>
      <param name="startIndex">The index to start the string from (all data up to "n" is still removed).</param>
      <returns>
            String with contents, "" if not enough bytes available.
            </returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.Peek">
      <summary>
            Peek at the first character in the buffer
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.PeekAsync">
      <summary>
            Peek at the first character in the buffer
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:PalmSens.Comm.Buffer.IndexOf(System.Char,System.Int32)">
      <summary>
            Find character in array
            </summary>
      <returns>A character casted to an int or -1 if the buffer is empty.
            A <see cref="T:System.Int32" /></returns>
    </member>
    <member name="T:PalmSens.Comm.ConnBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ConnBuffer.#ctor(PalmSens.Devices.Device)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.OfflineBuffer">
      <summary>
            Buffer for the Client Connection.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.OfflineBuffer.#ctor(System.String)">
      <summary>
            Create a new buffer.
            </summary>
      <param name="d">The device.</param>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection">
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
      <summary>
            Implementation of the PalmSens and EmStat communications protocols
            </summary>
      <summary>
            Implementation of the PalmSens protocol
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.BiPotCurrentRange">
      <summary>
            The active bipot current range
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.IsBipotOn">
      <summary>
            Is <c>true</c> when the Bipot is set on. Used in ParseIdlePacket 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotPotential(System.Single)">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotPotentialAsync(System.Single)">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOff">
      <summary>
            Disable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOffAsync">
      <summary>
            Disable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOnAndCR(PalmSens.CurrentRange)">
      <summary>
            Set the current range of the second working electrode. 
            This will enable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetBiPotOnAndCRAsync(PalmSens.CurrentRange)">
      <summary>
            Set the current range of the second working electrode. 
            This will enable the PalmSens BiPotentiostat module
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of CR
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrentAsync">
      <summary>
            Current of the second working electrode in units of CR
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrentStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadBiPotCurrentStatusAsync">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentStatus(System.Double)">
      <summary>
            Returns the current status for a given current.
            </summary>
      <param name="current">The current in its current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPSBiPotMode(PalmSens.Method.EnumPalmSensBipotMode)">
      <summary>
            Sets the PalmSens3 bipot mode.
            0 = WE at independent potential
            1 = WE at offset from WE1
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPSBiPotModeAsync(PalmSens.Method.EnumPalmSensBipotMode)">
      <summary>
            Sets the PalmSens3 bipot mode.
            0 = WE at independent potential
            1 = WE at offset from WE1
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.CommError">
      <summary>
            Occurs when there's an error in communication.
            If there are no subscribers for this event an Exception will be thrown in case of a comm error.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.Device">
      <summary>
            The Device for this connection (PalmSens or EmStat)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.ConnectedDeviceCapabilities">
      <summary>
            The capab of the most recent connected device.
            <c>Null</c> if no device connected.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.Capabilities">
      <summary>
            Describes the capab of the currently 
            connected device. May be null, if no capab 
            are known!
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.FirmwareVersion">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ClientConnection.NBipotBoardsInMeasurement">
      <summary>
            This value is used for synchronizing mixed measurements (like multistepping) on a nWE system
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ClientConnection.MessageEventHandler">
      <summary>
            Delegate that is used for status messages during measurements.
            These messages are for example used by the status bar and can include messages like
            "recording level #" for Multistep techniques
            "limit reached"
            "..."
            </summary>
      <param name="sender">The sender.</param>
      <param name="message">The message.</param>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveMessage">
      <summary>
            Occurs when [receive message].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DebugInformation">
      <summary>
            Raised when debug information is received from the PalmSens.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.ClientConnection.DeviceReset">
      <summary>
            Occurs when the connected device was reset for unknown reasons
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor">
      <summary>
            Do not use this constructor it is only intented for use by Async ClientConnections
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(System.Boolean,PalmSens.Devices.Device,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="empty">if set to <c>true</c> Capabilities will not be read from device.</param>
      <param name="device">The device.</param>
      <param name="versionString">The version string received from the device.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ClientConnectionAsync(System.Boolean,PalmSens.Devices.Device,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="empty">if set to <c>true</c> Capabilities will not be read from device.</param>
      <param name="device">The device.</param>
      <param name="versionString">The version string received from the device.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.InitClientConnectionAsync(System.Boolean,PalmSens.Devices.Device,System.String)">
      <summary>
            Initializes the client connection asynchronous.
            </summary>
      <param name="empty">if set to <c>true</c> [empty].</param>
      <param name="device">The device.</param>
      <param name="versionString">The version string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.#ctor(PalmSens.Devices.Device,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="device">The device to connect to</param>
      <param name="versionString">The version string received from the device.</param>
      <param name="forceNoEEPROM">if set to <c>true</c> [force no eeprom].</param>
      <param name="timeOutInMilliSeconds">The time out in milliseconds.</param>
      <exception cref="T:PalmSens.Comm.CommException">versionString error; device does not respond on packet 't'</exception>
      <exception cref="T:PalmSens.Comm.CommException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ClientConnnectionAsync(PalmSens.Devices.Device,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.ClientConnection" /> class.
            </summary>
      <param name="device">The device to connect to</param>
      <param name="versionString">The version string received from the device.</param>
      <param name="forceNoEEPROM">if set to <c>true</c> [force no eeprom].</param>
      <param name="timeOutInMilliSeconds">The time out in milliseconds.</param>
      <exception cref="T:PalmSens.Comm.CommException">versionString error; device does not respond on packet 't'</exception>
      <exception cref="T:PalmSens.Comm.CommException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">Catch this exception in the caller, abort (or retry) connection attempt and update UI accordingly</exception>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadFromDevice(System.Char,System.Int32)">
      <summary>
            Reads from a PalmSens BV device.
            First send 'c', wait for 'c' send 'CMD' return received package with sepcified length 
            </summary>
      <param name="cmd">The CMD.</param>
      <param name="length">The length.</param>
      <returns>The answer from the device</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadFromDeviceAsync(System.Char,System.Int32)">
      <summary>
            Reads from a PalmSens BV device.
            First send 'c', wait for 'c' send 'CMD' return received package with sepcified length 
            </summary>
      <param name="cmd">The CMD.</param>
      <param name="length">The length.</param>
      <returns>The answer from the device</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ProcessData">
      <summary>
            Process idle packets
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ProcessDataAsync">
      <summary>
            Process idle packets
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetDeviceSerial">
      <summary>
            Gets the device serial.
            </summary>
      <returns>Empty DeviceSerial if not succesful</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetDeviceSerialAsync">
      <summary>
            Gets the device serial.
            </summary>
      <returns>Empty DeviceSerial if not succesful</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCellTypeAsync">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCellTypeAsync(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastCurrentSet">
      <summary>
            The last current (in its current range) that was set using SetCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.LastPotentialSet">
      <summary>
            The last potential that was set using SetPotential
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCommMode(PalmSens.Comm.ClientConnection.CommMode)">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCommModeAsync(PalmSens.Comm.ClientConnection.CommMode)">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnterDownloadModeAsync">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadPotential">
      <summary>
            Potential in Volts.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadPotentialAsync">
      <summary>
            Potential in Volts.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialAsync(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.CalibrateAsync">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Calibrate">
      <summary>
            Calibrate. Run with sensorcable disconnected!
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadCurrent">
      <summary>
            Read the current in the active current range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadCurrentAsync">
      <summary>
            Read the current in the active current range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetCurrentAsync(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V, resolution is 1 mV
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetExternalOutputAsync(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V, resolution is 1 mV
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure">
      <overloads>
            Run a measurement with a specific method.
            </overloads>
      <summary>
            Run measurement with method currently loaded in PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.MeasureAsync">
      <overloads>
            Run a measurement with a specific method.
            </overloads>
      <summary>
            Run measurement with method currently loaded in PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.MeasureAsync(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Measure(PalmSens.Method,System.Int32)">
      <overloads>
            Measurement the specified method at the specified mux channel (ranging from 0 to 7)
            </overloads>
      <summary>
            Run a measurement with the current parameters as set in the Method.
            </summary>
      <remarks>
            During a measurement, several events may be raised, depending on the method 
            that is currently selected. 
            
            If the communication channel allows it, the data points 
            being measured will be updated in real-time. In that case, the CurrentCurve 
            and/or CurrentMuxCurves properties will be updated whenever new data is received.
            
            At the end of the measurement, a ReceiveCurve() event will be raised.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.MeasureAsync(PalmSens.Method,System.Int32)">
      <overloads>
            Measurement the specified method at the specified mux channel (ranging from 0 to 7)
            </overloads>
      <summary>
            Run a measurement with the current parameters as set in the Method.
            </summary>
      <remarks>
            During a measurement, several events may be raised, depending on the method 
            that is currently selected. 
            
            If the communication channel allows it, the data points 
            being measured will be updated in real-time. In that case, the CurrentCurve 
            and/or CurrentMuxCurves properties will be updated whenever new data is received.
            
            At the end of the measurement, a ReceiveCurve() event will be raised.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentMethod">
      <summary>
            Receive current method loaded.
            </summary>
      <returns>hex representation of method</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetCurrentMethodAsync">
      <summary>
            Receive current method loaded.
            </summary>
      <returns>hex representation of method</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetPowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetMuxChannelAsync(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadMuxInfo">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadMuxInfoAsync">
      <summary>
            Set the multiplexer channel starting at 0
            If 32 channel multiplexer is available by means of 2x16 channel and val &gt; 15, the DAC is set to full range to enable the second connected MUX16's
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.EnableStirrerAsync(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialOffset1VAsync(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendSine(System.UInt32[])">
      <summary>
            Sends a sine for impedimetric measurements
            For a PS3 device only
            </summary>
      <param name="Sine">The sine.</param>
      <returns>True if succeeded, false if failed</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendSineAsync(System.UInt32[])">
      <summary>
            Sends a sine for impedimetric measurements
            For a PS3 device only
            </summary>
      <param name="Sine">The sine.</param>
      <returns>True if succeeded, false if failed</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadDigitalLineD0Async">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAuxDigitalInAsync">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetDACOffset(System.Single)">
      <summary>
            Send potential offset used when setting the DAC 
            For EmStat and PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetDACOffsetAsync(System.Single)">
      <summary>
            Send potential offset used when setting the DAC 
            For EmStat and PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialReadOffset(System.Single)">
      <summary>
            Send potential read offset to EmStat or PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetPotentialReadOffsetAsync(System.Single)">
      <summary>
            Send potential read offset to EmStat or PS3
            </summary>
      <param name="offset">The offset in V.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAnalogInput">
      <summary>
            Reads the raw original auxilary analog input signal
            Use this value with <c>AuxInputSelected.ConvertAuxValue(float value)</c> to get the value for the selected aux input type.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadAnalogInputAsync">
      <summary>
            Reads the raw original auxilary analog input signal
            Use this value with <c>AuxInputSelected.ConvertAuxValue(float value)</c> to get the value for the selected aux input type.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SendModeCRAsync(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.WriteToPS3EEPROM(System.Int32,System.UInt16)">
      <summary>
            Writes to EEPROM of a PalmSens3.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.WriteToPS3EEPROMAsync(System.Int32,System.UInt16)">
      <summary>
            Writes to EEPROM of a PalmSens3.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadEmStatEEPROM(System.Int32)">
      <summary>
            Reads the EEPROM.
            </summary>
      <param name="address">The address.</param>
      <returns>4 bytes with EEPROM data</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadEmStatEEPROMAsync(System.Int32)">
      <summary>
            Reads the EEPROM.
            </summary>
      <param name="address">The address.</param>
      <returns>4 bytes with EEPROM data</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetESBiPotMode(PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode)">
      <summary>
            Sets the ES bipot mode.
            0 = none
            1 = WE at independent potential
            2 = WE at offset from WE1
            3 = Control mode (send pulses)
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetESBiPotModeAsync(PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode)">
      <summary>
            Sets the ES bipot mode.
            0 = none
            1 = WE at independent potential
            2 = WE at offset from WE1
            3 = Control mode (send pulses)
            </summary>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetESBipotMode">
      <summary>
            Gets the ES bipot mode.
            </summary>
      <returns>
            0 = WE2 at independent potential
            1 = WE2 at offset from WE1
            2 = Control bipots (for main board)
            3 = None
            </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.GetESBipotModeAsync">
      <summary>
            Gets the ES bipot mode.
            </summary>
      <returns>
            0 = WE2 at independent potential
            1 = WE2 at offset from WE1
            2 = Control bipots (for main board)
            3 = None
            </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.SetFilterBytePS3(System.Byte)">
      <summary>
            FOR PALMSENS3 ONLY: Sets filter settings.
            Settings byte is calculated in Method.GetTimeFilterbyte
            </summary>
      <param name="settings">The settings as calculated by Method.GetTimeFilterbyte.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.RemoteControl(System.Char,System.Int64,System.Int64)">
      <summary>
            Sends a remote control command
            (see Communications Protocol document)
            </summary>
      <param name="cmd">The CMD character</param>
      <param name="arg1">Argument 1</param>
      <param name="arg2">Argument 1</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.RemoteControlAsync(System.Char,System.Int64,System.Int64)">
      <summary>
            Sends a remote control command
            (see Communications Protocol document)
            </summary>
      <param name="cmd">The CMD character</param>
      <param name="arg1">Argument 1</param>
      <param name="arg2">Argument 1</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.IsHex(System.String)">
      <summary>
            Check whether a string is a valid hex string.
            </summary>
      <param name="hex">
            A <see cref="T:System.String" /></param>
      <returns>
            A <see cref="T:System.Boolean" /></returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.DecToHex(System.Int64,System.Int32)">
      <summary>
            Converts a decimal number to a Hex string
            </summary>
      <param name="v">
      </param>
      <param name="n">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.HexToDec(System.String)">
      <summary>
            Converts string with a hex value to an integer
            </summary>
      <param name="hex">string containing hex value</param>
      <exception cref="T:PalmSens.Comm.InvalidHexException" />
      <returns>the resulting integer</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FloatToUint32(System.Single)">
      <summary>
            Converts a float into a platform independant UInt32 representation readable by PalmSens devices.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Uint32ToFloat(System.UInt32)">
      <summary>
            Converts a platform independant UInt32 representation readable by PalmSens devices into a float.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.FindDeviceType(System.String)">
      <summary>
            Finds the type of the device.
            </summary>
      <param name="versionString">The version string.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Comm.ClientConnection.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadVersion">
      <summary>
            Reads the firmware version and refreshes FirmwareVersion.
            Used after updating firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.ReadVersionAsync">
      <summary>
            Reads the firmware version and refreshes FirmwareVersion.
            Used after updating firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnection.Supports10mA">
      <summary>
            Check for PalmSens1: return true if connected device supports 10 mA range
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.#ctor">
      <summary>
            Do not use this constructor it is only intented for use by Async ClientConnections
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetLicence">
      <summary>
            Gets the licence.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetLicenceAsync">
      <summary>
            Gets the licence.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetDeviceSerial">
      <summary>
            Gets the serial.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetDeviceSerialAsync">
      <summary>
            Gets the serial.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetSerial(PalmSens.Comm.DeviceSerialV2)">
      <summary>
            Sets the serial.
            </summary>
      <param name="serial">The serial code.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetSerialAsync(PalmSens.Comm.DeviceSerialV2)">
      <summary>
            Sets the serial.
            </summary>
      <param name="serial">The serial code.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEeprom(System.Byte,System.UInt16)">
      <summary>
            Writes to the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEepromAsync(System.Byte,System.UInt16)">
      <summary>
            Writes to the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEepromUint32(System.Byte,System.UInt32)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.WriteEepromUint32Async(System.Byte,System.UInt32)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEeprom(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEepromAsync(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEepromUint32(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadEepromUint32Async(System.Byte)">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReloadData">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReloadDataAsync">
      <summary>
            Reads from the specified address in the device eeprom.
            </summary>
      <param name="address">The address.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnterDownloadMode">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnterDownloadModeAsync">
      <summary>
            Enter the download mode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotential(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotentialAsync(System.Single)">
      <summary>
            Set the potential in Volts
            If the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCurrent(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCurrentAsync(System.Double)">
      <summary>
            Current in actual current range. If the PalmSens is not yet in Galvanostatic mode, it will be 
            switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetExternalOutput(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetExternalOutputAsync(System.Single)">
      <summary>
            Set external analog output on Auxiliary connector in V
            0.000 - Max ADVRef V
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetMuxChannel(System.Int32)">
      <summary>
            Set the multiplexer channel starting at 0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadMuxInfo">
      <summary>
            Tries to identify the mux type and 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadMuxInfoAsync">
      <summary>
            Tries to identify the mux type and 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnableStirrer(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.EnableStirrerAsync(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotentialOffset1V(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetPotentialOffset1VAsync(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetReadInterval(System.UInt32)">
      <summary>
            Sets the read interval.
            </summary>
      <param name="timeMS">The time in ms.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetReadIntervalAsync(System.UInt32)">
      <summary>
            Sets the read interval.
            </summary>
      <param name="timeMS">The time in ms.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadDigitalLineD0">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadDigitalLineD0Async">
      <summary>
            Read digital line D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadAuxDigitalIn">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.ReadAuxDigitalInAsync">
      <summary>
            Read aux port digital bits
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SendModeCRAsync(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetCellType">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.GetCellTypeAsync">
      <summary>
            Gets the cell type (internal test sensor or external).
            </summary>
      <returns>The cell type id.</returns>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCellType(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
    </member>
    <member name="M:PalmSens.Comm.ClientConnectionPS4.SetCellTypeAsync(System.UInt32)">
      <summary>
            Sets the cell type (internal test sensor or external).
            </summary>
      <param name="ct">The cell type id.</param>
    </member>
    <member name="T:PalmSens.Comm.enumDeviceType">
      <summary>
            List of devices that can be connected
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.Unknown">
      <summary>
            Unable to determine device type
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens">
      <summary>
            PalmSens1 or PalmSens2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat1">
      <summary>
            Emstat1
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2">
      <summary>
            Emstat2
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens3">
      <summary>
            PalmSens3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat2BP">
      <summary>
            EmStat2 BiPot (BiPot version of EmStat2)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3">
      <summary>
            EmStat3
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3P">
      <summary>
            EmStat3+
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.EmStat3BP">
      <summary>
            EmStat3 Bipot
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.PalmSens4">
      <summary>
            PalmSens4
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.SAMBAProgramPort">
      <summary>
            PalmSens4 firmware update port
            </summary>
    </member>
    <member name="F:PalmSens.Comm.enumDeviceType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="T:PalmSens.Comm.PowerStatus">
      <summary>
            Available power status modes
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Unknown">
      <summary>
            Older version of the firmware. No information available. Upgrade to at least version 3.3 of 
            the firmware to be able to view the power status.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Charging">
      <summary>
            PalmSens is busy recharging.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.LowBattery">
      <summary>
            Low battery (equivalent to LoBatt on the LCD)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.PowerStatus.Normal">
      <summary>
            Not charging, battery status ok.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Mode">
      <summary>
            Mode of measurement at PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Galvanostatic">
      <summary>
            Measurement against current. Not supported by the Emstat
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Mode.Potentiostatic">
      <summary>
            Measurement against potential
            </summary>
    </member>
    <member name="T:PalmSens.Comm.MuxType">
      <summary>
            Mode of measurement at PalmSens
            </summary>
    </member>
    <member name="F:PalmSens.Comm.MuxType.AuxAddress">
      <summary>
            Old style mux that uses the aux digital pins as a channel address.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.MuxType.Protocol">
      <summary>
            Mux that uses the PalmSens mux protocol.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidHexException">
      <summary>
            Exception indicating an invalid hex integer was received.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.InvalidChecksumException">
      <summary>
            Exception indicating an invalid checksum
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventArgs">
      <summary>
            Debug information from PalmSens
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommException">
      <summary>
            Error in PalmSens Communication
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoMuxChannelsEnabled">
      <summary>
            Raised when no mux channels where enabled in a multiplexer measurement.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.UnknownDataException">
      <summary>
            Raised when unparsable data is received.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.UnknownDataException.Data">
      <summary>
            Data that couldn't be parsed.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DeviceWaitingForDataException">
      <summary>
            Raised when the PalmSens is waiting for data.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.LicenseException">
      <summary>
            Not licensed for use with SDK
            </summary>
    </member>
    <member name="T:PalmSens.Comm.BusyException">
      <summary>
            Exception that is thrown whenever an action is requested while the PalmSens device is busy (measuring or 
            downloading new firmware).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.NoResponseException">
      <summary>
            Exception that is thrown whenever the PalmSens doesn't respond
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.OnMeasurementEnded">
      <summary>
            Force the measurement to end, in case of an unexpected device reset.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.OnMeasurementEndedAsync">
      <summary>
            Force the measurement to end, in case of an unexpected device reset.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.Phase">
      <summary>
            The current Phase in the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.StartStage(System.Double,System.String,System.Boolean)">
      <summary>
            Starts the measurement as part of a MixedMode measurement.
            </summary>
      <param name="timeOffsetInSec">The time offset in sec.</param>
      <param name="name">The name of the master method.</param>
      <param name="firstStage">if set to <c>true</c> [first stage].</param>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.StartStageAsync(System.Double,System.String,System.Boolean)">
      <summary>
            Starts the measurement as part of a MixedMode measurement.
            </summary>
      <param name="timeOffsetInSec">The time offset in sec.</param>
      <param name="name">The name of the master method.</param>
      <param name="firstStage">if set to <c>true</c> [first stage].</param>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.AbortAsync">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SkipPretreatmentAsync">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Comm.ActiveMeasurement.OnHold">
      <summary>
            True if measurement is on hold.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ToggleHold">
      <summary>
            Toggles hold if SupportsHold() == true
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ToggleHoldAsync">
      <summary>
            Toggles hold if SupportsHold() == true
            </summary>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="M:PalmSens.Comm.ActiveMeasurement.ProcessDataAsync">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.GenericCommMeasurement">
      <summary>
            Parsing data of a generic measurement used for most techniques.
            Not used for CV, FA, SCP, aCV and 'manual controlled' techniques, like MA, MP and MM
            </summary>
    </member>
    <member name="M:PalmSens.Comm.GenericCommMeasurement.TryProcessData">
      <summary>
            Try processing the data that's being received
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="M:PalmSens.Comm.GenericCommMeasurement.TryProcessDataAsync">
      <summary>
            Try processing the data that's being received
            </summary>
      <returns>whether the measurement is finished</returns>
    </member>
    <member name="T:PalmSens.Comm.CommMeasurement">
      <summary>
            Active Measurement.
            Used for all measurement techniques/methods, except EIS (ImpedemetricMeasurement) and MultiStepMC (for PS2 only)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._iScan">
      <summary>
            The current Scan number, for mux and CV measurements 
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement._measBuff">
      <summary>
            Buffer used to read measurement data from.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.IsOffline">
      <summary>
            Gets a value indicating whether this instance is offline (loaded from a device file).
            </summary>
      <value>
        <c>true</c> if this instance is offline; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.Conn">
      <summary>
            Comm object used for communication.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.SendDataDuringMeasurement">
      <summary>
            Whether data points will be sent during or after the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.GetStatusFast(System.Int32)">
      <summary>
            Gets the reading status during fast measurements
            </summary>
      <param name="value">The reading within bit range. Integer between 0 - 65536</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.WaitForChar(System.Char)">
      <summary>
            Wait for a char to arrive. 
            Does not consume the char waited for.
            </summary>
      <param name="cmd">Char to wait for</param>
      <returns>
            false if the char is not available, true otherwise
            </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.WaitForCharAsync(System.Char)">
      <summary>
            Wait for a char to arrive. 
            Does not consume the char waited for.
            </summary>
      <param name="cmd">Char to wait for</param>
      <returns>
            false if the char is not available, true otherwise
            </returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.AbortAsync">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommMeasurement.OnHold">
      <summary>
            If measurement is currently on hold
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ToggleHold">
      <summary>
            Pauses the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ToggleHoldAsync">
      <summary>
            Pauses the measurement
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SupportsHold">
      <summary>
            Gets a value indicating whether pausing during the measurement is possible.
            The condition Method.SupportsHoldDuringMeasurement() should be true as well
            </summary>
      <value>
        <c>true</c> if [hold possible]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Reverse">
      <summary>
            Reverses the direction
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ReverseAsync">
      <summary>
            Reverses the direction
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>TRUE if the measurement is finished</returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.TryProcessDataAsync">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>TRUE if the measurement is finished</returns>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.PretreatmentDone">
      <summary>
            Indicates whether pretreatment is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ProcessData">
      <summary>
      </summary>
      <returns>True if done</returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.ProcessDataAsync">
      <summary>
      </summary>
      <returns>True if done</returns>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.SkipPretreatmentAsync">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommMeasurement.nPoints">
      <summary>
            Number of points that are going to be measured.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasureOnMuxChannel(System.Int32)">
      <summary>
            Measurement again after switching to a new mux channel
            </summary>
      <param name="channel">first channel is 0</param>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasureOnMuxChannelAsync(System.Int32)">
      <summary>
            Measurement again after switching to a new mux channel
            </summary>
      <param name="channel">first channel is 0</param>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will 
            take care of announcing it.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.MeasurementEndedAsync">
      <summary>
            Indicate the measurement is finished. Will 
            take care of announcing it.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.Start">
      <summary>
            Starts a measurement with the currently selected method.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommMeasurement.StartAsync">
      <summary>
            Starts a measurement with the currently selected method.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager">
      <summary>
            Wrapper around PalmSens.Comm.ClientConnection.
            This class uses a Timer with intervals of 100 ms to handle incoming data. 
            It also generates several events.
            
            See the ConnectionExample project (part of the SDK) for communications without
            the use of this helper class.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.Disconnected">
      <summary>
            Occurs when [disconnected].
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.StatusChangedEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.StateChanged">
      <summary>
            This event is raised when the State is changed.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.CellStateChanged">
      <summary>
            This event is raised when the property Cell of this class is set to true or false
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.PotentialOrCurrentChanged">
      <summary>
            This event is raised when the Cell is set to on or off.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.BeginMeasurementEventHandler">
      <summary>
            Delegate for StateChanged
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginMeasurement">
      <summary>
            This event is raised whenever PalmSens starts sending new measurement data
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended. When this event is 
            raised, the Comm object is already back in "Idle" mode.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.MeasurementStarted">
      <summary>
            Occurs as soon as measure is called, before the actual measurement has started
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveCurve">
      <summary>
            This event is raised whenever the device starts sending data and the default curve for the running technique has been created.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.BeginReceiveEISData">
      <summary>
            This event is raised whenever the device starts sending new EISData.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveCurve">
      <summary>
            This event is raised whenever a complete curve (Finished is set to <c>true</c>) has been received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.ReceiveStatus">
      <summary>
            This event returns the potential, current, noise and temperature of the device.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DebugEventHandler">
      <summary>
            Raised when debug information is received.
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.DebugHandler">
      <summary>
            Occurs when [debug handler].
            </summary>
    </member>
    <member name="E:PalmSens.Comm.CommManager.UnknownDataEvent">
      <summary>
            Event raised whenever data is received that cannot be interpreted by the current
            Comm object.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventArgs">
      <summary>
            Arguments for the event raised when data is received that can't be interpreted.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.Data">
      <summary>
            Obtain the unknown data that has been received.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.UnknownDataEventArgs.PacketCount">
      <summary>
            Return the number of packets 
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.UnknownDataEventHandler">
      <summary>
            Delegate for handlers of the UnknownData event
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Devices.Device,System.Int32)">
      <summary>
            Create a new connection with a PalmSens over the given stream
            </summary>
      <param name="d">The PalmSens or EmStat device.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.#ctor(PalmSens.Comm.ClientConnection,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="N:PalmSens.Comm" /> class.
            </summary>
      <param name="clientConnection">The client connection.</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Text">
      <summary>
            The text representation of this CommManager object.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.TimerPeriod">
      <summary>
            Gets or sets the timer period in ms.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Device">
      <summary>
            The connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Capabilities">
      <summary>
            Gets the capab of the connected device
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ResultLastMeasurement">
      <summary>
            This collection contains the result of the last measurement
            Contains curves or EIS data
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentCurve">
      <summary>
            Contains the curve that is currently being measured. If possible, this 
            Curve object will be updated whenever new points are measured.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Disconnect(System.Boolean)">
      <summary>
            Disconnects the comm
            </summary>
      <param name="silent">if set to <c>true</c> [silent]. When silent disconnect event is not raised.</param>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ActiveMeasurement">
      <summary>
            The measurement active
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.RemainingMeasurementTime">
      <summary>
            Gets the remaining measurement time.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Dispose">
      <summary>
            Disposes the connection (disconnects)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.CommManager.ClientConnection">
      <summary>
            The Comm class (this class) is a wrapper around the ClientConnection class
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceSerial">
      <summary>
            Gets the device serial number as stored in the permanent memory of the connected device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetDeviceSerialAsync">
      <summary>
            Gets the device serial number as stored in the permanent memory of the connected device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ToString">
      <summary>
            Generate description of connection
            </summary>
      <returns>string describing the stream currently in use</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ResumeParsing">
      <summary>
            Resumes the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.PauseParsing">
      <summary>
            Pauses the parsing of incoming packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Finalize">
      <summary>
            Destroy the current Comm object. 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Status">
      <summary>Contains the last known status of the PalmSens.
            </summary>
      <remarks>
            This property is updated every few seconds when the PalmSens is in idle 
            mode. </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.StatusWhenIdle">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetStatusWhenIdleAsync">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetStatusWhenIdleAsync(System.Boolean)">
      <summary>
            Whether PalmSens should measure temperature, current and potential when 
            idle. Setting this member to false increases the response time (normal response 
            time is about 100ms).
            </summary>
    </member>
    <member name="T:PalmSens.Comm.CommManager.DeviceState">
      <summary>
            Reflects the last known state of the connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.State">
      <summary>
            Gets or sets the current device state
            </summary>
      <value>
            The state.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetStateAsync">
      <summary>
            Gets the current device state
            </summary>
      <value>
            The state.
            </value>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Potential">
      <summary>
            Sets or gets the potential in Volts. 
            On set; if the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetPotentialAsync">
      <summary>
            gets the potential in Volts. 
            On set; if the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetPotentialAsync(System.Single)">
      <summary>
            gets the potential in Volts. 
            On set; if the PalmSens is not yet in Potentiostatic mode, it will be 
            switched to Potentiostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate(System.Double[]@)">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CalibrateReturnResultAsync">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Calibrate">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CalibrateAsync">
      <summary>
            Calibrate. Only run with sensorcable disconnected!
            EmStat and Palmsens: 
            offset[0] = dacOffset
            offset[1] = currentOffset
            offset[2] = potentialOffset (PalmSens3: gain1)
            PalmSens3:
            offset[3] = gain1
            offset[4] = gain2
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Current">
      <summary>
            Read or set current in uA. 
            If the current is set and PalmSens is not yet in Galvanostatic mode, it will be switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetCurrentAsync">
      <summary>
            Read current in uA. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetCurrentAsync(System.Single)">
      <summary>
            set current in uA. 
            If the current is set and PalmSens is not yet in Galvanostatic mode, it will be switched to Galvanostatic mode.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotPotential">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBiPotPotentialAsync(System.Single)">
      <summary>
            Potential of the second working electrode. 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOnAndCurrentRange(PalmSens.CurrentRange)">
      <summary>
            Sets the WE2 and current range.
            </summary>
      <param name="currentRange">The current range for the WE2.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOnAndCurrentRangeAsync(PalmSens.CurrentRange)">
      <summary>
            Sets the WE2 and current range.
            </summary>
      <param name="currentRange">The current range for the WE2.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOff">
      <summary>
            Sets the bipot off.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBipotOffAsync">
      <summary>
            Sets the bipot off.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotCurrentRange">
      <summary>
            The current range of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetBiPotCurrentRangeAsync">
      <summary>
            The current range of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetBiPotCurrentRangeAsync(PalmSens.CurrentRange)">
      <summary>
            The current range of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotCurrentRead">
      <summary>
            Gets the last BiPot current read.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.LastBiPotReadingStatus">
      <summary>
            Gets the last BiPot currentstatus
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ReadBiPotCurrent">
      <summary>
            Current of the second working electrode in units of BiPot CR
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.ReadBiPotCurrentAsync">
      <summary>
            Current of the second working electrode in units of BiPot CR
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.BiPotReadingStatus">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetBiPotReadingStatusAsync">
      <summary>
            Status of the current of the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ExternalOutput">
      <summary>
            Set external analog output in Volt (pin 8 of PalmSens miniDIN connector).
            0.000 - 4.096 V, resolution is 1 mV
            </summary>
      <value>
            The external output in V.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetExternalOutputAsync(System.Single)">
      <summary>
            Set external analog output in Volt (pin 8 of PalmSens miniDIN connector).
            0.000 - 4.096 V, resolution is 1 mV
            </summary>
      <value>
            The external output in V.
            </value>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartOnWorkerThread(PalmSens.Method,PalmSens.MeasType)" -->
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartOnWorkerThreadAsync(PalmSens.Method,PalmSens.MeasType)" -->
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartTask(PalmSens.Method,PalmSens.MeasType)" -->
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Comm.CommManager.GetMeasureStartTaskAsync(PalmSens.Method,PalmSens.MeasType)" -->
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            If multiplexer settings are enabled, they're used.
            MeasType = new
            </summary>
      <param name="m">The method.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.MeasureAsync(PalmSens.Method)">
      <summary>
            Run measurement with the specified method
            If multiplexer settings are enabled, they're used.
            MeasType = new
            </summary>
      <param name="m">The method.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,System.Int32)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            </summary>
      <param name="m">The method</param>
      <param name="muxchannel">The multiplexer channel.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.MeasureAsync(PalmSens.Method,System.Int32)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            </summary>
      <param name="m">The method</param>
      <param name="muxchannel">The multiplexer channel.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Measure(PalmSens.Method,PalmSens.MeasType)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            If multiplexer settings are enabled, they're used.
            </summary>
      <param name="m">The method</param>
      <param name="measType">Type of the measurement.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="M:PalmSens.Comm.CommManager.MeasureAsync(PalmSens.Method,PalmSens.MeasType)">
      <summary>
            Run measurement with the specified method on a multiplexer channel
            If multiplexer settings are enabled, they're used.
            </summary>
      <param name="m">The method</param>
      <param name="measType">Type of the measurement.</param>
      <returns>Any error messages, otherwise String.Empty</returns>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentRange">
      <summary>
            Get or set the current range, as PalmSens.CurrentRange
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetCurrentRangeAsync">
      <summary>
            Get the current range, as PalmSens.CurrentRange
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetCurrentRangeAsync(PalmSens.CurrentRange)">
      <summary>
            Set the current range, as PalmSens.CurrentRange
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.QCount">
      <summary>
            Number of idle packets received. PalmSens sends an idle packet approximately 
            every second.
            </summary>
      <remarks>Idle packets are only sent when the PalmSens is in idle mode. 
            The <c>Idle</c> event is raised every time this value is incremented.</remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Version">
      <summary>
            Firmware version of connected Device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DeviceType">
      <summary>
            Type of currently connected device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.VersionString">
      <summary>
            The version of the firmware running on the remote device
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Busy">
      <summary>
            Whether the PalmSens is busy at the moment</summary>
      <remarks>
            This property is set to true when the PalmSens is active downloading new 
            firmware or running a measurement.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.CommManager.IsBusyAsync">
      <summary>
            Whether the PalmSens is busy at the moment</summary>
      <remarks>
            This property is set to true when the PalmSens is active downloading new 
            firmware or running a measurement.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Active">
      <summary>
            Whether the PalmSens is active.
            </summary>
      <remarks>
            True if the PalmSens this Comm class is connected to is active, False if it is not.
            This value may be False if there is no PalmSens connected, the PalmSens is powered off or 
            when the PalmSens is not responding for any other reason.
            </remarks>
    </member>
    <member name="M:PalmSens.Comm.CommManager.IsActiveAsync">
      <summary>
            Whether the PalmSens is active.
            </summary>
      <remarks>
            True if the PalmSens this Comm class is connected to is active, False if it is not.
            This value may be False if there is no PalmSens connected, the PalmSens is powered off or 
            when the PalmSens is not responding for any other reason.
            </remarks>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PowerStatus">
      <summary>
            Obtain the current power status
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PalmSensType">
      <summary>
            Get type number of PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CurrentMuxChannel">
      <summary>
            The active multiplexer channel (0-7 in case of 8 channel device)
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetCurrentMuxChannelAsync">
      <summary>
            The active multiplexer channel (0-7 in case of 8 channel device)
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetCurrentMuxChannelAsync(System.Int32)">
      <summary>
            The active multiplexer channel (0-7 in case of 8 channel device)
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Stirrer">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetStirrerAsync">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetStirrerAsync(System.Boolean)">
      <summary>
            Whether the Stirrer should be used.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.PotentialOffset1V">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetPotentialOffset1VAsync">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetPotentialOffset1VAsync(System.Boolean)">
      <summary>
            The real applied potential is shifted with +1 Volt
            This is applied during manual control as well as measurements
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Method">
      <summary>
            The method currently in use on the PalmSens.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.Abort">
      <summary>
            Abort the current measurement running.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.AbortAsync">
      <summary>
            Abort the current measurement running.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SkipPretreatment">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SkipPretreatmentAsync">
      <summary>
            Skip current pretreatment stage, i.e. conditioning, deposition or equilibration stage. Only 
            relevant when a measurement is active.
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.DigitalLineD0">
      <summary>
            Read digital input on D0
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.DigitalLineD0Async">
      <summary>
            Read digital input on D0
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.AnalogInput">
      <summary>
            Read auxilary analog input signal in selected unit
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.AnalogInputAsync">
      <summary>
            Read auxilary analog input signal in selected unit
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.Mode">
      <summary>
            Current mode of measurement at the PalmSens device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetModeAsync">
      <summary>
            Current mode of measurement at the PalmSens device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetModeAsync(PalmSens.Comm.Mode)">
      <summary>
            Current mode of measurement at the PalmSens device
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SendModeCR(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SendModeCRAsync(PalmSens.Comm.Mode,System.Boolean,PalmSens.CurrentRange)">
      <summary>
            Set the mode, current range and whether the cell should be on. 
            </summary>
      <param name="mode">mode</param>
      <param name="CellOn">whether the cell should be on</param>
      <param name="cr">new current range</param>
    </member>
    <member name="P:PalmSens.Comm.CommManager.CellOn">
      <summary>
            Indicates whether the electric cell is currently on or off 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.GetCellOnAsync">
      <summary>
            Indicates whether the electric cell is currently on or off 
            </summary>
    </member>
    <member name="M:PalmSens.Comm.CommManager.SetCellOnAsync(System.Boolean)">
      <summary>
            Indicates whether the electric cell is currently on or off 
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.IsBipotOn">
      <summary>
            Whether the bipot (WE2) is enabled
            </summary>
    </member>
    <member name="P:PalmSens.Comm.CommManager.ChannelIndex">
      <summary>
            Gets or sets the channel number assigned to this comm.  
            </summary>
      <value>
            The channel.
            </value>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CellOffAfterSeconds(System.Int32)">
      <summary>
            Leaves the cell on (doesn't turn it on) for a specified period
            </summary>
      <param name="seconds">The number of seconds before turning the cell off.</param>
    </member>
    <member name="M:PalmSens.Comm.CommManager.CellOffAfterSecondsAsync(System.Int32)">
      <summary>
            Leaves the cell on (doesn't turn it on) for a specified period
            </summary>
      <param name="seconds">The number of seconds before turning the cell off.</param>
    </member>
    <member name="T:PalmSens.Comm.DeviceSerial">
      <summary>
            Device serial information used for saving info to EEPROM of PS3 and EmStat
            </summary>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.ReadSerial(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the device serial.
            </summary>
      <param name="c">The clientConnection.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.ReadSerialAsync(PalmSens.Comm.ClientConnection)">
      <summary>
            Reads the device serial.
            </summary>
      <param name="c">The clientConnection.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.WriteSerial(PalmSens.Comm.DeviceSerial,PalmSens.Comm.ClientConnection)">
      <summary>
            Write serial number
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="M:PalmSens.Comm.DeviceSerialHelperClass.WriteSerialAsync(PalmSens.Comm.DeviceSerial,PalmSens.Comm.ClientConnection)">
      <summary>
            Write serial number
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="T:PalmSens.Comm.Firmware">
      <summary>
            Describes the firmware for PalmSens. Use this object to upload new firmware.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Firmware.Block">
      <summary>
            Represents one block of data from the PalmSens Firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.address">
      <summary>
            Memory address this block should be written to
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.data">
      <summary>
            Data to write
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Block.lineno">
      <summary>
            Line number in file
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.blocks">
      <summary>
            The blocks of data in the firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Version">
      <summary>
            Firmware version
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.BootloaderDevice">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Firmware.Device">
      <summary>
            Destination device for this firmware
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream)">
      <summary>
            Load firmware.
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.Stream,System.String)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="fileStream">stream of hex file</param>
    </member>
    <member name="M:PalmSens.Comm.Firmware.#ctor(System.IO.StreamReader)">
      <summary>
            Create a new Firmware object from the specified hex file
            </summary>
      <param name="file">hex file</param>
    </member>
    <member name="P:PalmSens.Comm.Firmware.Filename">
      <summary>
            Gets the filename.
            </summary>
      <value>
            The filename.
            </value>
    </member>
    <member name="P:PalmSens.Comm.FirmwareUploader.MinEstimatedDurationMinutes">
      <summary>
            Gets the minimum estimated duration in minutes.
            </summary>
      <value>
            The minimum estimated duration in minutes.
            </value>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs">
      <summary>
            Current status of uploading progress of the PalmSens firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Current">
      <summary>
            Number of blocks of firmware downloaded so far.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.FirmwareUploader.DownloadProgressEventArgs.Total">
      <summary>
            Total number of blocks due to be downloaded.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.FirmwareUploader.DownloadProgressEventHandler">
      <summary>
            Delegate for handlers of the DownloadProgressEvent
            </summary>
    </member>
    <member name="E:PalmSens.Comm.FirmwareUploader.DownloadProgress">
      <summary>
            Raised whenever a new data block of firmware is sent
            </summary>
    </member>
    <member name="T:PalmSens.Comm.ReadingStatus">
      <summary>
            Describes the status of the current or potential measurement
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Unknown">
      <summary>
            Status is not known or could not be determined.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.OK">
      <summary>
            Status is OK. Measurement is reliable
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Overload">
      <summary>
            Overload
            </summary>
    </member>
    <member name="F:PalmSens.Comm.ReadingStatus.Underload">
      <summary>
            Underload
            </summary>
    </member>
    <member name="T:PalmSens.Comm.Status">
      <summary>
            Contains the status information of a PalmSens at a certain moment. Used for parsing measurement packages.
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.#ctor(PalmSens.Data.VoltageReading,PalmSens.Data.CurrentReading,System.Int32,System.Double,PalmSens.Comm.Status.EnumPretreatmentPhase,PalmSens.Devices.DeviceCapabilities,System.Collections.Generic.List{PalmSens.Data.GenericValue})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Comm.Status" /> class.
            </summary>
      <param name="potentialReading">The potential reading.</param>
      <param name="currentReading">The current reading.</param>
      <param name="extraValue">Extra value. Is the raw auxiliary value as received</param>
      <param name="noise">The noise level.</param>
      <param name="pretPhase">The pretreatment phase.</param>
      <param name="capabilities">The device capabilities.</param>
    </member>
    <member name="F:PalmSens.Comm.Status.Noise">
      <summary>
            Noise as indicated by PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.PretreatmentPhase">
      <summary>
            Pretreatment phase (implemented since PS4.4 or ES2.5)
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.None">
            The instrument doesn't send this kind of information
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Conditioning">
            The instrument is conditioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Depositing">
            The instrument is depositioning
        </member>
    <member name="F:PalmSens.Comm.Status.EnumPretreatmentPhase.Equilibrating">
            The instrument is equilibrating
        </member>
    <member name="F:PalmSens.Comm.Status.PotentialReading">
      <summary>
            Measured potential with status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.CurrentReading">
      <summary>
            Measured current with range and status information.
            </summary>
    </member>
    <member name="F:PalmSens.Comm.Status.ExtraValue">
      <summary>
            Extra raw optional value sent with the package.
            Can be: 
            -WE2 current value
            -Aux. input voltage, 
            -DC current for ACV, 
            -Reverse current for SquareWave voltammetry
            </summary>
    </member>
    <member name="M:PalmSens.Comm.Status.ToString">
      <summary>
            Give string presentation of the current status of the PalmSens.
            </summary>
      <remarks>The format in which the status is returned is: E=0.000,I=0.000,T=10.0C</remarks>
      <returns>String describing this status object</returns>
    </member>
    <member name="T:PalmSens.Comm.StatusEventHandler">
      <summary>
            Delegate that receives Status.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.DebugInformationEventHandler">
      <summary>
            Delegate that receives Debug Information.
            </summary>
    </member>
    <member name="T:PalmSens.Comm.StatusEventArgs">
      <summary>
            Arguments for an event that receives the status of the PalmSens
            </summary>
    </member>
    <member name="M:PalmSens.Comm.StatusEventArgs.GetStatus">
      <summary>
            Return the status
            </summary>
    </member>
    <member name="T:PalmSens.CustomMeasurement">
      <summary>
            Custom measurements.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.Aborted">
      <summary>
            Whether or not this measurement has been aborted.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.ActualCR">
      <summary>
            CurrentRange 
            </summary>
    </member>
    <member name="P:PalmSens.CustomMeasurement.Conn">
      <summary>
            Comm object in use.
            </summary>
    </member>
    <member name="F:PalmSens.CustomMeasurement.MeasurementStarted">
      <summary>
             The moment the measurement was started
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Create a new CustomMeasurement.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="F:PalmSens.CustomMeasurement.LastMuxChannel">
      <summary>
            Last mux channel applied
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AutoRanging(System.Single)">
      <summary>
            Autoranging
            </summary>
      <param name="current">current value</param>
      <returns>current status</returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AutoRangingAsync(System.Single)">
      <summary>
            Autoranging
            </summary>
      <param name="current">current value</param>
      <returns>current status</returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.StartAsync">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.FinishMeasurementAsync">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AbortAsync">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.NextState">
      <summary>
            Nexts the state.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.NextStateAsync">
      <summary>
            Nexts the state.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.ProcessDataAsync">
      <summary>
            Try to process as much data as possible.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.MeasureIterate">
      <summary>
            Do next measurement iteration
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.MeasureIterateAsync">
      <summary>
            Do next measurement iteration
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CustomMeasurement.AdjustCountdown">
      <summary>
            Adjusts the countdown.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.SkipPretreatment">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="M:PalmSens.CustomMeasurement.SkipPretreatmentAsync">
      <summary>
            Skip current pretreatment phase.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.Simulator">
      <summary>
            Simlates a PalmSens.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Potential">
      <summary>
            Current value set on the DAC
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotPotential">
      <summary>
            Bi Pot Potential as set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.CurrentRange">
      <summary>
            Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.Mode">
      <summary>
            Mode set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.FastMode">
      <summary>
            Whether fast mode was set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.BiPotCurrentRange">
      <summary>
            Bi Pot Current range set.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.Simulated.Simulator.ExternalOutput">
      <summary>
            External output, used for stirring and multiplexer.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.SimMeasurement">
      <summary>
            A simulated measurment, based on method parameters
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Simulated.SimMeasurement.Finalize">
      <summary>
            Destroy the current object. 
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Simulated.parameters">
      <summary>
            All parameter names used in firmware
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Bits">
      <summary>
            The amount of bits this device uses.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxRawValue">
      <summary>
            Gets the maximum raw value, based on the amount of bits.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.VRange">
      <summary>
            Gets the reference voltage range of the device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Offset">
      <summary>
            Gets the voltage offset of the device, initially this is a predefined value for the device based on internal ADC gain, but it can be adjusted during calibration.
            When calibrating, keep in mind this Offset might not be 0, and include that in the calculation of the new offset.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Gain">
      <summary>
            Gets the voltage Gain of the device, initially this is a predefined value for the device based on internal ADC offset, but it can be adjusted during calibration.
            When calibrating, keep in mind this Gain might not be 1, and include that in the calculation of the new Gain.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.Resolution">
      <summary>
            Gets the resolution of this analog device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.StepSize">
      <summary>
            Gets the Analog step size for the input or output of this component.
            </summary>
      <value>
            The size of the step as Resolution * Gain.
            </value>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MaxValue">
      <summary>
            Gets the maximum analog value this device can handle.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.AnalogComponent.MinValue">
      <summary>
            Gets the minimum analog value this device can handle.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRaw(System.Single,System.Boolean)">
      <summary>
            To the raw.
            Offset is not used for for example the step potential.
            </summary>
      <param name="val">The value.</param>
      <param name="useOffset">if set to <c>true</c> [use offset].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.AnalogComponent.ToRawBiPolar(System.Single)">
      <summary>
            Use for analog values. 
            Bits = Signbit
            </summary>
      <param name="val">The voltage</param>
      <returns>A signed integer, Bits is signbit</returns>
    </member>
    <member name="T:PalmSens.Devices.GetDeviceCapabilities">
      <summary>
            Returns the corresponding capab for a deviceType
            </summary>
    </member>
    <member name="M:PalmSens.Devices.GetDeviceCapabilities.GetCapabilities(PalmSens.Comm.enumDeviceType,PalmSens.Devices.Device)">
      <summary>
            Gets the capabilities of the connected deviceType.
            </summary>
      <param name="deviceType">The deviceType.</param>
      <param name="device">The device.</param>
      <param name="firmwareversion">The firmwareversion.</param>
      <returns>
            DeviceCapabilities
            </returns>
      <exception cref="T:PalmSens.Devices.GetDeviceCapabilities.UnknownCapabilitiesException">No capab for unknown deviceType</exception>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities">
      <summary>
      </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.SpecialFirmwareDescription">
      <summary>
            This string contains the build date for newer firmware versions (since May 2017).
            For special (custom) firmware builds it contains a brief description.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port. 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
             </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.BiPotPresent">
      <summary>
            True if a bipot module is present (PalmSens series only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software. 
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            /// Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.BiPotCalibration">
      <summary>
            Contains PalmSens BiPot calibration information
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISsettings">
      <summary>
            Contains EIS settings loaded from XML file
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EISCalibration">
      <summary>
            Contains calibration values loaded from EEPROM
            Only used for instruments that support EIS, null otherwise
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HardwareRevision">
      <summary>
            Gets the hardware revision.
            1 = ....
            </summary>
      <value>
            The hardware revision.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DeviceCapabilities.EnumEmStatBipotMode">
      <summary>
            BiPot mode for EmStat3 and EmStat3 Bipot boards
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.EmStatBiPotMode">
      <summary>
            Used for EmStat3 BiPot instruments
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsEmStatBipotBoard">
      <summary>
            Whether the deviceType is a the Bipot version of an EmStat (has its own USB/COM)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelPotential">
      <summary>
             The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelWE2">
      <summary>
             The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.MaxMuxChannels">
      <summary>
            Number of mux channels supported. Any value below 1 
            means multiplexer operations are not supported by the instrument.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.NumMuxChannels">
      <summary>
            Number of actually available mux channels (if known, otherwise equal to MaxMuxChannels).
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.MuxType">
      <summary>
            The type of mux that is attached to the device.
            Defaults to AuxAddressMux if there is no mux, because it is not possible to detect the presence of an old style mux.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this 
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedBipotRanges">
      <summary>
            list of current ranges for the BiPot module supported by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsOfflineMeasurements">
      <summary>
            Whether off-line measurements are supported
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsDisplayMethodName">
      <summary>
            Gets a value indicating whether the device supports displaying a method name.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.SupportsRange(PalmSens.CurrentRange)">
      <summary>
            Check if deviceType supports the range.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.DeviceCapabilities.IsWireless">
      <summary>
            Whether the connection is a Bluetooth connection.
            Currently only used as work around to keep EIS meas working with BT
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DeviceCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsImpedance">
      <summary>
            Whether or not the deviceType supports impedance measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DeviceCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.DefaultCapabilities">
      <summary>
            Describes default capabilities to use when nothing is connected
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.DefaultCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.DefaultCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.NoLicenseInfo">
      <summary>
            Raised when a device connection can't return any license info
            </summary>
    </member>
    <member name="T:PalmSens.Devices.IAndroidDevice">
      <summary>
            Temporary class used by PStouch. Integrate into Device in the future?
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open">
      <summary>
            Opens this instance and auto detects the baudrate if nescessary.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Device.Open(System.Int32)">
      <summary>
            Opens the connection at the specified baudrate.
            </summary>
      <param name="baudrate">The baudrate.</param>
    </member>
    <member name="F:PalmSens.Devices.Device.DeviceProtocol">
      <summary>
            Type of version command used.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EISSettings">
      <summary>
            All settings are read from an XML file with the name
            eissettingsps[v].xml where v is the hardware version of the PalmSens
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettings.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettings.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxFreqForRange(System.Int32)">
      <summary>
            Gets the maximum frequency for range.
            Use this instead of field array MaxFreqForRange
            </summary>
      <param name="cr">The current range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetCurrentRangeForFreq(System.Double)">
      <summary>
            Gets the current range for the frequency
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetMaxPGAgain(System.Single,PalmSens.CurrentRange)">
      <summary>
            Gets the PGAgain byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="cr">The current range.</param>
      <returns>
            the byte for the cf filter
            </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.LowResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered low
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.HighResolutionADC">
      <summary>
            Determines when used resolution of the ADC is considered high
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettings.GetFilterCFByte(System.Single,System.SByte,System.Boolean)">
      <summary>
            Gets the filter byte.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>the byte for the CF filter</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MaxPhaseshift">
      <summary>
            Window max where phase values are used for freq0
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettings.CalibFreq0MinPhaseshift">
      <summary>
            Window min where phase values are used for freq0
            </summary>
    </member>
    <member name="T:PalmSens.Devices.EmstatCapabilities">
      <summary>
            Describes Emstat capab.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.EmstatCapabilities" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EmstatCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
      <exception cref="T:System.InvalidOperationException">EmStat cannot control a current.</exception>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV. 
            Not supported by EmStat
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            NOT USED
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EmstatCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat2Capabilities">
      <summary>
            Describes EmStat2 capab (inherits most of EmStat1 capab)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat2Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat2Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="T:PalmSens.Devices.Emstat3Capabilities">
      <summary>
            EmStat3 Device capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3PCapabilities">
      <summary>
            EmStat3+ Device Capabilities
            </summary>
      <seealso cref="T:PalmSens.Devices.Emstat2Capabilities" />
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.DeviceType">
      <summary>
            The deviceType type for this capab
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this particular EmStat version
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.Emstat3PCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="T:PalmSens.Devices.Emstat3BPCapabilities">
      <summary>
            Describes EmStat3 in BiPot mode (part of PolyEmStat)
            </summary>
    </member>
    <member name="M:PalmSens.Devices.Emstat3BPCapabilities.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Devices.Emstat3BPCapabilities" /> class.
            </summary>
    </member>
    <member name="T:PalmSens.Devices.PalmSensCapabilities">
      <summary>
            Describes PalmSens capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DeviceType">
      <summary>
            The device type for this Capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ChannelReverseCurrent">
      <summary>
             The internal channel used for measuring the reverse current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(device d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSensCapabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="f">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular device.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Currently only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are sent in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSensCapabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens3Capabilities">
      <summary>
            Describes PalmSens3 capab.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the auxiliary channel
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ChannelCurrentNoPGA">
      <summary>
            Gets the current bypassing the PGA
            </summary>
      <value>
            The channel current with no PGA.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this instrument.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens3Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens3Capabilities.GetCutoffFrequency(System.Int32,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="crByte">The current range as byte where 0=1nA, 1=10nA, 2=100nA, 3=1uA etc.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens3Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="T:PalmSens.Devices.PalmSens4Capabilities">
      <summary>
            Describes PalmSens4 capabilities.
            </summary>
      <seealso cref="T:PalmSens.Devices.DeviceCapabilities" />
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxVAux">
      <summary>
            Maximum potential output of the AUX port.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinPotential">
      <summary>
            Minimum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxPotential">
      <summary>
            Maximum potential that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBipotSoftwareMode">
      <summary>
            The bipot supports to be set in differen modes supported via software.
            Only supported for PalmSens3, fw 1.8 or higher with PS3 bipot.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsBiPotInIdleStatusPackage">
      <summary>
            Whether or not BiPot values are send in T packages and calibration data can be stored in EEPROM
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxEISFrequency">
      <summary>
            Gets the maximum EIS frequency.
            </summary>
      <value>
            The maximum EIS frequency.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DeviceType">
      <summary>
            The deviceType type for this capabilities
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCurrent">
      <summary>
            The internal channel used for measuring current
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelPotential">
      <summary>
            The internal channel used for measuring potential
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelWE2">
      <summary>
            The internal channel used for measuring on the second working electrode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelAUX">
      <summary>
            The internal channel used for measuring the analog input on the aux port
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ChannelCE">
      <summary>
            The internal channel used for measuring the CE potential (PS4 only)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRanges">
      <summary>
            list of current ranges supported by this
            particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedAppliedRanges">
      <summary>
            list of current ranges supported for applying current by this particular deviceType.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedModes">
      <summary>
            List of supported modes.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedRemoteCommands">
      <summary>
            This field gets its value in ClientConnection(deviceType d)  constructor
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedAltMUXTechniques">
      <summary>
            Techniques that support alternating MUX measurements
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportedMethods">
      <summary>
            List of supported techniques.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStorage">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsAdvancedTriggering">
      <summary>
            Whether the device supports triggering on digital outputs (AUX) at start of tEquil, start of measurement and delayed after start of measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsDisplayMethodName">
      <summary>
            Whether saving the measurement locally on the device is supported.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsStartSpecificRange">
      <summary>
            Gets a value indicating whether the device supports starting at a specific current range rather than the default maximum range selected.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.SupportsRecordCEPotential">
      <summary>
            Whether the connected instrument can record the CE potential as ExtraValue
            </summary>
      <value>
        <c>true</c> if [supports record CE potential]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxFrequencyACV">
      <summary>
            The maximum frequency for acV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinCurrent">
      <summary>
            Minimum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MaxCurrent">
      <summary>
            Maximum current (* current range) that can be read/applied
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinADIntervalTime">
      <summary>
            Minimum interval time supported for one AD measurement (not counting the overhead of the rest of the measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOfflineIntervalTime">
      <summary>
            Minimum interval time supported for offline (fast) measurements, like FAM, LSV and CV
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinOnlineIntervalTime">
      <summary>
            Minimum interval time at which the data can be sent online.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.HexBlobVersion">
      <summary>
            Hex blob version in use.
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.CellTypes">
      <summary>
            Possible cell types (internal test sensor or external).
            Used for test internal sensors.
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EReadOffset">
      <summary>
            Where E read offset is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.HardwareSettings">
      <summary>
            Where hardware settings are stored
            Value corresponds with enumHardwareSettings
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.EISCalibrationAddress">
      <summary>
            The starting address where EIS calibration values are stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetADC">
      <summary>
            The address where the correction offset for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorDAC">
      <summary>
            The address where the correction factor for the BiPot DAC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotOffsetDAC">
      <summary>
            The address where the correction offset for the BiPot DAC is stored
            </summary>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.EEPROM.BiPotFactorADC">
      <summary>
            The address where the correction factor for BiPot ADC is stored
            </summary>
    </member>
    <member name="F:PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings.BiPotInstalled">
      <summary>
            Use to read value stored in address EEPROM.HardwareSettings
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.SetHardwareSettings(PalmSens.Devices.PalmSens4Capabilities.EnumHardwareSettings)">
      <summary>
            Value using enumEEPROMHardwareSettings to set hardware settings, like if a BiPot is installed.
            Supported from firmware vs 1.5 or higher.
            </summary>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetHardwareSettings">
      <summary>
            Returns the hardware settings as read from EEPROM.
            </summary>
      <returns>Hardware settings</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.BipotInstalled">
      <summary>
            Reads if BiPot is installed from the EEPROM hw settings.
            </summary>
      <returns>
        <c>true</c> if BiPot installed.</returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.GetCutoffFrequency(PalmSens.CurrentRange,System.Int32)">
      <summary>
            Gets the cutoff frequency in Hz.
            </summary>
      <param name="range">The current range.</param>
      <param name="filter">The filterbyte as value between 0 and 4.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Devices.PalmSens4Capabilities.CanSendDuringMeasurement(System.Single)">
      <summary>
            Determine whether data can be send during measurement.
            </summary>
      <param name="tbase">base time</param>
      <returns>whether it can be sent</returns>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACPotential">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the potential.
            </summary>
      <value>
            The AnalogComponent for setting the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCPotential">
      <summary>
            Gets an object with values to calculate the potential from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACCurrent">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the current.
            </summary>
      <value>
            The AnalogComponent for setting the current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCCurrent">
      <summary>
            Gets an object with values to calculate the current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACAuxiliary">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the auxiliary output voltage.
            </summary>
      <value>
            The AnalogComponent for setting the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCAuxiliary">
      <summary>
            Gets an object with values to calculate the auxiliary voltage from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the auxiliary output voltage.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DACBiPot">
      <summary>
            Gets an object with values to calculate the instrument integer value for setting the bipot potential.
            </summary>
      <value>
            The AnalogComponent for setting the bipot potential.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.ADCBiPot">
      <summary>
            Gets an object with values to calculate the bipot current from the integer value received from the instrument.
            </summary>
      <value>
            The AnalogComponent for reading the bipot current.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.DefaultBaudRate">
      <summary>
            Gets the default baud rate.
            </summary>
      <value>
            The default baud rate.
            </value>
    </member>
    <member name="P:PalmSens.Devices.PalmSens4Capabilities.MinFirmwareVersionRequired">
      <summary>
            Gets the minimum firmware version required for use with this version of PalmSens.Core.
            </summary>
      <value>
            The minimum firmware version.
            </value>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxAmpMDAC">
      <summary>
            Vamp = 435 mV (measured)
            Vamp rms = 600 mV / sqrt(2)
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS4.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS4.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqCFFilterADC">
      <summary>
            ac Filter for different frequencies
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS4.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinEquilSines">
      <summary>
            Minimum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilSines">
      <summary>
            Maximum number of equilibration sines
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxEquilTime">
      <summary>
            Maximum time for equilibration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MinPointsac">
      <summary>
            The minimum number of points in a sine
            Absolute minimum number of points per sine is 8, 2 pts per segment  
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxPointsac">
      <summary>
            The maximum number of points in a sine
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxAmpMDAC">
      <summary>
            ( R98+R99 ) / ( R62+R63 ) * 5V / SQRT(2) = 0.35V;
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetFilterACByte(System.Single)">
      <summary>
            Gets the filter ac.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqA" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.HSTABMaxFreqB">
      <summary>
            HSTAB is only used when applied frequency in Hz is below this value
            For currentranges at 10 mA or higher
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.UseHSTAB(System.Single,System.SByte)">
      <summary>
             Check whether HSTAB should be used
            </summary>
      <param name="frequency">The frequency.</param>
      <param name="CRbyte">The current range rbyte.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqForRange">
      <summary>
            Maximum frequencies per current range
            Where index is equal to the current range byte (0=1nA, 1=10nA, etc.)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.acCoupledMinFreq">
      <summary>
            AC coupled measurements only when frequency is higher
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqPGAgain">
      <summary>
            MaxFrequency for PGAgain=0 (use line on AD0 on Atmel uC) is infinite 
            Value at index 0: Use PGAGain1 at lower frequencies than value
            Value at index 1: Use PGAGain2 ...
            Value at index 2: Use PGAGain3 ...
            ...
            1E-9f means NOT USED, value needed for practical reasons
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:PalmSens.Devices.EISSettingsPS3.IdleFraction" -->
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqAD16">
      <summary>
            Use 12 bit ADC when frequency is higher than this value (Hz)
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD12">
      <summary>
            Maximum sampling rate (Hz) of 12 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxRateAD16">
      <summary>
            Maximum sampling rate (Hz) of 16 bits ADC
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12A">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD12B">
      <summary>
            TODO: [4-3-14] needs to be determined!
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tSingleAD16A">
      <summary>
            Time for one AD concersion for the 16 bit
            tSingleAD nadc=1 -&gt; 1.8 us
            tSingleAD nadc&gt;1 -&gt; 2.04 us
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxLowFreqPhaseDelayCorrection">
      <summary>
            Use tpdSlope16LowFreq and tpdIntercept16LowFreq for phasedelay correction below this value
            instead of more accurate nPointsAC indexed offsets
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16LowFreq">
      <summary>
            Determined slope of phasedelay vs tintac for lower frequencies
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16LowFreq">
      <summary>
            Offset for phasedelay correction for lower frequencies
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope16">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset16">
      <summary>
            In seconds 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdSlope12">
      <summary>
            Determined slope of phasedelay vs tintac
            y axis = tphase, and x axis = tintac both in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tpdOffset12">
      <summary>
            In seconds
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead12">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 12 bit mode
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.tDAOverhead16">
      <summary>
            Overhead time for DA conversion and rest of sequence, so actualy (tintac - tPhasedelay)
            Used for the 16 bit mode
            </summary>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetDAOverhead(System.Single)">
      <summary>
            Gets the DA overhead.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>DA overhead time in s</returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GettSingleADConversion(System.Single)">
      <summary>
            Gets the time for a single AD conversion.
            </summary>
      <param name="frequency">The frequency in Hz.</param>
      <returns>
            time in s
            </returns>
    </member>
    <member name="M:PalmSens.Devices.EISSettingsPS3.GetSamplingRate(System.Single)">
      <summary>
            Gets the sampling rate for the given frequency.
            </summary>
      <param name="frequency">The frequency.</param>
      <returns>sampling rate</returns>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilter">
      <summary>
            Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.MaxFreqCFFilterADC">
      <summary>
            ADC Filter settings for each frequency
            See also: "bandwidth calculations ps3.xlsx" and GetFilterCFByte
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterAcFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibHSTABFreq0Default">
      <summary>
            Default value for HSTAB freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibAcCoupledFreq0Default">
      <summary>
            Default value for AC coupled freq0 to check calibration result on 
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibPGAGainFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="P:PalmSens.Devices.EISSettingsPS3.CalibFilterCFFreq0Defaults">
      <summary>
            Default values to check calibration results on
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Galvanostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Galvanostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CyclicPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CyclicPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.LinearPolarization.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.LinearPolarization.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.CorrosionPotential.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.CorrosionPotential.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>
            the abbrevation
            </returns>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="F:PalmSens.CorrosionTechniques.Potentiostatic.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.CorrosionTechniques.Potentiostatic.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.CurrentRange">
      <summary>
            Describes a specific current range
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.#ctor(System.SByte,System.String,System.Single)">
      <summary>
            crbyte values:
            -1 = 100 pA
            0 = 1 nA
            1 = 10 nA
            2 = 100 nA
            3 = 1 uA
            4 = 10 uA
            5 = 100 uA
            6 = 1 mA
            7 = 10 mA
            8 = 100 mA
            </summary>
      <param name="crbyte">The crbyte.</param>
      <param name="description">The description.</param>
      <param name="factor">The factor.</param>
    </member>
    <member name="M:PalmSens.CurrentRange.GetCRString(System.SByte)">
      <summary>
            The available current ranges as string
            </summary>
    </member>
    <member name="F:PalmSens.CurrentRange.AvailableCurrentRanges">
      <summary>
            The available current ranges as CurrentRange
            Where: 
            index=0 = 100pA
            index=1 = 1nA
            index=2 = 10nA
            index=3 = 100nA
            index=4 = 1uA
            ...
            </summary>
    </member>
    <member name="M:PalmSens.CurrentRange.GetRanges(System.Int32,System.Int32)">
      <summary>
            Gets the range array.
            </summary>
      <param name="minRange">The min range as int from -1 (100 pA) to 8 (100 mA).</param>
      <param name="maxRange">The max range as int from -1 (100 pA) to 8 (100 mA).</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromMicroamps(System.Double)">
      <summary>
            Returns CurrentRange from a range given in microamps as a double.
            </summary>
      <param name="p">The currentrange in microamps.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.FromCRByte(System.SByte)">
      <summary>
            Returns CurrentRange from a range given as a byte from 0 - 7.
               -1 = "100 pA"
               0 = "1 nA"
               1 = "10 nA"
               2 = "100 nA"
               3 = "1 uA"
               4 = "10 uA"
               5 = "100 uA"
               6 = "1 mA"
               7 = "10 mA"
            
               F = "100 pA"
            </summary>
      <param name="p">The currentrange as a byte.</param>
      <returns>CurrentRange</returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Lower">
      <summary>
            Returns one CurrentRange lower than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Higher">
      <summary>
            Returns one CurrentRange higher than this range
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format(System.Double)">
      <summary>
            Formats the specified current provided in uA
            </summary>
      <param name="current">The current.</param>
      <returns>
            the formatted current
            </returns>
    </member>
    <member name="M:PalmSens.CurrentRange.Format2(System.Double)">
      <summary>
            Formats the specified current provided in the range as is this class
            </summary>
      <param name="current">The current in the selected range (-2 to 2).</param>
      <returns>the formatted current</returns>
    </member>
    <member name="T:PalmSens.DataFiles.AnalysisMeasurementFile">
      <summary>
            Class for storing and loading PalmScan analysis files
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Method,System.IO.Stream)">
      <summary>
            Load an Analysis from file
            </summary>
      <param name="strfilename">path to mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new Analysisfile for the specified measurement
            </summary>
      <param name="m">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Load(System.IO.Stream)">
      <summary>Loads an analysis file containing multiple Curves.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.AnalysisMeasurementFile.Save(System.IO.Stream)">
      <summary>Saves multiple Curves to an analysis file.</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CSVDataFile">
      <summary>
            Save files as comma-separated values file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CSVDataFile.SaveCurves(System.IO.Stream,PalmSens.Plottables.Curve[])">
      <summary>
            Saves the specified filename in comma-separated values (CSV) format.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="curves">The curve(s).</param>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Logf">
      <summary>Log(f) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Phase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Idc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.ZIm">
      <summary>Z'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.LogY">
      <summary>Log(Y) values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.DataFiles.CSVDataFile.EnumEISDataColumns.CR">
      <summary>Current Range values</summary>
    </member>
    <member name="T:PalmSens.DataFiles.CurveFile">
      <summary>
            Class for storing/loading curves in the PalmScan/PalmTime format
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.CurveFile.Curve">
      <summary>
            Curve associated with this CurveFile
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionScan">
      <summary>
            Extension for scan data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileExtensionTime">
      <summary>
            Extension for vs time data files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.FileDialogFilter">
      <summary>
            Can be used to load and save curves using the System.Windows.Forms.FileDialog
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.CurveFile.Method">
      <summary>
            Method used
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Saves the specified curve with appropriate extension.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename with or without extension. Correct extension is added automatically if needed.</param>
      <param name="c">The curve.</param>
      <param name="changeTitle">if set to <c>true</c> curve title is changed to filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,System.IO.StreamReader,PalmSens.DataFiles.MethodFileType,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="methodStream">location of method file to load with this curve file. Can be NULL if not available.</param>
      <param name="methodFileType">location of method file to load with this curve file</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(System.IO.StreamReader,PalmSens.Method,System.String)">
      <summary>
            Load the CurveFile at the specified location
            </summary>
      <param name="fileStream">location of curvefile to load</param>
      <param name="method">Method file to load with this curve file.</param>
      <param name="filepath">location of method file to load with this curve file</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create a new curvefile for the specified curve
            </summary>
      <param name="c">curve to save</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:PalmSens.DataFiles.CurveFile.Save(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Saves a single curve to a file. This file is compatible with PalmSens software.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filename">path to save curve to</param>
      <param name="changeTitle">if set to <c>true</c>, the curve title is set to the filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.DataFile">
      <summary>
            Base class for storing/loading data from files
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.POLE">
      <summary>
            Replacement for pole |, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.SPACE">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.TAB">
      <summary>
            Replacement for space, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.CRLF">
      <summary>
            Replacement for carriage return line feed, used for loading/saving
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.DataFile.NumberFormat">
      <summary>
            Default numberformat used when storing integer and floating-point data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToSingle(System.String)">
      <summary>
            Convert a string to a single using the current numberformat
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding single or 0.0F if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToInt(System.String)">
      <summary>
            Convert a string to an integer
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding integer value or 0 if no conversion was possible</returns>
    </member>
    <member name="M:PalmSens.DataFiles.DataFile.ToBool(System.String)">
      <summary>
            Convert a string to a boolean
            </summary>
      <param name="s">string to convert</param>
      <returns>corresponding boolean</returns>
    </member>
    <member name="T:PalmSens.DataFiles.EISAnalysisFile">
      <summary>
            Saves the EIS data as a file, compatible with EIS Spectrum Analyzer
            http://www.abc.chemistry.bsu.by/vi/analyser/
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.EISDataFile">
      <summary>
             Class for storing/loading in PSImp format
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.EISDataFile.FileExtension">
      <summary>
            Value is ".pseisdata"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.DataFiles.EISDataFile" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.EISDataFileAsync(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.DataFiles.EISDataFile" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.Save(System.String,PalmSens.Plottables.EISData,System.IO.Stream,System.String)">
      <summary>
            Saves the specified EIS data as .pseisdata file
            </summary>
      <param name="source">The source (program name and version).</param>
      <param name="eisdata">The EISData.</param>
      <param name="filename">The filename.pseisdata</param>
    </member>
    <member name="M:PalmSens.DataFiles.EISDataFile.FromStream(System.IO.Stream)">
      <summary>
            Loads EIS data from .pseisdata file.
            </summary>
      <param name="fileStream">The filename.</param>
    </member>
    <member name="T:PalmSens.DataFiles.JsonToken">
      <summary>
            Possible JSON tokens in parsed input.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.InvalidJsonException">
      <summary>
            Exception raised when <see cref="T:PalmSens.DataFiles.JsonParser" /> encounters an invalid token.
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.JsonParser">
      <summary>
            A parser for JSON.
            <seealso cref="!:http://json.org" /></summary>
    </member>
    <member name="T:PalmSens.DataFiles.MeasurementFile">
      <summary>
            Base class with support functions for saving/storing measurement data
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MeasurementFile.Measurement">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor">
      <summary>
            Create a new measurement file with an empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.#ctor(PalmSens.Measurement)">
      <summary>
            Create a new MeasurementFile for the specified measurement
            </summary>
      <param name="mm">measurement to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.LoadCommonCurves(System.String[],System.IO.StreamReader,System.Int32)">
      <summary>
            Load curve data from a measurement file
            </summary>
      <param name="captions">
      </param>
      <param name="file">StreamReader to read the data from</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCurves(System.IO.Stream)">
      <summary>Saves multiple Curves to a file. This format is NOT supported by Palm Instruments' PalmScan and PalmTime or Pocket PC older than versions 2.0.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MeasurementFile.SaveCommonCurves(System.IO.StreamWriter)">
      <summary>
            Save the curve data from this measurement to file
            </summary>
      <param name="file">StreamWriter to write to</param>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile">
      <summary>
            Saves and loads files in a format supported by Palm Instruments and Ivium PalmSens software.
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.Filename">
      <summary>returns the currently used filename for this method.</summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Method">
      <summary>returns the Method.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Save(System.String)">
      <summary>Saves the methodparameters to a file compatible with common PalmSens software.
            OLD STYLE, DO NOT USE</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EField">
      <summary>
            Correponding variable names for the potential fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tField">
      <summary>
            Corresponding variable names for the time fields
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.ELabel">
      <summary>Each Evalue has it's Elabel with the same index, describing the function of the value. The Elabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tLabel">
      <summary>Each tValue has it's tLabel with the same index, describing the function of the value. The tLabel for a tValue may differ for each technique.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EUnit">
      <summary>Each Evalue has it's EUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tUnit">
      <summary>Each tValue has it's tUnit with the same index, describing the unit of the value.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMin">
      <summary>Describes the minimum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMin">
      <summary>Describes the minimum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.EMax">
      <summary>Describes the maximum for the Evalue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.tMax">
      <summary>Describes the maximum for the tValue with the same index.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.HandleAsCorrosionMethod">
      <summary>
            If true; include the parameters used for corrosion
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32,System.Boolean)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <param name="includeCorrosionVars">if true; include the parameters used for corrosion</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(PalmSens.Method)">
      <summary>
            Create a new methodfile instance based on an existing method
            </summary>
      <param name="method">PalmSens.Method method</param>
      <returns>clone of method as methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromTechnique(System.Int32)">
      <summary>
            Create a new methodfile instance based on technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) methodfile instance</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String)">
      <summary>Loads an existing method.</summary>
      <param name="file">The methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.FromStream(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads an existing method.
            </summary>
      <param name="fileStream">The methodfile</param>
      <param name="includeCorrosionVars">if set to <c>true</c> include corrosion variables for this method (if applicable)</param>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelY">
      <summary>The label for the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile.LabelX">
      <summary>The label for the X axis of the plot.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.GetMethodData(System.String)">
      <summary>
            Get method data.
            </summary>
      <param name="name">name of parameter</param>
      <returns>value</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single,System.Int32)">
      <summary>
            Change the t[index] or val[index] for Multistep methods
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
      <param name="index">index for val (which is for E or i)</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.SetMethodData(System.String,System.Single)">
      <summary>
            Change the value for a method parameter
            </summary>
      <param name="name">parameter name</param>
      <param name="data">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_EValue(System.Int32)">
      <summary>
            Contains all potential related parameters of the method.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_EValue(System.Int32,System.Single)">
      <summary>
            Change value of potential parameterFS
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new parameter value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.get_tValue(System.Int32)">
      <summary>
            Obtain value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <returns>value of parameter</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.set_tValue(System.Int32,System.Single)">
      <summary>
            Change value of time parameter
            </summary>
      <param name="i">index of parameter</param>
      <param name="Value">new value</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Load a method file. This will read the first few line from the 
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Load a method file. This will read the first few line from the
            method file and then call LoadDifferentPart()
            </summary>
      <param name="file">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if set to <c>true</c> [handle as corrosion method].</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.#ctor">
      <summary>
            Create a new MethodFileOld
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.Technique">
      <summary>returns the indexnumber for this technique.</summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.Equals(System.Object)">
      <summary>
            Check whether this object is equal to o
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.ScanMethodExtension">
      <summary>
            Gets the extension for old style scan method files (.pms).
            </summary>
      <value>
            The scan method extension (.pms).
            </value>
    </member>
    <member name="P:PalmSens.DataFiles.MethodFile.TimeMethodExtension">
      <summary>
            Gets the extension for old style time method files (.pmt).
            </summary>
      <value>
            The time method extension (.pmt).
            </value>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile.LoadAnyMethodFile(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Loads any PalmSens method file (.pms, .pmt or .psmethod).
            </summary>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="fileName">The filename.</param>
      <param name="isCorrosion">if set to <c>true</c> [is corrosion].</param>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPms">
      <summary>
            Old style method filetype (.pms)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFileOldPmt">
      <summary>
            Old style method filetype (.pmt)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFileType.MethodFile2">
      <summary>
            New style methodfile filetype (.psmethod)
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.MethodFile2">
      <summary>
            Save method file to PSTrace methodfile format version 2.0
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.FileExtension">
      <summary>
            Value is ".psmethod"
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MethodFile2.DialogFilter">
      <summary>
            The FileDialog filter string for loading and saving method file dialog
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Save(PalmSens.Method,System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file.
            Stream is automatically closed afterwards.
            </summary>
      <param name="method">The method.</param>
      <param name="fileStream">The stream containing the file data.</param>
      <param name="filepath">The filepath.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Serialize(PalmSens.Method,System.IO.TextWriter,System.String,System.String)">
      <summary>
            Save method to a PSTrace compatible method file
            </summary>
      <param name="method">The method.</param>
      <param name="tw">TextWriter to serialize to.</param>
      <param name="changeTitle">if set to <c>true</c> MethodFilename is changed.</param>
      <param name="sourceApllication">The apllication name used to generate this file.</param>
      <param name="sourceApplicationVersion">The version of the application used to generate this file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.FromStream(System.IO.StreamReader)">
      <summary>
            Read a file containing method parameters and return the Method
            </summary>
      <returns>A method</returns>
    </member>
    <member name="M:PalmSens.DataFiles.MethodFile2.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
      <returns>Method</returns>
    </member>
    <member name="T:PalmSens.DataFiles.MuxMeasurementFile">
      <summary>
            Class for loading/storing multiple curves data in one file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.MuxMeasurementFile.FileExtension">
      <summary>
            Value is ".mux"
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.#ctor(PalmSens.Method,System.IO.StreamReader)">
      <summary>
            Load a multiple curves measurement from file
            </summary>
      <param name="fileStream">Stream of mux data file</param>
      <param name="m">method file used</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Load(System.IO.StreamReader)">
      <summary>Loads a multiple curves file containing multiple Curves.</summary>
      <param name="fileStream">path to mux data file</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.LoadOldMuxFile(System.IO.StreamReader,System.Int32,System.Int32)">
      <summary>
            Load curve data from an old style mux file, used on the PocketPC
            </summary>
      <param name="file">StreamReader to read the data from</param>
      <param name="nPoints">number of points to read</param>
      <param name="nCurves">number of curves to read</param>
    </member>
    <member name="M:PalmSens.DataFiles.MuxMeasurementFile.Save(System.IO.Stream,PalmSens.Plottables.Curve[],PalmSens.Method,System.Boolean)">
      <summary>
            Saves multiple curves to a mux file.
            </summary>
      <remarks>In case the source of the curve array is from a multiplexer measurement, 
            the curves are saved with the title 'Channel n', where n is the number. 
            The MuxChannel property of every curve is used to determine which channels are saved.
            This is saved as a 16 bits unsined integer (so for max. 16 channels) on the 3rd line 
            of the file. In case isMultiplexer = false, this value is set to -1 so the channel numbers are ignored.
            </remarks>
      <param name="fileStream">Stream to save to</param>
      <param name="curveArray">Array of curves to save</param>
    </member>
    <member name="T:PalmSens.DataFiles.ScanMethodFile">
      <summary>
            Class for loading/saving PalmScan method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.ScanMethod">
      <summary>
            The corresponding Scan Method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.ScanMethodFile.Method">
      <summary>
            Corresponding Method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor">
      <summary>
            Create a new empty instance.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.RefreshMethod">
      <summary>
            Set method data again.
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
      <param name="includeCorrosionVars">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(PalmSens.ScanMethod)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="scanmethod">method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create a new instance for the specified method
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
      <param name="handleAsCorrosionMethod">if <c>true</c> include the parameters used for corrosion (if applicable)</param>
    </member>
    <member name="M:PalmSens.DataFiles.ScanMethodFile.Save(System.String)">
      <summary>Saves the current method to a file</summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.Measurements">
      <summary>
            Measurement loaded from this file
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MetaData">
      <summary>
            Metadata for this PSSession (includes information about visible curves and such)
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.MethodForEditor">
      <summary>
            The method currently active in the method editor
            </summary>
    </member>
    <member name="F:PalmSens.DataFiles.SessionFile.FileExtension">
      <summary>
            The default file extension
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor(PalmSens.Measurement[],PalmSens.Method,PalmSens.DataFiles.JsonBag)">
      <summary>
            Create a new PSSessionFile for the specified measurement
            </summary>
      <param name="measurements">Measurements to save.</param>
      <param name="methodForEditor">The method selected for next measurement. This is the active method in the method editor of PSTrace.</param>
      <param name="metaData">Contains meta data to be saved with the session file.</param>
    </member>
    <member name="M:PalmSens.DataFiles.SessionFile.#ctor">
      <summary>
            Create a new PSSessionFile
            </summary>
    </member>
    <member name="T:PalmSens.DataFiles.TimeMethodFile">
      <summary>
            Class for storing/load PalmTime method files
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.TimeMethod">
      <summary>
            Active time method
            </summary>
    </member>
    <member name="P:PalmSens.DataFiles.TimeMethodFile.Method">
      <summary>
            Active method
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor">
      <summary>
            Create new empty instance
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(PalmSens.TimeMethod,System.Boolean)">
      <summary>
            Create new instance for the specified method
            </summary>
      <param name="timemethod">time method to use</param>
      <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.#ctor(System.IO.StreamReader,System.String,System.Boolean)">
      <summary>
            Create new instance, loading data from specified file
            </summary>
      <param name="fileStream">Stream containing the file data</param>
      <param name="fileName">path to methodfile</param>
            /// <param name="handleAsCorrosionMethod">if true; include the parameters used for corrosion</param></member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.RefreshMethod">
      <summary>
            Reload method data
            </summary>
    </member>
    <member name="M:PalmSens.DataFiles.TimeMethodFile.Save(System.String)">
      <summary>Saves the current method to a file.</summary>
      <param name="strFilename">path to save to</param>
    </member>
    <member name="T:PalmSens.Data.EnumAxes">
      <summary>
            Axis enumerator
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.StartIndex">
      <summary>
            The start index of the new points that where added
            In the case of a CV this refers to the total points
            in the scan not too the number of points in each curve.
            </summary>
    </member>
    <member name="F:PalmSens.Data.ArrayDataAddedEventArgs.Count">
      <summary>
            The number of points added
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayType">
      <summary>
            Data array function enumerator for standard arrays
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray">
      <summary>
            Contains an array of generic values as part of a DataSet
            </summary>
    </member>
    <member name="F:PalmSens.Data.DataArray.Hidden">
      <summary>
            Hidden data arrays will not show up for the user. 
            They can be used for debug or calibration purposes
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArray.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Data.DataArray.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the DataArray class.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArray.OnNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added.
            </summary>
      <param name="nNewValuesAdded">The n new values added.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.InvokeNewDataAdded(PalmSens.Data.ArrayDataAddedEventArgs)">
      <summary>
            Invokes the NewDataAdded event.
            </summary>
      <param name="e">The <see cref="T:PalmSens.Data.ArrayDataAddedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="F:PalmSens.Data.DataArray.Unit">
      <summary>
            Gets the unit used for this data array.
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetIndexArray">
      <summary>
            Gets an array of indices with the same lenght as this array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
            /// <param name="type">The data type stored in this DataArray.</param></member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            The value type is assumed to be GenericValue.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="type">The data type stored in this DataArray.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.#ctor(System.String,PalmSens.Units.Unit,System.String,PalmSens.Data.DataArrayType)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.DataArray" /> class.
            DataArray is not part of a DataSet, since no index is provided.
            The Array can be assigned an index later to be added to a DataSet.
            </summary>
      <param name="description">The description.</param>
      <param name="unit">The unit.</param>
      <param name="dataValueTypeStr">The value type of the datapoints.</param>
    </member>
    <member name="M:PalmSens.Data.DataArray.Smooth(System.Int32)">
      <summary>
            Smoothes the data using the Savitzky-Golay filter: 
            https://en.wikipedia.org/wiki/Savitzky%E2%80%93Golay_filter 
            </summary>
      <param name="smoothLevel">The smooth level. 0, 1, 2, 3 or 4</param>
      <exception cref="T:System.Exception">
            Invalid smoothlevel  + SmoothLevel.ToString()
            </exception>
    </member>
    <member name="M:PalmSens.Data.DataArray.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues">
      <summary>
            Gets the values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetValues(System.Double,System.Int32,System.Int32)">
      <summary>
            Gets the values.
            </summary>
      <param name="offset">The offset.</param>
      <param name="startIndex">The starting index.</param>
      <param name="count">The amount of datapoints to inlcude.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataArray.GetDirection(System.Int32)">
      <summary>
            Gets the direction of the data in the array at the specified index (compared to preceeding value).
            </summary>
      <value>
            The direction.
            </value>
    </member>
    <member name="M:PalmSens.Data.DataArray.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayTime">
      <summary>
            Contains an array of tie values as part of a DataSet
            </summary>
      <seealso cref="T:PalmSens.Data.DataArray" />
    </member>
    <member name="M:PalmSens.Data.DataArrayTime.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayPotentials">
      <summary>
            Contains an array of potential values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayPotentials.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCurrents">
      <summary>
            Contains an array of current values as part of a DataSet
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataArrayCurrents.Clone(System.Boolean)">
      <summary>
            Clones this instance.
            </summary>
      <param name="includingData">if set to <c>true</c> [including data].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Data.DataArrayCharge">
      <summary>
            DataArray calculating charge from TimeDataArray and CurrentDataArray
            </summary>
      <seealso cref="T:PalmSens.Data.DataArrayIntegrate" />
    </member>
    <member name="T:PalmSens.Data.DataArrayDerivative">
      <summary>
            Creates a new DataArray that calculates the derivative for each value in DataArrayY based on the first two indices of the DataArrayX (dx = Abs(DataArrayX[1]-DataArrayX[0]).
            Use DataArrayFunc.GetDataArrayDerivative(DataArrayX, DataArrayY) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayDerivative.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataArrayLog">
      <summary>
            Creates a new DataArray that performs a mathematical function on all returned values.
            Use DataArrayFunc.GetDataArrayLog(DataArray) to instantiate a new class.
            </summary>
      <seealso cref="T:System.Collections.Generic.IList`1" />
    </member>
    <member name="M:PalmSens.Data.DataArrayLog.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSet">
      <summary>
            A DataSet contains multiple arrays of values. All values are related by means of their indices.
            DataArrays in a DataSet should always have an equal amount of entries.
             </summary>
    </member>
    <member name="E:PalmSens.Data.DataSet.MultipleArraysNewDataAdded">
      <summary>
            Occurs when new data was added during a measurement.
            When this event is triggered all DataArrays have equal lenghts.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnMultipleArraysNewDataAdded(System.Int32)">
      <summary>
            Called when new data was added to multiple arrays.         
            Arrays could have inequal lengths before the measurement is finished when a measurement has multiple scans.
            (each scan has its own array, therefore, during the measurement their lengths are not necessarily equal).
            </summary>
    </member>
    <member name="P:PalmSens.Data.DataSet.NPoints">
      <summary>
            Gets the number of points in each DataArray.
            </summary>
      <value>
            The number of points.
            </value>
    </member>
    <member name="P:PalmSens.Data.DataSet.IsFinished">
      <summary>Is true if a Curve is 'finished'. This means that smoothing or peak searching can be applied.</summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.Finish">
      <summary>
            Finishes this instance meaning that NPoints is fixed.
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.AddDataArray(PalmSens.Data.DataArray)">
      <summary>
            Adds the data array to the collection.
            </summary>
      <param name="newArray">The new array.</param>
      <returns>The added data array</returns>
      <exception cref="T:PalmSens.Data.DataArrayAlreadyExistsException">
      </exception>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays">
      <summary>
            Gets the data arrays which are not hidden (DataArray.Hidden == false).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(PalmSens.Data.DataArrayType)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.GetDataArrays(System.Int32)">
      <summary>
            Gets all arrays of the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32)">
      <summary>
            Triggers NewDataAdded event for all related DataArrays
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAddedAsync(System.Int32)">
      <summary>
            Triggers NewDataAdded event for all related DataArrays
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAdded(System.Int32,System.Collections.Generic.List{PalmSens.Data.DataArray})">
      <summary>
            Triggers NewDataAdded event for the specified DataArrays
            Used for CV where each scan is a new array
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.OnNewDataAddedAsync(System.Int32,System.Collections.Generic.List{PalmSens.Data.DataArray})">
      <summary>
            Triggers NewDataAdded event for the specified DataArrays
            Used for CV where each scan is a new array
            </summary>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveDataPointFromAllArrays(System.Int32)">
      <summary>
            Removes the datapoint at the specified index from all arrays in this DataSet.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(PalmSens.Data.DataArrayType)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.RemoveType(System.Int32)">
      <summary>
            Removes all data arrays for the given type.
            </summary>
      <param name="arrayType">Type of the array.</param>
    </member>
    <member name="M:PalmSens.Data.DataSet.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Data.DataSetCommon">
      <summary>
            Contains values for Time, Potential and Current
            </summary>
      <seealso cref="T:PalmSens.Data.DataSet" />
    </member>
    <member name="T:PalmSens.Data.DataSetEIS">
      <summary>
            The default DataSet for EIS measurements used by EISData object
            </summary>
      <seealso cref="T:PalmSens.Data.DataSetCommon" />
    </member>
    <member name="M:PalmSens.Data.IDataValue.Copy">
      <summary>
            Adressing a DataValue as a IDataValue boxes it as a reference (so for a deep copy we then need a copy function)
            </summary>
    </member>
    <member name="T:PalmSens.Data.CurrentReading">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.#ctor(System.Double,PalmSens.CurrentRange,PalmSens.Comm.ReadingStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Data.CurrentReading" /> struct.
            </summary>
      <param name="value">The value in uA.</param>
      <param name="range">The range used.</param>
      <param name="status">The status.</param>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.ValueInRange">
      <summary>
            The current in the corresponding current range
            </summary>
    </member>
    <member name="P:PalmSens.Data.CurrentReading.Value">
      <summary>
            The current in uA 
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.CurrentRange">
      <summary>
            The current range used for this reading
            </summary>
    </member>
    <member name="F:PalmSens.Data.CurrentReading.ReadingStatus">
      <summary>
            The reading status
            </summary>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValue">
      <summary>
            Gets the formatted value in uA.
            </summary>
      <returns>Formatted with exponential</returns>
    </member>
    <member name="M:PalmSens.Data.CurrentReading.GetFormattedValueInCR">
      <summary>
            Gets the formatted value in the current range.
            </summary>
      <returns>Example: 0.5000</returns>
    </member>
    <member name="M:PalmSens.Data.VoltageReading.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 1.2341 V</returns>
    </member>
    <member name="M:PalmSens.Data.GenericValue.GetFormattedValue">
      <summary>
            Gets the formatted value.
            </summary>
      <returns>Example: 0.123</returns>
    </member>
    <member name="T:PalmSens.Data.DeviceFile">
      <summary>
            Represents a measurement file from a device
            </summary>
    </member>
    <member name="T:PalmSens.Data.SessionManager">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Measurement" />
    </member>
    <member name="F:PalmSens.Data.SessionManager.CurveCollection">
      <summary>
            Collection of all available curves in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.EISDataCollection">
      <summary>
            Collection of all available EISData in all measurements in this SessionManager
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.AnalyticalMode">
      <summary>
            If <c>true</c> the peak search uses the ScanMethod.PeakWindow value for peak detection
            </summary>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UseBlankIfAvailable">
      <summary>
            The use blank if available
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedCurve">
      <summary>
            Gets or sets the user selected curve.
            TreeViewCurves sets this value when a new curve is added to its list.
            </summary>
      <value>
            The user selected curve.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedEISData">
      <summary>
            Gets or sets the selected EIS data.
            TreeViewEISData sets this value when a new curve is added to its list.
            </summary>
      <value>
            The selected EIS data.
            </value>
    </member>
    <member name="F:PalmSens.Data.SessionManager.UserSelectedDataType">
      <summary>
            The selected data type by a user. This field can be used to determine UI actions based on what is currently selected by the user.
            Used in PSTrace to determine what kind of data is selected in the Legend.
            </summary>
    </member>
    <member name="P:PalmSens.Data.SessionManager.SelectedMeasurement">
      <summary>
            Gets or sets the selected measurement.
            </summary>
      <value>
            The selected measurement.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.MethodForEditor">
      <summary>
            Gets or sets the method that will be used for the next measurement.
            This property is reflected in MethodEditor if SessionManager is initialized with MethodEditor.InitSessionManager
            Event MethodForMeasurementChanged is triggered when value changed.
            </summary>
      <value>
            The method to be used for next measurement.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Load(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Loads the specified filename.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="filepath">The filename with full path which will be used to set the <c>SavedToFile</c> property of Measurements, Curves and EISData classes.</param>
      <param name="add">if set to <c>true</c> do not clear collection before load.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.AddMeasurement(PalmSens.Measurement)">
      <summary>
            Adds the measurement to the collection. Raises MeasurementsAdded.
            </summary>
      <param name="m">The Measurement.</param>
      <returns>The added measurement</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInAllMeasurements">
      <summary>
            Finds the peaks or levels in all curves in all Measurements in this SessionManager using parameters from corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.FindPeaksOrLevelsInSelectedCurve">
      <summary>
            Finds the peaks or levels in SelectedCurve using the Method parameters from the corresponding Measurement.Method.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevels">
      <summary>
            Removes all existing peaks or levels in all Curves of all Measurements in this SessionManager.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveAllPeaksOrLevelsSelectedCurve">
      <summary>
            Removes all peaks or levels in SelectedCurve;
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCurveForMeasType(PalmSens.MeasType)">
      <summary>
            Gets the curve for the given measType if exists.
            There's only one curve available for each special measType in the SessionManager.
            </summary>
      <param name="measType">Type of the measurement.</param>
      <returns>The Curve designated with the given measType</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForCurve(PalmSens.Plottables.Curve)">
      <summary>
            Gets the measurement owner of the specified Curve.
            </summary>
      <param name="c">The c.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetMeasurementForEISData(PalmSens.Plottables.EISData)">
      <summary>
            Gets the measurement owner of the specified EISData.
            </summary>
      <param name="eisData">The EISData.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetAvailableAnalysisCurvesCount">
      <summary>
            Gets the number of available analysis curves, meaning curves with MeasType = Sample or Standard_1 or Standard_2, etc.
            </summary>
      <returns>The number of curves that can be used for concentration determination</returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveMeasurement(PalmSens.Measurement,System.Boolean)">
      <summary>
            Removes the Measurement from the collection. Raises MeasurementsBeginRemoving before actual removal. 
            </summary>
      <param name="m">The Measurement.</param>
    </member>
    <member name="M:PalmSens.Data.SessionManager.ClearMeasurements(System.Boolean)">
      <summary>
            Clears all Measurements in the collection. Raises MeasurementsBeginRemoving before actual removal.
            </summary>
    </member>
    <member name="M:PalmSens.Data.SessionManager.GetCollection">
      <summary>
            Gets the collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Data.SessionManager.Count">
      <summary>
            Gets the number of Measurements.
            </summary>
      <value>
            The number of Measurements in the collection.
            </value>
    </member>
    <member name="P:PalmSens.Data.SessionManager.AutoPeaks">
      <summary>
            Gets or sets a value indicating whether [automatic peaks].
            </summary>
      <value>
        <c>true</c> if [automatic peaks]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Data.SessionManager.RemoveCurves(PalmSens.Plottables.Curve[],System.Boolean)">
      <summary>
            Removes the curves from their corresponding measurements.
            Raises CurvesBeginRemoving event, which is used in SessionTree to reflect the changes
            </summary>
      <param name="curves">The curves.</param>
      <param name="deleteEmptyMeasurement">if set to <c>true</c> delete empty measurements (no Curves).</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:PalmSens.Data.SessionManager.RemoveEISData(PalmSens.Plottables.EISData[],System.Boolean)" -->
    <member name="M:PalmSens.Data.SessionManager.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:PalmSens.Data.SessionManager.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod">
      <summary>
            Helper class for generating protocol data
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethod.checksum">
      <summary>
            Calculate the checksum for this encodedmethod
            </summary>
      <returns>Checksum</returns>
    </member>
    <member name="T:PalmSens.EncodedMethod.enumOptions">
      <summary>
            intBits1 is from 0x0100 to 0x8000
            intBits2 is from 0x0001 to 0x0080
            Possible options
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseBlank">
      <summary>
            Measurement blank curve before actual curve
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PowerFreq50">
      <summary>
            Work for 50Hz power frequency
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.UseStirrer">
      <summary>
            Enable use of stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Equilibration">
      <summary>
            Enable equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Deposition">
      <summary>
            Enable deposition equilibration pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.Conditioning">
      <summary>
            Enable conditioning pretreatment phase
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.PlotOnline">
      <summary>
            Enable online plotting
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.NoAutoRanging">
      <summary>
            Disable autoranging
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnAfterMeasurement">
      <summary>
            Enable cell when measurement is finished
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.CellOnDuringMeasurement">
      <summary>
            Enable cell during measurement
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.enumOptions.GalvanostatMode">
      <summary>
            Use galvanostat mode
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethod.MeasurementIntervalUnit">
      <summary>
            Units for measurement intervaltime
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.HthSeconds">
      <summary>
            128th seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Seconds">
      <summary>
            Seconds
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Minutes">
      <summary>
            Minutes
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethod.MeasurementIntervalUnit.Hours">
      <summary>
            Hours
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV0">
      <summary>
            Original format method.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV0.ADTcycle">
      <summary>
            time of one machine cycle
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.ADTimingUnit">
      <summary>
            Timing unit used to convert times sent to PalmSens. In (fractional) seconds.
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.checksum">
      <summary>
            Determine the checksum for this EncodedMethod
            </summary>
      <returns>checksum</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime(System.Int32,System.Single)">
      <summary>
            Set time (mostly used for small amounts)
            </summary>
      <param name="position">position to add at</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetTime2(System.Int32,System.Single)">
      <summary>
            Set time (used for larger amounts of time)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Item(System.Int32)">
      <summary>
            Get/Set 8-bit integer
            </summary>
      <param name="position">position</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16LE(System.Int32,System.UInt16)">
      <summary>
            Encode a Little-Endian 16-bits integer
            </summary>
      <param name="position">position in the blob</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16BE(System.Int32,System.UInt16)">
      <summary>
            Encode a Big-Endian 16-bits integer
            </summary>
      <param name="position">position to encode at</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetInt16(System.Int32,System.UInt16)">
      <summary>
            Set 16-bit integer (Little-Endian)
            </summary>
      <param name="position">position</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalog(System.Int32,System.Single)">
      <summary>
            Set analog value (used for potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetAnalogDiff(System.Int32,System.Single)">
      <summary>
            Set analog differential value (potentials)
            </summary>
      <param name="position">position</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetBool(System.Int32,System.Int32)">
      <summary>
            Set bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.GetBool(System.Int32,System.Int32)">
      <summary>
            Get bool
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ResetBool(System.Int32,System.Int32)">
      <summary>
            Unset bool bit
            </summary>
      <param name="pos">position</param>
      <param name="bit">bit value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.ToString">
      <summary>
            Convert to string. Will return a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV0.SetCurrentRange(System.Int32,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="position">position</param>
      <param name="value">value, in nA</param>
    </member>
    <member name="P:PalmSens.EncodedMethodV0.Length">
      <summary>
            Number of bytes used
            </summary>
    </member>
    <member name="T:PalmSens.EncodedMethodV1">
      <summary>
            Method format for EmStat and PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.EncodedMethodV1.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Set(System.String,System.String)">
      <summary>
            Set parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="data">value of parameter</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.Get(System.String,System.String)">
      <summary>
            Get parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" was found if set to <c>true</c></param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="name">name of parameter</param>
      <param name="cr">current range</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetCurrentRange(System.String,PalmSens.CurrentRange)">
      <summary>
            Set current range
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <returns>
            Value
            </returns>
    </member>
    <member name="T:PalmSens.EncodedMethodV1.Options">
      <summary>
            Options bits
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PlotOffline">
      <summary>
            Whether data should be stored rather than sent online.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.AlternatingMux">
      <summary>
            Alternating multiplexer measurement.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.CellOnAfterMeasurement">
      <summary>
            Turn on cell after measurement is finished.
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseStirrer">
      <summary>
            Enable the stirrer
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.PulsedAmpDetectionPulse">
      <summary>
             Option
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMin">
      <summary>
            Use a minimum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseLimitMax">
      <summary>
            Use a maximum current limit
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.IsPartOfMixedMeasurement">
      <summary>
            Instrument does not go in to idle mode after measurement finished
            used for multistep amp and pot
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnEquil">
      <summary>
            Whether to set a digital trigger at the start of the equilibration period
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnStart">
      <summary>
            Whether to set a digital trigger at the start of the measurment (after equilibration)
            </summary>
    </member>
    <member name="F:PalmSens.EncodedMethodV1.Options.UseTriggerOnDelay">
      <summary>
            Whether to set a digital trigger after a certain delay after the start of the measurment
            </summary>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetDelay(System.String,System.Double)">
      <summary>
            Set delay
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetTimeCon(System.String,System.Single)">
      <summary>
            Set time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="dec">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetTimeCon(System.String,System.Single)">
      <summary>
            Get time (using TIMECON register on microprocessor)
            </summary>
      <param name="name">name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt8(System.String,System.Byte)">
      <summary>
            Set 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt8(System.String,System.Byte)">
      <summary>
            Get 1-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt16(System.String,System.UInt16)">
      <summary>
            Encode a 16-bits integer
            </summary>
      <param name="name">name</param>
      <param name="dec">integer to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt16(System.String,System.UInt16)">
      <summary>
            Get 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="defaultVal">The default value.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetInt32(System.String,System.UInt32)">
      <summary>
            Set 2-byte integer parameter.
            </summary>
      <param name="name">name of parameter</param>
      <param name="b">byte</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetInt32(System.String,System.UInt32)">
      <summary>
            Get 4-byte integer parameter.
            </summary>
      <param name="defaultVal">The default value.</param>
      <param name="name">name of parameter</param>
      <param name="found">"name" found if set to <c>true</c>.</param>
      <returns>
            The value
            </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value to encode</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.GetAnalog(System.String,System.Single)">
      <summary>
            Set analog unipolar value (used for potentials)
            </summary>
      <param name="name">parameter name</param>
      <param name="defaultVal">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetAnalogDiff(System.String,System.Single)">
      <summary>
            Set analog bipolar value
            </summary>
      <param name="name">parameter name</param>
      <param name="Vanalog">value</param>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.ToString">
      <summary>
            Convert to string. Will reurn a string representation of the encoded data.
            </summary>
      <returns>string representation of the hex blob</returns>
    </member>
    <member name="M:PalmSens.EncodedMethodV1.SetOverrides(System.String)">
      <summary>
            Sets the overrides to be appended to the method blob.
            </summary>
      <param name="overrides">The overrides.</param>
    </member>
    <member name="T:PalmSens.CoreSettings">
      <summary>
            Core settings that can be set from outside the core.
            </summary>
    </member>
    <member name="F:PalmSens.CoreSettings.EntryAssembly">
      <summary>
            The entry assembly, ignored if null
            </summary>
    </member>
    <member name="T:PalmSens.PSThread">
      <summary>
            Wrapper for Thread class. Init() should be called before use.
            </summary>
    </member>
    <member name="T:PalmSens.PSThread.ThreadPriorities">
      <summary>
            Emulates the ThreadPriorities enum.
            </summary>
    </member>
    <member name="T:PalmSens.MeasType">
      <summary>
            The measurement type
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.New">
      <summary>
            New measurement
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Overlay">
      <summary>
            Overlay
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Blank">
      <summary>
            Blank
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Sample">
      <summary>
            Sample (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_1">
      <summary>
            Standard1 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_2">
      <summary>
            Standard2 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_3">
      <summary>
            Standard3 (determination)
            </summary>
    </member>
    <member name="F:PalmSens.MeasType.Standard_4">
      <summary>
            Standard4 (determination)
            </summary>
    </member>
    <member name="T:PalmSens.Measurement">
      <summary>The measurement class contains all classes, functions and parameters necessary for performing 
            a measurement. A measurement class can contain one method and multiple curves or impedance data. 
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor">
      <summary>
            Create new empty measurement
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.#ctor(PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Measurement" /> class.
            </summary>
      <param name="m">The method.</param>
    </member>
    <member name="T:PalmSens.Measurement.SingleCurveChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="T:PalmSens.Measurement.CurveCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.CurvesAdded">
      <summary>This event is triggered when one or more Curves are added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.CurveRemoved">
      <summary>This event is triggered when a Curve is removed from the Measurement class.</summary>
    </member>
    <member name="T:PalmSens.Measurement.EISDataCollectionChangedEventHandler">
      <summary>
            Delegate for the MeasurementChanged Event
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataAdded">
      <summary>This event is triggered when EISdata is added to the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EISDataRemoved">
      <summary>This event is triggered when EISdata is removed from the Measurement class.</summary>
    </member>
    <member name="E:PalmSens.Measurement.EndMeasurement">
      <summary>
            This event is raised after a measurement has ended
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Pretreating">
      <summary>
            Raised when pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FinishMeasurementAsync">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.PretreatmentStarted">
      <summary>
            Indicates pretreatment is started.
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.MeasuringStarted">
      <summary>
            Indicates the measurement is started.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.Measuring">
      <summary>
            Raised when the measurement is activated.
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.TitleChanged">
      <summary>
            Occurs when the Title has changed
            </summary>
    </member>
    <member name="E:PalmSens.Measurement.SavedToFileChanged">
      <summary>
            Occurs when the measurement's data (DataSet) was saved to a file.
            Each Curve and EISData have their own <C>SavedToFile</C> bool.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.TimeStamp">
      <summary>
            Gets or sets the date and time of the start of this measurement.
            For old version data files (.pss, .pst, .mux) this is the creation date and time of the file.
            </summary>
      <value>
            The time stamp.
            </value>
    </member>
    <member name="F:PalmSens.Measurement.Channel">
      <summary>
            Gets or sets the channel.
            </summary>
      <value>
            The channel of a measurement in simultaneaous mode.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Method">
      <summary>Defines the Method related with this Measurement. The information from the Method is used when saving Curves.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ContainsBlank">
      <summary>
            Determines whether this instance contains the Blank curve for Blank subtraction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Measurement.SavedToFilePath">
      <summary>
            The filepath where this Measurement is saved to.
            This value is set when saving and loading this Measurement to a Session file.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.Int32)">
      <summary>
            curve with specified index
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurvesSilent">
      <summary>Removes all Curve classes from Measurement without raising CurveRemoved event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearCurves">
      <summary>Removes all Curve classes from Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllPeaks">
      <summary>Clear peaks for each curve in Measurement.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ClearAllLevels">
      <summary>Clear levels for each curve in Measurement.</summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(PalmSens.MeasType)">
      <summary>
            Curve with specified AnalysisType
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.Item(System.String)">
      <summary>
            Curve with specified name
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurve(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Removes a Curve from the collection. Without raising CurveRemoved</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurveSilent(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection without raising NewCurve event.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurve(PalmSens.Plottables.Curve)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.AddCurves(PalmSens.Plottables.Curve[])">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.SortCurves">
      <summary>
            Sorts the curves based on ChannelIndex.
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.nCurves">
      <summary>Returns the number of curves that are part of the Measurement class.</summary>
    </member>
    <member name="P:PalmSens.Measurement.nEISdata">
      <summary>Returns the number of EISdata curves that are part of the Measurement class.</summary>
    </member>
    <member name="M:PalmSens.Measurement.GetCurveArray">
      <summary>
            Obtain the curves in this measurement as an array.
            </summary>
      <returns>array of curves</returns>
    </member>
    <member name="M:PalmSens.Measurement.GetEISDataArray">
      <summary>
            Obtain the EIS data in this measurement as an array.
            </summary>
      <returns>array of EIS data</returns>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaks(System.Boolean)">
      <summary>
            Find the peaks for each curve in this measurement
            </summary>
    </member>
    <member name="P:PalmSens.Measurement.ContainsBlankSubtractedCurves">
      <summary>
            Gets a value indicating whether the curve collection contains a blank subtracted curve.
            </summary>
      <value>
        <c>true</c> if [contains blank subtracted curves]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Visible">
      <summary>
            Gets or sets a value indicating whether the curves in this <see cref="T:PalmSens.Measurement" /> are visible in the Plot.
            </summary>
      <value>
        <c>true</c> if the owned curves are visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Measurement should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyte(System.Int32)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesAllCurves(System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksAllAnalytesSingleCurve(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Sets the Auto and/or Manual peaks for each corresponding analyte
            based on EPeaks[] and Peak settings from Method
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.FindPeaksSingleAnalyteSingleCurve(System.Int32,PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Find peak from method settings for specific analyte in this curve
            </summary>
    </member>
    <member name="M:PalmSens.Measurement.SetManualPeakForAnalyte(System.Int32,PalmSens.Plottables.Curve)">
      <summary>
            Sets the manual peak for analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
    </member>
    <member name="P:PalmSens.Measurement.ContainsEISdata">
      <summary>
            Gets a value indicating whether EIS data is available
            </summary>
      <value>
        <c>true</c> if [contains EIS data]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.EISdata">
      <summary>
            Gets or sets the EIS data.
            </summary>
      <value>
            The EISdata collection.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.Title">
      <summary>
            Gets the title.
            </summary>
      <value>
            The title as shown in the Legend.
            </value>
    </member>
    <member name="P:PalmSens.Measurement.BlankCurve">
      <summary>
            Gets or sets the Blank curve.
            if Blank curve is present (not null) a new curve will be added after each measurement containing
            the result of the measured curve subtracted with the Blank curve.
            </summary>
      <value>
            The Blank curve.
            </value>
    </member>
    <member name="M:PalmSens.Measurement.AddEISdata(PalmSens.Plottables.EISData)">
      <summary>Adds a Curve to the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdata(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.RemoveEISdataSilent(PalmSens.Plottables.EISData)">
      <summary>Remove EISData from the collection.</summary>
    </member>
    <member name="M:PalmSens.Measurement.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the string "Measurement"</returns>
    </member>
    <member name="M:PalmSens.Measurement.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.Method">
      <summary>
            Describes a PalmSens measurement method
            </summary>
      <remarks>
            Can be types ScanMethod (measure vs potential) or TimeMethod (measure vs time).
            To load and save methodfiles use the ScanMethodFile or TimeMethodFile class.
            </remarks>
    </member>
    <member name="M:PalmSens.Method.#ctor(System.Int32)">
      <summary>
            Create a new method
            </summary>
      <param name="technique">technique number for this method</param>
    </member>
    <member name="M:PalmSens.Method.GetHashCode">
      <summary>
            Not used; warning supressor only
            </summary>
      <returns>Hash</returns>
    </member>
    <member name="M:PalmSens.Method.Equals(System.Object)">
      <summary>
            Check whether this object is equal to another.
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects are equal, false otherwise</returns>
    </member>
    <member name="T:PalmSens.Method.InvalidPowerFreqException">
      <summary>
            Invalid Power FixedFrequency set
            </summary>
    </member>
    <member name="T:PalmSens.Method.InvalidEBiPotOffsetException">
      <summary>
            Create a new instance.
            </summary>
    </member>
    <member name="F:PalmSens.Method.MethodIsGalvanostatic">
      <summary>
            Method is a Galvanostatic measurement (read potential, drive current), 
            False if Potentiostatic
            </summary>
    </member>
    <member name="P:PalmSens.Method.MethodFilename">
      <summary>
            The filepath used with this method, including path and extension
            </summary>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeOffset">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Method.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="P:PalmSens.Method.PowerFreq">
      <summary>The frequency of the local powersupply in Hz. The default value is '50'.</summary>
    </member>
    <member name="M:PalmSens.Method.ToShortString">
      <summary>
            Returns the abbreviation of the technique.
            </summary>
      <returns>e.g. Amperometric Detection returns "AD"</returns>
    </member>
    <member name="M:PalmSens.Method.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
      <value>
        <c>true</c> if [supports aux input]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Method.Technique">
      <summary>
            The technique number used in the firmware
            </summary>
    </member>
    <member name="P:PalmSens.Method.Notes">
      <summary>Some user notes for use with this method.</summary>
    </member>
    <member name="F:PalmSens.Method.UseStirrer">
      <summary>True if a stirrer is being used.</summary>
    </member>
    <member name="P:PalmSens.Method.Ranging">
      <summary>
            Ranging information
            </summary>
    </member>
    <member name="F:PalmSens.Method.SmoothLevel">
      <summary>The smoothlevel to be used.
            <list type="bullet"><item><description>-1 = none</description></item><item><description>0 = no smooth (spike rejection only)</description></item><item><description>1 = 5 points</description></item><item><description>2 = 9 points</description></item><item><description>3 = 15 points</description></item><item><description>4 = 25 points</description></item></list></summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakHeight">
      <summary>Determines the minimum peak height in uA. Peaks lower than this value are neglected.</summary>
    </member>
    <member name="P:PalmSens.Method.MinPeakWidth">
      <summary>Determines the minimum peak width in V or s. Peaks width a lower width may not be detected.</summary>
    </member>
    <member name="F:PalmSens.Method.PeakOverlap">
      <summary>Is used when two peaks are very close to each other. If the peak separation
            is less than the specified value, a single baseline is used for the two overlapping peaks.
            If each peak should have its own baseline, specify a value of 0.</summary>
    </member>
    <member name="P:PalmSens.Method.PeakWindow">
      <summary>Is used to identify which component corresponds to which peak. Peaks must be within the peak window.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewLeft">
      <summary>The lowest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewRight">
      <summary>The highest value on the X axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewBottom">
      <summary>The lowest value on the Y axis of the plot.</summary>
    </member>
    <member name="F:PalmSens.Method.ViewTop">
      <summary>The highest value on the Y axis of the plot.</summary>
    </member>
    <member name="P:PalmSens.Method.ConcentrationUnit">
      <summary>The label for the unit of the analyte's concentration. This value is not used for calculations.</summary>
    </member>
    <member name="F:PalmSens.Method.DefaultXAxis">
      <summary>
            Default data array index for X axis when using this method.
            </summary>
    </member>
    <member name="F:PalmSens.Method.DefaultYAxis">
      <summary>
            Default data array index for Y axis when using this method.
            </summary>
    </member>
    <member name="P:PalmSens.Method.DefaultXUnit">
      <summary>
            Gets the default unit used for the X axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.DefaultYUnit">
      <summary>
            Gets the default unit used for the Y axis.
            </summary>
      <value>
            The default Y unit.
            </value>
    </member>
    <member name="P:PalmSens.Method.XLeft">
      <summary>
            Default left X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XRight">
      <summary>
            Default right X axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YBottom">
      <summary>
            Default bottom Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.YTop">
      <summary>
            Default top Y axis
            </summary>
    </member>
    <member name="P:PalmSens.Method.XDirection">
      <summary>
            X direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Method.RecordExtraValue">
      <summary>Auxiliary channel to record</summary>
    </member>
    <member name="P:PalmSens.Method.RecordAuxInputIsUsed">
      <summary>
            Gets a value indicating whether the auxiliary channel of the device is used
            RecordAux == AuxInput
            </summary>
      <value>
        <c>true</c> if [record aux is used]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Method.RecordCE">
      <summary>
            Gets a value indicating whether the CE potential is recorded
            </summary>
      <value>
        <c>true</c> if [record CE is recorded]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Method.HasValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Determines whether has validation errors for the specified devic capabilities.
            Only fatal errors as in <c>MethodError.IsFatal = TRUE</c> are taken into account
            </summary>
      <param name="c">The capabilities.</param>
      <returns>
        <c>true</c> if [has validation errors] [the specified capabilities]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Method.ValidationErrors(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns a string with fatal validation errors
            </summary>
      <param name="c">The capabilities.</param>
      <returns>String with fatal validation errors</returns>
    </member>
    <member name="M:PalmSens.Method.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            <list type="bullet"><item><description>supported mux channels</description></item><item><description>supported ranges for auto ranging (1 mA and 10 mA not supported by EmStat1)</description></item></list></summary>
      <param name="capab">The device capabilities.</param>
    </member>
    <member name="P:PalmSens.Method.PowerLinePeriod">
      <summary>
            Power Line Period (1/PowerFreq)
            </summary>
    </member>
    <member name="P:PalmSens.Method.SupportsCorrosion">
      <summary>Is true if the method can be used for corrosion measurements.</summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningPotential">
      <summary>
            Conditioning potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.ConditioningTime">
      <summary>
            Conditioning duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionPotential">
      <summary>
            Deposition potential in volt
            </summary>
    </member>
    <member name="P:PalmSens.Method.DepositionTime">
      <summary>
            Deposition duration in seconds
            </summary>
    </member>
    <member name="P:PalmSens.Method.EquilibrationTime">
      <summary>
            Equilibration duration in seconds 
            BeginPotential is applied during equilibration
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyTime">
      <summary>
            Standby time (for use with cell on after measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Method.BeginPotential">
      <summary>
            Begin potential (also set  equilibration)
            </summary>
    </member>
    <member name="P:PalmSens.Method.StandbyPotential">
      <summary>
            Stand by Potential
            </summary>
    </member>
    <member name="P:PalmSens.Method.CellOnAfterMeasurement">
      <summary>
            Enable/disable cell after measurement
            </summary>
    </member>
    <member name="P:PalmSens.Method.PretreatmentDuration">
      <summary>
            Estimated number of seconds the pretreatment phase will take.
            </summary>
    </member>
    <member name="P:PalmSens.Method.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least in seconds (not multiplied by multiplexer cycles)</summary>
    </member>
    <member name="P:PalmSens.Method.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take multiplied with n multiplexer channels (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Method.MultiplexCycles">
      <summary>
            Gets the number of selected multiplexer cycles.
            </summary>
      <value>The number of multiplexer cycles.</value>
    </member>
    <member name="F:PalmSens.Method.UseMuxChannel">
      <summary>Specifies channels used for this method.</summary>
    </member>
    <member name="P:PalmSens.Method.MaxMuxChannelSelected">
      <summary>
            Return the maximum mux channel selected.
            </summary>
    </member>
    <member name="P:PalmSens.Method.PolyStatMode">
      <summary>Specifies the mode for WEn. This is a copied value from PolyEmStatEx.PolyStatMode[i], used for converting values on receiving in ParseMeasurePackage</summary>
    </member>
    <member name="T:PalmSens.Method.EnumPalmSensBipotMode">
      <summary>
            BiPot mode for PalmSens Bipot boards
            Currently only supported by PalmSens3
            </summary>
    </member>
    <member name="P:PalmSens.Method.BiPotPotential">
      <summary>Specifies the potential for WEn.</summary>
    </member>
    <member name="F:PalmSens.Method.BiPotCR">
      <summary>Specifies the current range for WE2.</summary>
    </member>
    <member name="P:PalmSens.Method.BipotModePS">
      <summary>
            Gets or sets the bipot mode.
            Only applicable for PalmSens3 with Bipot and Auxiliary input set on Bipot
            </summary>
      <value>
            The bipot mode for a PalmSens3 with BiPot
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.PretLimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use MinValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MinValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UsePretLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use MaxValueMeasured.
            </summary>
      <value>
        <c>true</c> if use MaxValueMeasured; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMaxValue">
      <summary>
            Gets or sets 
             - the maximum current in uA
             - the maximum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.LimitMinValue">
      <summary>
            Gets or sets; 
             - the minimum current in uA
             - the minimum potential 
            where measurement should be aborted.
            </summary>
      <value>
            The value on which to abort the measurement
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMinValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMinValue.
            </summary>
      <value>
        <c>true</c> if use LimitMinValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseLimitMaxValue">
      <summary>
            Gets or sets a value indicating whether to use LimitMaxValue.
            </summary>
      <value>
        <c>true</c> if use LimitMaxValue; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.SaveOnDevice">
      <summary>
            Determines whether the method and measurement data are saved locally on the device (if possible).
            </summary>
    </member>
    <member name="M:PalmSens.Method.GetPointsPerSecond(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the points per second. If deviceCapabilities is null than this may be an approximation because the Real E step cannot be calculated (in the  case of a potential method).
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Method.Overrides">
      <summary>
            Gets or sets override string that will be appended to the hex method blob.
            </summary>
      <value>
            The override string to append to the hex blob.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnEquil">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration starts..
            Digital output will be set LOW again as soon as equilibration ends and measurement is starts.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnEquil">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnEquil on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerValueOnDelay">
      <summary>
            Only used when <c>UseTriggerOnDelay = true</c>
            UseTriggerOnDelay can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as delay time has passed after the start of the measurement.
            Use value TriggerDelay to set the delay. This will be calculated to an integer value (index) used during the measurement.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on the delay.
            </value>
    </member>
    <member name="P:PalmSens.Method.UseTriggerOnDelay">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.TriggerDelayPeriod">
      <summary>
            Gets or sets the delay trigger if <c>UseTriggerOnDelay == true</c> 
            This value is calculated to an index in the measurement. Therefore TriggerDelay can be any values as an integer multiplication of the interval time.
            </summary>
      <value>
            The delay in seconds after start of the measurement.
            </value>
    </member>
    <member name="M:PalmSens.Method.ToHex(System.Int32,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Function for generating hex blob
            </summary>
      <param name="rev">blob format revision</param>
      <param name="capabilities">The capabilities.</param>
      <returns>
            destination blob
            </returns>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="F:PalmSens.Method.fileNameCnt">
      <summary>
            The amouhnt of filenames that have been sent to the device, this is used to make filenames uniques in case multiple are sent in the same second.
            </summary>
    </member>
    <member name="M:PalmSens.Method.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.Method.PGAGAINBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.FILTERBYTE">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="F:PalmSens.Method.OPTIONSINT">
      <summary>
            PS3 testing
            </summary>
    </member>
    <member name="M:PalmSens.Method.AdjustMeasurementTime(System.Single@,PalmSens.EncodedMethodV0)">
      <summary>
            Adjust measurement time for power frequency and store in blob
            </summary>
      <param name="tmeas">measurement time</param>
      <param name="m">hex blob</param>
    </member>
    <member name="M:PalmSens.Method.SetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetADTiming(System.Single@,PalmSens.EncodedMethodV1@)">
      <summary>
            Adjust timing for the EmStat or PS3
            </summary>
      <param name="tmeas">original time</param>
      <param name="m">method to change</param>
    </member>
    <member name="M:PalmSens.Method.GetNextSelectedMuxChannel(System.Int32)">
      <summary>
            Gets the next selected mux channel in UseMuxChannel.
            If iLastChannel = -1, the first selected channel is returned
            </summary>
      <param name="iLastChannel">The i last channel (0-nChannels). Or -1 if there is no next.</param>
      <returns>
      </returns>
    </member>
    <member name="F:PalmSens.Method.MuxSettings.UnselWE">
      <summary>
            This setting determines what happens with the unselected WE's
            </summary>
    </member>
    <member name="F:PalmSens.Method.MuxSettings.ConnSEWE">
      <summary>
            Connect the Sense lead to the WE lead internally.
            </summary>
    </member>
    <member name="F:PalmSens.Method.MuxSettings.ConnectCERE">
      <summary>
            Connect RE and CE together, ignores RE lead.
            </summary>
    </member>
    <member name="F:PalmSens.Method.MuxSettings.CommonCERE">
      <summary>
            Connect all RE's and CE's from all channels to channel 1 RE and CE
            </summary>
    </member>
    <member name="F:PalmSens.Method.MuxSettings.OCPMode">
      <summary>
            Enable OCP mode
            </summary>
    </member>
    <member name="F:PalmSens.Method.MuxSett">
      <summary>
            Settings for an attached mux, ignored if no configurable mux is found. (Rev 1 mux is not configurable by software)
            </summary>
    </member>
    <member name="P:PalmSens.Method.OCPmode">
      <summary>
            Used with corrosion and impedance measurements only
            Bitwise three options so value is 0 ~ 8 (2^3)
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPUseIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether the indexed potential parameter should be used for OCP
            </summary>
    </member>
    <member name="P:PalmSens.Method.nOCPparameters">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a the number of vs OCP parameters available
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetLabelIndexedPar(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the name of the indexed vs OCP parameters
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPSetEValue(System.Int32,System.Single)">
      <summary>
            Used with corrosion and impedance measurements only
            Sets the indexed OCP parameter
            </summary>
    </member>
    <member name="M:PalmSens.Method.OCPGetEValue(System.Int32)">
      <summary>
            Used with corrosion and impedance measurements only
            Gets the indexed OCP parameter
            </summary>
    </member>
    <member name="P:PalmSens.Method.IsVersusOCP">
      <summary>
            Used with corrosion and impedance measurements only
            Gets a value indicating whether OCP is used (OCPmode &gt; 0)
            </summary>
      <value>
        <c>true</c> if [use OCP]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Method.OCPMaxOCPTime">
      <summary>
            Used with corrosion and impedance measurements only
            Max. EOC time (1 – 30000 s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.OCPStabilityCriterion">
      <summary>
            Used with corrosion and impedance measurements only
            Stability Criterion (range 0.001 – 1000 mV/s)
            </summary>
    </member>
    <member name="P:PalmSens.Method.Ba">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Ba in V/dec
            </summary>
    </member>
    <member name="P:PalmSens.Method.Bc">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Bc in V/dec 
            </summary>
    </member>
    <member name="P:PalmSens.Method.Weight">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Weight in gr
            </summary>
    </member>
    <member name="P:PalmSens.Method.Area">
      <summary>
            Material property for corrosion
            Used with corrosion measurements only
            Area in cm2
            </summary>
    </member>
    <member name="P:PalmSens.Method.Density">
      <summary>
            Material property for corrosion 
            Used with corrosion measurements only
            Density in gr/cm3
            </summary>
    </member>
    <member name="P:PalmSens.Method.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="F:PalmSens.Method.PolyEmStat">
      <summary>
            Method extension for PolyEmStat, containing calibration and bipot values
            </summary>
    </member>
    <member name="M:PalmSens.Method.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Method.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:PalmSens.Method.Deserialize(System.String)">
      <summary>
            Deserializes the contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Method.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="M:PalmSens.Method.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Generate a receive measurement event
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Method.ReceiveMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Generate a receive measurement event
            </summary>
      <param name="c">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Method.FromMethodID(System.String)">
      <summary>
            Creates a Mehtod class from [method].GetMethodID()
            </summary>
      <param name="name">The unique ID.</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">Unknown technique name: " + name</exception>
    </member>
    <member name="F:PalmSens.Method.MethodIds">
      <summary>
            A list with all available MethodID's
            </summary>
    </member>
    <member name="T:PalmSens.Method.TechniqueIds">
      <summary>
            Technique identifiers for each technique
            </summary>
    </member>
    <member name="M:PalmSens.Method.FromTechniqueNumber(System.Int32)">
      <summary>
            Create a new method by technique number
            </summary>
      <param name="i">technique number</param>
      <returns>newly created (empty) method</returns>
    </member>
    <member name="M:PalmSens.Method.CopyMethod(PalmSens.Method,PalmSens.Method@)">
      <summary>
            Copies all overlapping parameters from the source method to the destination method.
            If Destination Method is null, a clone will be returned.
            </summary>
      <param name="mSource">The source Method.</param>
      <param name="mDestination">The destination Method.</param>
    </member>
    <member name="M:PalmSens.Method.ResetView">
      <summary>
            Resets the X axis view settings used by Plot.
            Effect is that setting this method to Plot makes Plot automatically reset Axis settings based on method.
            </summary>
    </member>
    <member name="M:PalmSens.Method.Dispose">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
    </member>
    <member name="T:PalmSens.INPointsMethod">
      <summary>
            Method for which the number of points can be predicted.
            </summary>
    </member>
    <member name="P:PalmSens.INPointsMethod.nPoints">
      <summary>Returns the expected number of measured points to be returned.</summary>
    </member>
    <member name="T:PalmSens.MuxMethod">
      <summary>
            Type of mux measurement
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Sequentially">
      <summary>
            Sequential - complete curve after complete curve
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.Alternatingly">
      <summary>
            Alternatingly - measure one point for each curve then go to the next
            </summary>
    </member>
    <member name="F:PalmSens.MuxMethod.None">
      <summary>
            No multiplexer
            </summary>
    </member>
    <member name="T:PalmSens.Auxiliary">
      <summary>
            Helper functions for Auxiliary input
            </summary>
    </member>
    <member name="M:PalmSens.Auxiliary.GetUnit(PalmSens.EnumExtraValue)">
      <summary>
            Returns the Unit corresponding to the Auxiliary Channel
            </summary>
      <param name="extraValueType">Type of the channel.</param>
      <returns>The corresponding unit</returns>
    </member>
    <member name="T:PalmSens.Plottables.Blank">
      <summary>
            The Blank curve used for Blank subtraction
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Blank.UseBlank">
      <summary>
            Whether or not use the available Blank for subtraction after measurement
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveDirection">
      <summary>
            Indicates the 
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Ascending">
      <summary>
            Ascending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Descending">
      <summary>
            Descending
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.CurveDirection.Unspecified">
      <summary>
            Direction unspecified. 
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.AxisFunction">
      <summary>
            Used to get converted Y values
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Normal">
      <summary>
            Original Y value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Derivative">
      <summary>
            Derivative of value
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.AxisFunction.Log">
      <summary>
            Math.Log10 of value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve">
      <summary>
            This class contains X and Y data of a single curve that can be plotted.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Used when loading from file
            </summary>
      <param name="bag">The bag.</param>
      <param name="coreVersion">The core version.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Data.DataArray,PalmSens.Data.DataArray,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.Curve" /> class.
            Default title = "Curve"
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.#ctor(PalmSens.Plottables.Curve,System.Boolean)">
      <summary>
            Create a new Curve based on an existing Curve with same type of DataArrays for X and Y, Title and MeasType
            </summary>
      <param name="curve">The Curve.</param>
      <param name="cloneData">if set to <c>true</c> clones the contents of the X and Y DataArrays.</param>
    </member>
    <member name="E:PalmSens.Plottables.Curve.MeasTypeChanged">
      <summary>
            Occurs when [meas type changed].
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.NewDataAddedEventHandler">
      <summary>
            Delegate for the NewCurvePoints Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.Curve.NewDataAdded">
      <summary>
            This event is raised everytime multiple points are added to the curve class.
            Use of this event is Threadsafe if PointsAddedFromOtherThread = True
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ToString">
      <summary>Returns title of this Curve.</summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForChannel(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="channel">The channel starting at 0.</param>
      <returns>Channel #, where #=<para>channel</para>+1</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetTitleForScan(System.Int32)">
      <summary>
            Gets the title for channel.
            </summary>
      <param name="scan">The CV scan starting at 1.</param>
      <returns>Scan #, where #=<para>scan</para></returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodePotential">
      <summary>
            Gets or sets the reference electrode potential offset.
            </summary>
      <value>
            The reference electrode potential offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XOffset">
      <summary>
            Gets or sets the offset used on the X axis.
            This is generaly [ReferenceElectrodePotential] - [RE potential used as reference in Plot]
            </summary>
      <value>
            The x offset.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ReferenceElectrodeName">
      <summary>
            Gets or sets the name of the reference electrode.
            </summary>
      <value>
            The name of the reference electrode.
            </value>
    </member>
    <member name="F:PalmSens.Plottables.Curve.OCPValue">
      <summary>
            Contains the measured Eoc value for this curve. Used for corrosion measurements
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.ErrorMessage">
      <summary>
            An error that occured during measurement (used by StatusBar)
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MeasType">
      <summary>
            Gets or sets the type of the measurement is associated with this curve.
            </summary>
      <value>
            The type of the measurement.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxisDataArray">
      <summary>
            Gets the X axis data array.
            </summary>
      <value>
            The X axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxisDataArray">
      <summary>
            Gets the Y axis data array.
            </summary>
      <value>
            The Y axis data array.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.ZAxisDataValue">
      <summary>
            Gets the value for the Z axis
            </summary>
      <value>
            The Z axis value
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNUnderloads">
      <summary>
            Gets the current underloads count from the YAxisDataArray.
            </summary>
      <returns>number of underloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetNOverloads">
      <summary>
            Gets the current overloads count from the YAxisDataArray.
            </summary>
      <returns>number of overloads, 0 if none or no measured currents available</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXValue(System.Int32)">
      <summary>
            Returns the X value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetYValue(System.Int32)">
      <summary>
            Returns the Y value that corresponds with the given index
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedXValue(System.Int32)">
      <summary>
            Gets the formatted x value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetFormattedYValue(System.Int32)">
      <summary>
            Gets the formatted y value.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetXDirection">
      <summary>
            The direction of the data at the specified axis
            determined using the first two points of the array
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetDirection(PalmSens.Data.EnumAxes,System.Int32)">
      <summary>
            The direction of the data at the specified axis for the specified index.
            Compares difference between index and index+1.
            </summary>
      <returns>CurveDirection</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxX">
      <summary>Maximum X value</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MaxY">
      <summary>Maximum Y value found in this Curve. 
            If nPoints&gt;10 first 2 points are disregarded when determining MaxY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinX">
      <summary>Minimum X value found in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.MinY">
      <summary>Minimum Y value found in this Curve.
            If nPoints&gt;10 first 2 points are disregarded when determining MinY.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.NPoints">
      <summary>Returns number of points in this Curve.</summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.Peaks">
      <summary>
            List of peaks found in this curve.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionButlerVolmer">
      <summary>
            Gets the results of a manual corrosion butler volmer fit.
            </summary>
      <value>
            Indices for the manual butler volmer fit.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.CorrosionTafel">
      <summary>
            Gets the results of a manual corrosion tafel fit.
            </summary>
      <value>
            Indices for the manual corrosion tafel fit.
            </value>
    </member>
    <member name="M:PalmSens.Plottables.Curve.GetVertexIndicesForCV">
      <summary>
                Returns two indices: Evtx1 and Evtx2 of a Cyclic Voltammetry scan
            </summary>
      <returns>
                2 value array containing the indices for Evtx1 and Evtx2.
                In case of no direction switches (normal curve) both indices are equal to nPoints.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CorrectIndicesCV">
      <summary>
            Corrects the XDataArray and YDataArray
            In case a CV curve has the begin potential in between a vtx1 and vtx2 there are two loose ascending or descending
            parts in the curve, which makes it difficult to de operations on them. This function re-indexes the curve so that there is only 1 index where the direction changes.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.HasMultipleDirections">
      <summary>
            Gets a value indicating whether the data in this instance has multiple directions (Cyclic Voltammetry)
            </summary>
      <value>
        <c>true</c> if this instance has multiple directions; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumXAxis">
      <summary>
            Used for selecting the X axis to plot against
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.Curve.EnumYAxis">
      <summary>
            Used for selecting the Y axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.XAxis">
      <summary>
            X Axis to plot against
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.Curve.YAxis">
      <summary>
            Y Axis to plot against
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.SetYAxisFunction(PalmSens.Plottables.AxisFunction)">
      <summary>
            Sets a math function on the left Y axis
            </summary>
      <param name="axisFunction">The axes function.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindPeaks(System.Double,System.Double,System.Boolean)">
      <summary>
            Find peaks in a curve in all directions; CV can have 1 or 2 direction changes
            </summary>
      <param name="minPeakWidth">Minimum width of the peak in V.</param>
      <param name="minPeakHeight">Minimum height of the peak in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearPeaks">
      <summary>
            Removes all found peaks for this curve.
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.Curve.Levels">
      <summary>
            List of levels found in this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindLevels(System.Single,System.Single)">
      <summary>
            Finds the levels.
            </summary>
      <param name="minWidth">The minimum level width in V or s.</param>
      <param name="minHeight">The minimum level height in uA.</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.ClearLevels">
      <summary>
            Removes all found levels for this curve.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestX(System.Double)">
      <summary>
            Find the index of the X point nearest to p
            Not suitable for CV since there are two values for each x
            </summary>
      <param name="x">x to look for</param>
      <returns>index nearest to x, or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double)">
      <summary>
            Find the index closest to the given x and current
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <returns>
            index nearest to x,current or 0 if there were no X points yet
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearest(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index closest to the given x and current in a given range
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for.</param>
      <param name="iStart">Beginning of range.</param>
      <param name="iEnd">End of range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.FindNearestXCV(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
            Find the index of the X point nearest to p between a minimum and maximum index
            </summary>
      <param name="x">x to look for</param>
      <param name="y">y to look for</param>
      <param name="iMin">minimum index</param>
      <param name="iMax">maximum index</param>
      <returns>index nearest to x,current or 0 if there were no X points yet</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.CalculateSlope(System.Int32,System.Int32)">
      <summary>
            Calculate the slope between two points
            </summary>
      <param name="f">first index</param>
      <param name="t">second index</param>
      <returns>calculated slope</returns>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve
            current = a + b * x
            </summary>
      <param name="a">offset</param>
      <param name="b">slope</param>
      <param name="corr">Correlation Coefficient</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.LLS(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
      <summary>
            Calculate linear line parameters for this curve between two indexes
            current = offset + slope * x
            </summary>
      <param name="offset">offset</param>
      <param name="slope">slope</param>
      <param name="CoefDet">Coefficient of determination (R2)</param>
      <param name="from">begin index</param>
      <param name="to">end index</param>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Finish">
      <summary>
            Finishes the curve. This stops from raising the NewDataAdded event.
            This is automatically called at the end of a measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.Curve.Empty">
      <summary>
            Returns an empty Curve
            </summary>
      <returns>an empty Curve</returns>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionStart">
      <summary>
            Gets or sets the first index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection start.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.Curve.SelectionEnd">
      <summary>
            Gets or sets the last index of the selection of points. Default is -1 meaning all points are selected
            </summary>
      <value>
            The selection end.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventHandler">
      <summary>
            Delegate that receives Curves.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISDataEventHandler">
      <summary>
            Delegate that receives EISData.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.CurveEventArgs">
      <summary>
            Curve Events
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.#ctor(PalmSens.Plottables.Curve)">
      <summary>
            Create new instance.
            </summary>
      <param name="c">curve that was touched</param>
    </member>
    <member name="M:PalmSens.Plottables.CurveEventArgs.GetCurve">
      <summary>
            Obtain the curve that was received
            </summary>
      <returns>Curve</returns>
    </member>
    <member name="T:PalmSens.Plottables.EISPlotModes">
      <summary>
            The available plot options
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZZvsX">
      <summary>
            ZZ vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZPhasevsLogF">
      <summary>
            Z and Phase vs FixedFrequency
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZPhasevsX">
      <summary>
            Z and Phase vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.RctvsX">
      <summary>
            RCT vs E or t
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.ZvsZ">
      <summary>
            Z' vs Z''
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogZvsLogF">
      <summary>
            Log(|Z|) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsY">
      <summary>
            Y'' vs Y'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsLogF">
      <summary>
            Y'/Y'' vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.LogYvsLogF">
      <summary>
            Log(Y) vs Log(F)
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YYvsX">
      <summary>
            Y' and Y'' vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.YvsX">
      <summary>
            Y vs X
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISPlotModes.CsImvsCsRe">
      <summary>
            C'' vs C'
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISDataSubScan.ParentEISData">
      <summary>
            The parent EISData owning this EISDataSubScan
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISDataSubScan.NFrequencies">
      <summary>
            Gets the number of frequencies in this sub scan
            </summary>
      <value>
            The number of frequencies.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData">
      <summary>
            Contains all data as result of an Impedance measurement. In case of multiple frequency scans versus time or potential,
            all data can be obtained using EISData.GetValue(). 
            Seperate frequency scan can be obtained using GetSubScans().
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.#ctor(PalmSens.Techniques.ImpedimetricMethod.enumScanType,PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType,System.Collections.Generic.List{System.Double})">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.EISData" /> class.
            </summary>
      <param name="scanType">Type of the scan.</param>
      <param name="freqType">Type of the freq. Set to 'fixed' if unknown at beforehand. AddRow() will change FreqType if a different frequency is added.</param>
      <param name="frequencies">The frequencies used in case freqType == FreqScan.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToJsonBag">
      <summary>
            Saves EISData to a Json bag.
            </summary>
      <returns>
      </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "T:PalmSens.Plottables.EISData.NewFreqScanAddedEventHandler" -->
    <member name="E:PalmSens.Plottables.EISData.NewSubScanAdded">
      <summary>
            Event is triggered when a new frequency scan is added.
            An EISData can contain multiple scans if FreqScan is measured vs Time or E
            These frequency scans are listed in FreqScans.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventHandler">
      <summary>
            Delegate for the NewDataEventHandler Event
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.EISData.NewDataAdded">
      <summary>Occurs when new data is added to the EISData</summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.OnNewDataAdded(System.Int32)">
      <summary>
            Raises the <see cref="E:NewDataAdded" /> event.
            </summary>
      <param name="index">The iFreq.</param>
    </member>
    <member name="P:PalmSens.Plottables.EISData.ScanType">
      <summary>
            Gets or sets the type of the scan.
            Can be vs time or vs potential
            </summary>
      <value>The type of the scan.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FreqType">
      <summary>
            Gets or sets the type of the frequency mode.
            Can be scan or fixed
            </summary>
      <value>The type of the frequency mode.</value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.HasSubScans">
      <summary>
            Gets a value indicating whether this instance has sub frequency scans.
            This is only the case if a frequency scan is combined with a time or potential scan
            </summary>
      <value>
        <c>true</c> if this instance has sub scans; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.EISData.FrequencyCurves">
      <summary>
            This dictionary contains one or two curves for each frequency.
            Used when plotting vs X.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.NPoints">
      <summary>
            The total number of dataPoints (rows in DataSet) in this EISData
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.EISDataSet">
      <summary>
            Gets the EIS DataSet.
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.DebugValueType">
      <summary>
            Value types used for debugging and calibration only
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.nPointsAC">
      <summary>
            The number of points in the sinewave applied and measured
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.DebugValueType.realtintac">
      <summary>
            The realtintac. Used for calibration of PS3 firmware overhead causing phasedelay
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.EISValueType">
      <summary>
            Used for returning min and max values for X or Y axis
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Freq">
      <summary>FixedFrequency values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Logf">
      <summary>Log(F) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogZ">
      <summary>Log(Z) values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Edc">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Time">
      <summary>I values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Idc">
      <summary>E values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Iac">
      <summary>I ac values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZRe">
      <summary>Z' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.ZIm">
      <summary>-Z'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Z">
      <summary>Z values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.MinPhase">
      <summary>-Phase values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Rct">
      <summary>RCT values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.LogY">
      <summary>E or t values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YRe">
      <summary>Y' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.YIm">
      <summary>Y'' values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Y">
      <summary>Y values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.Cs">
      <summary>Cs values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsRe">
      <summary>CsRe values</summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.EISValueType.CsIm">
      <summary>CsIm values</summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.CDC">
      <summary>
            Gets or sets the CDC circuit for fitting.
            </summary>
      <value>
            The circuit.
            </value>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewDataEventArgs">
      <summary>
            Event arguments for the new data event
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.EISData">
      <summary>
            The EISData associated with the new added point
            </summary>
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewDataEventArgs.Index">
      <summary>
            The iFreq of the datapoint
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.EISData.NewFreqScanEventArgs">
      <summary>
            Event arguments for the NewSubScanAdded event
            </summary>
      <seealso cref="T:System.EventArgs" />
    </member>
    <member name="F:PalmSens.Plottables.EISData.NewFreqScanEventArgs.AddedScan">
      <summary>
            The new frequency scan added
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.XUnit">
      <summary>
            The XUnit corresponding with the AxesType
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GenerateCurves(PalmSens.Plottables.EISPlotModes,System.Boolean)">
      <summary>
            Gets the curves.
            </summary>
      <param name="plotMode">The plot mode.</param>
      <param name="onlyIfExists">if set to <c>true</c> do not generate the curves</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">plotMode - null</exception>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetFreqScanSelectedSeries(System.Int32)">
      <summary>
            Returns the EIS data belonging only to the scan of which the selected point is part of.
            This is useful for exporting to third party software for EIS fitting in case multiple frequency scans were done vs time or E.
            </summary>
      <param name="index">The iFreq.</param>
      <returns>EISData series containing only one frequency scan</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetSubScans">
      <summary>
            Gets the data splitted up in multiple EISData's for each frequency scan.
            If the frequency was fixed only one EISData is returned containing all values of the time or potential scan
            </summary>
      <returns>One or more EISData's</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.GetAllEISDatas">
      <summary>
            If this EISData has SubScans this function returns all sub frequency scans as EISData objects, similar to GetSubScans()
            If this EISData is measured at a fixed frequency or at a fixed potential it will only return the a single EISData object
            </summary>
      <returns>one or more EISData objects</returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:PalmSens.Plottables.EISData.AddRow(System.Int32,System.Double,PalmSens.Data.VoltageReading,System.Double,PalmSens.Data.CurrentReading,PalmSens.Data.CurrentReading,System.Double,System.Double,System.Double)">
      <summary>
            Adds the row to the DataSet.
            </summary>
      <param name="seriesStartTime">The series start time.</param>
      <param name="edc">The edc.</param>
      <param name="frequency">The frequency.</param>
      <param name="idc">The iDC.</param>
      <param name="iac">The iAC.</param>
      <param name="zRe">The ZRe.</param>
      <param name="zIm">The Zim.</param>
      <param name="phase">The phase.</param>
    </member>
    <member name="M:PalmSens.Plottables.EISData.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.EISData.Title">
      <summary>
            The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.
            </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.VisualSettingsChanged">
      <summary>
      </summary>
    </member>
    <member name="E:PalmSens.Plottables.VisualSettings.ColorChanged">
      <summary>
            Occurs when plot color changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.#ctor(PalmSens.Plottables.VisualSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Plottables.VisualSettings" /> class.
            Sets UseDefaultSettings to <c>false</c>.
            </summary>
      <param name="settings">The settings.</param>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.GetVisualSettingsFastDraw">
      <summary>
            Gets the best visual settings for fast drawing large curves.
            </summary>
      <returns>VisualSettings</returns>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.UseDefaultSettings">
      <summary>
            Gets or sets a value indicating whether the Plot Default setting should be used for this Curve when adding it to a Plot.
            If <c>true</c> the plot will assign a colour and set the default appearance settings
            This value returns false after the first time the curve is added to a Plot.
            </summary>
      <value>
        <c>true</c> if [use default settings]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.AutoAssignColor">
      <summary>
            If true the Plot will assign a colour automatically
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.Color">
      <summary>
            The color for this plottable as ARGB value
            </summary>
    </member>
    <member name="T:PalmSens.Plottables.VisualSettings.Symbol">
      <summary>
            The symbols available
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolType">
      <summary>
            Gets or sets the type of the symbol.
            </summary>
      <value>
            The type of the symbol.
            </value>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolFill">
      <summary>
            The symbol fill
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.SymbolSize">
      <summary>
            The symbol size
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.LineWidth">
      <summary>
            Use a custom line width.
            </summary>
    </member>
    <member name="P:PalmSens.Plottables.VisualSettings.HideCurveLine">
      <summary>
            If true, no line is drawn, only dots
            </summary>
    </member>
    <member name="M:PalmSens.Plottables.VisualSettings.CopyAppearance(PalmSens.Plottables.VisualSettings,System.Boolean,System.Boolean)">
      <summary>
            Clones the appearance except the color, unless specified.
            </summary>
      <param name="newSettings">The default curve settings.</param>
      <param name="includeColor">if set to <c>true</c> [include color].</param>
      <param name="includeSymbolType">if set to <c>true</c> [include symbol type].</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="T:PalmSens.ICalibrationMethod">
      <summary>
            Properties for methods that can be used with calibration.
            </summary>
    </member>
    <member name="M:PalmSens.ICalibrationMethod.CalculateSignal(PalmSens.Plottables.Curve)">
      <summary>
            Function that calculates the signal for a give Curve
            </summary>
      <param name="c">Curve to calculate derivative of</param>
      <returns>calculated signal</returns>
    </member>
    <member name="T:PalmSens.CalibrationCurve">
      <summary>
            Curve derived from calculations using Calibration measurement
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.#ctor(PalmSens.Units.Unit,PalmSens.Units.Unit,System.Single[],System.Single[])">
      <summary>
            Create a new Calibrationcurve
            </summary>
      <param name="signalUnit">SignalUnit</param>
      <param name="concentrationUnit">ConcentrationUnit</param>
      <param name="i">signals</param>
      <param name="conc">concentrations</param>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Offset">
      <summary>
            Offset of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.Slope">
      <summary>
            Slope of calibration curve (in (x+Offset)*Slope)
            </summary>
    </member>
    <member name="F:PalmSens.CalibrationCurve.CorrCoef">
      <summary>
            Correlation Coefficient
            </summary>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(System.Single)">
      <summary>
            Calculate concentration corresponding to given signal
            </summary>
      <param name="i">signal to calculate for</param>
      <returns>concentration for specified signal</returns>
    </member>
    <member name="M:PalmSens.CalibrationCurve.CalculateConcentration(PalmSens.ICalibrationMethod,PalmSens.Plottables.Curve)">
      <summary>
            Calculate concentration
            </summary>
      <param name="m">method to use</param>
      <param name="c">curve to calculate concentration for</param>
      <returns>concentration</returns>
    </member>
    <member name="T:PalmSens.CFALevelList">
      <summary>
            Describes a list of levels
            </summary>
    </member>
    <member name="T:PalmSens.CFALevelList.Level">
      <summary>
            Level information
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftX">
      <summary>
            X coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightX">
      <summary>
            X coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LeftY">
      <summary>
            Y coordinate of the valley on the left side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.RightY">
      <summary>
            Y coordinate of the valley on the right side of the level.
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelX">
      <summary>
            X coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Level.LevelY">
      <summary>
            Y coordinate of the level
            </summary>
    </member>
    <member name="P:PalmSens.CFALevelList.Item(System.Int32)">
      <summary>Returns the peaks found in this curve as an array.</summary>
    </member>
    <member name="P:PalmSens.CFALevelList.nLevels">
      <summary>Returns the number of peaks found in this curve.</summary>
    </member>
    <member name="F:PalmSens.CFALevelList.Curve">
      <summary>
            Curve these peaks belong to
            </summary>
    </member>
    <member name="M:PalmSens.CFALevelList.#ctor(PalmSens.Plottables.Curve,System.Double,System.Double)">
      <summary>
            Create a new levellist, looking for levels in the specified curve between Start and End
            </summary>
      <param name="c">curve to use</param>
      <param name="pxmin">minimum level width</param>
      <param name="pymin">minimum level height</param>
    </member>
    <member name="M:PalmSens.CFALevelList.Clear">
      <summary>
            Clear peaklist
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve">
      <summary>
            The sine curve returned during impedemetric measurements
            </summary>
    </member>
    <member name="T:PalmSens.SineCurve.EnumSine">
      <summary>
            The sine function
            </summary>
    </member>
    <member name="M:PalmSens.SineCurve.GetPercentageOfResolution(System.Single)">
      <summary>
            Gets the percentage of resolution.
            </summary>
      <param name="maxDigital">The maximum digital value.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.SineCurve.Ymean">
      <summary>
            This is the mean of all Y's
            Value is in uA if current or V if voltage
            </summary>
    </member>
    <member name="T:PalmSens.Plottable">
      <summary>
            A generic plottable class
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.TitleChanged">
      <summary>
            Raised when the curves Title has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.VisibleChanged">
      <summary>
            Raised when the curves Visibility has Changed.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.SavedToFileChanged">
      <summary>
            Occurs when the plottable was saved to a file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.AppearanceChanged">
      <summary>
            Occurs when Visual Settings have changed.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnTitleChanged">
      <summary>
            Called when legend needs refreshment
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.OnVisibleChanged">
      <summary>
            Called when [visible changed].
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsInPlot">
      <summary>
            Gets or sets a value indicating whether this instance is in plot.
            This property is maintained by the plot if part of the Plot.CurveCollection
            This setting is not related to the Curve.Visible property.
            </summary>
      <value>
        <c>true</c> if this instance is in plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PalmSens.Plottables.Curve" /> is visible in the Plot.
            Raises VisibleChanged();
            </summary>
      <value>
        <c>true</c> if visible in the Plot; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.Plottable.SetVisibilityNoEvents(System.Boolean)">
      <summary>
            Sets the Visible property without raising OnVisibleChanged event.
            </summary>
      <param name="visible">if set to <c>true</c> [visible].</param>
    </member>
    <member name="P:PalmSens.Plottable.SaveToSession">
      <summary>
            Gets or sets a value indicating whether this Curve should be save to the Session (.pssession) file.
            </summary>
      <value>
        <c>true</c> if [save to session]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.SavedToFilePath">
      <summary>
            The filepath to which this plottable has been saved to.
            This value is set when saving and loading this plottable to a Session file.
            </summary>
    </member>
    <member name="E:PalmSens.Plottable.Finished">
      <summary>
            Occurs when this curve is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.Title">
      <summary>The title of the plottable. Is 'Curve' by default. Minimum length is 2 chars, max. is 100 chars.</summary>
    </member>
    <member name="P:PalmSens.Plottable.Error">
      <summary>Error(s) that occured during measurement.</summary>
    </member>
    <member name="M:PalmSens.Plottable.OnFinished">
      <summary>
            Called when this plottable is finished (end of measurement)
            </summary>
    </member>
    <member name="P:PalmSens.Plottable.IsFinished">
      <summary>
            Gets a value indicating whether this plottable is still receiving data (<c>false</c>) or not (<c>true</c>)
            </summary>
      <value>
        <c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Plottable.MuxChannel">
      <summary>
            The corresponding MUX channel number with the curve starting at 0.
            Value is -1 for no MUX channel used.
            </summary>
    </member>
    <member name="M:PalmSens.Plottable.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx">
      <summary>
            Method extention for a PolyEmStat device
            </summary>
    </member>
    <member name="M:PalmSens.PolyEmStatMethodEx.SetEMode(System.Int32,PalmSens.PolyEmStatMethodEx.enumEMode)">
      <summary>
            Sets the potential mode for an additional WE channel.
            </summary>
      <param name="iChannel">The additional WE channel.</param>
      <param name="mode">The potential mode.</param>
      <value>
            The potential mode.
              </value>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.SelectedRange">
      <summary>
            The current range for the PolyEmStat BiPot channels
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.WEPotential">
      <summary>
            The potential (offset) for the PolyEmStat WE
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationValues">
      <summary>
            The calibration curve values for concentration determination
            </summary>
    </member>
    <member name="T:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.a">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.b">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="F:PalmSens.PolyEmStatMethodEx.CalibrationCurveValues.c">
      <summary>
            Calibration curve is I = a*conc^2 + b * conc + c
            </summary>
    </member>
    <member name="T:PalmSens.PotentialMethod">
      <summary>Contains all shared methodparameters of all measurement method classes for measurement vs. potential.</summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.#ctor(System.Int32)">
      <summary>
            Create a new potential method 
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.PotentialMethod.BeginPotential">
      <summary>Potential where scan starts. The applicable range of the potential depends on the device connected.
            Reflects start potential if CV.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.EndPotential">
      <summary>Potential in V where measurement stops (Except for CV).</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.PotentialMethod.StepPotential">
      <summary>Step potential in V.</summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="M:PalmSens.PotentialMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error message or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.PotentialMethod.nPoints">
      <summary>
            Number of points that will be measured with the current settings
            </summary>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.GetRealStepPotential(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real step potential based on device resolution.
            </summary>
      <param name="capabilities">The capabilities.</param>
      <returns>
            The step potential as absolute value
            </returns>
    </member>
    <member name="M:PalmSens.PotentialMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.PotentialMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.PotentialMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:PalmSens.PotentialMethod.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Annotations.CanBeNullAttribute">
      <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
      <example>
        <code>
            [CanBeNull] object Test() =&gt; null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotNullAttribute">
      <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
      <example>
        <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.ItemNotNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ItemCanBeNullAttribute">
      <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitNotNullAttribute">
      <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.StringFormatMethodAttribute">
      <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
      <example>
        <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
      </example>
    </member>
    <member name="M:PalmSens.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
    </member>
    <member name="T:PalmSens.Annotations.ValueProviderAttribute">
      <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InvokerParameterNameAttribute">
      <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
      <example>
        <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.NotifyPropertyChangedInvocatorAttribute">
      <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
      <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
      <example>
        <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
    </member>
    <member name="T:PalmSens.Annotations.ContractAnnotationAttribute">
      <summary>
            Describes dependency between method input and output.
            </summary>
      <syntax>
        <p>Function Definition Table syntax:</p>
        <list>
          <item>FDT      ::= FDTRow [;FDTRow]*</item>
          <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
          <item>Input    ::= ParameterName: Value [, Input]*</item>
          <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
          <item>Value    ::= true | false | null | notnull | canbenull</item>
        </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br /><c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br /></syntax>
      <examples>
        <list>
          <item>
            <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
          </item>
          <item>
            <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
          </item>
        </list>
      </examples>
    </member>
    <member name="T:PalmSens.Annotations.LocalizationRequiredAttribute">
      <summary>
            Indicates that marked element should be localized or not.
            </summary>
      <example>
        <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.CannotApplyEqualityOperatorAttribute">
      <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
      <example>
        <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.BaseTypeRequiredAttribute">
      <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
      <example>
        <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.UsedImplicitlyAttribute">
      <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.MeansImplicitUseAttribute">
      <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Access">
      <summary>Only entity marked with attribute considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.Assign">
      <summary>Indicates implicit assignment to a member.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
      <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
      <summary>Indicates implicit instantiation of a type.</summary>
    </member>
    <member name="T:PalmSens.Annotations.ImplicitUseTargetFlags">
      <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:PalmSens.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:PalmSens.Annotations.UsedImplicitlyAttribute" />.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.Members">
      <summary>Members of entity marked with attribute are considered used.</summary>
    </member>
    <member name="F:PalmSens.Annotations.ImplicitUseTargetFlags.WithMembers">
      <summary>Entity marked with attribute and all its members considered used.</summary>
    </member>
    <member name="T:PalmSens.Annotations.PublicAPIAttribute">
      <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.InstantHandleAttribute">
      <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.PureAttribute">
      <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
      <example>
        <code>
            [Pure] int Multiply(int x, int y) =&gt; x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.MustUseReturnValueAttribute">
      <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.ProvidesContextAttribute">
      <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
      <example>
        <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.PathReferenceAttribute">
      <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.SourceTemplateAttribute">
      <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
      <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:PalmSens.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
      <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code></example>
    </member>
    <member name="T:PalmSens.Annotations.MacroAttribute">
      <summary>
            Allows specifying a macro for a parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
      <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:PalmSens.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:PalmSens.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
      <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code></example>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Expression">
      <summary>
            Allows specifying a macro that will be executed for a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
    </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Editable">
      <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
      <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values &gt;= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>&gt;
        </member>
    <member name="P:PalmSens.Annotations.MacroAttribute.Target">
      <summary>
            Identifies the target parameter of a <see cref="T:PalmSens.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:PalmSens.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcAreaAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcControllerAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcMasterAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcModelTypeAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcPartialViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcSuppressViewErrorAttribute">
      <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcDisplayTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcEditorTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcViewComponentViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AspMvcActionSelectorAttribute">
      <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
      <example>
        <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
      </example>
    </member>
    <member name="T:PalmSens.Annotations.RazorSectionAttribute">
      <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.CollectionAccessAttribute">
      <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.None">
      <summary>Method does not use or modify content of the collection.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.Read">
      <summary>Method only reads content of the collection but does not modify it.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.ModifyExistingContent">
      <summary>Method can change content of the collection but does not add new elements.</summary>
    </member>
    <member name="F:PalmSens.Annotations.CollectionAccessType.UpdatedContent">
      <summary>Method can add new elements to the collection.</summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionMethodAttribute">
      <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:PalmSens.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionAttribute">
      <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:PalmSens.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.AssertionConditionType">
      <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_TRUE">
      <summary>Marked parameter should be evaluated to true.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_FALSE">
      <summary>Marked parameter should be evaluated to false.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NULL">
      <summary>Marked parameter should be evaluated to null value.</summary>
    </member>
    <member name="F:PalmSens.Annotations.AssertionConditionType.IS_NOT_NULL">
      <summary>Marked parameter should be evaluated to not null value.</summary>
    </member>
    <member name="T:PalmSens.Annotations.TerminatesProgramAttribute">
      <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.LinqTunnelAttribute">
      <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.NoEnumerationAttribute">
      <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.RegexPatternAttribute">
      <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
    </member>
    <member name="T:PalmSens.Annotations.XamlItemBindingOfItemsControlAttribute">
      <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
      <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:PalmSens.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
    </member>
    <member name="T:PalmSens.Annotations.NoReorder">
      <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
      <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
    </member>
    <member name="T:PalmSens.Ranging">
      <summary>
            Ranging settings
            </summary>
    </member>
    <member name="E:PalmSens.Ranging.RangingChanged">
      <summary>
            Occurs when minimum, maximum or begin current range was changed.
            </summary>
    </member>
    <member name="F:PalmSens.Ranging.CurrentRange">
      <summary>
            Active Current Range
            </summary>
    </member>
    <member name="P:PalmSens.Ranging.StartCurrentRange">
      <summary>
            Gets or sets the current range to begin at.
            </summary>
      <value>
            The first current range to start at.
            </value>
    </member>
    <member name="P:PalmSens.Ranging.Autoranging">
      <summary>
            Whether autoranging is enabled
            </summary>
    </member>
    <member name="M:PalmSens.Ranging.GetOptimalRangeForCurrent(System.Double,PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the optimal range for current in uA.
            </summary>
      <param name="current">The current in uA.</param>
      <returns>Byte to use for PalmSens.CurrentRange.FromCRByte()</returns>
    </member>
    <member name="T:PalmSens.AutoRanging">
      <summary>
            Autoranging
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
      <param name="startRange">The start range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(System.SByte,System.SByte)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="M:PalmSens.AutoRanging.#ctor(PalmSens.CurrentRange,PalmSens.CurrentRange)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.AutoRanging" /> class.
            This constructor uses the maxRange as starting range.
            </summary>
      <param name="minRange">The minimum range.</param>
      <param name="maxRange">The maximum range.</param>
    </member>
    <member name="T:PalmSens.FixedCurrentRange">
      <summary>
            Fixed current ranging
            Maximum current range is actual current range (minimum current range is same as maximum)
            </summary>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MaximumCurrentRange">
      <summary>
            Same as CurrentRange range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.MinimumCurrentRange">
      <summary>
            Same as maximum current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="P:PalmSens.FixedCurrentRange.StartCurrentRange">
      <summary>
            Same as current range for Fixed CurrentRange
            </summary>
      <value>
            The current range.
            </value>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertRichTextToSaveString(System.String)">
      <summary>
            Converts the rich text containing spaces, enters and tabs to save string.
            </summary>
      <param name="stringToConvert">The text to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.RichTextConversions.ConvertLoadedStringToRichText(System.String)">
      <summary>
            Converts the rich loaded string to text containing spaces, enters and tabs.
            </summary>
      <param name="stringToConvert">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.ScanMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. potential.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.#ctor(System.Int32)">
      <summary>
            Create a new scan method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SupportsDetermination">
      <summary>Is true if the method can be used for determination.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.BlankType">
      <summary>Blank subtraction can be performed in two ways.
            <para>The blank can be measured using a separate blank solution.</para><para>The second curve is subtracted from the original curve.</para></summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalyteName">
      <summary>
            Array containing the names of 4 possible analytes.
            Use SetAnalyteName to change individual name
            </summary>
      <value>
            The array with names for each analyte.
            </value>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalyteName(System.Int32,System.String)">
      <summary>
            Sets the name of an analyte.
            </summary>
      <param name="iAnalyte">The index (0-4) of the analyte.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.SolutionNr">
      <summary>Array containing the of 4 possible solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.AnalytePeakAutodetect">
      <summary>
            Used to determine if the peak for an analyte is found automatically or by fixed E left and E right values 
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetAnalytePeakAutodetect(System.Int32,System.Boolean)">
      <summary>
            Specifies peak autodetect for a analyte.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="value">if set to <c>true</c> [value].</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeaks">
      <summary>Specifies the expected peak potential.
            Use SetEPeak to change individual values.
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeaks(System.Int32,System.Single)">
      <summary>
            Sets the expected peak potential EPeak for the analyte iAnalyte
            </summary>
      <param name="iAnalyte">The index of the analyte.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakLeft">
      <summary>
            Leftside of the manual baseline 
            Use SetEPeakLeft to change individual values
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakLeft(System.Int32,System.Single)">
      <summary>
            Sets the E peak left.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakLeftNew">The E peak left new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.EPeakRight">
      <summary>
            Rightside of the manual baseline
            Use SetEPeakRight to change individual values
            9999 means AutoPeak
            </summary>
    </member>
    <member name="M:PalmSens.ScanMethod.SetEPeakRight(System.Int32,System.Single)">
      <summary>
            Sets the E peak right.
            </summary>
      <param name="iAnalyte">The i analyte.</param>
      <param name="EPeakRightNew">The E peak right new.</param>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardConcentration">
      <summary>Specifies the concentration given in 'Unit of concentration' of the component in the corresponding standard solution.</summary>
      <remarks>These parameters are only relevant when the standard addition method is applied.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.VolumeConcentration">
      <summary>This table (Column, Row) is used to specify either the added volume of the standard additions or the concentration of a standard solution.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.SampleVolume">
      <summary>Is used to calculate the concentration in the original sample from the peak height measured in the solution specified in the box of the cell volume.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.CellVolume">
      <summary>Is required to correct for dilution effect due to the addition of the standard solutions and to calculate the concentration in the original sample.</summary>
      <remarks>Sample volume is in ml.</remarks>
    </member>
    <member name="P:PalmSens.ScanMethod.Determination">
      <summary>
        <c>StandardAddition</c> requires measurement of the sample and a sample to which standard solution is added. Analysis by using <c>Calibration</c> curve requires a calibration curve.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.StandardsValues">
      <summary>If <c>ConcentrationsAddedToSample</c> is used, the specified values are used and peaks are not corrected. If <c>VolumesAddedToCell</c> is used, peaks are corrected for dilution due to the addition of standard solutions.</summary>
    </member>
    <member name="P:PalmSens.ScanMethod.PeakValue">
      <summary>
        <c>PeakValue</c> determines which value is used for calculations. /// </summary>
    </member>
    <member name="F:PalmSens.ScanMethod.EPretreat">
      <summary>Pretreatment potentials.</summary>
    </member>
    <member name="F:PalmSens.ScanMethod.tPretreat">
      <summary>Time applied for each potential.</summary>
    </member>
    <member name="M:PalmSens.ScanMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate a hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Equals(System.Object)">
      <summary>
            Compare two scanmethods
            </summary>
      <param name="o">method to compare with</param>
      <returns>whether the two scanmethods were equal</returns>
    </member>
    <member name="M:PalmSens.ScanMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.ScanMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.enumBlankType">
      <summary>
            Possible Blank types. 
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.None">
      <summary>
            No blank at all.
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SeperateMeasurement">
      <summary>
            Subtract a seperate curve from the current one
            </summary>
    </member>
    <member name="F:PalmSens.enumBlankType.SubstractiveStripping">
      <summary>
            Measurement blank data before measuring a curve
            </summary>
    </member>
    <member name="T:PalmSens.enumDetermination">
      <summary>
            Method for determining concentrations
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.StandardAddition">
      <summary>
            Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumDetermination.Calibration">
      <summary>
            Calibration
            </summary>
    </member>
    <member name="T:PalmSens.enumUsePeakValue">
      <summary>
            Method for determining which peak value to use for calculations
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakHeight">
      <summary>
            Use the peak height
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakArea">
      <summary>
            Use the peak area
            </summary>
    </member>
    <member name="F:PalmSens.enumUsePeakValue.PeakSumSlopes">
      <summary>
            Use the sum of the maximum and minimum slope derivatives of the peak
            </summary>
    </member>
    <member name="T:PalmSens.enumStandardsValues">
      <summary>
            Possible standards for Standard Addition
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.ConcentrationsAddedToSample">
      <summary>
            Concentrations added to sample
            </summary>
    </member>
    <member name="F:PalmSens.enumStandardsValues.VolumesAddedToCell">
      <summary>
            Volumes added to cell
            </summary>
    </member>
    <member name="T:PalmSens.SingleThreadSyncContext">
      <summary>Provides a SynchronizationContext that's single-threaded.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Dispatches an asynchronous message to the synchronization context.</summary>
      <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Not supported.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunAllOnCurrentThread">
      <summary>Runs a loop to process all queued work items. Does not block.</summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.RunOneOnCurrentThread">
      <summary>
            Runs the one work item on current thread. Blocks until next work item is available.
            </summary>
    </member>
    <member name="M:PalmSens.SingleThreadSyncContext.Complete">
      <summary>Notifies the context that no more work will arrive.</summary>
    </member>
    <member name="T:PalmSens.Techniques.ACVoltammetry">
      <summary>Contains all method parameters for technique acVoltammetry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.#ctor">
      <summary>
            Create a new AC Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.Frequency">
      <summary>Frequency of the ac signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.factorACI">
      <summary>Correction factor for data received from PalmSens.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.SineWaveAmplitude">
      <summary>Amplitude of sine wave. Value is V rms.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MeasureDCcurrent">
      <summary>
            Measurement the DC current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ACVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Not applicable for this technique
            </summary>
      <param name="capabilities">Device capabilities</param>
      <returns>0f</returns>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="P:PalmSens.Techniques.ACVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ACVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="T:PalmSens.Techniques.AmperometricDetection">
      <summary>
            Contains all methodparameters for technique Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.#ctor">
      <summary>
            Create a new Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.AmperometricDetection.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.AmperometricDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.AmperometricDetection.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            </summary>
      <param name="m">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ChronoPotStripping">
      <summary>Contains all methodparameters for technique Stripping Chronopotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.#ctor">
      <summary>
            Create a new ChronoPotStripping method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.AppliedCurrentRange">
      <summary>
            Current range during stripping in 1*10^n nA. Min value is 1uA (3).
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MaximumEstimatedMeasurementDuration">
      <summary> Estimated number of seconds a measurement will take at most (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MeasurementTime">
      <summary>Measurement Time</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.EndPotential">
      <summary>Potential where measurement stops.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Current">
      <summary>
            See Istrip
            </summary>
      <value>
            Equal to Istrip
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.Istrip">
      <summary>Stripping current.</summary>
      <remarks>
             If specified as 0, the method is called chemical stripping, otherwise it
             is chemical constant current stripping. The applicable range is +- 0.001 microampere to +- 2 milliampere
            </remarks>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ChronoPotStripping.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.ChronoPotStripping.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this method will at least take. 
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStripping.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The contents to deserialize.</param>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.Abort">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.AbortAsync">
      <summary>
            Abort measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.ChronoPotStrippingMeasurement.TryProcessDataAsync">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            whether the measurement is finished
            </returns>
    </member>
    <member name="T:PalmSens.Techniques.CyclicVoltammetry">
      <summary>
            Contains all methodparameters for technique Cyclic Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.#ctor">
      <summary>
            Create a new Cyclic Voltammetry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetRealNPoints(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the real N points based on device resolution.
            </summary>
      <param name="capabilities">DeviceCapabilities required to determine resolution</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nScans">
      <summary>The number of scans for CV.</summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.nEqScans">
      <summary>The number of equilibration scans.</summary>
                    ///<summary>The applied scan rate.</summary><remarks>The applicable range depends on the value of E step</remarks></member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx1Potential">
      <summary>
            Gets or sets the VTX1 potential.
            </summary>
      <value>
            The VTX1 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.Vtx2Potential">
      <summary>
            Gets or sets the VTX2 potential.
            </summary>
      <value>
            The VTX2 potential.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.ShortName">
      <summary>
            The short name
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.CyclicVoltammetry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="P:PalmSens.Techniques.CyclicVoltammetry.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.CyclicVoltammetry.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToString">
      <summary>
            Generate description of this method
            </summary>
      <returns>the string "Cyclic Voltammetry"</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastCyclicVoltammetry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"CV"</returns>
    </member>
    <member name="T:PalmSens.Techniques.FastPotentiometry">
      <summary>Contains all methodparameters for technique Fast Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.#ctor">
      <summary>
            Create a new Fast Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastPotentiometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastPotentiometry.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.FastAmperometry">
      <summary>
            Fast Amperometric Detection
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.#ctor">
      <summary>
            Create a new Fast Amperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.nPoints">
      <summary>
            Number of points used in a measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <param name="capab">Capabilities</param>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.FastAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.IntervalTimeF">
      <summary>Interval time for Fast measurements.</summary>
    </member>
    <member name="P:PalmSens.Techniques.FastAmperometry.EqPotentialFA">
      <summary>The equilibration potential (only used in FA).</summary>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.FastAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.FastMeasurement">
      <summary>
            Fast time measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.FastMeasurement.TryProcessData">
      <summary>
            Try to receive more data
            </summary>
      <returns>whether the measurement is done</returns>
    </member>
    <member name="M:PalmSens.Techniques.FastMeasurement.TryProcessDataAsync">
      <summary>
            Try to receive more data
            </summary>
      <returns>whether the measurement is done</returns>
    </member>
    <member name="M:PalmSens.Techniques.IFastMeasurement.IsFastMeasurement(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets a value indicating whether this instance is a fast measurement
            In that case, max 4096 points can be measured, without Aux Input support
            The device will send Y packages instead of U packages.
            </summary>
      <param name="capab">The capabilities.</param>
      <returns>
        <c>true</c> if [is fast measurement] [the specified capab]; otherwise, <c>false</c>.
            </returns>
      <value>
        <c>true</c> if this instance is fast measurement; otherwise, <c>false</c>.
              </value>
    </member>
    <member name="T:PalmSens.Techniques.IMixedModeStageMethod">
      <summary>
            Methods with this interfaced can be serialized / deserialized as stage in MixedTechniqueMethod method file.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.IMixedModeStageMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents to read from.</param>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStageMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E or I (depending whether the potential or current is controlled).
            </summary>
      <value>
        <c>true</c> if versus previous E or I; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod">
      <summary>
            Method for use with the "sub"-Measurements that are part of each ImpedimetricMeasurement.
            This should not be registered in the UI and only used from ClientConnection.measureImpedimetric.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.IsLastIteration">
      <summary>
            If is last measurement, MixedTechniqueMethod bit (used to combine multiple measurements like this one) will not be set
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"IMP_it"</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToString">
      <summary>
            Returns the name of the technique
            Used in PalmSens.Control.StatusBar 
            </summary>
      <returns>"Impedance"</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricIterationMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Frequency">
      <summary>
             FixedFrequency of the sine signal.
             This value is corrected for the real applied frequency after calling ToHex.
             The difference between the set frequency and the real frequency is due to rounding
             and timing in the PalmSens firmware
             </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.numsinestable">
      <summary>
            Numsinestables the specified frequency.
            number of sines in table is 1 or 2
            This value is determined in DetermineSine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterDAC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterADC">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterCF">
      <summary>
            Current follower filter
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTAB">
      <summary>
            HSTAB filter is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.HSTABByte">
      <summary>
            HSTAB filter code
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.AcCoupled">
      <summary>
            AcCoupled is used
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.FilterAc">
      <summary>
            AC Filter
            if value  is provided, OverrideFilterAc will not be calculated, but the provided value for FilterAc will be used.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAgain">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.PGAoffset">
      <summary>
            This value is changed in ImpedimetricMeasurement.AutoRanging
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.tIntac">
      <summary>
            The time for one point in the sine in seconds
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.nPointsac">
      <summary>
             Length of Sine wave
             this value is determined in DetermineSine 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Nadc">
      <summary>
            Number of ADC's to integrate per point in the sine
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NadcStart">
      <summary>
            The index where integration of the nADC start, points before this
            index are ignored due to the longer RC time
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MDAC">
      <summary>
            The multiplying DAC value
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Neqstart">
      <summary>
            The place in eq to start in in case of very low frequency
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumMeasurementSines">
      <summary>
            The number of measurement sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.NumEquilibrationSines">
      <summary>
            Gets the num equilibration sines.
            Defined in ToHex, unless overridden
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.MaxSamplingRate">
      <summary>
            The maximum sampling rate.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Channel">
      <summary>
            Selected channel.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.Celltype">
      <summary>
            Selected cell type.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricIterationMethod.UseExternalAD">
      <summary>
            Used in PS3 firmware to determine wheter to use the internal or external AD
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides">
      <summary>
            Used to determine which parameters should be calculated automatically and which parameters are specified
            for all overriden parameters the specified value for the parameter will be used
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.IsOverridden(PalmSens.Techniques.ImpedimetricIterationMethod.EnumOverrides)">
      <summary>
            Check if the specified parameter is overridden
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>
        <c>true</c> if the specified parameter is overridden; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            To the hex1.
            </summary>
      <param name="m">The em.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.GetNPoints(System.Single,System.Single,System.Int32,System.Int32)">
      <summary>
            Gets the number of points in the sine.
            </summary>
      <param name="maxSamplingRate">The max sampling rate.</param>
      <param name="frequency">The frequency.</param>
      <param name="minPoints">The min points.</param>
      <param name="maxPoints">The max points.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricIterationMethod.DetermineSine(PalmSens.Devices.EISSettingsPS3)">
      <summary>
            Code for PS3
            This should be done before starting a measurement (calling ToHex1)
            Fills Sine[] with values over full 16 bit DAC range (0-65563).
            Output is multiplied with MDAC
            </summary>
      <param name="eisSettings">
      </param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod">
      <summary>Contains all methodparameters for technique ImpedimetricMethod.</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.#ctor">
      <summary>
            Create a new Impedimetric Method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MaxPGAgain">
      <summary>
            This value is normally taken from EISsettings, but can be overridden
            From method window: Sensitivity: O Low (maxgain1)  O Normal (maxgain2)  O High (maxgain3) 
            Default is High
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.IterationMethodOverrides">
      <summary>
            This iteration method is the initial iteration method and may contain
            filter and other overrides for testing and calibration purposes
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FixedFrequency">
      <summary>
            The fixed sine Frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxFrequency">
      <summary>
            Maximum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaxEqTime">
      <summary>
            Max. time for generating equilibration sines
            van 0.01 ~ 1000 s
            Only used if nEquil sines equals 1
            number of equil sines = measure sines / 5
            5 &gt;= eq sines &gt; 1
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinFrequency">
      <summary>
            Minimum sine frequency
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.nFrequencies">
      <summary>
            Number of Frequencies
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetFreqsListString">
      <summary>
            Gets the freqs list.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Freqs">
      <summary>
            Returns an array with length nFrequenciess 
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SamplingTime">
      <summary>
            Minimum sampling time
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.Eac">
      <summary>
            Eac or E amplitude
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.EndPotential">
      <summary>
            Eend
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.StepPotential">
      <summary>
            Estep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumScanType">
      <summary>
            Type of scan; vs potential or vs time
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMethod.enumFrequencyType">
      <summary>
            Scanning on a fixed frequency or doing frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.ScanType">
      <summary>
            Determines if scan is versus E or t
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.FreqType">
      <summary>
            Determines if frequency is fixed or scanned
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachFreqMeas">
      <summary>
            Do pretreatment on each frequency scan
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.PretreatEachScan">
      <summary>
            Do pretreatment on each new intervaltime (in case of potential or time scan)
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method.
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMethod.MaximumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at maximum (in seconds)</summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMethod.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.ReceiveMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes to the specified textwriter.
            </summary>
      <param name="tw">The textwriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement">
      <summary>
            Measurement procedures for Impedimetric measurement. PalmSens is controlled manually with this measurement.
            Each iteration (short measurement at a certain frequency) is an ImpedimetricIterationMeasurement
            The ImpedemetricMethod is the Method class used to set up an EIS measurement. 
            Each iteration is set in an ImpedimetricIterationMethod during the run of a measurement.
            
            This measurement does not generate a Curve but a PalmSens.EISData, which is also a Plottable.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ImpedimetricMeasurement" /> class.
            Note: Impedance measurements are currently not supported for the SDK.
            All data is recorded in the DataSet. The PalmSens.Plottable.EISData plottable uses this DataSet to generate curves for the 
            PalmSens.Plot2.PlotEISdata object.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.ImpedimetricMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ImpedimetricMeasurement" /> class.
            Note: Impedance measurements are currently not supported for the SDK.
            All data is recorded in the DataSet. The PalmSens.Plottable.EISData plottable uses this DataSet to generate curves for the 
            PalmSens.Plot2.PlotEISdata object.
            </summary>
      <param name="conn">Connection on which the measurement takes place</param>
      <param name="method">Method to measure</param>
    </member>
    <member name="T:PalmSens.Techniques.ImpedimetricMeasurement.NewFreqCurveEventHandler">
      <summary>
            Delegate for the NewSine events
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineECurve">
      <summary>This event is triggered when a sine Curve for E is added to the impdata class.</summary>
    </member>
    <member name="E:PalmSens.Techniques.ImpedimetricMeasurement.NewSineICurve">
      <summary>This event is triggered when a returned sine Curve I is added to the impdata class.</summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.DataSet">
      <summary>
            Use _currentEISdata.DataSet instead.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.ImpedimetricMeasurement.Method">
      <summary>
            Gets the method as <see cref="T:PalmSens.Techniques.ImpedimetricMethod" />.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.ImpedimetricMeasurement.CalibrationType">
      <summary>
            The type of calibration to run as used in CalibrationSteps and derived classes
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.IntToFloat(System.UInt32)">
      <summary>
            Ints to floats converter.
            </summary>
      <param name="i">The integer value</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Start">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.StartAsync">
      <summary>
            Start measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.MeasureIterate">
      <summary>
            This is the iterated function for an Impedimetric Measurement
            </summary>
      <returns>true if finished</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.MeasureIterateAsync">
      <summary>
            This is the iterated function for an Impedimetric Measurement
            </summary>
      <returns>true if finished</returns>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.ProcessData">
      <summary>
            Try to process as much data as possible.
            Only used here to parse the itterations, since this is invoked with every timer tick from Comm
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.ProcessDataAsync">
      <summary>
            Try to process as much data as possible.
            Only used here to parse the itterations, since this is invoked with every timer tick from Comm
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.AbortAsync">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ImpedimetricMeasurement.FinishMeasurementAsync">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.IPotentiometric.Current">
      <summary>
            Gets or sets the current.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.LinearSweep">
      <summary>Contains all methodparameters for technique Lineair Sweep.</summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.#ctor">
      <summary>
            Generate Linear Sweep method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.LinearSweep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.LinearSweep.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Generates the hex1 string
            </summary>
      <param name="m">The encoded method</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.ToHex1TechniqueSpecific(PalmSens.EncodedMethodV1)">
      <summary>
            Returns the method parameters as 'HEX' blob version1 as stage for MixedTechniqueMethod measurement.
            Use this function to start a stage as part of a MixedTechniqueMethod measurement
            </summary>
      <param name="m">The EncodedMethodV1.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified string.
            </summary>
      <param name="contents">The content string.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The StringWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserializes the technique specific parameters.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:PalmSens.Techniques.LinearSweep.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MethodError">
      <summary>
            A method error
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MethodError.#ctor(System.String,PalmSens.Techniques.enumTechniqueParameter,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MethodError" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="parameter">The parameter.</param>
      <param name="isFatal">if set to <c>true</c> [is fatal].</param>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Message">
      <summary>
            Gets or sets the message.
            </summary>
      <value>
            The message.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.IsFatal">
      <summary>
            Gets or sets a value indicating whether this instance is fatal.
            </summary>
      <value>
        <c>true</c> if this instance is fatal; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MethodError.Parameter">
      <summary>
            Gets or sets the parameter associated with this error.
            </summary>
      <value>
            The parameter.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.MixedModeMeasurement.StageMeasurement">
      <summary>
            The measurement running for the current mixed mode stage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.ProcessData">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.ProcessDataAsync">
      <summary>
      </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.TryProcessData">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            TRUE if the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.TryProcessDataAsync">
      <summary>
            Try to process measure data excluding pretreatment.
            </summary>
      <returns>
            TRUE if the measurement is finished
            </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.MeasurementEnded">
      <summary>
            Indicate the measurement is finished. Will
            take care of announcing it.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeMeasurement.MeasurementEndedAsync">
      <summary>
            Indicate the measurement is finished. Will
            take care of announcing it.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode">
      <summary>
            Combines different techniques
            </summary>
      <seealso cref="T:PalmSens.Method" />
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.TechniqueNumber">
      <summary>
            The number for this technique
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.MixedMode.EnumMixedModeStageType">
      <summary>
            Different stages available for Mixed Mode
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantE">
      <summary>
            Apply constant E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.ConstantI">
      <summary>
            Apply constant I
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.SweepE">
      <summary>
            Sweep E
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.OpenCircuit">
      <summary>
            Cell at open circuit
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.EnumMixedModeStageType.Impedance">
      <summary>
            Apply AC 
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MixedMode.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedMode.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.AddStage(PalmSens.Techniques.MixedMode.EnumMixedModeStageType)">
      <summary>
            Adds the stage.
            </summary>
      <param name="stage">The stage.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">stage</exception>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.ReceiveMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.MixedMode.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Checks the validity of the method. Returns nothing if valid.
            Disables automatically unsuported features by hardware:
            </summary>
      <param name="capab">The device capabilities.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.IMixedModeStage.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageConstantE">
      <summary>
      </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus the last measured E or I.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus the last measured E or I.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageConstantI.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageConstantI.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.IntervalTime">
      <summary>
            Sets the interval time, but doesn't apply for Sweep, because interval = Estep / scan rate
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageSweepE.VsEiPropertiesList">
      <summary>
            Dictionary with properties for this stage that can be used versus E.
            Reflection is used to get and set the Property value.
            </summary>
      <value>
            Dictionary with property name and whether to measure versus previous E.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageSweepE.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageOcp.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MixedModeStageEIS">
      <summary>
            MixedMode stage for EIS (AC) measurements at a fixed frequency
            </summary>
      <seealso cref="T:PalmSens.Techniques.ImpedimetricMethod" />
      <seealso cref="T:PalmSens.Techniques.IMixedModeStage" />
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MixedModeStageEIS" /> class.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MixedModeStageEIS.VsEiPropertiesList">
      <summary>
            Gets the vs e properties list.
            </summary>
      <value>
            null
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.Techniques.MixedModeStageEIS.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultiplePulseAmperometry">
      <summary>Contains all methodparameters for technique MultiplePulseAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.#ctor">
      <summary>
            Create a new MultiplePulseAmperometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.E3">
      <summary>
            Applied potentials.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t3">
      <summary>
            Gets or sets the t3.
            </summary>
      <value>
            The t3.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t2">
      <summary>
            Gets or sets the t2.
            </summary>
      <value>
            The t2.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.t1">
      <summary>
            Gets or sets the t1.
            </summary>
      <value>
            The t1.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>string describing the error or null otherwise</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultiplePulseAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.nPoints">
      <summary>
            Returns the number of datapoints.
            </summary>
      <returns>number of datapoints"</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination hex blob</param>
    </member>
    <member name="P:PalmSens.Techniques.MultiplePulseAmperometry.MinimumEstimatedMeasurementDuration">
      <summary>
            Estimated minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="M:PalmSens.Techniques.MultiplePulseAmperometry.Deserialize(System.String)">
      <summary>
            Deserializes the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="T:PalmSens.Techniques.MultistepAmperometry">
      <summary>Contains all methodparameters for technique MultistepAmperometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepAmperometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepAmperometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.MultistepPotentiometry">
      <summary>Contains all methodparameters for technique MultistepPotentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.MultistepPotentiometry" /> class.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.MultistepPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            N/A for this technique
            Setting
            </summary>
      <value>
            The current range in which to apply the Current. Where 0 = 1uA, 1=10uA, 2=100uA, 3=1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.MultistepPotentiometry.Current">
      <summary>
            Gets or sets the current. N/A for this technique.
            </summary>
      <value>
            The current, which is applied in the selected CurrentRange.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Multistep">
      <summary>Contains all methodparameters for technique Multistep Amperometry or Potentiometry.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.#ctor(PalmSens.Techniques.Multistep.EnumMode,System.Int32)">
      <summary>
            Create a new Multistep class
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsBipot">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Mode">
      <summary>
            The mode for Multistep
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.Multistep.EnumMode">
      <summary>
            Available modes
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Amperometry">
      <summary>
            Multistep Amperometry
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.EnumMode.Potentiometry">
      <summary>
            Multistep Potentiometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseLimits">
      <summary>
            Gets or sets a value indicating whether [use limits].
            </summary>
      <value>
        <c>true</c> if [use limits]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.UseSelectiveRecord">
      <summary>
            Gets or sets a value indicating whether [use selective record].
            This allows the user to apply a level without recording the result
            </summary>
      <value>
        <c>true</c> if [use selective record]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="F:PalmSens.Techniques.Multistep.Delta">
      <summary>
            Maximum delta. [not used in this version]
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nSteps">
      <summary>
            Number of steps
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nCycles">
      <summary>
            Number of cycles
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.MinimumEstimatedMeasurementDuration">
      <summary>Estimated number of seconds a measurement will take at least (in seconds)</summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.RunTime">
      <summary>
            Total time of measurement (only include recorded levels).
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.BeginPotential">
      <summary>
            First potential for MultistepAmperometry
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Multistep.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this Method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.ReceiveMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Receives the measurement.
            </summary>
      <param name="conn">The ClientConnection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Multistep.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <param name="capabilities">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.Levels">
      <summary>
            Contains the collection of levels
            </summary>
    </member>
    <member name="E:PalmSens.Techniques.Levels.LevelChanged">
      <summary>
            Occurs when a value in one of the levels has changed.
            </summary>
    </member>
    <member name="T:PalmSens.Techniques.EILevel">
      <summary>
            A single level
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.TriggerValueOnStart">
      <summary>
            Only used when <c>UseTriggerValueOnStart = true</c>
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
            The value (0-8) to determine the digital output trigger(s) on start.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.EILevel.UseTriggerOnStart">
      <summary>
            Gets or sets a value indicating whether to set [TriggerValueOnStart] on start.
            TriggerValueOnStart can be any available digital output line 0-3. 
            Digital output will be HIGH as soon as equilibration time is finished and actual measurement starts.
            Digital output will be set LOW again as soon as measurement is finished.
            This functionality cannot be used in combination with a MUX multiplexer!
            </summary>
      <value>
        <c>true</c> if use TriggerValueOnStart on start; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.MultistepMeasurementMC">
      <summary>
            Measurement procedures for MultistepAmperometry. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.#ctor(PalmSens.Comm.ClientConnection,PalmSens.Method)">
      <summary>
            Chrono Amperometry measurement. PalmSens is controlled manually with this measurement.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.Abort">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.AbortAsync">
      <summary>
            Abort measurement
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.FinishMeasurement">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.FinishMeasurementAsync">
      <summary>
            Indicate measurement is finished.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.MeasureIterate">
      <summary>
            Next iteration during measurement, returns true if measurement is finished
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.MultistepMeasurementMC.MeasureIterateAsync">
      <summary>
            Next iteration during measurement, returns true if measurement is finished
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Techniques.ScriptOverridable">
      <summary>
            Determines if this value can be overriden in the script
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="propertyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="M:PalmSens.Techniques.ScriptOverridable.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Techniques.ScriptOverridable" /> class.
            </summary>
      <param name="properyname">The name.</param>
      <param name="unit">The unit.</param>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.PropertyName">
      <summary>
            Gets or sets the name of the parameter
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.FriendlyName">
      <summary>
            Gets or sets the friendly name
            </summary>
      <value>
            The name of the friendly.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.ScriptOverridable.Unit">
      <summary>
            Gets or sets the unit for this parameter
            </summary>
      <value>
            The unit.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.Potentiometry">
      <summary>Contains all methodparameters for technique Potentiometry.</summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.#ctor">
      <summary>
            Create a new Potentiometry method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.OverrideFilter">
      <summary>
            Gets or sets a value indicating whether [override filter].
            </summary>
      <value>
        <c>true</c> if [override filter]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Filter">
      <summary>
            Gets or sets the dampening filter.
            Can be a value from 0 to 10 where
            at 10 mA: the RC-times are approx. 500 ns(0), 500 ns(1), 500 ns(2) and 7 us(3). 
            at 1 mA: the RC-times are approx. 500 ns(1), 500 ns(2), 7 us(3) and 50 us(4). 
            at 100 uA: the RC-times are approx.500 ns(2), 7 us (3), 50 us(4)and 500 us(5). 
            at 10 uA: the RC-times are approx. 7 us (3), 50 us(4), 500 us(5) and 5 ms(6). 
            at 1 uA: the RC-times are approx. 50 us(4), 500 us(5), 5 ms(6) and 50 ms(7). 
            at 100 nA: the RC-times are approx. 500 us (5), 5 ms(6), 50 ms(7) and 500 ms(8).
            at 10 nA: the RC-times are approx. 5 ms(6), 50 ms(7), 500 ms(8) and 5 s(9).
            at 1 nA: the RC-times are approx. 50 ms(7), 500 ms(8), 5 s(9) and 50? s (10).
            </summary>
      <value>
            The filter value between 0 and 10. 
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.Current">
      <summary>
            Current during measurement <c>(Potentiometry)</c>. 
            The applicable range of the potential is defined by the device's Capabilities:
             Capabilities.MaxCurrent and Capabilities.MinCurrent
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.AppliedCurrentRange">
      <summary>
            Gets or sets the selected current range.
            </summary>
      <value>
            So 3 = 1uA, 4 = 10uA, 5 = 100 uA, 6 = 1mA, etc.
            </value>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.Potentiometry.SupportsAuxInput">
      <summary>
            Gets a value indicating whether this method supports aux input.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            Changes OCP to <c>true</c> if capab.IsGalvanostat is <c>false</c></summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.Potentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Convert to hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.Potentiometry.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.OpenCircuitPotentiometry">
      <summary>
      </summary>
      <seealso cref="T:PalmSens.Techniques.Potentiometry" />
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.OpenCircuitPotentiometry.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.OpenCircuitPotentiometry.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="P:PalmSens.Techniques.OpenCircuitPotentiometry.Current">
      <summary>
             Is always 0 for this technique (Open Circuit Potentiometry)
             </summary>
    </member>
    <member name="T:PalmSens.Techniques.DifferentialPulse">
      <summary>
            Contains all methodparameters for Differential Pulse Voltammetry.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.#ctor">
      <summary>
            Create new differential pulse method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.DifferentialPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.DifferentialPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum number of seconds this method will take.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.DifferentialPulse.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is StepPotential / Scanrate.
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="T:PalmSens.Techniques.NormalPulse">
      <summary>
            Contains all methodparameters for Normal Pulse Voltammetry.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.#ctor">
      <summary>
            Create new Normal Pulse method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.NormalPulse.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration of this method
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.NormalPulse.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.NormalPulse.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Return version 1 style hex blob.
            Use this function to start a whole measurement sequence, including pretreatment, current range settings and standby potential if applicable
            </summary>
      <param name="m">encoded method to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.Pulse">
      <summary>Contains all shared methodparameters for all pulse related measurement method classes.</summary>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.Scanrate">
      <summary>The applied scan rate.</summary>
      <remarks>The applicable range depends on the value of E step</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulsePotential">
      <summary>
            Pulse Potential
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="P:PalmSens.Techniques.Pulse.PulseTime">
      <summary>The pulse time.</summary>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToString">
      <summary>
            Generate description
            </summary>
      <returns>the string "Normal Pulse"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>"NPV"</returns>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.#ctor(System.Int32)">
      <summary>
            Create a new pulse method
            </summary>
      <param name="t">technique number to use</param>
    </member>
    <member name="M:PalmSens.Techniques.Pulse.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection">
      <summary>
            Contains all methodparameters for technique Pulsed Amperometric Detection.
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.#ctor">
      <summary>
            Create Pulsed Amperometric Detection method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.SupportsHoldDuringMeasurement">
      <summary>
            Whether or not this techniques supports hold during measurement.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulseTime">
      <summary>The pulse time in <c>PulsedAmpDetection</c> and <c>FastAmperometry</c>.</summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.DcPotential">
      <summary>
            dc potential for PAD
            Will always have same value as the inherited values <para>Potential</para> or <para>Begin potential</para></summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.PulsePotentialAD">
      <summary>
            Pulse Potential for PAD
            </summary>
      <remarks>Resolution is 1 mV.</remarks>
    </member>
    <member name="T:PalmSens.Techniques.PulsedAmpDetection.enumMode">
      <summary>
            Pulsed Amperometric Detection mode to use
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.dc">
      <summary>
            DC
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Pulse">
      <summary>
            Pulse
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.enumMode.Differential">
      <summary>
            Differential
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.PulsedAmpDetection.tMode">
      <summary>There are three modi for this technique:
             <list type="bullet"><item><description><c>Dc</c> measurement is performed at potential E</description></item><item><description><c>Pulse</c> measurement is performed at potential E pulse</description></item><item><description><c>Dif</c> measurement is <c>Dc - Pulse</c></description></item></list></summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.PulsedAmpDetection.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.PulsedAmpDetection.ToHex1(PalmSens.EncodedMethodV1)">
      <summary>
            Create hex blob
            </summary>
      <param name="m">method blob to write to</param>
    </member>
    <member name="T:PalmSens.Techniques.SquareWave">
      <summary>Contains all methodparameters for technique Square Wave.</summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.TechniqueNumber">
      <summary>
            The technique number for this technique as expected by the firmware.
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.#ctor">
      <summary>
            Create a new Square Wave method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MinimumEstimatedMeasurementDuration">
      <summary>
            Minimum duration for this method
            </summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.PulseAmplitude">
      <summary>Amplitude of pulse. Values are half peak-to-peak.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.Frequency">
      <summary>FixedFrequency of the square wave signal.</summary>
    </member>
    <member name="P:PalmSens.Techniques.SquareWave.MeasureIForwardReverse">
      <summary>
            Measurement Forward/Reverse Current
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetIntervalTime">
      <summary>
            Gets the interval time.
            For this technique the interval time is 1/Frequency
            </summary>
      <value>
            The interval time.
            </value>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method
            </summary>
      <returns>error string or null if there were no errors</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.Name">
      <summary>
            The readable name of this technique
            </summary>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.ShortName">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>the name of the technique</returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToShortString">
      <summary>
            Returns the abbreviation of the technique
            </summary>
      <returns>the abbrevation</returns>
    </member>
    <member name="F:PalmSens.Techniques.SquareWave.MethodID">
      <summary>
            The abbreviation for this technique
            </summary>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetMethodID">
      <summary>
            Gets a unique identifier for the type of this method class.
            This unqiue ID can never be changed. Saved methods refer to this ID to initialize the method.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.Techniques.SquareWave.GetResponseTime(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Gets the response time in seconds for the method.
            Used for filter and gain settings
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.TimeMethod">
      <summary>
            Contains all shared methodparameters of all measurement method classes for measurement vs. time.
            </summary>
    </member>
    <member name="F:PalmSens.TimeMethod.MUX_DELAY">
      <summary>
            Delay before switching to the next multiplexer channel.
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.#ctor(System.Int32)">
      <summary>
            Create a new vs. time method
            </summary>
      <param name="t">technique number</param>
    </member>
    <member name="P:PalmSens.TimeMethod.XLeft">
      <summary>
            Default left X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XRight">
      <summary>
            Default right X
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YBottom">
      <summary>
            Default bottom Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YTop">
      <summary>
            Default top Y
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.XDirection">
      <summary>
            X Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.YDirection">
      <summary>
            Y Direction
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.SupportsDeviceStorage">
      <summary>
            Whether this measurement can be saved and loaded from the device storage
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Potential">
      <summary>Potential during measurement <c>(AmperometricDetection)</c> or applied before pulse is given <c>PulsedAmpDetection</c>. The applicable range of the potential is -2 V to +2 V.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.BeginPotential">
      <summary>
            Begin potential (also applied during equilibration)
            Same value as property <code>Potential</code></summary>
      <value>
      </value>
    </member>
    <member name="P:PalmSens.TimeMethod.IntervalTime">
      <summary>Time between two measurements.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.RunTime">
      <summary>Total time of measurement.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.AnalyteName">
      <summary>The name of the measured analyte.</summary>
    </member>
    <member name="F:PalmSens.TimeMethod.Standard">
      <summary>The concentrations of the analyte, used for analysis.</summary>
    </member>
    <member name="P:PalmSens.TimeMethod.Signal">
      <summary>
        <list type="bullet">
          <item>
            <description>1 = DC_Current</description>
          </item>
          <item>
            <description>2 = Peak</description>
          </item>
        </list>
            If dc-current is specified, stationary dc-levels are searched. Specify 'Peak' when the current
            versus time plots will show peaks.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelWidth">
      <summary>
            Minimum level width (in seconds)
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinLevelHeight">
      <summary>
            Minimum level height (in uA), compared to previous level.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.MinimumEstimatedMeasurementDuration">
      <summary>
            Number of seconds this measurement will at least take.
            </summary>
    </member>
    <member name="P:PalmSens.TimeMethod.nPoints">
      <summary>
            Number of points that will be measured
            </summary>
    </member>
    <member name="M:PalmSens.TimeMethod.Validate(PalmSens.Devices.DeviceCapabilities)">
      <summary>
            Validate this method.
            </summary>
      <returns>error string or null if there are no errors</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ToHex0(PalmSens.EncodedMethodV0)">
      <summary>
            Generate hex blob
            </summary>
      <param name="m">destination blob</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SetAlternatingMux(PalmSens.EncodedMethodV1@,System.Single@)">
      <summary>
            Sets the alternating mux settings.
            </summary>
      <param name="m">The m.</param>
      <param name="tmeas">The tmeas.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Equals(System.Object)">
      <summary>
            Check if this method is equal to another
            </summary>
      <param name="o">method to compare to</param>
      <returns>true if objects are equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ReceiveMeasurement(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Called to handle receiving a measurement.
            </summary>
      <param name="c">Comm connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.TimeMethod.ReceiveMeasurementAsync(PalmSens.Comm.ClientConnection,PalmSens.Comm.Buffer)">
      <summary>
            Called to handle receiving a measurement.
            </summary>
      <param name="c">Comm connection</param>
      <returns>
      </returns>
    </member>
    <member name="M:PalmSens.TimeMethod.Serialize(System.IO.TextWriter)">
      <summary>
            Serializes all method parameters to the specified TextWriter.
            </summary>
      <param name="tw">The TextWriter.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.Deserialize(System.String)">
      <summary>
            Deserializes the contents in the specified StringReader
            </summary>
      <param name="contents">The StringReader.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.SerializeTechniqueSpecific(System.IO.TextWriter)">
      <summary>
            Serializes the technique specific parameters.
            This is used to serialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="tw">The TextWriter to write to.</param>
    </member>
    <member name="M:PalmSens.TimeMethod.DeSerializeTechniqueSpecific(System.String)">
      <summary>
            Deserialize the technique specific parameters.
            This is used to deserialize stages for MixedTechniqueMethod purposes.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:PalmSens.TimeMethod.VsPrevEI">
      <summary>
            Gets or sets a value indicating whether this stage potential is versus previous E.
            </summary>
      <value>
        <c>true</c> if versus previous E; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PalmSens.enumSignal">
      <summary>
            Signal types
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.DC_Current">
      <summary>
            DC Current
            </summary>
    </member>
    <member name="F:PalmSens.enumSignal.Peak">
      <summary>
            Peaks
            </summary>
    </member>
    <member name="T:PalmSens.enumReaction">
      <summary>
            Reaction types
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Reduction">
      <summary>
            Reduction
            </summary>
    </member>
    <member name="F:PalmSens.enumReaction.Oxidation">
      <summary>
            Oxidation
            </summary>
    </member>
    <member name="T:PalmSens.Units.Unit">
      <summary>
            Describes unit for curve data
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(PalmSens.DataFiles.JsonBag,System.Version)">
      <summary>
            Create a new unit
            </summary>
      <param name="symbol">symbol</param>
      <param name="quantity">quantity</param>
      <param name="abbrev">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.Unit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized_string.</param>
    </member>
    <member name="F:PalmSens.Units.Unit.DefaultPrefix">
      <summary>
            Default prefix.
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Symbol">
      <summary>
            Symbol for this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Quantity">
      <summary>
            Quantity
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.Abbreviation">
      <summary>
            Abbreviation
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.FormatString">
      <summary>
            Format string to use for values of this unit
            </summary>
    </member>
    <member name="F:PalmSens.Units.Unit.IsLogarithmic">
      <summary>
            The Unit is logarithmic
            </summary>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>formatted string containing f</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Format(PalmSens.Units.Prefix,System.Double)">
      <summary>
            Format value in this unit for specified prefix
            </summary>
      <param name="pf">prefix to use</param>
      <param name="f">value to format</param>
      <returns>formatted string</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string
            </summary>
      <param name="pf">prefix to use</param>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ToLongString(PalmSens.Units.Prefix)">
      <summary>
            Convert to string including unit type (as displayed with plot axes)
            </summary>
      <param name="pf">prefix to use</param>
    </member>
    <member name="P:PalmSens.Units.Unit.ZeroPrefix">
      <summary>
            Gets the default prefix with factor 1.
            </summary>
      <value>
            The zero or default prefix.
            </value>
    </member>
    <member name="M:PalmSens.Units.Unit.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string with the abbreviated name of this unit</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.GetPrefix(System.Double)">
      <summary>
            Calculate prefix appropriate for specified value
            </summary>
      <param name="f">value</param>
      <returns>corresponding prefix (or default prefix if none could be found)</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.Equals(System.Object)">
      <summary>
            Check if this object is equal to another
            </summary>
      <param name="o">object to compare with</param>
      <returns>true if the objects were equal, false otherwise</returns>
    </member>
    <member name="M:PalmSens.Units.Unit.ConvertValue(System.Single)">
      <summary>
            Converts an original value to the value for this Unit
            </summary>
      <param name="originalvalue">The original value.</param>
      <returns>A converted value</returns>
    </member>
    <member name="T:PalmSens.Units.SIPrefixUnit">
      <summary>
            Base unit for units that use SI prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new SI Prefixed Unit
            </summary>
      <param name="s">description</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="M:PalmSens.Units.SIPrefixUnit.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PalmSens.Units.Unit" /> class.
            </summary>
      <param name="serializedString">The serialized string.</param>
    </member>
    <member name="T:PalmSens.Units.AdjustedSIPrefixUnit">
      <summary>
            SI Unit for use with data points that are a factor 100000 smaller
            </summary>
    </member>
    <member name="M:PalmSens.Units.AdjustedSIPrefixUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new (adjusted) SI prefixed unit
            </summary>
      <param name="s">symbol</param>
      <param name="q">quantity</param>
      <param name="a">abbreviation</param>
    </member>
    <member name="T:PalmSens.Units.Time">
      <summary>
            Time (seconds, minutes, hours)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.#ctor">
      <summary>
            Create new time unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Time.Format(System.Double)">
      <summary>
            Format a value in this unit
            </summary>
      <param name="f">value to format</param>
      <returns>
            formatted string containing f
            </returns>
    </member>
    <member name="T:PalmSens.Units.Volt">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.Volt.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Hertz">
      <summary>
            Frequency
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="M:PalmSens.Units.Hertz.Format(System.Double)">
      <summary>
            Formats the specified frequency.
            </summary>
      <param name="f">The f.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PalmSens.Units.VauxV">
      <summary>
            Voltage
            </summary>
    </member>
    <member name="M:PalmSens.Units.VauxV.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroAmpere">
      <summary>
            MicroAmpere
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroAmpere.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Log10Current">
      <summary>
            Log10 of the given current in uA
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Current.#ctor(PalmSens.Units.Unit,System.Single)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="originalUnit">The original Unit to Log10().</param>
      <param name="minimumCurrentRange">The value Method.Ranging.MinimumCurrentRange.factor.</param>
    </member>
    <member name="M:PalmSens.Units.Log10Current.ConvertValue(System.Single)">
      <summary>
            Converts Current to Log10(Current), using MinimumCurrentRangeFactor
            </summary>
      <param name="originalvalue">The current.</param>
      <returns>
            Math.Log10(Current)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Log10Unit">
      <summary>
            Natural log of the given unit
            </summary>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new instance based on OriginalUnit
            </summary>
      <param name="s">description, (V for Volt)</param>
      <param name="q">quantity, (Potential for Volt)</param>
      <param name="a">abbreviation, (E for Volt)</param>
    </member>
    <member name="M:PalmSens.Units.Log10Unit.ConvertValue(System.Double)">
      <summary>
            Converts value back to not Log value
            </summary>
      <param name="originalvalue">The value.</param>
      <returns>
            Math.Pow(10, originalvalue)
            </returns>
    </member>
    <member name="T:PalmSens.Units.Ampere">
      <summary>
            Ampere
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ampere.#ctor">
      <summary>
            Create new Ampere
            </summary>
    </member>
    <member name="T:PalmSens.Units.MicroCoulomb">
      <summary>
            Coulomb
            </summary>
    </member>
    <member name="M:PalmSens.Units.MicroCoulomb.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradReal">
      <summary>
            Coulomb Real
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradReal.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.FahradImaginary">
      <summary>
            Coulomb Imaginary
            </summary>
    </member>
    <member name="M:PalmSens.Units.FahradImaginary.#ctor">
      <summary>
            Create new Charge
            </summary>
    </member>
    <member name="T:PalmSens.Units.Temperature">
      <summary>
            Temperature
            </summary>
    </member>
    <member name="M:PalmSens.Units.Temperature.#ctor">
      <summary>
            Create new instance
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZRe">
      <summary>
            Z'
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZRe.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.ZIm">
      <summary>
            Z''
            </summary>
    </member>
    <member name="M:PalmSens.Units.ZIm.#ctor">
      <summary>
            Create new unit for Z'
            </summary>
    </member>
    <member name="T:PalmSens.Units.Z">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Z.#ctor">
      <summary>
            Create new unit for Impedance
            </summary>
    </member>
    <member name="T:PalmSens.Units.Y">
      <summary>
            Y in Siemens
            </summary>
    </member>
    <member name="M:PalmSens.Units.Y.#ctor">
      <summary>
            Create new unit for Y in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YRe">
      <summary>
            Y'
            </summary>
    </member>
    <member name="M:PalmSens.Units.YRe.#ctor">
      <summary>
            Create new unit for Y' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.YIm">
      <summary>
            Y''
            </summary>
    </member>
    <member name="M:PalmSens.Units.YIm.#ctor">
      <summary>
            Create new unit for Y'' in Siemens
            </summary>
    </member>
    <member name="T:PalmSens.Units.Phase">
      <summary>
            Phase
            </summary>
    </member>
    <member name="M:PalmSens.Units.Phase.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Farad">
      <summary>
            Cs
            </summary>
    </member>
    <member name="M:PalmSens.Units.Farad.#ctor">
      <summary>
            Create new unit for Phase
            </summary>
    </member>
    <member name="T:PalmSens.Units.Ohm">
      <summary>
            Ohm
            </summary>
    </member>
    <member name="M:PalmSens.Units.Ohm.#ctor">
      <summary>
            Create new unit for Resistance 
            </summary>
    </member>
    <member name="T:PalmSens.Units.Index">
      <summary>
            Use the index for X axis
            </summary>
    </member>
    <member name="T:PalmSens.Units.FixedUnit">
      <summary>
            Unit without prefixes
            </summary>
    </member>
    <member name="M:PalmSens.Units.FixedUnit.#ctor(System.String,System.String,System.String)">
      <summary>
            Create new fixed unit
            </summary>
      <param name="s">symbol (symbol V for potential for example)</param>
      <param name="q">quantity (potential for example)</param>
      <param name="a">abbreviation (E for potential for example)</param>
    </member>
    <member name="T:PalmSens.Units.Prefix">
      <summary>
            Prefix for a unit (i.e. kilo, nano, etc)
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.#ctor(System.Double,System.String)">
      <summary>
            Create new prefix
            </summary>
      <param name="factor">factor for this prefix</param>
      <param name="prefix">name of prefix</param>
    </member>
    <member name="F:PalmSens.Units.Prefix.Factor">
      <summary>
            Gain for this prefix
            </summary>
    </member>
    <member name="M:PalmSens.Units.Prefix.ToString">
      <summary>
            Convert to string
            </summary>
      <returns>string description of this prefix</returns>
    </member>
    <member name="T:MicroLibrary.MicroStopwatch">
      <summary>
            MicroStopwatch class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimer">
      <summary>
            MicroTimer class
            </summary>
    </member>
    <member name="T:MicroLibrary.MicroTimerEventArgs">
      <summary>
            MicroTimer Event Argument class
            </summary>
    </member>
  </members>
</doc>